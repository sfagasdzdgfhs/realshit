let OldInventory;
let InventoryCounter = 0;
let chestDelay;

let HackSettings = {
    AutoSpike: {
        enabled: false,
        key: "Space",
        mode: 1,
        preferences: [
            "Reidite Spike",
            "Amethyst Spike",
            "Diamond Spike",
            "Gold Spike",
            "Stone Spike",
            "Wood Spike",
            "Wood Wall",
            "Nothing",
        ],
        extra: 20,
		draw: true,
    },
    AutoSteal: {
        enabled: false,
        key: "KeyR",
		draw: true
    },
	CipherMessage: {
		enabled: false,
		key: false,
		cipherKey: 3,
		draw: true,
		prefix: "!#"
	},
	SwordInChest: {
		enabled: false,
		draw: true,
		key: "KeyE"
	},
    AutoBridge: {
        enabled: false,
		draw: true,
        key: "KeyC"
    },
    DropSword: {
        enabled: false,
        key: "ShiftLeft",
		draw: true,
    },
	AutoSteal: {
		enabled: false,
		key: "KeyR",
		draw: true,
	},
	Spectator: {
		key: "KeyP"
	},
	AutoBand: {
		enabled: false,
		key: false,
		draw: false
	},
	AutoTotem: {
		enabled: false,
		key: "KeyH",
		draw: true,
	},
	AutoCraft: {
		enabled: false,
		key: "KeyK",
		draw: true,
	},
	AutoCrown: {
		enabled: false,
		key: "KeyU",
		draw: true
	},
	AutoRecycle: {
		enabled: false,
		key: "KeyL",
		draw: true,
	},
	AutoExe: {
		enabled: false,
		key: "KeyB",
		draw: true
	},
	AutoBread: {
		enabled: false,
		key: "KeyN",
		draw: true
	},
	Reconnect: {
		enabled: false,
		key: false,
		draw: false,
	},
	Xray: {
		enabled: false,
		key: "KeyF",
		opacity: 0.5,
		draw: true,
	},
	StormAlert: {
		enabled: false,
		key: false,
		draw: false,
	},
	FpsBoost: {
		enabled: false,
		key: false,
		draw: false
	},
	NoFog: {
		enabled: false,
		key: false,
	},
	AutoBuyKit: {
		enabled: false,
		options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1],
		selectedKit: null,
		draw: false,
	},
	ExtendedChestRange : {
		enabled: false, //false
		key: false,
		draw: false
	},
	Timer: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
	AutoBook: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
    ListEnabledHacks: {
		enabled: true, //fake
		key: false,
		draw: false,
	},
	ChestOnTop: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
    Roofs: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
	ShowObjectChunks: {
		enabled: false,
		types: {
			res: false,
			chest: false,
			windmills: false,
			ovens: false,
			ext: false,
			totem: false,
		},
		key: false,
		draw: false,
	},
	ShowChunksInPreview: {
		enabled: false,
		key: false,
		draw: false,
	},
    ColoredSpikes: {
		enabled: true, //fake
		options: [
			"Napi Spikes",
			"Xmre Spikes",
			"Didactic Spikes"
		],
		key: false,
		draw: false,
	},
	FPS: {
		enabled: false,
		draw: false
	},
	DrawPlayerOnTop: {
		enabled: true, //fake
		key: false,
		draw: false,
	},
	DrawItemsOnChest: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
	DropOrDeadBox: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
	AntiStealToken: {
		enabled: false,
		key: false,
		draw: false
	},
	DrawBoxesOnTop: {
		enabled: false, //fake
		key: false,
		draw: false,
	},
	BuildingInfo: {
		enabled: false,
		key: false,
		draw: false,
	},
	Zoom: {
		xSlider: 500,
		ySlider: 500,
		realZoomX: 275,
		realZoomY: 160,
		draw: false,
	},
	AutoRespawn: {
		enabled: true, //fake
		key: false,
		draw: false,
	},
	Tokens: {
		enabled: false, //fake
		key: false,
		token: null,
		tokenid: null,
		draw: false,
	}
};
window.HackSettings = HackSettings;

let HelperFns = {
    isPlayerHoldingWeapon: (a, b) => {
        switch(a.right) {
            case 34:
            case 18:
            case 33:
            case 15:
            case 14:
            case 13:
            case 12:
            case 16:
            case 17:
                return 2; //spear
            case 57:
            case 5:
            case 6:
            case 30:
            case 62:
            case 9:
            case 0:
            case 63:
            case 19:
                return 1; //sword
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 69:
                return 3; //bow
            case 45:
                if (b) return 4; //super hammer
            case -1:
                if (b) return 5; //holds nothing

        };
        return 0;
    },
	isInRadius: (myPlayer, Object) => {
		var myPlayerX = Math.floor(myPlayer.x / 100);
		var myPlayerY = Math.floor(myPlayer.y / 100);

		if (Object.Chunk[`${myPlayerX.toString() + myPlayerY.toString()}`]) {
			return 1;
		}
	},
	CipherMessage: (message, key) => {

		let encryptedMessage = "";
		for (let i = 0; i < message.length; i++) {
		  let charCode = message.charCodeAt(i);
		  if (charCode >= 65 && charCode <= 90) { // uppercase letters
			charCode = (charCode - 65 + key) % 26 + 65;
		  } else if (charCode >= 97 && charCode <= 122) { // lowercase letters
			charCode = (charCode - 97 + key) % 26 + 97;
		  }
		  encryptedMessage += String.fromCharCode(charCode);
		}
			
		return HackSettings.CipherMessage.prefix + encryptedMessage;
	},
	DeCipherMessage: (message, key) => {
		let decryptedMessage = "";
		for (let i = 0; i < message.length; i++) {
		  let charCode = message.charCodeAt(i);
		  if (charCode >= 65 && charCode <= 90) { // uppercase letters
			charCode = (charCode - 65 - key + 26) % 26 + 65;
		  } else if (charCode >= 97 && charCode <= 122) { // lowercase letters
			charCode = (charCode - 97 - key + 26) % 26 + 97;
		  }
		  decryptedMessage += String.fromCharCode(charCode);
		}
		return decryptedMessage;
	},
    checkAlly: (id) => {
        for (var i = 0; i < user.team.length; i++)
            if (user.team[i] == id) return 1;
        return 0
    },
	checkTotem: (id) => {
		if (user.team[0] === id) return 1;
		return 0;
	},
    updateAllys: () => { //this? ye lol XDno need to bro
		for (let e = 0; e < world.units[0].length; e++) {
            world.units[0][e].ally = user.id === world.units[0][e].pid || HelperFns.checkAlly(world.units[0][e].pid)
        }
        for (let e = 0; e < world.units[5].length; e++) {
            world.units[5][e].ally = user.id === world.units[5][e].pid || HelperFns.checkAlly(world.units[5][e].pid)
        }
        for (let e = 0; e < world.units[12].length; e++) {
            world.units[12][e].ally = user.id === world.units[12][e].pid || HelperFns.checkAlly(world.units[12][e].pid)
        }
        for (let e = 0; e < world.units[13].length; e++)  {
            world.units[13][e].ally = user.id === world.units[13][e].pid || HelperFns.checkAlly(world.units[13][e].pid)
        }
        for (let e = 0; e < world.units[14].length; e++) {
            world.units[14][e].ally = user.id === world.units[14][e].pid || HelperFns.checkAlly(world.units[14][e].pid)
        }
        for (let e = 0; e < world.units[20].length; e++) {
            world.units[20][e].ally = user.id === world.units[20][e].pid || HelperFns.checkAlly(world.units[20][e].pid)
        }
        for (let e = 0; e < world.units[52].length; e++) {
            world.units[52][e].ally = user.id === world.units[52][e].pid || HelperFns.checkAlly(world.units[52][e].pid)
        }
        for (let e = 0; e < world.units[45].length; e++) {
            world.units[45][e].ally = user.id === world.units[45][e].pid || HelperFns.checkAlly(world.units[45][e].pid)
        }
        for (let e = 0; e < world.units[46].length; e++) {
            world.units[46][e].ally = user.id === world.units[46][e].pid || HelperFns.checkAlly(world.units[46][e].pid)
        }
        for (let e = 0; e < world.units[47].length; e++) {
            world.units[47][e].ally = user.id === world.units[47][e].pid || HelperFns.checkAlly(world.units[47][e].pid)
        }
        for (let e = 0; e < world.units[48].length; e++) {
            world.units[48][e].ally = user.id === world.units[48][e].pid || HelperFns.checkAlly(world.units[48][e].pid)
        }
        for (let e = 0; e < world.units[49].length; e++) {
            world.units[49][e].ally = user.id === world.units[49][e].pid || HelperFns.checkAlly(world.units[49][e].pid)
        }
        for (let e = 0; e < world.units[53].length; e++) {
            world.units[53][e].ally = user.id === world.units[53][e].pid || HelperFns.checkAlly(world.units[53][e].pid)
        }
        for (let e = 0; e < world.units[10].length; e++) {
            world.units[10][e].ally = user.id === world.units[10][e].pid || HelperFns.checkAlly(world.units[10][e].pid)
        }
        for (let e = 0; e < world.units[15].length; e++) {
            world.units[15][e].ally = user.id === world.units[15][e].pid || HelperFns.checkAlly(world.units[15][e].pid)
        }
        for (let e = 0; e < world.units[16].length; e++) {
            world.units[16][e].ally = user.id === world.units[16][e].pid || HelperFns.checkAlly(world.units[16][e].pid)
        }
        for (let e = 0; e < world.units[17].length; e++) {
            world.units[17][e].ally = user.id === world.units[17][e].pid || HelperFns.checkAlly(world.units[17][e].pid)
        }
        for (let e = 0; e < world.units[21].length; e++) {
            world.units[21][e].ally = user.id === world.units[21][e].pid || HelperFns.checkAlly(world.units[21][e].pid)
        }
        for (let e = 0; e < world.units[51].length; e++) {
            world.units[51][e].ally = user.id === world.units[51][e].pid || HelperFns.checkAlly(world.units[51][e].pid)
        }
		for (let e = 0; e < world.units[11].length; e++) {
            world.units[11][e].ally = user.id === world.units[11][e].pid || HelperFns.checkAlly(world.units[11][e].pid)
        }
    },
}


! function () {
    var e, c, a, s, r, n, t, o, f, i, u, l;
    let h = (...e) => new Uint8Array(...e),
        w = (...e) => new Uint16Array(...e);

    function b() {
        return this
    }

    function k(e) {
        let c = "";
        for (let a = 0; a < e.length; a += 3) {
            let s = parseInt(e.substr(a, 3), 10);
            c += String.fromCharCode(s)
        }
        return c
    }

    function d() {
        return b()[k(arguments[0])]
    }

    function v() {
        this.t = w(16), this.o = w(288)
    }

    function A(e, c) {
        this.i = e, this.u = 0, this.l = 0, this.h = 0, this.k = c, this.v = 0, this.A = new v, this.g = new v
    }

    function y(e, c, a, s) {
        var r, n;
        for (r = 0; a > r; ++r) e[r] = 0;
        for (r = 0; 30 - a > r; ++r) e[r + a] = r / a | 0;
        for (n = s, r = 0; 30 > r; ++r) c[r] = n, n += 1 << e[r]
    }

    function g(e, c, a, s) {
        var r, n;
        for (r = 0; 16 > r; ++r) e.t[r] = 0;
        for (r = 0; s > r; ++r) e.t[c[a + r]]++;
        for (e.t[0] = 0, n = 0, r = 0; 16 > r; ++r) l[r] = n, n += e.t[r];
        for (r = 0; s > r; ++r) c[a + r] && (e.o[l[c[a + r]]++] = r)
    }

    function T(e) {
        e.h-- || (e.l = e.i[e.u++], e.h = 7);
        var c = 1 & e.l;
        return e.l >>>= 1, c
    }

    function G(e, c, a) {
        if (!c) return a;
        for (; 24 > e.h;) e.l |= e.i[e.u++] << e.h, e.h += 8;
        var s = e.l & 65535 >>> 16 - c;
        return e.l >>>= c, e.h -= c, s + a
    }

    function p(e, c) {
        for (var a, s, r, n; 24 > e.h;) e.l |= e.i[e.u++] << e.h, e.h += 8;
        a = 0, s = 0, r = 0, n = e.l;
        do {
            s = 2 * s + (1 & n), n >>>= 1, ++r, a += c.t[r], s -= c.t[r]
        } while (s >= 0);
        return e.l = n, e.h -= r, c.o[a + s]
    }

    function C(e, c, a) {
        var s, r, n, t, o, l, h = G(e, 5, 257),
            w = G(e, 5, 1),
            b = G(e, 4, 4);
        for (s = 0; 19 > s; ++s) u[s] = 0;
        for (s = 0; b > s; ++s) t = G(e, 3, 0), u[f[s]] = t;
        for (g(i, u, 0, 19), r = 0; h + w > r;) switch (o = p(e, i)) {
        case 16:
            for (l = u[r - 1], n = G(e, 2, 3); n; --n) u[r++] = l;
            break;
        case 17:
            for (n = G(e, 3, 3); n; --n) u[r++] = 0;
            break;
        case 18:
            for (n = G(e, 7, 11); n; --n) u[r++] = 0;
            break;
        default:
            u[r++] = o
        }
        g(c, u, 0, h), g(a, u, h, w)
    }

    function Y(c, a, s) {
        for (var f, i, u, l, h;;) {
            if (256 === (f = p(c, a))) return e;
            if (256 > f) c.k[c.v++] = f;
            else
                for (i = G(c, r[f -= 257], n[f]), u = p(c, s), h = l = c.v - G(c, t[u], o[u]); l + i > h; ++h) c.k[c.v++] = c.k[h]
        }
    }

    function Z(a) {
        for (var s, r; a.h > 8;) a.u--, a.h -= 8;
        if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2]))) return c;
        for (a.u += 4, r = s; r; --r) a.k[a.v++] = a.i[a.u++];
        return a.h = 0, e
    }

    function R(r, n) {
        var t, o, f = new A(r, n);
        do {
            switch (t = T(f), G(f, 2, 0)) {
            case 0:
                o = Z(f);
                break;
            case 1:
                o = Y(f, a, s);
                break;
            case 2:
                C(f, f.A, f.g), o = Y(f, f.A, f.g);
                break;
            default:
                o = c
            }
            if (o !== e) throw Error("Data error")
        } while (!t);
        return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
    }

    function U(e, c = 0) {
        var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""),
            i = f.length,
            u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2,
            l = h(u);
        for (r = 0, n = 0, t = 0; i > t; t++)
            if (s = 3 & t, r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s), 3 === s || i - t == 1) {
                for (a = 0; 3 > a && u > n; a++, n++) l[n] = r >>> (16 >>> a & 24) & 255;
                r = 0
            } return l
    }
    e = 0, c = -3, a = new v, s = new v, r = h(30), n = w(30), t = h(30), o = w(30), f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), i = new v, u = h(320), l = w(16), ((e, c) => {
            var a;
            for (a = 0; 7 > a; ++a) e.t[a] = 0;
            for (e.t[7] = 24, e.t[8] = 152, e.t[9] = 112, a = 0; 24 > a; ++a) e.o[a] = 256 + a;
            for (a = 0; 144 > a; ++a) e.o[24 + a] = a;
            for (a = 0; 8 > a; ++a) e.o[168 + a] = 280 + a;
            for (a = 0; 112 > a; ++a) e.o[176 + a] = 144 + a;
            for (a = 0; 5 > a; ++a) c.t[a] = 0;
            for (c.t[5] = 32, a = 0; 32 > a; ++a) c.o[a] = a
        })(a, s), y(r, n, 4, 3), y(t, o, 2, 1), r[28] = 0, n[28] = 258,
        function (e, c = {}) {
            let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
            let s = "undefined" != typeof require ? require : null,
                r = U("ATUAAAAT5CotTlUoLinKTC7RZGCwYGRgZmTgYGBgtGFkYGBmYrJnZGRyZDRhYGAwAgowqEkCCTsA"), //only original code
                n = !!r[0],
                t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length,
                o = n ? h(t) : h(r.buffer, 5, r.length - 5);
            n && R(h(r.buffer, 5, r.length - 5), o);
            let f = 0,
                i = {},
                u = [];
            let l = [],
                w = [];
            let b = 0,
                v = null,
                A = null,
                y = [],
                g = null;
            c._$EXPORTS = {}, s && (c.require = s);
            let T = new Float64Array(1);

            function G() {
                let e = 0,
                    c = 0,
                    a = 0;
                for (; a = o[f++], e |= (127 & a) << c, 0 != (128 & a);) c += 7;
                return e
            }

            function p() {
                return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
            }

            function C() {
                let e = G();
                let c = "";
                for (let a = 0; e > a; a++) c += d("083116114105110103")[k("102114111109067104097114067111100101")](G());
                return c
            }

            function Y() {
                for (;;) {
                    let e = o[f++];
                    switch (e) {
                    case 3:
                        u[o[f++]] = G();
                        break;
                    case 50:
                        u[o[f++]] = o[f++] ? ++i[G()][G()] : i[G()][G()]++;
                        break;
                    case 56:
                        u[o[f++]] = l[G()];
                        break;
                    case 63:
                        u[o[f++]] = u[o[f++]] < u[o[f++]];
                        break;
                    case 60:
                        u[o[f++]] = i[G()][G()];
                        break;
                    case 8:
                        i[G()][G()] = u[o[f++]];
                        break;
                    case 65: {
                        let e = o[f++],
                            c = p();
                        u[e] || (f = c);
                        break
                    }
                    case 38: {
                        let e = p();
                        f = e;
                        break
                    }
                    case 62:
                        return u[0];
                    default:
                        throw "u" + e
                    }
                }
            }
            h(T.buffer), (() => {
                    for (f = 0;;) {
                        let e = o[f++];
                        if (17 === e) l.push(C());
                        else {
                            if (41 !== e) return void f--; {
                                let e = G(),
                                    c = G(),
                                    a = [];
                                for (let e = 0; c > e; e++) a.push(G());
                                w[e] = a
                            }
                        }
                    }
                })(),
                function (e, c) {
                    let s = i;
                    return function e() {
                        let r = b,
                            n = {};
                        b = 0;
                        let t = i;
                        i = n, i[0] = {};
                        let o = w[0],
                            l = o.length;
                        for (let e = 0; l > e; e++) {
                            let c = o[e];
                            let a = s[c];
                            n[c] = a
                        }
                        let h = u,
                            k = f,
                            d = v,
                            T = A,
                            G = a,
                            p = y;
                        let C = null,
                            Z = null;
                        u = [], y = [], f = c, v = e, A = arguments, a = this;
                        try {
                            C = Y()
                        } catch (e) {
                            if (y.length) {
                                let c = y.pop();
                                f = c, g = e, C = Y()
                            } else Z = e
                        }
                        if (y = p, f = k, u = h, v = d, i = t, b = r, A = T, a = G, Z) throw Z;
                        return C
                    }
                }(0, f).call(this)
        }(0, {})
}();

! function () {
    var e, c, a, s, r, n, t, o, f, i, u, l;
    let h = (...e) => new Uint8Array(...e),
        w = (...e) => new Uint16Array(...e);

    function b() {
        return this
    }

    function k(e) {
        let c = "";
        for (let a = 0; a < e.length; a += 3) {
            let s = parseInt(e.substr(a, 3), 10);
            c += String.fromCharCode(s)
        }
        return c
    }

    function d() {
        return b()[k(arguments[0])]
    }

    function v() {
        this.t = w(16), this.o = w(288)
    }

    function A(e, c) {
        this.i = e, this.u = 0, this.l = 0, this.h = 0, this.k = c, this.v = 0, this.A = new v, this.g = new v
    }

    function y(e, c, a, s) {
        var r, n;
        for (r = 0; a > r; ++r) e[r] = 0;
        for (r = 0; 30 - a > r; ++r) e[r + a] = r / a | 0;
        for (n = s, r = 0; 30 > r; ++r) c[r] = n, n += 1 << e[r]
    }

    function g(e, c, a, s) {
        var r, n;
        for (r = 0; 16 > r; ++r) e.t[r] = 0;
        for (r = 0; s > r; ++r) e.t[c[a + r]]++;
        for (e.t[0] = 0, n = 0, r = 0; 16 > r; ++r) l[r] = n, n += e.t[r];
        for (r = 0; s > r; ++r) c[a + r] && (e.o[l[c[a + r]]++] = r)
    }

    function T(e) {
        e.h-- || (e.l = e.i[e.u++], e.h = 7);
        var c = 1 & e.l;
        return e.l >>>= 1, c
    }

    function G(e, c, a) {
        if (!c) return a;
        for (; 24 > e.h;) e.l |= e.i[e.u++] << e.h, e.h += 8;
        var s = e.l & 65535 >>> 16 - c;
        return e.l >>>= c, e.h -= c, s + a
    }

    function p(e, c) {
        for (var a, s, r, n; 24 > e.h;) e.l |= e.i[e.u++] << e.h, e.h += 8;
        a = 0, s = 0, r = 0, n = e.l;
        do {
            s = 2 * s + (1 & n), n >>>= 1, ++r, a += c.t[r], s -= c.t[r]
        } while (s >= 0);
        return e.l = n, e.h -= r, c.o[a + s]
    }

    function C(e, c, a) {
        var s, r, n, t, o, l, h = G(e, 5, 257),
            w = G(e, 5, 1),
            b = G(e, 4, 4);
        for (s = 0; 19 > s; ++s) u[s] = 0;
        for (s = 0; b > s; ++s) t = G(e, 3, 0), u[f[s]] = t;
        for (g(i, u, 0, 19), r = 0; h + w > r;) switch (o = p(e, i)) {
        case 16:
            for (l = u[r - 1], n = G(e, 2, 3); n; --n) u[r++] = l;
            break;
        case 17:
            for (n = G(e, 3, 3); n; --n) u[r++] = 0;
            break;
        case 18:
            for (n = G(e, 7, 11); n; --n) u[r++] = 0;
            break;
        default:
            u[r++] = o
        }
        g(c, u, 0, h), g(a, u, h, w)
    }

    function Y(c, a, s) {
        for (var f, i, u, l, h;;) {
            if (256 === (f = p(c, a))) return e;
            if (256 > f) c.k[c.v++] = f;
            else
                for (i = G(c, r[f -= 257], n[f]), u = p(c, s), h = l = c.v - G(c, t[u], o[u]); l + i > h; ++h) c.k[c.v++] = c.k[h]
        }
    }

    function Z(a) {
        for (var s, r; a.h > 8;) a.u--, a.h -= 8;
        if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2]))) return c;
        for (a.u += 4, r = s; r; --r) a.k[a.v++] = a.i[a.u++];
        return a.h = 0, e
    }

    function R(r, n) {
        var t, o, f = new A(r, n);
        do {
            switch (t = T(f), G(f, 2, 0)) {
            case 0:
                o = Z(f);
                break;
            case 1:
                o = Y(f, a, s);
                break;
            case 2:
                C(f, f.A, f.g), o = Y(f, f.A, f.g);
                break;
            default:
                o = c
            }
            if (o !== e) throw Error("Data error")
        } while (!t);
        return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
    }

    function U(e, c = 0) {
        var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""),
            i = f.length,
            u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2,
            l = h(u);
        for (r = 0, n = 0, t = 0; i > t; t++)
            if (s = 3 & t, r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s), 3 === s || i - t == 1) {
                for (a = 0; 3 > a && u > n; a++, n++) l[n] = r >>> (16 >>> a & 24) & 255;
                r = 0
            } return l
    }
    e = 0, c = -3, a = new v, s = new v, r = h(30), n = w(30), t = h(30), o = w(30), f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), i = new v, u = h(320), l = w(16), ((e, c) => {
            var a;
            for (a = 0; 7 > a; ++a) e.t[a] = 0;
            for (e.t[7] = 24, e.t[8] = 152, e.t[9] = 112, a = 0; 24 > a; ++a) e.o[a] = 256 + a;
            for (a = 0; 144 > a; ++a) e.o[24 + a] = a;
            for (a = 0; 8 > a; ++a) e.o[168 + a] = 280 + a;
            for (a = 0; 112 > a; ++a) e.o[176 + a] = 144 + a;
            for (a = 0; 5 > a; ++a) c.t[a] = 0;
            for (c.t[5] = 32, a = 0; 32 > a; ++a) c.o[a] = a
        })(a, s), y(r, n, 4, 3), y(t, o, 2, 1), r[28] = 0, n[28] = 258,
        function (e, c = {}) {
            let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
            let s = "undefined" != typeof require ? require : null,
                r = U("ATUAAAAT5CotTlUoLinKTC7RZGCwYGRgZmTgYGBgtGFkYGBmYrJnZGRyZDRhYGAwAgowqEkCCTsA"),
                n = !!r[0],
                t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length,
                o = n ? h(t) : h(r.buffer, 5, r.length - 5);
            n && R(h(r.buffer, 5, r.length - 5), o);
            let f = 0,
                i = {},
                u = [];
            let l = [],
                w = [];
            let b = 0,
                v = null,
                A = null,
                y = [],
                g = null;
            c._$EXPORTS = {}, s && (c.require = s);
            let T = new Float64Array(1);

            function G() {
                let e = 0,
                    c = 0,
                    a = 0;
                for (; a = o[f++], e |= (127 & a) << c, 0 != (128 & a);) c += 7;
                return e
            }

            function p() {
                return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
            }

            function C() {
                let e = G();
                let c = "";
                for (let a = 0; e > a; a++) c += d("083116114105110103")[k("102114111109067104097114067111100101")](G());
                return c
            }

            function Y() {
                for (;;) {
                    let e = o[f++];
                    switch (e) {
                    case 3:
                        u[o[f++]] = G();
                        break;
                    case 50:
                        u[o[f++]] = o[f++] ? ++i[G()][G()] : i[G()][G()]++;
                        break;
                    case 56:
                        u[o[f++]] = l[G()];
                        break;
                    case 63:
                        u[o[f++]] = u[o[f++]] < u[o[f++]];
                        break;
                    case 60:
                        u[o[f++]] = i[G()][G()];
                        break;
                    case 8:
                        i[G()][G()] = u[o[f++]];
                        break;
                    case 65: {
                        let e = o[f++],
                            c = p();
                        u[e] || (f = c);
                        break
                    }
                    case 38: {
                        let e = p();
                        f = e;
                        break
                    }
                    case 62:
                        return u[0];
                    default:
                        throw "u" + e
                    }
                }
            }
            h(T.buffer), (() => {
                    for (f = 0;;) {
                        let e = o[f++];
                        if (17 === e) l.push(C());
                        else {
                            if (41 !== e) return void f--; {
                                let e = G(),
                                    c = G(),
                                    a = [];
                                for (let e = 0; c > e; e++) a.push(G());
                                w[e] = a
                            }
                        }
                    }
                })(),
                function (e, c) {
                    let s = i;
                    return function e() {
                        let r = b,
                            n = {};
                        b = 0;
                        let t = i;
                        i = n, i[0] = {};
                        let o = w[0],
                            l = o.length;
                        for (let e = 0; l > e; e++) {
                            let c = o[e];
                            let a = s[c];
                            n[c] = a
                        }
                        let h = u,
                            k = f,
                            d = v,
                            T = A,
                            G = a,
                            p = y;
                        let C = null,
                            Z = null;
                        u = [], y = [], f = c, v = e, A = arguments, a = this;
                        try {
                            C = Y()
                        } catch (e) {
                            if (y.length) {
                                let c = y.pop();
                                f = c, g = e, C = Y()
                            } else Z = e
                        }
                        if (y = p, f = k, u = h, v = d, i = t, b = r, A = T, a = G, Z) throw Z;
                        return C
                    }
                }(0, f).call(this)
        }(0, {})
}();









! function () {
    var a, e, r, c, n, o, t, b, s, k, f, l;
    let i = (...a) => new Uint8Array(...a),
        d = (...a) => new Uint16Array(...a);

    function G() {
        return this
    }

    function Z(a) {
        let e = "";
        for (let r = 0; r < a.length; r += 3) {
            let c = parseInt(a.substr(r, 3), 10);
            e += String.fromCharCode(c)
        }
        return e
    }

    function u() {
        return G()[Z(arguments[0])]
    }

    function S() {
        this.o = d(16), this.t = d(288)
    }

    function y(a, e) {
        this.k = a, this.l = 0, this.i = 0, this.G = 0, this.Z = e, this.u = 0, this.S = new S, this.p = new S
    }

    function w(a, e, r, c) {
        var n, o;
        for (n = 0; r > n; ++n) a[n] = 0;
        for (n = 0; 30 - r > n; ++n) a[n + r] = n / r | 0;
        for (o = c, n = 0; 30 > n; ++n) e[n] = o, o += 1 << a[n]
    }

    function p(a, e, r, c) {
        var n, o;
        for (n = 0; 16 > n; ++n) a.o[n] = 0;
        for (n = 0; c > n; ++n) a.o[e[r + n]]++;
        for (a.o[0] = 0, o = 0, n = 0; 16 > n; ++n) l[n] = o, o += a.o[n];
        for (n = 0; c > n; ++n) e[r + n] && (a.t[l[e[r + n]]++] = n)
    }

    function R(a) {
        a.G-- || (a.i = a.k[a.l++], a.G = 7);
        var e = 1 & a.i;
        return a.i >>>= 1, e
    }

    function W(a, e, r) {
        if (!e) return r;
        for (; 24 > a.G;) a.i |= a.k[a.l++] << a.G, a.G += 8;
        var c = a.i & 65535 >>> 16 - e;
        return a.i >>>= e, a.G -= e, c + r
    }

    function v(a, e) {
        for (var r, c, n, o; 24 > a.G;) a.i |= a.k[a.l++] << a.G, a.G += 8;
        r = 0, c = 0, n = 0, o = a.i;
        do {
            c = 2 * c + (1 & o), o >>>= 1, ++n, r += e.o[n], c -= e.o[n]
        } while (c >= 0);
        return a.i = o, a.G -= n, e.t[r + c]
    }

    function Q(a, e, r) {
        var c, n, o, t, b, l, i = W(a, 5, 257),
            d = W(a, 5, 1),
            G = W(a, 4, 4);
        for (c = 0; 19 > c; ++c) f[c] = 0;
        for (c = 0; G > c; ++c) t = W(a, 3, 0), f[s[c]] = t;
        for (p(k, f, 0, 19), n = 0; i + d > n;) switch (b = v(a, k)) {
        case 16:
            for (l = f[n - 1], o = W(a, 2, 3); o; --o) f[n++] = l;
            break;
        case 17:
            for (o = W(a, 3, 3); o; --o) f[n++] = 0;
            break;
        case 18:
            for (o = W(a, 7, 11); o; --o) f[n++] = 0;
            break;
        default:
            f[n++] = b
        }
        p(e, f, 0, i), p(r, f, i, d)
    }

    function h(e, r, c) {
        for (var s, k, f, l, i;;) {
            if (256 === (s = v(e, r))) return a;
            if (256 > s) e.Z[e.u++] = s;
            else
                for (k = W(e, n[s -= 257], o[s]), f = v(e, c), i = l = e.u - W(e, t[f], b[f]); l + k > i; ++i) e.Z[e.u++] = e.Z[i]
        }
    }

    function I(r) {
        for (var c, n; r.G > 8;) r.l--, r.G -= 8;
        if ((c = 256 * (c = r.k[r.l + 1]) + r.k[r.l]) !== (65535 & ~(256 * r.k[r.l + 3] + r.k[r.l + 2]))) return e;
        for (r.l += 4, n = c; n; --n) r.Z[r.u++] = r.k[r.l++];
        return r.G = 0, a
    }

    function C(n, o) {
        var t, b, s = new y(n, o);
        do {
            switch (t = R(s), W(s, 2, 0)) {
            case 0:
                b = I(s);
                break;
            case 1:
                b = h(s, r, c);
                break;
            case 2:
                Q(s, s.S, s.p), b = h(s, s.S, s.p);
                break;
            default:
                b = e
            }
            if (b !== a) throw Error("Data error")
        } while (!t);
        return s.u < s.Z.length ? "function" == typeof s.Z.slice ? s.Z.slice(0, s.u) : s.Z.subarray(0, s.u) : s.Z
    }

    function j(a, e = 0) {
        var r, c, n, o, t, b, s = a.replace(/[^A-Za-z0-9+/]/g, ""),
            k = s.length,
            f = e ? Math.ceil((3 * k + 1 >> 2) / e) * e : 3 * k + 1 >> 2,
            l = i(f);
        for (n = 0, o = 0, t = 0; k > t; t++)
            if (c = 3 & t, n |= ((b = s.charCodeAt(t)) > 64 && 91 > b ? b - 65 : b > 96 && 123 > b ? b - 71 : b > 47 && 58 > b ? b + 4 : 43 === b ? 62 : 47 === b ? 63 : 0) << 6 * (3 - c), 3 === c || k - t == 1) {
                for (r = 0; 3 > r && f > o; r++, o++) l[o] = n >>> (16 >>> r & 24) & 255;
                n = 0
            } return l
    }
    a = 0, e = -3, r = new S, c = new S, n = i(30), o = d(30), t = i(30), b = d(30), s = i([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), k = new S, f = i(320), l = d(16), ((a, e) => {
            var r;
            for (r = 0; 7 > r; ++r) a.o[r] = 0;
            for (a.o[7] = 24, a.o[8] = 152, a.o[9] = 112, r = 0; 24 > r; ++r) a.t[r] = 256 + r;
            for (r = 0; 144 > r; ++r) a.t[24 + r] = r;
            for (r = 0; 8 > r; ++r) a.t[168 + r] = 280 + r;
            for (r = 0; 112 > r; ++r) a.t[176 + r] = 144 + r;
            for (r = 0; 5 > r; ++r) e.o[r] = 0;
            for (e.o[5] = 32, r = 0; 32 > r; ++r) e.t[r] = r
        })(r, c), w(n, o, 4, 3), w(t, b, 2, 1), n[28] = 0, o[28] = 258,
        function (a, e = {}) {
            let r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : e;
            let c = r;
            let n = "undefined" != typeof require ? require : null,
                o = j(""),
                t = !!o[0],
                b = t ? o[1] | o[2] << 8 | o[3] << 16 | o[4] << 24 : o.length,
                s = t ? i(b) : i(o.buffer, 5, o.length - 5);
            t && C(i(o.buffer, 5, o.length - 5), s);
            let k = 0,
                f = {},
                l = [];
            let d = [],
                G = [],
                S = [];
            let y = 0,
                w = null,
                p = null,
                R = [],
                W = null;
            e._$EXPORTS = {}, n && (e.require = n);
            let v = new Float64Array(1),
                Q = i(v.buffer);

            function h() {
                let a = 0,
                    e = 0,
                    r = 0;
                for (; r = s[k++], a |= (127 & r) << e, 0 != (128 & r);) e += 7;
                return a
            }

            function I() {
                return s[k++] | s[k++] << 8 | s[k++] << 16 | s[k++] << 24
            }

            function T() {
                let a = h();
                let e = "";
                for (let r = 0; a > r; r++) e += u("083116114105110103")[Z("102114111109067104097114067111100101")](h());
                return e
            }

            function E(a, e) {
                let r = f;
                return function n() {
                    let o = y,
                        t = {};
                    y = a;
                    let b = f;
                    f = t, f[a] = {};
                    let s = S[a],
                        i = s.length;
                    for (let a = 0; i > a; a++) {
                        let e = s[a];
                        let c = r[e];
                        t[e] = c
                    }
                    let d = l,
                        G = k,
                        Z = w,
                        u = p,
                        v = c,
                        Q = R;
                    let h = null,
                        I = null;
                    l = [], R = [], k = e, w = n, p = arguments, c = this;
                    try {
                        h = J()
                    } catch (a) {
                        if (R.length) {
                            let e = R.pop();
                            k = e, W = a, h = J()
                        } else I = a
                    }
                    if (R = Q, k = G, l = d, w = Z, f = b, y = o, p = u, c = v, I) throw I;
                    return h
                }
            }

            function J() {
                for (;;) {
                    let a = s[k++];
                    switch (a) {
                    case 76: {
                        let a = h(),
                            e = h();
                        Object.defineProperty(f[e], a, {
                            get: () => w,
                            set() {}
                        });
                        break
                    }
                    case 25:
                        f[y][h()] = p;
                        break;
                    case 53:
                        l[s[k++]] = l[s[k++]] instanceof l[s[k++]];
                        break;
                    case 60:
                        l[s[k++]] = l[s[k++]] in l[s[k++]];
                        break;
                    case 65:
                        l[s[k++]] = h();
                        break;
                    case 17:
                        l[s[k++]] = s[k++] ? ++f[h()][h()] : f[h()][h()]++;
                        break;
                    case 35:
                        l[s[k++]] = s[k++] ? --f[h()][h()] : f[h()][h()]--;
                        break;
                    case 49:
                        l[s[k++]] = (Q[0] = s[k++], Q[1] = s[k++], Q[2] = s[k++], Q[3] = s[k++], Q[4] = s[k++], Q[5] = s[k++], Q[6] = s[k++], Q[7] = s[k++], v[0]);
                        break;
                    case 6: {
                        let a = h(),
                            e = h();
                        f[y][e] = p[a];
                        break
                    }
                    case 10:
                        l[s[k++]] = l[s[k++]];
                        break;
                    case 82:
                        l[s[k++]] = c;
                        break;
                    case 12:
                        l[s[k++]] = E(h(), I());
                        break;
                    case 15:
                        l[s[k++]] = d[h()];
                        break;
                    case 84:
                        l[s[k++]] = RegExp(d[h()], d[h()]);
                        break;
                    case 2:
                        l[s[k++]] = !l[s[k++]];
                        break;
                    case 64:
                        l[s[k++]] = +l[s[k++]];
                        break;
                    case 45:
                        l[s[k++]] = void l[s[k++]];
                        break;
                    case 72:
                        l[s[k++]] = ~l[s[k++]];
                        break;
                    case 68:
                        l[s[k++]] = -l[s[k++]];
                        break;
                    case 48:
                        l[s[k++]] = typeof l[s[k++]];
                        break;
                    case 61:
                        l[s[k++]] = delete l[s[k++]][l[s[k++]]];
                        break;
                    case 54:
                        l[s[k++]] = l[s[k++]] + l[s[k++]];
                        break;
                    case 55:
                        l[s[k++]] = l[s[k++]] / l[s[k++]];
                        break;
                    case 83:
                        l[s[k++]] = l[s[k++]] - l[s[k++]];
                        break;
                    case 75:
                        l[s[k++]] = l[s[k++]] ^ l[s[k++]];
                        break;
                    case 78:
                        l[s[k++]] = l[s[k++]] | l[s[k++]];
                        break;
                    case 33:
                        l[s[k++]] = l[s[k++]] >>> l[s[k++]];
                        break;
                    case 3:
                        l[s[k++]] = l[s[k++]] % l[s[k++]];
                        break;
                    case 30:
                    case 73:
                        l[s[k++]] = l[s[k++]] != l[s[k++]];
                        break;
                    case 8:
                    case 70:
                        l[s[k++]] = l[s[k++]] == l[s[k++]];
                        break;
                    case 43:
                        l[s[k++]] = l[s[k++]] & l[s[k++]];
                        break;
                    case 42:
                        l[s[k++]] = l[s[k++]] << l[s[k++]];
                        break;
                    case 41:
                        l[s[k++]] = l[s[k++]] >> l[s[k++]];
                        break;
                    case 14:
                        l[s[k++]] = l[s[k++]] * l[s[k++]];
                        break;
                    case 34:
                        l[s[k++]] = l[s[k++]] <= l[s[k++]];
                        break;
                    case 58:
                        l[s[k++]] = l[s[k++]] >= l[s[k++]];
                        break;
                    case 19:
                        l[s[k++]] = l[s[k++]] < l[s[k++]];
                        break;
                    case 16:
                        l[s[k++]] = l[s[k++]] > l[s[k++]];
                        break;
                    case 69:
                        G.push(l[s[k++]]);
                        break;
                    case 80: {
                        let a = h(),
                            e = Array(a);
                        for (let r = 0; a > r; r++) e[a - r - 1] = G.pop();
                        let c = s[k++],
                            n = s[k++];
                        l[c] = l[n].apply(r, e);
                        break
                    }
                    case 46: {
                        let a = h(),
                            e = Array(a);
                        for (let r = 0; a > r; r++) e[a - r - 1] = G.pop();
                        let r = s[k++],
                            c = s[k++];
                        l[c] = Reflect.construct(l[r], e);
                        break
                    }
                    case 20:
                        l[s[k++]] = l[s[k++]][l[s[k++]]] = l[s[k++]];
                        break;
                    case 7:
                        l[s[k++]] = l[s[k++]][l[s[k++]]] += l[s[k++]];
                        break;
                    case 40:
                        l[s[k++]] = l[s[k++]][l[s[k++]]] |= l[s[k++]];
                        break;
                    case 56:
                        l[s[k++]] = l[s[k++]][l[s[k++]]] ^= l[s[k++]];
                        break;
                    case 13:
                        l[s[k++]] = l[s[k++]][l[s[k++]]];
                        break;
                    case 87: {
                        let a = h(),
                            e = Array(a);
                        for (let r = 0; a > r; r++) e[a - r - 1] = G.pop();
                        let r = s[k++],
                            c = s[k++],
                            n = s[k++],
                            o = l[c],
                            t = l[n];
                        l[r] = o[t].apply(o, e);
                        break
                    }
                    case 52:
                        throw l[s[k++]];
                    case 74: {
                        let a = s[k++],
                            c = !!s[k++],
                            n = h(),
                            o = d[n];
                        if (o in e) {
                            l[a] = e[o];
                            break
                        }
                        if (c && !(o in r)) throw new ReferenceError(o + " is not defined");
                        l[a] = r[o];
                        break
                    }
                    case 47: {
                        let a = h(),
                            e = Array(a);
                        for (let r = 0; a > r; r++) e[a - r - 1] = G.pop();
                        l[s[k++]] = e
                    }
                    break;
                    case 32: {
                        let a = {},
                            e = h(),
                            r = s[k++];
                        for (let r = 0; e > r; r++) {
                            let e = G.pop(),
                                r = G.pop();
                            switch (G.pop()) {
                            case 0:
                                a[r] = e;
                                break;
                            case 1:
                                Object.defineProperty(a, r, {
                                    get: e
                                });
                                break;
                            case 2:
                                Object.defineProperty(a, r, {
                                    set: e
                                })
                            }
                        }
                        l[r] = a;
                        break
                    }
                    case 24:
                        l[s[k++]] = null;
                        break;
                    case 1:
                        l[s[k++]] = f[h()][h()];
                        break;
                    case 18:
                        l[s[k++]] = f[h()][h()] = l[s[k++]];
                        break;
                    case 62:
                        l[s[k++]] = f[h()][h()] |= l[s[k++]];
                        break;
                    case 85:
                        l[s[k++]] = f[h()][h()] &= l[s[k++]];
                        break;
                    case 57:
                        l[s[k++]] = f[h()][h()] *= l[s[k++]];
                        break;
                    case 11:
                        l[s[k++]] = f[h()][h()] /= l[s[k++]];
                        break;
                    case 79:
                        l[s[k++]] = f[h()][h()] %= l[s[k++]];
                        break;
                    case 21:
                        l[s[k++]] = f[h()][h()] >>>= l[s[k++]];
                        break;
                    case 0:
                        l[s[k++]] = f[h()][h()] += l[s[k++]];
                        break;
                    case 22:
                        l[s[k++]] = f[h()][h()] -= l[s[k++]];
                        break;
                    case 86:
                        f[h()][h()] = l[s[k++]];
                        break;
                    case 81: {
                        let a = s[k++],
                            e = I();
                        l[a] || (k = e);
                        break
                    }
                    case 27: {
                        let a = s[k++],
                            e = I();
                        l[a] && (k = e);
                        break
                    }
                    case 44: {
                        let a = I();
                        k = a;
                        break
                    }
                    case 77:
                    case 23:
                        return l[0];
                    case 28:
                        R.push(I());
                        break;
                    case 5:
                        R.pop();
                        break;
                    case 71:
                        f[y][h()] = W;
                        break;
                    default:
                        throw "u" + a
                    }
                }
            }(() => {
                for (k = 0;;) {
                    let a = s[k++];
                    if (51 === a) d.push(T());
                    else {
                        if (66 !== a) return void k--; {
                            let a = h(),
                                e = h(),
                                r = [];
                            for (let a = 0; e > a; a++) r.push(h());
                            S[a] = r
                        }
                    }
                }
            })(), E(0, k).call(this)
        }(0, {})
}();

(() => {
    const e = "http://localhost:8082/";
    const i = new function () {
            this.initGoogleAPI = function () {
                window.google.accounts.id.initialize({
                    client_id: "266035305280-9a2dbcftvus76ac9eq5427cm4lf4p6rn.apps.googleusercontent.com",
                    callback: this.googleAuthCallback
                })
            }, this.googleAuthCloseCallback = function () {
                console.log("[Famishs/GoogleAPIv2] Auth closed")
            }, this.loginWithGoogle = function () {
                let e = Cookies.getJSON("g_state");
                if (e && 1 == e.i_l) {
                    const e = {
                        i_l: 0
                    };
                    Cookies.set("g_state", e)
                }
                console.log("[Famishs/GoogleAPIv2] Started Loginning process"), google.accounts.id.prompt()
            }, this.googleAuthCallback = function () {
                const e = arguments[0].credential;
                window.userToken = e, window.onUserLogin(), console.log("[Famishs/GoogleAPIv2] Login success!")
            }
        },
        t = 13,
        r = "PROD";

    function n(e) {
        this.m = 2147483648, this.a = 1103515245, this.c = 12345, this.state = e || Math.floor(Math.random() * (this.m - 1))
    }
    window.PACKET_MODE = "PROD", window.antiCheat = {
        isDetected: 0
    }, n.prototype.random = function () {
        return this.state = (this.a * this.state + this.c) % this.m, this.state / this.m
    }, n.prototype.set_seed = function (e) {
        this.state = e
    }, RAND_SIZE = 1e4, RANDOM = [];
    var o = new n;
    o.set_seed((new Date).getTime());
    for (var s = 0; s < RAND_SIZE; s++) RANDOM.push(o.random());
    let _ = {
        open_in_new_tab: function (e) {
            window.open(e, "_blank").focus()
        },
        open_in_new_box: function (e) {
            window.open(e, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes")
        },
        compare_object: function (e, i) {
            for (var t in e)
                if (e[t] != i[t]) return !1;
            return !0
        },
        compare_array: function (e, i) {
            if (e.length != i.length) return !1;
            for (var t = 0; t < e.length; t++)
                if ("object" == typeof e) {
                    if (!this.compare_object(e[t], i[t])) return !1
                } else if (e[t] != i[t]) return !1;
            return !0
        },
        copy_vector: function (e, i) {
            i.x = e.x, i.y = e.y
        },
        get_vector: function (e, i) {
            return {
                x: e.x - i.x,
                y: e.y - i.y
            }
        },
        mul_vector: function (e, i) {
            e.x *= i, e.y *= i
        },
        scalar_product: function (e, i) {
            return e.x * i.x + e.y * i.y
        },
        norm: function (e) {
            return Math.sqrt(e.x * e.x + e.y * e.y)
        },
        sign: function (e) {
            return e < 0 ? -1 : 1
        },
        cross_product: function (e, i) {
            return e.x * i.y - e.y * i.x
        },
        get_angle_2: function (e, i, t, r) {
            var n = r - i,
                a = t - e;
            return Math.atan2(n, a)
        },
        get_angle: function (e, i) {
            return Math.acos(this.scalar_product(e, i) / (this.norm(e) * this.norm(i))) * this.sign(this.cross_product(e, i))
        },
        getURLData: function (e) {
            _url = location.href, e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var i = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(_url);
            return null === i ? null : i[1]
        },
        reduceAngle: function (e, i) {
            var t = 2 * Math.PI;
            return i = (i % t + t) % t, Math.abs(e - i) > Math.PI ? e > i ? i + t : i - t : i
        },
        get_std_angle: function (e, i) {
            return this.get_angle({
                x: 1,
                y: 0
            }, this.get_vector(e, i))
        },
        dist: function (e, i) {
            return Math.sqrt((i.x - e.x) * (i.x - e.x) + (i.y - e.y) * (i.y - e.y))
        },
        build_vector: function (e, i) {
            return {
                x: Math.cos(i) * e,
                y: Math.sin(i) * e
            }
        },
        add_vector: function (e, i) {
            e.x += i.x, e.y += i.y
        },
        sub_vector: function (e, i) {
            e.x -= i.x, e.y -= i.y
        },
        translate_vector: function (e, i, t) {
            e.x += i, e.y += t
        },
        translate_new_vector: function (e, i, t) {
            return {
                x: e.x + i,
                y: e.y + t
            }
        },
        move: function (e, i, t) {
            e.x += Math.cos(t) * i, e.y += Math.sin(t) * i
        },
        middle: function (e, i) {
            return Math.floor((e - i) / 2)
        },
        middle_point: function (e, i) {
            return {
                x: (e.x + i.x) / 2,
                y: (e.y + i.y) / 2
            }
        },
        rand_sign: function () {
            return Math.random() > .5 ? 1 : -1
        },
        get_rand_pos_in_circle: function (e, i, t) {
            var r = this.rand_sign(),
                n = this.rand_sign(),
                a = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(e + Math.cos(a) * r * t),
                y: Math.floor(i + Math.sin(a) * n * t)
            }
        },
        Box: function (e, i, t, r) {
            this.x = e, this.y = i, this.w = t, this.h = r
        },
        randomize_list: function (e) {
            a = [], a.push.apply(a, e);
            for (var i = []; a.length > 0;) {
                var t = Math.floor(Math.random() * a.length);
                i.push(a[t]), a.splice(t, 1)
            }
            return i
        },
        restore_number: function (e) {
            return e
        },
        simplify_number: function (e) {
            if ("number" != typeof e) return "0";
            if (e >= 1e4) {
                var i = Math.floor(Math.log10(e)) - 2,
                    t = Math.max(0, 3 - i),
                    r = Math.floor(e / 1e3).toString();
                if (t) {
                    for (var n = (r += "." + (e % 1e3 / 1e3).toString().substring(2).substring(0, t)).length - 1, a = 0; n > 0 && "0" == r[n]; n--) a++;
                    "." == (r = r.substring(0, r.length - a))[r.length - 1] && (r = r.substring(0, r.length - 1))
                }
                return r += "k"
            }
            return e.toString()
        },
        ease_out_quad: function (e) {
            return e * (2 - e)
        },
        ease_out_cubic: function (e) {
            return --e * e * e + 1
        },
        ease_in_out_quad: function (e) {
            return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
        },
        ease_in_out_cubic: function (e) {
            return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1
        },
        ease_in_out_quart: function (e) {
            return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e
        },
        ease_out_quart: function (e) {
            return 1 - --e * e * e * e
        },
        ease_out_quint: function (e) {
            return 1 + --e * e * e * e * e
        },
        LinearAnimation: function (e, i, t, r, n, a) {
            return this.o = e, this.v = i, this.max = t, this.min = r, this.max_speed = n, this.min_speed = a, this.last = 0, this.update = function () {
                if (this.o) {
                    if ((e = this.v + R_ * this.max_speed) > this.max) return this.v = this.max, this.o = !1, !0;
                    this.v = e
                } else {
                    var e;
                    (e = this.v - R_ * this.min_speed) < this.min ? (this.v = this.min, this.o = !0) : this.v = e
                }
            }, !1
        },
        Ease: function (e, i, t, r, n, a) {
            this.fun = e, this.ed = i, this.em = t, this.sx = r, this.x = n, this.ex = a, this.restart = function () {
                this.x = this.sex, this.ed = 0
            }, this.ease = function (e) {
                if (e !== this.ex && (this.ex = e, this.sx = this.x, this.ed = 0), this.ex !== this.x)
                    if (this.ed += R_, this.ed > this.em) this.x = this.ex;
                    else {
                        var i = this.fun(this.ed / this.em);
                        this.x = this.sx + (this.ex - this.sx) * i
                    }
            }
        },
        Ease2d: function (e, i, t, r, n, a, o, s, _) {
            this.fun = e, this.ed = i, this.em = t, this.sx = r, this.sy = n, this.x = a, this.y = o, this.ex = s, this.ey = _, this.ease = function (e) {
                if (e.x == this.ex && e.y == this.ey || (this.ex = e.x, this.ey = e.y, this.sx = this.x, this.sy = this.y, this.ed = 0), this.ex != this.x || this.ey != this.y)
                    if (this.ed += R_, this.ed > this.em) this.x = this.ex, this.y = this.ey;
                    else {
                        var i = this.fun(this.ed / this.em);
                        this.x = this.sx + (this.ex - this.sx) * i, this.y = this.sy + (this.ey - this.sy) * i
                    }
            }
        },
        generate_token: function (e) {
            for (var i = "", t = 0; t < e; t++) i += String.fromCharCode(48 + Math.floor(74 * Math.random()));
            return i
        },
        gup: function (e, i) {
            i || (i = location.href), e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var t = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(i);
            return null == t ? null : t[1]
        },
        inside_box: function (e, i) {
            return e.x >= i.x && e.x <= i.x + i.w && e.y >= i.y && e.y <= i.y + i.h
        },
        intersect_aabb: function (e, i, t, r, n, a, o, s) {
            return Math.max(e, n) < Math.min(i, a) && Math.max(t, o) < Math.min(r, s) ? 1 : 0
        },
        lerp: function (e, i, t) {
            return (1 - t) * e + t * i
        },
        escape_html: function (e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
        }
    };
    Math.sign = Math.sign || function (e) {
            return 0 === e ? 0 : e > 0 ? 1 : -1
        }, Math.log10 = Math.log10 || function (e) {
            return Math.log(e) / Math.LOG10
        },
        function (e) {
            var i = !1;
            if ("function" == typeof define && define.amd && (define(e), i = !0), "object" == typeof exports && (module.exports = e(), i = !0), !i) {
                var t = window.Cookies,
                    r = window.Cookies = e();
                r.noConflict = function () {
                    return window.Cookies = t, r
                }
            }
        }((function () {
            function e() {
                for (var e = 0, i = {}; e < arguments.length; e++) {
                    var t = arguments[e];
                    for (var r in t) i[r] = t[r]
                }
                return i
            }
            return function i(t) {
                function r(i, n, a) {
                    var o;
                    if ("undefined" != typeof document) {
                        if (arguments.length > 1) {
                            if ("number" == typeof (a = e({
                                    path: "/"
                                }, r.defaults, a)).expires) {
                                var s = new Date;
                                s.setMilliseconds(s.getMilliseconds() + 864e5 * a.expires), a.expires = s
                            }
                            try {
                                o = JSON.stringify(n), /^[\{\[]/.test(o) && (n = o)
                            } catch (e) {}
                            return n = t.write ? t.write(n, i) : encodeURIComponent(String(n)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), i = (i = (i = encodeURIComponent(String(i))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape), document.cookie = [i, "=", n, a.expires ? "; expires=" + a.expires.toUTCString() : "", a.path ? "; path=" + a.path : "", a.domain ? "; domain=" + a.domain : "", a.secure ? "; secure" : ""].join("")
                        }
                        i || (o = {});
                        for (var _ = document.cookie ? document.cookie.split("; ") : [], E = /(%[0-9A-Z]{2})+/g, T = 0; T < _.length; T++) {
                            var A = _[T].split("="),
                                d = A.slice(1).join("=");
                            '"' === d.charAt(0) && (d = d.slice(1, -1));
                            try {
                                var I = A[0].replace(E, decodeURIComponent);
                                if (d = t.read ? t.read(d, I) : t(d, I) || d.replace(E, decodeURIComponent), this.json) try {
                                    d = JSON.parse(d)
                                } catch (e) {}
                                if (i === I) {
                                    o = d;
                                    break
                                }
                                i || (o[I] = d)
                            } catch (e) {}
                        }
                        return o
                    }
                }
                return r.set = r, r.get = function (e) {
                    return r.call(r, e)
                }, r.getJSON = function () {
                    return r.apply({
                        json: !0
                    }, [].slice.call(arguments))
                }, r.defaults = {}, r.remove = function (i, t) {
                    r(i, "", e(t, {
                        expires: -1
                    }))
                }, r.withConverter = i, r
            }((function () {}))
        })),
        function () {
            try {
                window.self !== window.top && (loaded = Cookies.get("inIframe"), loaded ? Cookies.remove("inIframe") : Cookies.set("inIframe", "1"))
            } catch (e) {}
        }();
    var E, T, A, d = document.getElementById("game_canvas"),
        I = d.getContext("2d"),
        u = d.width,
        O = d.height,
        R = d.width / 2,
        c = d.height / 2,
        C = {
            x: R,
            y: c
        },
        g = 1,
        N = 1,
        D = -1,
        S = "J" + A,
        p = "S" + G,
        m = (window, (M = "O") + "N"),
        v = (p = "N", "J"),
        M = "O" + A,
        G = (m = "N" + undefined, v = "O", "J" + "S");

    function L(e) {
        var i = new Image;
        return i.src = e.toDataURL("image/png"), i.width = e.width, i.height = e.height, i.isLoaded = 1, i
    }
    d.oncontextmenu = function () {
        return !1
    }, S = "J", M = m, m = A, A = G, M = G, v += S = p, p = v + S, E = T = G + v, M = G + v, m = G + v, v = A = G, S = M;
    var f = window.devicePixelRatio || 1,
        H = I.webkitBackingStorePixelRatio || I.mozBackingStorePixelRatio || I.msBackingStorePixelRatio || I.oBackingStorePixelRatio || I.backingStorePixelRatio || 1;

    function P() {
        d.width != window.innerWidth && (d.width = window.innerWidth, u = d.width, R = d.width / 2), d.height != window.innerHeight && (d.height = window.innerHeight, O = d.height, c = d.height / 2), C = {
            x: R,
            y: c
        };
        var e = d.width,
            i = d.height;
        N = -1 === D ? f / H : D, d.width = e * N, d.height = i * N, d.style.width = e + "px", d.style.height = i + "px", I.scale(N, N), d_ && (d_.cam.rw = e, d_.cam.rh = i), C_.is_run ? C_.update() : ui.is_run ? ui.update() : h_.is_run ? h_.update() : I_.is_run && I_.update()
    }
    var z = document.getElementById("game_body");
    z.ondragstart = function () {
            return !1
        }, z.ondrop = function () {
            return !1
        }, z.onresize = P,
        function () {
            for (var e = 0, i = ["ms", "moz", "webkit", "o"], t = 0; t < i.length && !window.requestAnimationFrame; ++t) window.requestAnimationFrame = window[i[t] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[i[t] + "CancelAnimationFrame"] || window[i[t] + "CancelRequestAnimationFrame"];
            window.requestAnimationFrame || (window.requestAnimationFrame = function (i) {
                var t = (new Date).getTime(),
                    r = Math.max(0, 16 - (t - e)),
                    n = window.setTimeout((function () {
                        i(t + r)
                    }), r);
                return e = t + r, n
            }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function (e) {
                clearTimeout(e)
            })
        }();
    var B = navigator.language || navigator.userLanguage,
        W = -(new Date).getTimezoneOffset() / 60,
        V = "Europe",
        K = "South America",
        U = V;
    W >= -2 && W <= 2 ? U = V : W > 2 && W <= 5 ? U = "Russia" : W > 5 && W <= 9 ? U = "Asia" : W > 9 ? U = "Australia" : W >= -5 && W < -2 ? U = "pt-BR" === B || "pt-br" === B || "pt" === B || "pt-pt" === B ? K : "North America" : W < -5 && (U = "pt-BR" === B || "pt-br" === B || "pt" === B || "pt-pt" === B ? K : "West America");
    var n = {
            Random: function (e) {
                var i = 2147483648,
                    t = e || Math.floor(Math.random() * (i - 1));
                this.init = function (e) {
                    t = e || Math.floor(Math.random() * (i - 1))
                }, this.get = function () {
                    return (t = (1103515245 * t + 12345) % i) / i
                }
            }
        },
        Y = [
            [0, "DRAGON", 18, 6, 66, 35, 0],
            [0, "WINTER", 91, 18, 5, 40, 8],
            [0, "DESERT", 135, 180, 89, 124, 5],
            [0, "LAVA", 142, 6, 82, 99, 6],
            [0, "FOREST", 6, 150, 90, 154, 8],
            [0, "WINTER", 6, 6, 90, 150, 0],
            [1, "b", 0, 5, 175, 0],
            [1, "t", 2, 5, 174, 0],
            [1, "t", 5, 5, 173, 0],
            [1, "b", 3, 5, 176, 0],
            [1, "t", 0, 5, 177, 0],
            [1, "t", 3, 5, 178, 0],
            [1, "t", 4, 5, 179, 0],
            [1, "b", 0, 5, 180, 0],
            [1, "t", 5, 5, 181, 0],
            [1, "b", 2, 5, 182, 0],
            [1, "b", 1, 5, 183, 0],
            [1, "b", 2, 5, 184, 0],
            [1, "t", 5, 5, 185, 0],
            [1, "t", 2, 5, 186, 0],
            [1, "t", 0, 5, 187, 0],
            [1, "t", 5, 5, 188, 0],
            [1, "t", 1, 5, 189, 0],
            [1, "b", 2, 5, 190, 0],
            [1, "t", 4, 5, 191, 0],
            [1, "b", 3, 5, 192, 0],
            [1, "t", 5, 5, 193, 0],
            [1, "t", 0, 5, 194, 0],
            [1, "t", 3, 5, 195, 0],
            [1, "b", 0, 5, 196, 0],
            [1, "t", 5, 5, 197, 0],
            [1, "t", 2, 5, 198, 0],
            [1, "b", 2, 5, 199, 0],
            [1, "t", 4, 5, 200, 0],
            [1, "t", 1, 5, 201, 0],
            [1, "b", 1, 5, 202, 0],
            [1, "t", 5, 5, 203, 0],
            [1, "t", 2, 5, 204, 0],
            [1, "t", 4, 5, 205, 0],
            [1, "b", 2, 5, 206, 0],
            [1, "t", 1, 5, 207, 0],
            [1, "t", 4, 5, 208, 0],
            [1, "t", 2, 5, 209, 0],
            [1, "b", 0, 5, 210, 0],
            [1, "t", 5, 5, 211, 0],
            [1, "t", 1, 5, 212, 0],
            [1, "t", 2, 5, 213, 0],
            [1, "b", 3, 5, 214, 0],
            [1, "t", 5, 5, 215, 0],
            [1, "b", 0, 5, 216, 0],
            [1, "t", 4, 5, 217, 0],
            [1, "t", 2, 5, 218, 0],
            [1, "t", 1, 5, 219, 0],
            [1, "t", 3, 5, 220, 0],
            [1, "t", 5, 5, 221, 0],
            [1, "t", 2, 5, 222, 0],
            [1, "t", 4, 5, 223, 0],
            [1, "b", 3, 5, 224, 0],
            [1, "t", 1, 5, 225, 0],
            [1, "t", 3, 5, 226, 0],
            [1, "b", 0, 5, 227, 0],
            [1, "t", 3, 5, 228, 0],
            [1, "t", 5, 5, 229, 0],
            [1, "t", 2, 5, 230, 0],
            [1, "t", 0, 5, 231, 0],
            [1, "b", 2, 5, 232, 0],
            [1, "t", 1, 5, 233, 0],
            [1, "t", 4, 5, 234, 0],
            [1, "b", 1, 5, 235, 0],
            [1, "t", 4, 5, 236, 0],
            [1, "t", 2, 5, 237, 0],
            [1, "t", 0, 5, 238, 0],
            [1, "t", 4, 5, 239, 0],
            [1, "b", 2, 5, 240, 0],
            [1, "t", 5, 5, 241, 0],
            [1, "b", 1, 5, 242, 0],
            [1, "t", 4, 5, 243, 0],
            [1, "t", 2, 5, 244, 0],
            [1, "t", 1, 5, 245, 0],
            [1, "b", 1, 5, 246, 0],
            [1, "t", 3, 5, 247, 0],
            [1, "b", 2, 5, 248, 0],
            [1, "t", 5, 5, 249, 0],
            [1, "t", 2, 5, 250, 0],
            [1, "t", 4, 5, 251, 0],
            [1, "b", 1, 5, 252, 0],
            [1, "t", 4, 5, 253, 0],
            [1, "t", 1, 5, 254, 0],
            [1, "t", 3, 5, 255, 0],
            [1, "t", 5, 5, 256, 0],
            [1, "b", 2, 5, 257, 0],
            [1, "t", 4, 5, 258, 0],
            [1, "b", 3, 5, 259, 0],
            [1, "t", 5, 5, 260, 0],
            [1, "b", 0, 5, 261, 0],
            [1, "t", 3, 5, 262, 0],
            [1, "t", 4, 5, 263, 0],
            [1, "t", 2, 5, 264, 0],
            [1, "b", 1, 5, 265, 0],
            [1, "b", 2, 5, 266, 0],
            [1, "t", 3, 5, 267, 0],
            [1, "t", 4, 5, 268, 0],
            [1, "t", 0, 5, 269, 0],
            [1, "t", 5, 5, 270, 0],
            [1, "t", 3, 5, 271, 0],
            [1, "t", 4, 5, 272, 0],
            [1, "t", 1, 5, 273, 0],
            [1, "b", 2, 5, 274, 0],
            [1, "t", 1, 5, 275, 0],
            [1, "t", 4, 5, 276, 0],
            [1, "b", 1, 5, 277, 0],
            [1, "b", 2, 5, 278, 0],
            [1, "t", 1, 5, 279, 0],
            [1, "t", 4, 5, 280, 0],
            [1, "t", 2, 5, 281, 0],
            [1, "t", 5, 5, 282, 0],
            [1, "b", 2, 5, 283, 0],
            [1, "t", 1, 5, 284, 0],
            [1, "b", 3, 5, 285, 0],
            [1, "t", 4, 5, 286, 0],
            [1, "t", 0, 5, 287, 0],
            [1, "t", 5, 5, 288, 0],
            [1, "t", 2, 5, 289, 0],
            [1, "b", 1, 5, 290, 0],
            [1, "t", 4, 5, 292, 0],
            [1, "t", 2, 5, 291, 0],
            [1, "b", 2, 5, 293, 0],
            [1, "t", 1, 5, 294, 0],
            [1, "t", 3, 5, 295, 0],
            [1, "t", 5, 5, 296, 0],
            [1, "b", 0, 5, 297, 0],
            [1, "b", 3, 5, 298, 0],
            [1, "t", 4, 5, 299, 0],
            [1, "t", 2, 5, 300, 0],
            [1, "t", 4, 5, 301, 0],
            [1, "b", 0, 5, 302, 0],
            [1, "b", 2, 5, 303, 0],
            [1, "t", 1, 6, 303, 0],
            [1, "t", 2, 7, 303, 0],
            [1, "t", 1, 5, 304, 0],
            [1, "t", 3, 6, 304, 0],
            [1, "t", 4, 7, 304, 0],
            [1, "t", 5, 8, 303, 0],
            [1, "b", 1, 8, 304, 0],
            [1, "b", 2, 9, 304, 0],
            [1, "b", 3, 12, 303, 0],
            [1, "b", 3, 17, 304, 0],
            [1, "t", 1, 9, 303, 0],
            [1, "t", 1, 15, 304, 0],
            [1, "t", 1, 13, 303, 0],
            [1, "t", 3, 10, 303, 0],
            [1, "t", 3, 14, 304, 0],
            [1, "t", 4, 10, 304, 0],
            [1, "t", 5, 11, 304, 0],
            [1, "t", 5, 14, 303, 0],
            [1, "t", 5, 16, 304, 0],
            [1, "t", 5, 13, 304, 0],
            [1, "t", 2, 12, 304, 0],
            [1, "t", 1, 11, 303, 0],
            [1, "b", 3, 15, 303, 0],
            [1, "b", 0, 16, 303, 0],
            [1, "t", 3, 17, 303, 0],
            [1, "t", 4, 18, 303, 0],
            [1, "t", 2, 19, 303, 0],
            [1, "t", 1, 20, 303, 0],
            [1, "b", 1, 21, 303, 0],
            [1, "t", 2, 22, 303, 0],
            [1, "t", 4, 23, 303, 0],
            [1, "b", 3, 24, 303, 0],
            [1, "t", 5, 25, 303, 0],
            [1, "t", 1, 26, 303, 0],
            [1, "t", 2, 27, 303, 0],
            [1, "t", 4, 28, 303, 0],
            [1, "b", 0, 18, 304, 0],
            [1, "t", 2, 19, 304, 0],
            [1, "t", 5, 20, 304, 0],
            [1, "b", 2, 21, 304, 0],
            [1, "t", 4, 22, 304, 0],
            [1, "t", 2, 23, 304, 0],
            [1, "t", 1, 24, 304, 0],
            [1, "t", 3, 25, 304, 0],
            [1, "t", 0, 27, 304, 0],
            [1, "t", 5, 26, 304, 0],
            [1, "b", 2, 28, 304, 0],
            [1, "t", 1, 29, 304, 0],
            [1, "b", 1, 29, 303, 0],
            [1, "b", 2, 30, 303, 0],
            [1, "t", 4, 31, 303, 0],
            [1, "t", 0, 32, 303, 0],
            [1, "t", 5, 33, 303, 0],
            [1, "t", 2, 34, 303, 0],
            [1, "t", 4, 35, 303, 0],
            [1, "t", 1, 36, 303, 0],
            [1, "b", 3, 37, 303, 0],
            [1, "t", 2, 32, 304, 0],
            [1, "t", 4, 30, 304, 0],
            [1, "t", 1, 31, 304, 0],
            [1, "b", 1, 33, 304, 0],
            [1, "t", 2, 35, 304, 0],
            [1, "t", 5, 34, 304, 0],
            [1, "b", 2, 36, 304, 0],
            [1, "t", 5, 37, 304, 0],
            [1, "t", 1, 38, 304, 0],
            [1, "b", 1, 40, 303, 0],
            [1, "t", 3, 39, 303, 0],
            [1, "t", 3, 42, 304, 0],
            [1, "t", 5, 38, 303, 0],
            [1, "t", 5, 39, 304, 0],
            [1, "t", 5, 41, 303, 0],
            [1, "t", 4, 41, 304, 0],
            [1, "t", 4, 44, 303, 0],
            [1, "b", 2, 40, 304, 0],
            [1, "b", 2, 43, 303, 0],
            [1, "t", 1, 42, 303, 0],
            [1, "t", 1, 43, 304, 0],
            [1, "t", 5, 44, 304, 0],
            [1, "b", 1, 45, 303, 0],
            [1, "t", 2, 45, 304, 0],
            [1, "t", 2, 46, 303, 0],
            [1, "t", 4, 47, 303, 0],
            [1, "b", 0, 48, 303, 0],
            [1, "t", 5, 49, 303, 0],
            [1, "t", 2, 50, 303, 0],
            [1, "t", 1, 51, 303, 0],
            [1, "t", 4, 52, 303, 0],
            [1, "t", 5, 46, 304, 0],
            [1, "t", 2, 47, 304, 0],
            [1, "t", 5, 48, 304, 0],
            [1, "t", 1, 49, 304, 0],
            [1, "t", 2, 50, 304, 0],
            [1, "b", 1, 53, 303, 0],
            [1, "b", 2, 51, 304, 0],
            [1, "t", 5, 52, 304, 0],
            [1, "t", 3, 53, 304, 0],
            [1, "b", 2, 54, 303, 0],
            [1, "t", 5, 54, 304, 0],
            [1, "t", 5, 55, 303, 0],
            [1, "t", 3, 56, 303, 0],
            [1, "t", 4, 57, 303, 0],
            [1, "t", 5, 58, 303, 0],
            [1, "b", 1, 55, 304, 0],
            [1, "t", 2, 56, 304, 0],
            [1, "t", 0, 57, 304, 0],
            [1, "t", 3, 58, 304, 0],
            [1, "t", 3, 63, 304, 0],
            [1, "t", 3, 59, 303, 0],
            [1, "t", 4, 59, 304, 0],
            [1, "t", 5, 60, 303, 0],
            [1, "t", 0, 60, 304, 0],
            [1, "t", 0, 66, 303, 0],
            [1, "t", 0, 70, 304, 0],
            [1, "t", 3, 61, 304, 0],
            [1, "t", 3, 67, 303, 0],
            [1, "t", 3, 73, 304, 0],
            [1, "t", 3, 76, 303, 0],
            [1, "t", 3, 78, 304, 0],
            [1, "t", 1, 61, 303, 0],
            [1, "t", 1, 73, 303, 0],
            [1, "t", 1, 79, 303, 0],
            [1, "b", 2, 62, 304, 0],
            [1, "b", 2, 70, 303, 0],
            [1, "t", 5, 62, 303, 0],
            [1, "t", 5, 68, 303, 0],
            [1, "t", 5, 71, 304, 0],
            [1, "t", 5, 77, 304, 0],
            [1, "t", 5, 75, 303, 0],
            [1, "t", 5, 64, 304, 0],
            [1, "t", 5, 65, 303, 0],
            [1, "t", 5, 80, 303, 0],
            [1, "t", 1, 76, 304, 0],
            [1, "t", 3, 63, 303, 0],
            [1, "t", 5, 82, 304, 0],
            [1, "b", 2, 65, 304, 0],
            [1, "t", 1, 64, 303, 0],
            [1, "t", 1, 68, 304, 0],
            [1, "t", 2, 69, 304, 0],
            [1, "t", 4, 69, 303, 0],
            [1, "t", 5, 66, 304, 0],
            [1, "t", 0, 67, 304, 0],
            [1, "b", 2, 72, 304, 0],
            [1, "t", 0, 71, 303, 0],
            [1, "t", 4, 72, 303, 0],
            [1, "t", 4, 74, 304, 0],
            [1, "t", 2, 74, 303, 0],
            [1, "t", 3, 75, 304, 0],
            [1, "t", 1, 77, 303, 0],
            [1, "t", 4, 78, 303, 0],
            [1, "t", 4, 79, 304, 0],
            [1, "t", 2, 80, 304, 0],
            [1, "b", 1, 81, 304, 0],
            [1, "t", 2, 81, 303, 0],
            [1, "t", 5, 82, 303, 0],
            [1, "t", 1, 83, 303, 0],
            [1, "b", 2, 83, 304, 0],
            [1, "t", 1, 84, 304, 0],
            [1, "t", 4, 84, 303, 0],
            [1, "t", 5, 85, 304, 0],
            [1, "t", 3, 85, 303, 0],
            [1, "b", 2, 86, 304, 0],
            [1, "t", 1, 86, 303, 0],
            [1, "b", 3, 87, 303, 0],
            [1, "t", 4, 87, 304, 0],
            [1, "t", 4, 88, 303, 0],
            [1, "t", 0, 88, 304, 0],
            [1, "b", 1, 89, 303, 0],
            [1, "t", 3, 89, 304, 0],
            [1, "t", 3, 90, 303, 0],
            [1, "t", 4, 90, 304, 0],
            [1, "t", 4, 91, 303, 0],
            [1, "t", 0, 91, 304, 0],
            [1, "b", 2, 92, 303, 0],
            [1, "t", 4, 92, 304, 0],
            [1, "t", 5, 93, 303, 0],
            [1, "t", 0, 93, 304, 0],
            [1, "b", 3, 94, 303, 0],
            [1, "b", 0, 94, 304, 0],
            [1, "b", 0, 95, 303, 0],
            [1, "t", 2, 95, 304, 0],
            [1, "f", 1, 5, 151, 1],
            [1, "f", 2, 5, 153, 1],
            [1, "f", 0, 5, 152, 1],
            [1, "f", 0, 5, 147, 1],
            [1, "f", 0, 5, 144, 1],
            [1, "f", 0, 5, 140, 1],
            [1, "f", 1, 5, 149, 1],
            [1, "f", 1, 5, 146, 1],
            [1, "f", 1, 5, 143, 1],
            [1, "f", 1, 5, 141, 1],
            [1, "f", 2, 5, 150, 1],
            [1, "f", 2, 5, 148, 1],
            [1, "f", 2, 5, 145, 1],
            [1, "f", 2, 5, 142, 1],
            [1, "f", 2, 5, 139, 1],
            [1, "f", 2, 5, 136, 1],
            [1, "f", 2, 5, 133, 1],
            [1, "f", 2, 5, 131, 1],
            [1, "f", 2, 5, 127, 1],
            [1, "f", 2, 5, 125, 1],
            [1, "f", 1, 5, 138, 1],
            [1, "f", 1, 5, 135, 1],
            [1, "f", 1, 5, 132, 1],
            [1, "f", 1, 5, 130, 1],
            [1, "f", 1, 5, 128, 1],
            [1, "f", 1, 5, 126, 1],
            [1, "f", 1, 5, 124, 1],
            [1, "f", 0, 5, 129, 1],
            [1, "f", 0, 5, 134, 1],
            [1, "f", 0, 5, 137, 1],
            [1, "f", 0, 5, 123, 1],
            [1, "f", 1, 5, 122, 1],
            [1, "f", 1, 5, 120, 1],
            [1, "f", 1, 5, 117, 1],
            [1, "f", 1, 5, 115, 1],
            [1, "f", 1, 5, 111, 1],
            [1, "f", 1, 5, 108, 1],
            [1, "f", 2, 5, 121, 1],
            [1, "f", 2, 5, 118, 1],
            [1, "f", 2, 5, 116, 1],
            [1, "f", 2, 5, 113, 1],
            [1, "f", 2, 5, 110, 1],
            [1, "f", 0, 5, 119, 1],
            [1, "f", 0, 5, 114, 1],
            [1, "f", 0, 5, 112, 1],
            [1, "f", 0, 5, 109, 1],
            [1, "f", 1, 5, 106, 1],
            [1, "f", 1, 5, 103, 1],
            [1, "f", 1, 5, 100, 1],
            [1, "f", 1, 5, 97, 1],
            [1, "f", 1, 5, 95, 1],
            [1, "f", 2, 5, 107, 1],
            [1, "f", 2, 5, 105, 1],
            [1, "f", 2, 5, 102, 1],
            [1, "f", 2, 5, 99, 1],
            [1, "f", 2, 5, 96, 1],
            [1, "f", 2, 5, 94, 1],
            [1, "f", 0, 5, 104, 1],
            [1, "f", 0, 5, 101, 1],
            [1, "f", 0, 5, 98, 1],
            [1, "f", 0, 5, 93, 1],
            [1, "f", 1, 5, 92, 1],
            [1, "f", 1, 5, 89, 1],
            [1, "f", 1, 5, 86, 1],
            [1, "f", 1, 5, 83, 1],
            [1, "f", 1, 5, 80, 1],
            [1, "f", 1, 5, 78, 1],
            [1, "f", 2, 5, 90, 1],
            [1, "f", 2, 5, 88, 1],
            [1, "f", 2, 5, 85, 1],
            [1, "f", 2, 5, 82, 1],
            [1, "f", 2, 5, 79, 1],
            [1, "f", 2, 5, 77, 1],
            [1, "f", 2, 5, 75, 1],
            [1, "f", 2, 5, 72, 1],
            [1, "f", 0, 5, 91, 1],
            [1, "f", 0, 5, 87, 1],
            [1, "f", 0, 5, 84, 1],
            [1, "f", 0, 5, 81, 1],
            [1, "f", 0, 5, 76, 1],
            [1, "f", 0, 5, 74, 1],
            [1, "f", 1, 5, 73, 1],
            [1, "f", 1, 5, 71, 1],
            [1, "f", 1, 5, 68, 1],
            [1, "f", 1, 5, 66, 1],
            [1, "f", 1, 5, 62, 1],
            [1, "f", 1, 5, 59, 1],
            [1, "f", 1, 5, 56, 1],
            [1, "f", 1, 5, 53, 1],
            [1, "f", 1, 5, 50, 1],
            [1, "f", 2, 5, 70, 1],
            [1, "f", 2, 5, 67, 1],
            [1, "f", 2, 5, 65, 1],
            [1, "f", 2, 5, 63, 1],
            [1, "f", 2, 5, 60, 1],
            [1, "f", 2, 5, 57, 1],
            [1, "f", 2, 5, 54, 1],
            [1, "f", 2, 5, 51, 1],
            [1, "f", 0, 5, 69, 1],
            [1, "f", 0, 5, 64, 1],
            [1, "f", 0, 5, 61, 1],
            [1, "f", 0, 5, 58, 1],
            [1, "f", 0, 5, 55, 1],
            [1, "f", 0, 5, 52, 1],
            [1, "f", 0, 5, 49, 1],
            [1, "f", 0, 5, 45, 1],
            [1, "f", 0, 5, 42, 1],
            [1, "f", 0, 5, 38, 1],
            [1, "f", 0, 5, 34, 1],
            [1, "f", 0, 5, 31, 1],
            [1, "f", 1, 5, 48, 1],
            [1, "f", 1, 5, 44, 1],
            [1, "f", 1, 5, 41, 1],
            [1, "f", 1, 5, 37, 1],
            [1, "f", 1, 5, 33, 1],
            [1, "f", 1, 5, 29, 1],
            [1, "f", 2, 5, 30, 1],
            [1, "f", 2, 5, 32, 1],
            [1, "f", 2, 5, 35, 1],
            [1, "f", 2, 5, 39, 1],
            [1, "f", 2, 5, 46, 1],
            [1, "f", 2, 5, 43, 1],
            [1, "f", 1, 5, 47, 1],
            [1, "f", 0, 5, 40, 1],
            [1, "f", 0, 5, 36, 1],
            [1, "f", 0, 5, 28, 1],
            [1, "f", 1, 5, 25, 1],
            [1, "f", 1, 5, 22, 1],
            [1, "f", 1, 5, 20, 1],
            [1, "f", 1, 5, 16, 1],
            [1, "f", 1, 5, 13, 1],
            [1, "f", 1, 5, 10, 1],
            [1, "f", 2, 5, 27, 1],
            [1, "f", 2, 5, 24, 1],
            [1, "f", 2, 5, 21, 1],
            [1, "f", 2, 5, 19, 1],
            [1, "f", 2, 5, 15, 1],
            [1, "f", 2, 5, 12, 1],
            [1, "f", 2, 5, 9, 1],
            [1, "f", 0, 5, 26, 1],
            [1, "f", 0, 5, 23, 1],
            [1, "f", 0, 5, 14, 1],
            [1, "f", 0, 5, 11, 1],
            [1, "f", 0, 5, 17, 1],
            [1, "f", 1, 5, 18, 1],
            [1, "f", 1, 5, 8, 1],
            [1, "f", 0, 5, 7, 1],
            [1, "f", 1, 5, 6, 1],
            [1, "f", 0, 5, 5, 1],
            [1, "f", 1, 6, 5, 1],
            [1, "f", 2, 7, 5, 1],
            [1, "f", 0, 8, 5, 1],
            [1, "f", 1, 9, 5, 1],
            [1, "f", 1, 12, 5, 1],
            [1, "f", 1, 15, 5, 1],
            [1, "f", 1, 17, 5, 1],
            [1, "f", 1, 22, 5, 1],
            [1, "f", 1, 26, 5, 1],
            [1, "f", 2, 10, 5, 1],
            [1, "f", 2, 13, 5, 1],
            [1, "f", 2, 16, 5, 1],
            [1, "f", 2, 18, 5, 1],
            [1, "f", 2, 21, 5, 1],
            [1, "f", 2, 23, 5, 1],
            [1, "f", 2, 25, 5, 1],
            [1, "f", 2, 27, 5, 1],
            [1, "f", 0, 11, 5, 1],
            [1, "f", 0, 14, 5, 1],
            [1, "f", 0, 19, 5, 1],
            [1, "f", 0, 24, 5, 1],
            [1, "f", 0, 28, 5, 1],
            [1, "f", 1, 20, 5, 1],
            [1, "f", 1, 29, 5, 1],
            [1, "f", 1, 32, 5, 1],
            [1, "f", 1, 35, 5, 1],
            [1, "f", 1, 38, 5, 1],
            [1, "f", 1, 41, 5, 1],
            [1, "f", 1, 45, 5, 1],
            [1, "f", 2, 30, 5, 1],
            [1, "f", 2, 33, 5, 1],
            [1, "f", 2, 36, 5, 1],
            [1, "f", 2, 39, 5, 1],
            [1, "f", 2, 42, 5, 1],
            [1, "f", 2, 44, 5, 1],
            [1, "f", 2, 46, 5, 1],
            [1, "f", 0, 43, 5, 1],
            [1, "f", 0, 40, 5, 1],
            [1, "f", 0, 37, 5, 1],
            [1, "f", 0, 34, 5, 1],
            [1, "f", 0, 31, 5, 1],
            [1, "f", 0, 47, 5, 1],
            [1, "f", 1, 48, 5, 1],
            [1, "f", 1, 51, 5, 1],
            [1, "f", 1, 53, 5, 1],
            [1, "f", 1, 57, 5, 1],
            [1, "f", 1, 60, 5, 1],
            [1, "f", 1, 63, 5, 1],
            [1, "f", 1, 65, 5, 1],
            [1, "f", 2, 64, 5, 1],
            [1, "f", 2, 62, 5, 1],
            [1, "f", 2, 59, 5, 1],
            [1, "f", 2, 56, 5, 1],
            [1, "f", 2, 52, 5, 1],
            [1, "f", 2, 49, 5, 1],
            [1, "f", 2, 54, 5, 1],
            [1, "f", 0, 50, 5, 1],
            [1, "f", 0, 55, 5, 1],
            [1, "f", 0, 58, 5, 1],
            [1, "f", 0, 61, 5, 1],
            [1, "f", 0, 66, 5, 1],
            [1, "f", 1, 67, 5, 1],
            [1, "f", 1, 70, 5, 1],
            [1, "f", 1, 72, 5, 1],
            [1, "f", 1, 75, 5, 1],
            [1, "f", 1, 79, 5, 1],
            [1, "f", 2, 68, 5, 1],
            [1, "f", 2, 71, 5, 1],
            [1, "f", 2, 74, 5, 1],
            [1, "f", 2, 76, 5, 1],
            [1, "f", 2, 78, 5, 1],
            [1, "f", 0, 69, 5, 1],
            [1, "f", 0, 73, 5, 1],
            [1, "f", 0, 77, 5, 1],
            [1, "f", 0, 80, 5, 1],
            [1, "f", 1, 81, 5, 1],
            [1, "f", 1, 84, 5, 1],
            [1, "f", 1, 87, 5, 1],
            [1, "f", 1, 89, 5, 1],
            [1, "f", 1, 92, 5, 1],
            [1, "f", 1, 94, 5, 1],
            [1, "f", 0, 82, 5, 1],
            [1, "f", 2, 83, 5, 1],
            [1, "f", 2, 85, 5, 1],
            [1, "f", 2, 88, 5, 1],
            [1, "f", 2, 90, 5, 1],
            [1, "f", 2, 93, 5, 1],
            [1, "f", 2, 95, 5, 1],
            [1, "f", 0, 86, 5, 1],
            [1, "f", 0, 91, 5, 1],
            [1, "f", 2, 6, 153, 1],
            [1, "f", 1, 6, 152, 1],
            [1, "t", 1, 93, 301, 0],
            [1, "t", 3, 94, 302, 0],
            [1, "t", 5, 95, 302, 0],
            [1, "t", 5, 93, 302, 0],
            [1, "b", 3, 92, 302, 0],
            [1, "t", 1, 91, 302, 0],
            [1, "t", 5, 90, 302, 0],
            [1, "b", 2, 92, 301, 0],
            [1, "t", 1, 91, 301, 0],
            [1, "t", 2, 90, 301, 0],
            [1, "b", 2, 89, 302, 0],
            [1, "t", 4, 89, 301, 0],
            [1, "t", 1, 88, 302, 0],
            [1, "t", 2, 88, 301, 0],
            [1, "t", 3, 87, 302, 0],
            [1, "t", 4, 87, 299, 0],
            [1, "t", 4, 86, 302, 0],
            [1, "t", 1, 85, 302, 0],
            [1, "t", 5, 85, 301, 0],
            [1, "b", 2, 84, 302, 0],
            [1, "t", 5, 83, 302, 0],
            [1, "t", 1, 82, 302, 0],
            [1, "t", 5, 81, 302, 0],
            [1, "t", 2, 80, 302, 0],
            [1, "t", 4, 79, 302, 0],
            [1, "t", 2, 78, 302, 0],
            [1, "b", 1, 77, 302, 0],
            [1, "b", 2, 76, 302, 0],
            [1, "t", 2, 75, 302, 0],
            [1, "t", 4, 74, 302, 0],
            [1, "b", 1, 73, 302, 0],
            [1, "t", 2, 72, 302, 0],
            [1, "t", 4, 71, 302, 0],
            [1, "b", 3, 70, 302, 0],
            [1, "t", 1, 69, 302, 0],
            [1, "t", 2, 68, 302, 0],
            [1, "t", 5, 67, 302, 0],
            [1, "b", 1, 66, 302, 0],
            [1, "t", 2, 65, 302, 0],
            [1, "t", 4, 64, 302, 0],
            [1, "b", 3, 63, 302, 0],
            [1, "t", 5, 62, 302, 0],
            [1, "b", 1, 61, 302, 0],
            [1, "t", 3, 60, 302, 0],
            [1, "t", 4, 59, 302, 0],
            [1, "b", 2, 58, 302, 0],
            [1, "t", 5, 57, 302, 0],
            [1, "t", 1, 56, 302, 0],
            [1, "t", 3, 55, 302, 0],
            [1, "t", 4, 54, 302, 0],
            [1, "t", 1, 53, 302, 0],
            [1, "t", 5, 52, 302, 0],
            [1, "t", 2, 51, 302, 0],
            [1, "t", 4, 50, 302, 0],
            [1, "t", 2, 49, 302, 0],
            [1, "b", 1, 48, 302, 0],
            [1, "t", 3, 47, 302, 0],
            [1, "t", 4, 46, 302, 0],
            [1, "t", 1, 45, 302, 0],
            [1, "t", 2, 44, 302, 0],
            [1, "t", 5, 43, 302, 0],
            [1, "t", 2, 42, 302, 0],
            [1, "t", 1, 41, 302, 0],
            [1, "t", 4, 40, 302, 0],
            [1, "b", 2, 39, 302, 0],
            [1, "t", 5, 38, 302, 0],
            [1, "t", 1, 37, 302, 0],
            [1, "t", 2, 36, 302, 0],
            [1, "t", 5, 35, 302, 0],
            [1, "t", 0, 34, 302, 0],
            [1, "t", 3, 33, 302, 0],
            [1, "t", 4, 32, 302, 0],
            [1, "b", 1, 31, 302, 0],
            [1, "t", 2, 30, 302, 0],
            [1, "t", 4, 29, 302, 0],
            [1, "t", 2, 28, 302, 0],
            [1, "t", 5, 27, 302, 0],
            [1, "b", 3, 26, 302, 0],
            [1, "t", 1, 25, 302, 0],
            [1, "t", 4, 24, 302, 0],
            [1, "t", 2, 23, 302, 0],
            [1, "t", 1, 22, 302, 0],
            [1, "t", 5, 21, 302, 0],
            [1, "t", 2, 20, 302, 0],
            [1, "t", 4, 19, 302, 0],
            [1, "b", 1, 18, 302, 0],
            [1, "t", 5, 17, 302, 0],
            [1, "t", 3, 16, 302, 0],
            [1, "t", 1, 15, 302, 0],
            [1, "t", 5, 14, 302, 0],
            [1, "t", 3, 13, 302, 0],
            [1, "t", 4, 12, 302, 0],
            [1, "t", 1, 11, 302, 0],
            [1, "t", 2, 10, 302, 0],
            [1, "t", 4, 9, 302, 0],
            [1, "b", 3, 8, 302, 0],
            [1, "t", 5, 8, 302, 0],
            [1, "t", 5, 7, 302, 0],
            [1, "b", 2, 6, 302, 0],
            [1, "t", 1, 6, 301, 0],
            [1, "t", 4, 6, 300, 0],
            [1, "t", 2, 6, 299, 0],
            [1, "b", 0, 6, 298, 0],
            [1, "t", 5, 6, 297, 0],
            [1, "t", 2, 6, 296, 0],
            [1, "t", 0, 6, 295, 0],
            [1, "b", 2, 6, 294, 0],
            [1, "t", 5, 6, 293, 0],
            [1, "t", 1, 6, 292, 0],
            [1, "b", 0, 6, 291, 0],
            [1, "t", 2, 6, 290, 0],
            [1, "t", 5, 6, 289, 0],
            [1, "t", 1, 6, 288, 0],
            [1, "t", 4, 6, 287, 0],
            [1, "t", 2, 6, 286, 0],
            [1, "t", 5, 6, 285, 0],
            [1, "t", 2, 6, 284, 0],
            [1, "b", 0, 6, 283, 0],
            [1, "t", 2, 6, 282, 0],
            [1, "t", 5, 6, 281, 0],
            [1, "b", 2, 6, 280, 0],
            [1, "t", 5, 6, 279, 0],
            [1, "t", 1, 6, 278, 0],
            [1, "t", 4, 6, 277, 0],
            [1, "t", 3, 6, 276, 0],
            [1, "t", 5, 6, 275, 0],
            [1, "b", 0, 6, 274, 0],
            [1, "t", 5, 6, 273, 0],
            [1, "t", 1, 6, 272, 0],
            [1, "t", 4, 6, 271, 0],
            [1, "b", 3, 6, 270, 0],
            [1, "t", 5, 6, 269, 0],
            [1, "t", 1, 6, 268, 0],
            [1, "t", 4, 6, 267, 0],
            [1, "t", 1, 6, 266, 0],
            [1, "t", 3, 6, 265, 0],
            [1, "t", 4, 6, 264, 0],
            [1, "b", 2, 6, 263, 0],
            [1, "t", 5, 6, 262, 0],
            [1, "t", 3, 6, 261, 0],
            [1, "t", 0, 6, 260, 0],
            [1, "t", 5, 6, 259, 0],
            [1, "t", 1, 6, 258, 0],
            [1, "t", 3, 6, 257, 0],
            [1, "t", 4, 6, 255, 0],
            [1, "t", 3, 6, 254, 0],
            [1, "t", 5, 6, 253, 0],
            [1, "b", 2, 6, 252, 0],
            [1, "t", 5, 6, 251, 0],
            [1, "t", 1, 6, 250, 0],
            [1, "t", 3, 6, 249, 0],
            [1, "t", 4, 6, 248, 0],
            [1, "b", 3, 6, 247, 0],
            [1, "t", 5, 6, 246, 0],
            [1, "t", 3, 6, 245, 0],
            [1, "t", 5, 6, 244, 0],
            [1, "t", 0, 6, 243, 0],
            [1, "t", 4, 6, 242, 0],
            [1, "t", 3, 6, 241, 0],
            [1, "t", 5, 6, 240, 0],
            [1, "b", 0, 6, 239, 0],
            [1, "t", 3, 6, 238, 0],
            [1, "t", 4, 6, 237, 0],
            [1, "t", 1, 6, 236, 0],
            [1, "t", 5, 6, 235, 0],
            [1, "b", 2, 6, 234, 0],
            [1, "t", 2, 6, 233, 0],
            [1, "t", 4, 6, 232, 0],
            [1, "b", 3, 6, 231, 0],
            [1, "t", 5, 6, 230, 0],
            [1, "t", 1, 6, 229, 0],
            [1, "t", 2, 6, 228, 0],
            [1, "t", 5, 6, 227, 0],
            [1, "b", 2, 6, 226, 0],
            [1, "t", 4, 6, 225, 0],
            [1, "t", 0, 6, 224, 0],
            [1, "t", 2, 6, 223, 0],
            [1, "t", 0, 6, 222, 0],
            [1, "b", 2, 6, 221, 0],
            [1, "t", 4, 6, 220, 0],
            [1, "b", 3, 6, 219, 0],
            [1, "t", 5, 6, 218, 0],
            [1, "t", 0, 6, 217, 0],
            [1, "t", 3, 6, 216, 0],
            [1, "b", 0, 6, 215, 0],
            [1, "t", 4, 6, 214, 0],
            [1, "t", 2, 6, 213, 0],
            [1, "t", 0, 6, 212, 0],
            [1, "t", 2, 6, 211, 0],
            [1, "b", 3, 6, 210, 0],
            [1, "t", 0, 6, 209, 0],
            [1, "t", 5, 6, 207, 0],
            [1, "t", 2, 6, 208, 0],
            [1, "t", 0, 6, 206, 0],
            [1, "t", 2, 6, 205, 0],
            [1, "t", 2, 6, 203, 0],
            [1, "b", 0, 6, 202, 0],
            [1, "t", 3, 6, 201, 0],
            [1, "t", 4, 6, 199, 0],
            [1, "t", 0, 6, 198, 0],
            [1, "t", 2, 6, 197, 0],
            [1, "t", 4, 6, 196, 0],
            [1, "t", 1, 6, 195, 0],
            [1, "t", 3, 6, 194, 0],
            [1, "t", 4, 6, 192, 0],
            [1, "t", 2, 6, 191, 0],
            [1, "b", 0, 6, 190, 0],
            [1, "t", 3, 6, 189, 0],
            [1, "t", 4, 6, 187, 0],
            [1, "b", 0, 6, 186, 0],
            [1, "t", 2, 6, 185, 0],
            [1, "t", 4, 6, 184, 0],
            [1, "t", 2, 6, 183, 0],
            [1, "t", 0, 6, 182, 0],
            [1, "b", 2, 6, 181, 0],
            [1, "t", 5, 6, 180, 0],
            [1, "t", 2, 6, 179, 0],
            [1, "t", 0, 6, 178, 0],
            [1, "t", 2, 6, 177, 0],
            [1, "t", 4, 6, 176, 0],
            [1, "b", 2, 6, 175, 0],
            [1, "t", 1, 6, 174, 0],
            [1, "t", 5, 6, 173, 0],
            [1, "t", 2, 6, 256, 0],
            [1, "t", 4, 6, 204, 0],
            [1, "t", 4, 6, 200, 0],
            [1, "t", 2, 6, 193, 0],
            [1, "t", 2, 6, 188, 0],
            [1, "f", 1, 6, 150, 1],
            [1, "f", 2, 6, 151, 1],
            [1, "f", 2, 6, 149, 1],
            [1, "f", 1, 6, 148, 1],
            [1, "f", 2, 6, 147, 1],
            [1, "f", 2, 6, 145, 1],
            [1, "f", 2, 6, 143, 1],
            [1, "f", 1, 6, 146, 1],
            [1, "f", 1, 6, 144, 1],
            [1, "f", 1, 6, 142, 1],
            [1, "f", 2, 6, 141, 1],
            [1, "f", 2, 6, 139, 1],
            [1, "f", 2, 6, 137, 1],
            [1, "f", 2, 6, 135, 1],
            [1, "f", 2, 6, 133, 1],
            [1, "f", 1, 6, 140, 1],
            [1, "f", 1, 6, 138, 1],
            [1, "f", 1, 6, 136, 1],
            [1, "f", 1, 6, 134, 1],
            [1, "f", 1, 6, 132, 1],
            [1, "f", 2, 6, 131, 1],
            [1, "f", 2, 6, 129, 1],
            [1, "f", 2, 6, 127, 1],
            [1, "f", 2, 6, 125, 1],
            [1, "f", 2, 6, 123, 1],
            [1, "f", 2, 6, 121, 1],
            [1, "f", 1, 6, 130, 1],
            [1, "f", 1, 6, 128, 1],
            [1, "f", 1, 6, 126, 1],
            [1, "f", 1, 6, 124, 1],
            [1, "f", 1, 6, 122, 1],
            [1, "f", 1, 6, 120, 1],
            [1, "f", 2, 6, 119, 1],
            [1, "f", 2, 6, 117, 1],
            [1, "f", 2, 6, 115, 1],
            [1, "f", 2, 6, 113, 1],
            [1, "f", 2, 6, 111, 1],
            [1, "f", 2, 6, 109, 1],
            [1, "f", 1, 6, 118, 1],
            [1, "f", 1, 6, 116, 1],
            [1, "f", 1, 6, 114, 1],
            [1, "f", 1, 6, 112, 1],
            [1, "f", 1, 6, 110, 1],
            [1, "f", 1, 6, 108, 1],
            [1, "f", 1, 6, 106, 1],
            [1, "f", 1, 6, 104, 1],
            [1, "f", 2, 6, 107, 1],
            [1, "f", 2, 6, 105, 1],
            [1, "f", 2, 6, 103, 1],
            [1, "f", 2, 6, 101, 1],
            [1, "f", 2, 6, 99, 1],
            [1, "f", 2, 6, 97, 1],
            [1, "f", 2, 6, 95, 1],
            [1, "f", 2, 6, 93, 1],
            [1, "f", 2, 6, 91, 1],
            [1, "f", 1, 6, 102, 1],
            [1, "f", 1, 6, 100, 1],
            [1, "f", 1, 6, 98, 1],
            [1, "f", 1, 6, 96, 1],
            [1, "f", 1, 6, 94, 1],
            [1, "f", 1, 6, 92, 1],
            [1, "f", 1, 6, 90, 1],
            [1, "f", 1, 6, 88, 1],
            [1, "f", 1, 6, 86, 1],
            [1, "f", 2, 6, 89, 1],
            [1, "f", 2, 6, 87, 1],
            [1, "f", 2, 6, 85, 1],
            [1, "f", 2, 6, 83, 1],
            [1, "f", 2, 6, 81, 1],
            [1, "f", 2, 6, 79, 1],
            [1, "f", 2, 6, 77, 1],
            [1, "f", 1, 6, 84, 1],
            [1, "f", 1, 6, 82, 1],
            [1, "f", 1, 6, 80, 1],
            [1, "f", 1, 6, 78, 1],
            [1, "f", 1, 6, 76, 1],
            [1, "f", 2, 6, 75, 1],
            [1, "f", 2, 6, 73, 1],
            [1, "f", 2, 6, 71, 1],
            [1, "f", 2, 6, 69, 1],
            [1, "f", 2, 6, 67, 1],
            [1, "f", 2, 6, 65, 1],
            [1, "f", 1, 6, 74, 1],
            [1, "f", 1, 6, 72, 1],
            [1, "f", 1, 6, 70, 1],
            [1, "f", 1, 6, 68, 1],
            [1, "f", 1, 6, 66, 1],
            [1, "f", 1, 6, 64, 1],
            [1, "f", 2, 6, 63, 1],
            [1, "f", 2, 6, 61, 1],
            [1, "f", 2, 6, 59, 1],
            [1, "f", 2, 6, 57, 1],
            [1, "f", 2, 6, 55, 1],
            [1, "f", 2, 6, 53, 1],
            [1, "f", 2, 6, 51, 1],
            [1, "f", 1, 6, 62, 1],
            [1, "f", 1, 6, 60, 1],
            [1, "f", 1, 6, 58, 1],
            [1, "f", 1, 6, 56, 1],
            [1, "f", 1, 6, 54, 1],
            [1, "f", 1, 6, 52, 1],
            [1, "f", 1, 6, 50, 1],
            [1, "f", 2, 6, 49, 1],
            [1, "f", 2, 6, 47, 1],
            [1, "f", 2, 6, 45, 1],
            [1, "f", 2, 6, 43, 1],
            [1, "f", 2, 6, 41, 1],
            [1, "f", 2, 6, 39, 1],
            [1, "f", 1, 6, 48, 1],
            [1, "f", 1, 6, 46, 1],
            [1, "f", 1, 6, 44, 1],
            [1, "f", 1, 6, 42, 1],
            [1, "f", 1, 6, 40, 1],
            [1, "f", 1, 6, 38, 1],
            [1, "f", 2, 6, 37, 1],
            [1, "f", 2, 6, 35, 1],
            [1, "f", 2, 6, 33, 1],
            [1, "f", 2, 6, 31, 1],
            [1, "f", 2, 6, 29, 1],
            [1, "f", 2, 6, 27, 1],
            [1, "f", 1, 6, 36, 1],
            [1, "f", 1, 6, 34, 1],
            [1, "f", 1, 6, 32, 1],
            [1, "f", 1, 6, 30, 1],
            [1, "f", 1, 6, 28, 1],
            [1, "f", 1, 6, 26, 1],
            [1, "f", 2, 6, 25, 1],
            [1, "f", 2, 6, 23, 1],
            [1, "f", 2, 6, 21, 1],
            [1, "f", 2, 6, 19, 1],
            [1, "f", 2, 6, 17, 1],
            [1, "f", 2, 6, 15, 1],
            [1, "f", 1, 6, 24, 1],
            [1, "f", 1, 6, 22, 1],
            [1, "f", 1, 6, 20, 1],
            [1, "f", 1, 6, 18, 1],
            [1, "f", 1, 6, 16, 1],
            [1, "f", 2, 6, 13, 1],
            [1, "f", 2, 6, 11, 1],
            [1, "f", 2, 6, 9, 1],
            [1, "f", 2, 6, 7, 1],
            [1, "f", 1, 6, 14, 1],
            [1, "f", 1, 6, 12, 1],
            [1, "f", 1, 6, 10, 1],
            [1, "f", 1, 6, 8, 1],
            [1, "f", 1, 6, 6, 1],
            [1, "f", 1, 8, 6, 1],
            [1, "f", 2, 7, 6, 1],
            [1, "f", 2, 9, 6, 1],
            [1, "f", 2, 11, 6, 1],
            [1, "f", 2, 13, 6, 1],
            [1, "f", 2, 15, 6, 1],
            [1, "f", 1, 10, 6, 1],
            [1, "f", 1, 12, 6, 1],
            [1, "f", 1, 14, 6, 1],
            [1, "f", 1, 16, 6, 1],
            [1, "f", 1, 18, 6, 1],
            [1, "f", 1, 20, 6, 1],
            [1, "f", 1, 22, 6, 1],
            [1, "f", 1, 24, 6, 1],
            [1, "f", 1, 26, 6, 1],
            [1, "f", 2, 17, 6, 1],
            [1, "f", 2, 19, 6, 1],
            [1, "f", 2, 21, 6, 1],
            [1, "f", 2, 23, 6, 1],
            [1, "f", 2, 25, 6, 1],
            [1, "f", 2, 27, 6, 1],
            [1, "f", 2, 29, 6, 1],
            [1, "f", 2, 31, 6, 1],
            [1, "f", 2, 33, 6, 1],
            [1, "f", 1, 28, 6, 1],
            [1, "f", 1, 30, 6, 1],
            [1, "f", 1, 32, 6, 1],
            [1, "f", 1, 34, 6, 1],
            [1, "f", 2, 67, 6, 1],
            [1, "f", 2, 69, 6, 1],
            [1, "f", 2, 71, 6, 1],
            [1, "f", 2, 73, 6, 1],
            [1, "f", 2, 75, 6, 1],
            [1, "f", 1, 68, 6, 1],
            [1, "f", 1, 70, 6, 1],
            [1, "f", 1, 72, 6, 1],
            [1, "f", 1, 74, 6, 1],
            [1, "f", 1, 76, 6, 1],
            [1, "f", 2, 77, 6, 1],
            [1, "f", 2, 79, 6, 1],
            [1, "f", 2, 81, 6, 1],
            [1, "f", 2, 83, 6, 1],
            [1, "f", 2, 85, 6, 1],
            [1, "f", 1, 78, 6, 1],
            [1, "f", 1, 80, 6, 1],
            [1, "f", 1, 82, 6, 1],
            [1, "f", 1, 84, 6, 1],
            [1, "f", 1, 86, 6, 1],
            [1, "f", 2, 87, 6, 1],
            [1, "f", 2, 89, 6, 1],
            [1, "f", 2, 91, 6, 1],
            [1, "f", 2, 93, 6, 1],
            [1, "f", 1, 88, 6, 1],
            [1, "f", 1, 90, 6, 1],
            [1, "f", 1, 92, 6, 1],
            [1, "f", 1, 94, 6, 1],
            [1, "f", 2, 95, 6, 1],
            [1, "f", 1, 95, 7, 1],
            [1, "f", 1, 83, 7, 1],
            [1, "f", 1, 81, 7, 1],
            [1, "f", 1, 79, 7, 1],
            [1, "f", 1, 77, 7, 1],
            [1, "f", 1, 75, 7, 1],
            [1, "f", 1, 73, 7, 1],
            [1, "f", 1, 71, 7, 1],
            [1, "f", 1, 69, 7, 1],
            [1, "f", 1, 33, 7, 1],
            [1, "f", 1, 31, 7, 1],
            [1, "f", 1, 29, 7, 1],
            [1, "f", 1, 27, 7, 1],
            [1, "f", 1, 25, 7, 1],
            [1, "f", 1, 23, 7, 1],
            [1, "f", 1, 21, 7, 1],
            [1, "f", 1, 19, 7, 1],
            [1, "f", 1, 17, 7, 1],
            [1, "f", 1, 15, 7, 1],
            [1, "f", 1, 13, 7, 1],
            [1, "f", 1, 11, 7, 1],
            [1, "f", 1, 9, 7, 1],
            [1, "f", 1, 7, 7, 1],
            [1, "s", 0, 7, 8, 1],
            [1, "t", 4, 7, 174, 0],
            [1, "t", 5, 7, 175, 0],
            [1, "t", 4, 7, 176, 0],
            [1, "b", 2, 7, 177, 0],
            [1, "t", 3, 94, 301, 0],
            [1, "b", 3, 95, 301, 0],
            [1, "t", 4, 96, 301, 0],
            [1, "t", 1, 97, 301, 0],
            [1, "t", 2, 98, 301, 0],
            [1, "t", 4, 99, 301, 0],
            [1, "t", 2, 100, 301, 0],
            [1, "t", 4, 96, 304, 0],
            [1, "t", 2, 96, 302, 0],
            [1, "t", 2, 97, 304, 0],
            [1, "t", 2, 96, 303, 0],
            [1, "t", 5, 97, 303, 0],
            [1, "t", 5, 98, 304, 0],
            [1, "b", 2, 97, 302, 0],
            [1, "b", 2, 99, 304, 0],
            [1, "t", 1, 98, 303, 0],
            [1, "t", 4, 98, 302, 0],
            [1, "t", 4, 99, 303, 0],
            [1, "t", 4, 100, 304, 0],
            [1, "t", 5, 99, 302, 0],
            [1, "t", 5, 101, 303, 0],
            [1, "t", 2, 100, 303, 0],
            [1, "t", 0, 100, 302, 0],
            [1, "t", 0, 101, 304, 0],
            [1, "t", 4, 102, 304, 0],
            [1, "f", 0, 94, 7, 1],
            [1, "f", 1, 93, 7, 1],
            [1, "f", 1, 92, 7, 1],
            [1, "f", 0, 91, 7, 1],
            [1, "f", 1, 90, 7, 1],
            [1, "f", 1, 89, 7, 1],
            [1, "f", 0, 88, 7, 1],
            [1, "f", 1, 87, 7, 1],
            [1, "f", 1, 86, 7, 1],
            [1, "f", 1, 85, 7, 1],
            [1, "f", 0, 84, 7, 1],
            [1, "f", 1, 82, 7, 1],
            [1, "f", 0, 80, 7, 1],
            [1, "f", 1, 78, 7, 1],
            [1, "f", 0, 76, 7, 1],
            [1, "f", 1, 74, 7, 1],
            [1, "f", 0, 72, 7, 1],
            [1, "f", 0, 70, 7, 1],
            [1, "f", 1, 68, 7, 1],
            [1, "f", 1, 32, 7, 1],
            [1, "f", 0, 30, 7, 1],
            [1, "f", 1, 28, 7, 1],
            [1, "f", 0, 26, 7, 1],
            [1, "f", 1, 24, 7, 1],
            [1, "f", 0, 22, 7, 1],
            [1, "f", 1, 20, 7, 1],
            [1, "f", 0, 18, 7, 1],
            [1, "f", 1, 16, 7, 1],
            [1, "f", 0, 14, 7, 1],
            [1, "f", 1, 12, 7, 1],
            [1, "f", 0, 10, 7, 1],
            [1, "f", 1, 8, 7, 1],
            [1, "s", 1, 7, 9, 1],
            [1, "f", 0, 95, 152, 1],
            [1, "f", 1, 95, 151, 1],
            [1, "f", 0, 95, 11, 1],
            [1, "f", 1, 95, 12, 1],
            [1, "f", 1, 95, 14, 1],
            [1, "f", 1, 95, 19, 1],
            [1, "f", 0, 95, 15, 1],
            [1, "f", 0, 95, 20, 1],
            [1, "f", 1, 95, 21, 1],
            [1, "f", 1, 95, 26, 1],
            [1, "f", 1, 95, 37, 1],
            [1, "f", 0, 95, 44, 1],
            [1, "f", 1, 95, 50, 1],
            [1, "f", 1, 95, 52, 1],
            [1, "f", 0, 95, 53, 1],
            [1, "f", 1, 95, 54, 1],
            [1, "f", 1, 95, 62, 1],
            [1, "f", 0, 95, 55, 1],
            [1, "f", 1, 95, 64, 1],
            [1, "f", 0, 95, 58, 1],
            [1, "f", 0, 95, 61, 1],
            [1, "f", 0, 95, 68, 1],
            [1, "f", 0, 95, 72, 1],
            [1, "f", 0, 95, 78, 1],
            [1, "f", 1, 95, 115, 1],
            [1, "f", 1, 95, 117, 1],
            [1, "f", 1, 95, 128, 1],
            [1, "f", 0, 95, 85, 1],
            [1, "f", 0, 95, 91, 1],
            [1, "f", 0, 95, 95, 1],
            [1, "f", 0, 95, 114, 1],
            [1, "f", 2, 95, 113, 1],
            [1, "f", 1, 95, 119, 1],
            [1, "f", 0, 95, 120, 1],
            [1, "f", 1, 95, 121, 1],
            [1, "f", 0, 95, 127, 1],
            [1, "f", 1, 95, 130, 1],
            [1, "f", 0, 95, 131, 1],
            [1, "f", 1, 95, 132, 1],
            [1, "f", 1, 95, 136, 1],
            [1, "f", 0, 95, 137, 1],
            [1, "f", 0, 95, 143, 1],
            [1, "f", 0, 95, 147, 1],
            [1, "f", 1, 95, 138, 1],
            [1, "f", 1, 95, 144, 1],
            [1, "f", 1, 95, 10, 1],
            [1, "f", 0, 95, 8, 1],
            [1, "f", 1, 95, 9, 1],
            [1, "f", 0, 95, 13, 1],
            [1, "f", 1, 95, 16, 1],
            [1, "f", 1, 95, 17, 1],
            [1, "f", 0, 95, 18, 1],
            [1, "f", 1, 95, 45, 1],
            [1, "f", 0, 95, 51, 1],
            [1, "f", 1, 95, 56, 1],
            [1, "f", 1, 95, 57, 1],
            [1, "f", 1, 95, 59, 1],
            [1, "f", 1, 95, 60, 1],
            [1, "f", 1, 95, 63, 1],
            [1, "f", 0, 95, 65, 1],
            [1, "f", 1, 95, 66, 1],
            [1, "f", 1, 95, 67, 1],
            [1, "f", 1, 95, 69, 1],
            [1, "f", 1, 95, 70, 1],
            [1, "f", 0, 95, 71, 1],
            [1, "f", 1, 95, 73, 1],
            [1, "f", 1, 95, 74, 1],
            [1, "f", 0, 95, 75, 1],
            [1, "f", 1, 95, 76, 1],
            [1, "f", 1, 95, 77, 1],
            [1, "f", 1, 95, 79, 1],
            [1, "f", 1, 95, 80, 1],
            [1, "f", 0, 95, 81, 1],
            [1, "f", 1, 95, 82, 1],
            [1, "f", 0, 95, 83, 1],
            [1, "f", 1, 95, 84, 1],
            [1, "f", 1, 95, 86, 1],
            [1, "f", 1, 95, 88, 1],
            [1, "f", 0, 95, 87, 1],
            [1, "f", 1, 95, 89, 1],
            [1, "f", 1, 95, 90, 1],
            [1, "f", 1, 95, 92, 1],
            [1, "f", 1, 95, 93, 1],
            [1, "f", 1, 95, 94, 1],
            [1, "f", 1, 95, 96, 1],
            [1, "f", 1, 95, 97, 1],
            [1, "f", 0, 95, 98, 1],
            [1, "f", 1, 95, 99, 1],
            [1, "f", 1, 95, 100, 1],
            [1, "f", 0, 95, 101, 1],
            [1, "f", 1, 95, 102, 1],
            [1, "f", 0, 95, 103, 1],
            [1, "f", 1, 95, 104, 1],
            [1, "f", 1, 95, 105, 1],
            [1, "f", 0, 95, 106, 1],
            [1, "f", 1, 95, 107, 1],
            [1, "f", 1, 95, 108, 1],
            [1, "f", 1, 95, 109, 1],
            [1, "f", 0, 95, 110, 1],
            [1, "f", 1, 95, 111, 1],
            [1, "f", 0, 95, 112, 1],
            [1, "f", 1, 95, 116, 1],
            [1, "f", 0, 95, 118, 1],
            [1, "f", 0, 95, 122, 1],
            [1, "f", 1, 95, 123, 1],
            [1, "f", 1, 95, 124, 1],
            [1, "f", 0, 95, 125, 1],
            [1, "f", 1, 95, 126, 1],
            [1, "f", 1, 95, 129, 1],
            [1, "f", 1, 95, 133, 1],
            [1, "f", 0, 95, 134, 1],
            [1, "f", 1, 95, 135, 1],
            [1, "f", 1, 95, 139, 1],
            [1, "f", 0, 95, 140, 1],
            [1, "f", 1, 95, 141, 1],
            [1, "f", 1, 95, 142, 1],
            [1, "f", 1, 95, 146, 1],
            [1, "f", 0, 95, 145, 1],
            [1, "f", 1, 95, 148, 1],
            [1, "f", 1, 95, 149, 1],
            [1, "f", 1, 95, 150, 1],
            [1, "f", 1, 95, 153, 1],
            [1, "cs", 0, 64, 9, 1],
            [1, "cs", 1, 64, 10, 1],
            [1, "cs", 2, 64, 16, 1],
            [1, "cs", 2, 64, 19, 1],
            [1, "cs", 0, 64, 20, 1],
            [1, "cs", 1, 64, 21, 1],
            [1, "cs", 2, 64, 22, 1],
            [1, "cs", 0, 64, 23, 1],
            [1, "cs", 2, 64, 24, 1],
            [1, "cs", 1, 64, 29, 1],
            [1, "cs", 2, 64, 30, 1],
            [1, "cs", 3, 64, 31, 1],
            [1, "cs", 0, 64, 32, 1],
            [1, "cs", 1, 64, 33, 1],
            [1, "cs", 2, 64, 34, 1],
            [1, "cs", 0, 64, 35, 1],
            [1, "cs", 2, 64, 8, 1],
            [1, "cs", 2, 65, 8, 1],
            [1, "cs", 1, 65, 9, 1],
            [1, "cs", 2, 65, 10, 1],
            [1, "cs", 3, 65, 11, 1],
            [1, "cs", 1, 65, 16, 1],
            [1, "cs", 0, 64, 17, 1],
            [1, "cs", 3, 65, 17, 1],
            [1, "cs", 2, 64, 18, 1],
            [1, "cs", 2, 65, 18, 1],
            [1, "cs", 0, 65, 19, 1],
            [1, "cs", 1, 65, 20, 1],
            [1, "cs", 3, 65, 21, 1],
            [1, "cs", 2, 65, 22, 1],
            [1, "cs", 3, 65, 23, 1],
            [1, "cs", 0, 65, 24, 1],
            [1, "cs", 2, 65, 29, 1],
            [1, "cs", 3, 65, 30, 1],
            [1, "cs", 0, 65, 31, 1],
            [1, "cs", 1, 65, 32, 1],
            [1, "cs", 2, 65, 33, 1],
            [1, "cs", 3, 65, 34, 1],
            [1, "cs", 2, 63, 9, 1],
            [1, "cs", 0, 62, 9, 1],
            [1, "cs", 2, 61, 9, 1],
            [1, "cs", 0, 60, 9, 1],
            [1, "cs", 2, 59, 9, 1],
            [1, "cs", 2, 58, 9, 1],
            [1, "cs", 0, 57, 9, 1],
            [1, "cs", 2, 56, 9, 1],
            [1, "cs", 2, 55, 9, 1],
            [1, "cs", 2, 54, 9, 1],
            [1, "cs", 0, 53, 9, 1],
            [1, "cs", 0, 51, 9, 1],
            [1, "cs", 2, 52, 9, 1],
            [1, "cs", 2, 50, 9, 1],
            [1, "cs", 2, 48, 9, 1],
            [1, "cs", 2, 49, 9, 1],
            [1, "cs", 0, 47, 9, 1],
            [1, "cs", 0, 45, 9, 1],
            [1, "cs", 0, 43, 9, 1],
            [1, "cs", 2, 46, 9, 1],
            [1, "cs", 2, 44, 9, 1],
            [1, "cs", 2, 42, 9, 1],
            [1, "cs", 2, 41, 9, 1],
            [1, "cs", 0, 40, 9, 1],
            [1, "cs", 2, 39, 9, 1],
            [1, "cs", 2, 38, 9, 1],
            [1, "cs", 0, 37, 9, 1],
            [1, "cs", 0, 63, 8, 1],
            [1, "cs", 2, 65, 7, 1],
            [1, "cs", 3, 64, 7, 1],
            [1, "cs", 2, 62, 8, 1],
            [1, "cs", 3, 61, 8, 1],
            [1, "cs", 1, 62, 7, 1],
            [1, "cs", 2, 63, 7, 1],
            [1, "cs", 0, 64, 6, 1],
            [1, "cs", 3, 65, 6, 1],
            [1, "cs", 2, 63, 6, 1],
            [1, "cs", 2, 62, 6, 1],
            [1, "cs", 2, 61, 6, 1],
            [1, "cs", 2, 60, 6, 1],
            [1, "cs", 2, 59, 6, 1],
            [1, "cs", 2, 61, 7, 1],
            [1, "cs", 0, 60, 7, 1],
            [1, "cs", 2, 60, 8, 1],
            [1, "cs", 2, 59, 7, 1],
            [1, "cs", 2, 59, 8, 1],
            [1, "cs", 1, 58, 8, 1],
            [1, "cs", 1, 57, 6, 1],
            [1, "cs", 1, 55, 7, 1],
            [1, "cs", 0, 56, 6, 1],
            [1, "cs", 2, 58, 6, 1],
            [1, "cs", 2, 58, 7, 1],
            [1, "cs", 2, 57, 7, 1],
            [1, "cs", 2, 56, 7, 1],
            [1, "cs", 2, 55, 6, 1],
            [1, "cs", 2, 57, 8, 1],
            [1, "cs", 2, 56, 8, 1],
            [1, "cs", 2, 55, 8, 1],
            [1, "cs", 0, 54, 8, 1],
            [1, "cs", 0, 50, 7, 1],
            [1, "cs", 0, 53, 6, 1],
            [1, "cs", 2, 54, 6, 1],
            [1, "cs", 2, 54, 7, 1],
            [1, "cs", 2, 53, 7, 1],
            [1, "cs", 2, 52, 7, 1],
            [1, "cs", 2, 52, 6, 1],
            [1, "cs", 1, 52, 8, 1],
            [1, "cs", 2, 53, 8, 1],
            [1, "cs", 2, 51, 8, 1],
            [1, "cs", 2, 51, 7, 1],
            [1, "cs", 2, 51, 6, 1],
            [1, "cs", 2, 50, 6, 1],
            [1, "cs", 2, 50, 8, 1],
            [1, "cs", 2, 49, 8, 1],
            [1, "cs", 2, 49, 7, 1],
            [1, "cs", 2, 49, 6, 1],
            [1, "cs", 0, 46, 7, 1],
            [1, "cs", 1, 48, 8, 1],
            [1, "cs", 1, 44, 7, 1],
            [1, "cs", 1, 41, 8, 1],
            [1, "cs", 2, 48, 7, 1],
            [1, "cs", 2, 48, 6, 1],
            [1, "cs", 2, 47, 6, 1],
            [1, "cs", 2, 47, 7, 1],
            [1, "cs", 2, 47, 8, 1],
            [1, "cs", 2, 46, 8, 1],
            [1, "cs", 2, 45, 8, 1],
            [1, "cs", 2, 45, 7, 1],
            [1, "cs", 2, 45, 6, 1],
            [1, "cs", 2, 46, 6, 1],
            [1, "cs", 2, 44, 6, 1],
            [1, "cs", 2, 44, 8, 1],
            [1, "cs", 2, 43, 8, 1],
            [1, "cs", 2, 43, 7, 1],
            [1, "cs", 2, 43, 6, 1],
            [1, "cs", 2, 42, 6, 1],
            [1, "cs", 2, 42, 7, 1],
            [1, "cs", 2, 42, 8, 1],
            [1, "cs", 2, 41, 7, 1],
            [1, "cs", 2, 41, 6, 1],
            [1, "cs", 2, 40, 6, 1],
            [1, "cs", 2, 40, 7, 1],
            [1, "cs", 2, 40, 8, 1],
            [1, "cs", 2, 39, 8, 1],
            [1, "cs", 0, 39, 7, 1],
            [1, "cs", 1, 38, 8, 1],
            [1, "cs", 2, 39, 6, 1],
            [1, "cs", 2, 38, 6, 1],
            [1, "cs", 2, 37, 6, 1],
            [1, "cs", 2, 38, 7, 1],
            [1, "cs", 2, 37, 7, 1],
            [1, "cs", 2, 37, 8, 1],
            [1, "cs", 2, 37, 10, 1],
            [1, "cs", 2, 38, 10, 1],
            [1, "cs", 0, 38, 11, 1],
            [1, "cs", 0, 38, 17, 1],
            [1, "cs", 1, 37, 18, 1],
            [1, "cs", 0, 38, 19, 1],
            [1, "cs", 2, 37, 11, 1],
            [1, "cs", 2, 37, 16, 1],
            [1, "cs", 2, 37, 17, 1],
            [1, "cs", 2, 38, 18, 1],
            [1, "cs", 2, 37, 19, 1],
            [1, "cs", 3, 38, 16, 1],
            [1, "cs", 0, 37, 21, 1],
            [1, "cs", 0, 38, 22, 1],
            [1, "cs", 0, 38, 24, 1],
            [1, "cs", 2, 37, 20, 1],
            [1, "cs", 2, 38, 20, 1],
            [1, "cs", 2, 38, 21, 1],
            [1, "cs", 1, 37, 23, 1],
            [1, "cs", 3, 37, 22, 1],
            [1, "cs", 3, 38, 23, 1],
            [1, "cs", 2, 37, 24, 1],
            [1, "cs", 0, 38, 30, 1],
            [1, "cs", 0, 38, 32, 1],
            [1, "cs", 0, 37, 31, 1],
            [1, "cs", 1, 38, 34, 1],
            [1, "cs", 1, 37, 29, 1],
            [1, "cs", 2, 38, 29, 1],
            [1, "cs", 2, 37, 30, 1],
            [1, "cs", 2, 38, 31, 1],
            [1, "cs", 2, 37, 32, 1],
            [1, "cs", 3, 38, 33, 1],
            [1, "cs", 3, 38, 35, 1],
            [1, "cs", 2, 37, 33, 1],
            [1, "cs", 2, 36, 8, 1],
            [1, "cs", 0, 36, 11, 1],
            [1, "cs", 0, 35, 9, 1],
            [1, "cs", 2, 36, 9, 1],
            [1, "cs", 2, 36, 10, 1],
            [1, "cs", 2, 35, 10, 1],
            [1, "cs", 1, 33, 8, 1],
            [1, "cs", 3, 34, 9, 1],
            [1, "cs", 3, 35, 8, 1],
            [1, "cs", 2, 34, 8, 1],
            [1, "cs", 0, 36, 7, 1],
            [1, "cs", 1, 34, 7, 1],
            [1, "cs", 2, 35, 7, 1],
            [1, "cs", 2, 35, 6, 1],
            [1, "cs", 2, 36, 6, 1],
            [1, "cs", 2, 68, 9, 1],
            [1, "cs", 2, 66, 10, 1],
            [1, "cs", 3, 66, 9, 1],
            [1, "cs", 0, 67, 9, 1],
            [1, "cs", 0, 66, 8, 1],
            [1, "cs", 2, 67, 8, 1],
            [1, "cs", 1, 68, 8, 1],
            [1, "cs", 1, 66, 11, 1],
            [1, "cs", 2, 67, 10, 1],
            [1, "cs", 0, 66, 6, 1],
            [1, "cs", 2, 66, 7, 1],
            [1, "cs", 2, 67, 7, 1],
            [1, "cs", 2, 69, 8, 1],
            [1, "cs", 2, 63, 32, 1],
            [1, "cs", 2, 62, 34, 1],
            [1, "cs", 2, 60, 35, 1],
            [1, "cs", 3, 59, 35, 1],
            [1, "cs", 0, 61, 35, 1],
            [1, "cs", 0, 63, 34, 1],
            [1, "cs", 2, 63, 33, 1],
            [1, "cs", 2, 63, 35, 1],
            [1, "cs", 2, 62, 35, 1],
            [1, "cs", 2, 58, 36, 1],
            [1, "cs", 1, 59, 36, 1],
            [1, "cs", 1, 62, 36, 1],
            [1, "cs", 2, 60, 36, 1],
            [1, "cs", 2, 61, 34, 1],
            [1, "cs", 3, 62, 33, 1],
            [1, "cs", 3, 63, 36, 1],
            [1, "cs", 3, 61, 36, 1],
            [1, "cs", 0, 42, 36, 1],
            [1, "cs", 1, 39, 36, 1],
            [1, "cs", 2, 41, 36, 1],
            [1, "cs", 3, 39, 35, 1],
            [1, "cs", 3, 40, 36, 1],
            [1, "cs", 3, 43, 36, 1],
            [1, "cs", 1, 40, 35, 1],
            [1, "cs", 2, 41, 35, 1],
            [1, "cs", 2, 40, 34, 1],
            [1, "cs", 2, 39, 34, 1],
            [1, "cs", 2, 39, 33, 1],
            [1, "cs", 2, 39, 32, 1],
            [1, "cs", 0, 40, 33, 1],
            [1, "cs", 2, 41, 34, 1],
            [1, "cs", 1, 44, 36, 1],
            [1, "cs", 3, 43, 35, 1],
            [1, "cs", 2, 42, 35, 1],
            [1, "cs", 0, 37, 34, 1],
            [1, "cs", 3, 59, 30, 1],
            [1, "cs", 0, 60, 29, 1],
            [1, "cs", 2, 60, 28, 1],
            [1, "cs", 3, 60, 27, 1],
            [1, "cs", 0, 60, 26, 1],
            [1, "cs", 2, 54, 25, 1],
            [1, "cs", 2, 48, 25, 1],
            [1, "cs", 2, 42, 26, 1],
            [1, "cs", 0, 55, 25, 1],
            [1, "cs", 2, 59, 26, 1],
            [1, "cs", 0, 43, 26, 1],
            [1, "cs", 1, 42, 27, 1],
            [1, "cs", 2, 42, 28, 1],
            [1, "cs", 2, 43, 30, 1],
            [1, "cs", 0, 42, 29, 1],
            [1, "cs", 0, 54, 24, 1],
            [1, "cs", 0, 48, 24, 1],
            [1, "cs", 2, 54, 23, 1],
            [1, "cs", 2, 48, 23, 1],
            [1, "cs", 2, 63, 22, 1],
            [1, "cs", 2, 63, 21, 1],
            [1, "cs", 2, 39, 21, 1],
            [1, "cs", 3, 57, 18, 1],
            [1, "cs", 2, 56, 18, 1],
            [1, "cs", 3, 51, 21, 1],
            [1, "cs", 0, 51, 20, 1],
            [1, "cs", 2, 51, 19, 1],
            [1, "cs", 3, 51, 18, 1],
            [1, "cs", 2, 63, 16, 1],
            [1, "cs", 2, 63, 10, 1],
            [1, "cs", 2, 56, 13, 1],
            [1, "cs", 3, 57, 13, 1],
            [1, "cs", 1, 45, 18, 1],
            [1, "cs", 2, 47, 18, 1],
            [1, "cs", 2, 46, 18, 1],
            [1, "cs", 0, 46, 13, 1],
            [1, "cs", 2, 45, 13, 1],
            [1, "cs", 2, 39, 10, 1],
            [1, "cs", 2, 39, 16, 1],
            [1, "cs", 2, 47, 17, 1],
            [1, "a", 0, 51, 15, 1],
            [1, "a", 1, 53, 14, 1],
            [1, "a", 1, 49, 14, 1],
            [1, "de", 8, 55, 15, 0],
            [1, "de", 9, 48, 28, 0],
            [1, "de", 10, 58, 26, 0],
            [1, "de", 11, 59, 29, 0],
            [1, "de", 11, 55, 34, 0],
            [1, "de", 10, 48, 33, 0],
            [1, "de", 9, 41, 32, 0],
            [1, "de", 9, 56, 24, 0],
            [1, "de", 9, 62, 16, 0],
            [1, "de", 9, 45, 11, 0],
            [1, "de", 9, 44, 17, 0],
            [1, "de", 10, 44, 13, 0],
            [1, "de", 10, 58, 13, 0],
            [1, "de", 10, 63, 31, 0],
            [1, "de", 8, 60, 30, 0],
            [1, "de", 8, 43, 26, 0],
            [1, "de", 10, 43, 29, 0],
            [1, "de", 10, 53, 29, 0],
            [1, "de", 10, 53, 24, 0],
            [1, "de", 9, 53, 19, 0],
            [1, "de", 11, 49, 19, 0],
            [1, "de", 10, 39, 26, 0],
            [1, "de", 9, 46, 24, 0],
            [1, "de", 9, 62, 10, 0],
            [1, "de", 8, 40, 14, 0],
            [1, "de", 32, 55, 35, 0],
            [1, "de", 32, 60, 33, 0],
            [1, "de", 32, 63, 28, 0],
            [1, "de", 32, 63, 24, 0],
            [1, "de", 32, 58, 22, 0],
            [1, "de", 32, 59, 17, 0],
            [1, "de", 32, 63, 13, 0],
            [1, "de", 32, 59, 10, 0],
            [1, "de", 32, 56, 12, 0],
            [1, "de", 32, 52, 17, 0],
            [1, "de", 32, 51, 14, 0],
            [1, "de", 32, 39, 12, 0],
            [1, "de", 32, 39, 18, 0],
            [1, "de", 32, 41, 25, 0],
            [1, "de", 32, 39, 30, 0],
            [1, "de", 32, 50, 29, 0],
            [1, "de", 32, 43, 34, 0],
            [1, "de", 32, 47, 34, 0],
            [1, "de", 31, 54, 33, 0],
            [1, "de", 31, 59, 24, 0],
            [1, "de", 31, 63, 19, 0],
            [1, "de", 31, 47, 15, 0],
            [1, "de", 31, 43, 17, 0],
            [1, "de", 31, 39, 27, 0],
            [1, "de", 31, 48, 27, 0],
            [1, "de", 31, 57, 27, 0],
            [1, "de", 32, 44, 27, 0],
            [1, "d", 0, 12, 13, 1],
            [1, "d", 0, 89, 13, 1],
            [1, "d", 1, 91, 21, 1],
            [1, "d", 1, 10, 22, 1],
            [1, "f", 2, 89, 18, 1],
            [1, "f", 0, 88, 19, 1],
            [1, "g", 1, 85, 22, 1],
            [1, "s", 1, 90, 29, 1],
            [1, "s", 1, 92, 15, 1],
            [1, "s", 0, 91, 31, 1],
            [1, "s", 2, 90, 38, 1],
            [1, "s", 0, 91, 42, 1],
            [1, "s", 0, 90, 49, 1],
            [1, "f", 1, 86, 43, 1],
            [1, "f", 0, 81, 45, 1],
            [1, "f", 2, 66, 44, 1],
            [1, "f", 2, 55, 49, 1],
            [1, "f", 1, 54, 50, 1],
            [1, "f", 2, 43, 45, 1],
            [1, "f", 2, 31, 48, 1],
            [1, "f", 1, 27, 39, 1],
            [1, "f", 1, 80, 46, 1],
            [1, "f", 1, 69, 48, 1],
            [1, "g", 0, 80, 40, 1],
            [1, "g", 2, 81, 40, 1],
            [1, "s", 2, 77, 39, 1],
            [1, "s", 0, 68, 43, 1],
            [1, "s", 2, 57, 41, 1],
            [1, "s", 1, 56, 42, 1],
            [1, "s", 1, 40, 41, 1],
            [1, "s", 2, 48, 48, 1],
            [1, "f", 2, 17, 12, 1],
            [1, "f", 0, 13, 31, 1],
            [1, "f", 1, 14, 32, 1],
            [1, "s", 0, 15, 27, 1],
            [1, "s", 0, 13, 39, 1],
            [1, "f", 2, 11, 17, 1],
            [1, "f", 1, 12, 18, 1],
            [1, "g", 2, 12, 25, 1],
            [1, "f", 0, 16, 45, 1],
            [1, "f", 1, 17, 46, 1],
            [1, "s", 1, 74, 48, 1],
            [1, "s", 1, 20, 47, 1],
            [1, "g", 0, 58, 59, 1],
            [1, "g", 0, 46, 72, 1],
            [1, "g", 0, 69, 79, 1],
            [1, "g", 0, 72, 74, 1],
            [1, "g", 0, 26, 88, 1],
            [1, "g", 0, 20, 74, 1],
            [1, "g", 0, 28, 67, 1],
            [1, "g", 0, 49, 86, 1],
            [1, "g", 0, 77, 90, 1],
            [1, "g", 0, 87, 72, 1],
            [1, "g", 0, 14, 85, 1],
            [1, "g", 1, 85, 97, 1],
            [1, "g", 1, 68, 104, 1],
            [1, "g", 1, 63, 91, 1],
            [1, "g", 1, 39, 90, 1],
            [1, "g", 1, 34, 99, 1],
            [1, "g", 1, 17, 103, 1],
            [1, "g", 2, 77, 60, 1],
            [1, "g", 2, 19, 56, 1],
            [1, "g", 2, 39, 60, 1],
            [1, "g", 2, 87, 57, 1],
            [1, "f", 0, 9, 62, 1],
            [1, "f", 0, 12, 81, 1],
            [1, "f", 0, 26, 59, 1],
            [1, "f", 0, 35, 53, 1],
            [1, "f", 0, 44, 58, 1],
            [1, "f", 0, 88, 62, 1],
            [1, "f", 0, 91, 82, 1],
            [1, "f", 0, 84, 85, 1],
            [1, "f", 0, 79, 69, 1],
            [1, "f", 0, 64, 71, 1],
            [1, "f", 0, 62, 83, 1],
            [1, "f", 0, 34, 81, 1],
            [1, "f", 0, 39, 71, 1],
            [1, "f", 0, 54, 94, 1],
            [1, "f", 1, 81, 70, 1],
            [1, "f", 1, 91, 72, 1],
            [1, "f", 1, 8, 91, 1],
            [1, "f", 1, 14, 81, 1],
            [1, "f", 1, 29, 79, 1],
            [1, "f", 1, 13, 65, 1],
            [1, "f", 1, 46, 97, 1],
            [1, "f", 1, 43, 73, 1],
            [1, "f", 1, 60, 69, 1],
            [1, "f", 1, 70, 96, 1],
            [1, "f", 1, 58, 84, 1],
            [1, "s", 1, 56, 76, 1],
            [1, "s", 1, 85, 74, 1],
            [1, "s", 0, 72, 71, 1],
            [1, "s", 0, 41, 62, 1],
            [1, "s", 0, 60, 61, 1],
            [1, "s", 0, 20, 66, 1],
            [1, "s", 0, 47, 83, 1],
            [1, "s", 0, 29, 86, 1],
            [1, "s", 0, 78, 92, 1],
            [1, "s", 0, 62, 102, 1],
            [1, "s", 0, 18, 95, 1],
            [1, "s", 2, 64, 101, 1],
            [1, "s", 2, 78, 84, 1],
            [1, "s", 2, 49, 83, 1],
            [1, "s", 2, 15, 76, 1],
            [1, "s", 2, 21, 84, 1],
            [1, "f", 1, 26, 94, 1],
            [1, "f", 2, 23, 96, 1],
            [1, "f", 2, 25, 72, 1],
            [1, "f", 2, 85, 77, 1],
            [1, "f", 2, 79, 95, 1],
            [1, "f", 2, 51, 65, 1],
            [1, "f", 2, 69, 60, 1],
            [1, "f", 1, 25, 105, 1],
            [1, "s", 1, 18, 68, 1],
            [1, "s", 0, 55, 76, 1],
            [1, "s", 0, 74, 59, 1],
            [1, "f", 1, 46, 142, 1],
            [1, "f", 1, 19, 140, 1],
            [1, "f", 1, 77, 137, 1],
            [1, "f", 0, 75, 137, 1],
            [1, "f", 0, 55, 138, 1],
            [1, "f", 0, 33, 127, 1],
            [1, "f", 0, 76, 121, 1],
            [1, "f", 0, 55, 121, 1],
            [1, "f", 0, 13, 123, 1],
            [1, "f", 0, 18, 141, 1],
            [1, "f", 0, 40, 137, 1],
            [1, "f", 2, 76, 142, 1],
            [1, "f", 2, 57, 140, 1],
            [1, "f", 2, 39, 138, 1],
            [1, "f", 2, 16, 143, 1],
            [1, "f", 2, 29, 131, 1],
            [1, "f", 0, 70, 150, 1],
            [1, "f", 0, 28, 146, 1],
            [1, "f", 0, 12, 132, 1],
            [1, "f", 0, 90, 129, 1],
            [1, "f", 1, 87, 131, 1],
            [1, "f", 0, 91, 143, 1],
            [1, "f", 2, 87, 145, 1],
            [1, "f", 1, 89, 141, 1],
            [1, "f", 1, 63, 130, 1],
            [1, "f", 1, 75, 122, 1],
            [1, "f", 1, 52, 124, 1],
            [1, "f", 1, 34, 127, 1],
            [1, "f", 1, 14, 123, 1],
            [1, "f", 1, 24, 122, 1],
            [1, "f", 0, 83, 108, 1],
            [1, "f", 0, 89, 118, 1],
            [1, "f", 0, 56, 107, 1],
            [1, "f", 0, 38, 113, 1],
            [1, "f", 0, 16, 110, 1],
            [1, "f", 1, 80, 105, 1],
            [1, "f", 1, 82, 109, 1],
            [1, "f", 1, 87, 118, 1],
            [1, "f", 1, 59, 110, 1],
            [1, "f", 1, 29, 111, 1],
            [1, "f", 2, 28, 112, 1],
            [1, "f", 2, 70, 112, 1],
            [1, "f", 2, 42, 111, 1],
            [1, "s", 0, 68, 157, 1],
            [1, "s", 0, 81, 158, 1],
            [1, "s", 0, 25, 172, 1],
            [1, "s", 0, 22, 161, 1],
            [1, "s", 0, 35, 152, 1],
            [1, "s", 0, 66, 144, 1],
            [1, "s", 0, 87, 145, 1],
            [1, "s", 0, 86, 145, 1],
            [1, "s", 0, 84, 135, 1],
            [1, "s", 0, 69, 133, 1],
            [1, "s", 0, 84, 122, 1],
            [1, "s", 0, 68, 121, 1],
            [1, "s", 0, 48, 124, 1],
            [1, "s", 0, 26, 129, 1],
            [1, "s", 0, 9, 127, 1],
            [1, "s", 0, 11, 144, 1],
            [1, "s", 0, 9, 109, 1],
            [1, "s", 0, 35, 101, 1],
            [1, "s", 0, 47, 109, 1],
            [1, "s", 0, 58, 111, 1],
            [1, "s", 0, 84, 110, 1],
            [1, "s", 0, 28, 114, 1],
            [1, "s", 1, 30, 116, 1],
            [1, "s", 1, 46, 112, 1],
            [1, "s", 1, 81, 111, 1],
            [1, "s", 1, 70, 123, 1],
            [1, "s", 1, 49, 127, 1],
            [1, "s", 1, 66, 134, 1],
            [1, "s", 1, 67, 144, 1],
            [1, "s", 1, 38, 152, 1],
            [1, "s", 1, 21, 164, 1],
            [1, "s", 1, 12, 147, 1],
            [1, "s", 1, 24, 130, 1],
            [1, "s", 1, 12, 125, 1],
            [1, "s", 1, 65, 158, 1],
            [1, "s", 1, 83, 167, 1],
            [1, "s", 1, 65, 167, 1],
            [1, "s", 1, 47, 164, 1],
            [1, "s", 1, 56, 168, 1],
            [1, "s", 2, 54, 169, 1],
            [1, "s", 2, 88, 170, 1],
            [1, "s", 2, 91, 162, 1],
            [1, "s", 2, 79, 149, 1],
            [1, "s", 2, 75, 144, 1],
            [1, "s", 2, 57, 150, 1],
            [1, "s", 2, 47, 143, 1],
            [1, "s", 2, 31, 145, 1],
            [1, "s", 2, 36, 138, 1],
            [1, "s", 2, 10, 163, 1],
            [1, "s", 2, 22, 142, 1],
            [1, "g", 2, 78, 132, 1],
            [1, "g", 1, 48, 135, 1],
            [1, "g", 2, 16, 136, 1],
            [1, "g", 0, 62, 92, 1],
            [1, "g", 2, 70, 80, 1],
            [1, "g", 2, 15, 86, 1],
            [1, "g", 2, 47, 75, 1],
            [1, "g", 2, 36, 89, 1],
            [1, "g", 2, 80, 90, 1],
            [1, "f", 1, 39, 118, 1],
            [1, "d", 2, 84, 54, 1],
            [1, "d", 2, 16, 54, 1],
            [1, "de", 7, 13, 13, 0],
            [1, "de", 5, 16, 28, 0],
            [1, "de", 5, 9, 25, 0],
            [1, "de", 5, 34, 41, 0],
            [1, "de", 4, 28, 40, 0],
            [1, "de", 6, 31, 47, 0],
            [1, "de", 6, 12, 39, 0],
            [1, "de", 4, 16, 47, 0],
            [1, "de", 4, 7, 46, 0],
            [1, "de", 6, 7, 33, 0],
            [1, "de", 6, 40, 42, 0],
            [1, "de", 7, 20, 48, 0],
            [1, "de", 7, 29, 59, 0],
            [1, "de", 6, 27, 58, 0],
            [1, "de", 6, 15, 54, 0],
            [1, "de", 5, 12, 66, 0],
            [1, "de", 5, 37, 53, 0],
            [1, "de", 4, 10, 63, 0],
            [1, "de", 7, 49, 48, 0],
            [1, "de", 7, 37, 63, 0],
            [1, "de", 6, 33, 68, 0],
            [1, "de", 6, 56, 52, 0],
            [1, "de", 5, 59, 58, 0],
            [1, "de", 6, 48, 58, 0],
            [1, "de", 4, 53, 63, 0],
            [1, "de", 4, 67, 44, 0],
            [1, "de", 5, 70, 49, 0],
            [1, "de", 5, 82, 55, 0],
            [1, "de", 5, 79, 41, 0],
            [1, "de", 5, 91, 29, 0],
            [1, "de", 7, 91, 43, 0],
            [1, "de", 6, 85, 44, 0],
            [1, "de", 6, 74, 60, 0],
            [1, "de", 6, 90, 8, 0],
            [1, "de", 5, 91, 15, 0],
            [1, "de", 4, 87, 20, 0],
            [1, "de", 7, 93, 11, 0],
            [1, "de", 6, 91, 21, 0],
            [1, "de", 6, 85, 35, 0],
            [1, "de", 5, 93, 58, 0],
            [1, "de", 5, 87, 63, 0],
            [1, "de", 7, 77, 62, 0],
            [1, "de", 6, 68, 61, 0],
            [1, "de", 5, 90, 73, 0],
            [1, "de", 4, 87, 71, 0],
            [1, "de", 7, 80, 71, 0],
            [1, "de", 7, 83, 77, 0],
            [1, "de", 7, 89, 83, 0],
            [1, "de", 4, 71, 80, 0],
            [1, "de", 4, 71, 70, 0],
            [1, "de", 5, 63, 72, 0],
            [1, "de", 4, 54, 75, 0],
            [1, "de", 5, 44, 83, 0],
            [1, "de", 5, 42, 74, 0],
            [1, "de", 5, 15, 81, 0],
            [1, "de", 4, 29, 80, 0],
            [1, "de", 4, 37, 90, 0],
            [1, "de", 4, 7, 75, 0],
            [1, "de", 6, 22, 74, 0],
            [1, "de", 6, 43, 95, 0],
            [1, "de", 6, 57, 85, 0],
            [1, "de", 6, 19, 94, 0],
            [1, "de", 6, 9, 92, 0],
            [1, "de", 5, 26, 89, 0],
            [1, "de", 5, 31, 112, 0],
            [1, "de", 5, 54, 108, 0],
            [1, "de", 5, 55, 95, 0],
            [1, "de", 5, 35, 104, 0],
            [1, "de", 5, 13, 110, 0],
            [1, "de", 7, 27, 107, 0],
            [1, "de", 7, 47, 99, 0],
            [1, "de", 7, 11, 104, 0],
            [1, "de", 7, 9, 111, 0],
            [1, "de", 7, 40, 114, 0],
            [1, "de", 7, 28, 117, 0],
            [1, "de", 7, 47, 113, 0],
            [1, "de", 7, 63, 104, 0],
            [1, "de", 4, 64, 92, 0],
            [1, "de", 6, 86, 97, 0],
            [1, "de", 5, 76, 91, 0],
            [1, "de", 5, 85, 86, 0],
            [1, "de", 6, 78, 83, 0],
            [1, "de", 6, 71, 97, 0],
            [1, "de", 4, 69, 105, 0],
            [1, "de", 4, 79, 104, 0],
            [1, "de", 4, 86, 109, 0],
            [1, "de", 4, 86, 118, 0],
            [1, "de", 5, 70, 113, 0],
            [1, "de", 6, 69, 121, 0],
            [1, "de", 6, 76, 122, 0],
            [1, "de", 7, 87, 130, 0],
            [1, "de", 4, 84, 123, 0],
            [1, "de", 4, 57, 121, 0],
            [1, "de", 5, 53, 125, 0],
            [1, "de", 5, 62, 131, 0],
            [1, "de", 6, 67, 143, 0],
            [1, "de", 5, 77, 143, 0],
            [1, "de", 5, 85, 136, 0],
            [1, "de", 6, 87, 147, 0],
            [1, "de", 6, 92, 140, 0],
            [1, "de", 4, 93, 127, 0],
            [1, "de", 5, 93, 106, 0],
            [1, "de", 5, 45, 144, 0],
            [1, "de", 4, 41, 139, 0],
            [1, "de", 4, 54, 138, 0],
            [1, "de", 6, 29, 145, 0],
            [1, "de", 6, 29, 132, 0],
            [1, "de", 6, 35, 127, 0],
            [1, "de", 6, 64, 142, 0],
            [1, "de", 5, 23, 131, 0],
            [1, "de", 5, 9, 134, 0],
            [1, "de", 6, 11, 121, 0],
            [1, "de", 4, 26, 121, 0],
            [1, "de", 35, 58, 150, 0],
            [1, "de", 33, 48, 156, 0],
            [1, "de", 33, 25, 158, 0],
            [1, "de", 33, 36, 154, 0],
            [1, "de", 34, 9, 154, 0],
            [1, "de", 34, 13, 148, 0],
            [1, "de", 34, 21, 142, 0],
            [1, "de", 34, 38, 139, 0],
            [1, "de", 34, 47, 144, 0],
            [1, "de", 34, 68, 142, 0],
            [1, "de", 36, 70, 135, 0],
            [1, "de", 36, 64, 132, 0],
            [1, "de", 36, 86, 134, 0],
            [1, "de", 36, 90, 141, 0],
            [1, "de", 36, 93, 131, 0],
            [1, "de", 36, 91, 125, 0],
            [1, "de", 36, 76, 123, 0],
            [1, "de", 33, 82, 122, 0],
            [1, "de", 35, 56, 122, 0],
            [1, "de", 35, 40, 119, 0],
            [1, "de", 35, 17, 112, 0],
            [1, "de", 35, 37, 102, 0],
            [1, "de", 33, 18, 97, 0],
            [1, "de", 34, 10, 83, 0],
            [1, "de", 33, 19, 73, 0],
            [1, "de", 33, 10, 60, 0],
            [1, "de", 35, 24, 60, 0],
            [1, "de", 36, 14, 45, 0],
            [1, "de", 36, 21, 42, 0],
            [1, "de", 35, 8, 32, 0],
            [1, "de", 33, 9, 24, 0],
            [1, "de", 35, 35, 27, 0],
            [1, "de", 33, 56, 35, 0],
            [1, "de", 36, 53, 36, 0],
            [1, "de", 33, 45, 35, 0],
            [1, "de", 35, 53, 39, 0],
            [1, "de", 36, 57, 30, 0],
            [1, "de", 33, 86, 108, 0],
            [1, "de", 33, 68, 112, 0],
            [1, "de", 33, 49, 109, 0],
            [1, "de", 33, 46, 95, 0],
            [1, "de", 33, 90, 76, 0],
            [1, "de", 36, 76, 83, 0],
            [1, "de", 36, 70, 72, 0],
            [1, "de", 36, 78, 63, 0],
            [1, "de", 36, 90, 64, 0],
            [1, "de", 36, 60, 70, 0],
            [1, "de", 35, 75, 90, 0],
            [1, "de", 35, 81, 58, 0],
            [1, "de", 35, 91, 51, 0],
            [1, "de", 35, 93, 56, 0],
            [1, "de", 35, 61, 60, 0],
            [1, "de", 35, 66, 46, 0],
            [1, "de", 33, 90, 19, 0],
            [1, "de", 34, 92, 9, 0],
            [1, "de", 35, 75, 39, 0],
            [1, "de", 35, 67, 42, 0],
            [1, "de", 35, 93, 37, 0],
            [1, "de", 36, 89, 28, 0],
            [1, "de", 36, 42, 61, 0],
            [1, "de", 33, 49, 50, 0],
            [1, "de", 33, 44, 75, 0],
            [1, "de", 33, 46, 85, 0],
            [1, "de", 33, 64, 84, 0],
            [1, "de", 33, 56, 94, 0],
            [1, "de", 33, 25, 90, 0],
            [1, "de", 33, 31, 69, 0],
            [1, "de", 35, 34, 54, 0],
            [1, "de", 35, 29, 47, 0],
            [1, "de", 36, 42, 41, 0],
            [1, "de", 36, 29, 34, 0],
            [1, "de", 35, 20, 55, 0],
            [1, "de", 35, 14, 52, 0],
            [1, "s", 2, 12, 171, 1],
            [1, "r", 20, 188, 0],
            [1, "r", 21, 188, 0],
            [1, "r", 22, 188, 0],
            [1, "r", 23, 188, 0],
            [1, "r", 24, 188, 0],
            [1, "r", 25, 189, 0],
            [1, "r", 24, 189, 0],
            [1, "r", 23, 189, 0],
            [1, "r", 22, 189, 0],
            [1, "r", 21, 189, 0],
            [1, "r", 20, 189, 0],
            [1, "r", 19, 189, 0],
            [1, "r", 19, 190, 0],
            [1, "r", 19, 191, 0],
            [1, "r", 20, 191, 0],
            [1, "r", 21, 191, 0],
            [1, "r", 22, 191, 0],
            [1, "r", 24, 191, 0],
            [1, "r", 23, 191, 0],
            [1, "r", 25, 191, 0],
            [1, "r", 25, 190, 0],
            [1, "r", 24, 190, 0],
            [1, "r", 23, 190, 0],
            [1, "r", 22, 190, 0],
            [1, "r", 21, 190, 0],
            [1, "r", 20, 190, 0],
            [1, "r", 26, 190, 0],
            [1, "r", 26, 191, 0],
            [1, "r", 24, 193, 0],
            [1, "r", 23, 193, 0],
            [1, "r", 22, 193, 0],
            [1, "r", 20, 192, 0],
            [1, "r", 21, 192, 0],
            [1, "r", 22, 192, 0],
            [1, "r", 23, 192, 0],
            [1, "r", 24, 192, 0],
            [1, "r", 25, 192, 0],
            [1, "r", 53, 199, 0],
            [1, "r", 52, 200, 0],
            [1, "r", 54, 199, 0],
            [1, "r", 55, 199, 0],
            [1, "r", 55, 200, 0],
            [1, "r", 54, 200, 0],
            [1, "r", 53, 200, 0],
            [1, "r", 51, 200, 0],
            [1, "r", 56, 200, 0],
            [1, "r", 55, 201, 0],
            [1, "r", 54, 201, 0],
            [1, "r", 55, 202, 0],
            [1, "r", 54, 203, 0],
            [1, "r", 54, 204, 0],
            [1, "r", 54, 202, 0],
            [1, "r", 53, 202, 0],
            [1, "r", 52, 202, 0],
            [1, "r", 53, 201, 0],
            [1, "r", 52, 201, 0],
            [1, "r", 51, 201, 0],
            [1, "r", 51, 202, 0],
            [1, "r", 50, 202, 0],
            [1, "r", 50, 201, 0],
            [1, "r", 56, 201, 0],
            [1, "r", 53, 203, 0],
            [1, "r", 52, 203, 0],
            [1, "r", 51, 203, 0],
            [1, "r", 56, 202, 0],
            [1, "r", 55, 203, 0],
            [1, "r", 53, 204, 0],
            [1, "r", 52, 204, 0],
            [1, "r", 55, 204, 0],
            [1, "r", 56, 203, 0],
            [1, "r", 56, 244, 0],
            [1, "r", 54, 246, 0],
            [1, "r", 50, 248, 0],
            [1, "r", 48, 248, 0],
            [1, "r", 43, 248, 0],
            [1, "r", 45, 238, 0],
            [1, "r", 44, 238, 0],
            [1, "r", 43, 238, 0],
            [1, "r", 46, 238, 0],
            [1, "r", 47, 238, 0],
            [1, "r", 48, 238, 0],
            [1, "r", 49, 238, 0],
            [1, "r", 50, 238, 0],
            [1, "r", 51, 238, 0],
            [1, "r", 52, 238, 0],
            [1, "r", 53, 238, 0],
            [1, "r", 54, 239, 0],
            [1, "r", 53, 240, 0],
            [1, "r", 53, 239, 0],
            [1, "r", 52, 239, 0],
            [1, "r", 51, 239, 0],
            [1, "r", 50, 239, 0],
            [1, "r", 49, 239, 0],
            [1, "r", 48, 239, 0],
            [1, "r", 47, 239, 0],
            [1, "r", 46, 239, 0],
            [1, "r", 45, 239, 0],
            [1, "r", 44, 239, 0],
            [1, "r", 43, 239, 0],
            [1, "r", 42, 239, 0],
            [1, "r", 41, 240, 0],
            [1, "r", 42, 240, 0],
            [1, "r", 43, 240, 0],
            [1, "r", 44, 240, 0],
            [1, "r", 45, 240, 0],
            [1, "r", 46, 240, 0],
            [1, "r", 47, 240, 0],
            [1, "r", 48, 240, 0],
            [1, "r", 49, 240, 0],
            [1, "r", 50, 240, 0],
            [1, "r", 51, 240, 0],
            [1, "r", 52, 240, 0],
            [1, "r", 54, 240, 0],
            [1, "r", 55, 240, 0],
            [1, "r", 56, 241, 0],
            [1, "r", 55, 241, 0],
            [1, "r", 54, 241, 0],
            [1, "r", 53, 241, 0],
            [1, "r", 52, 241, 0],
            [1, "r", 51, 241, 0],
            [1, "r", 49, 241, 0],
            [1, "r", 50, 241, 0],
            [1, "r", 48, 241, 0],
            [1, "r", 47, 241, 0],
            [1, "r", 46, 241, 0],
            [1, "r", 45, 241, 0],
            [1, "r", 44, 241, 0],
            [1, "r", 43, 241, 0],
            [1, "r", 42, 241, 0],
            [1, "r", 41, 241, 0],
            [1, "r", 40, 242, 0],
            [1, "r", 41, 242, 0],
            [1, "r", 42, 242, 0],
            [1, "r", 43, 242, 0],
            [1, "r", 44, 242, 0],
            [1, "r", 45, 242, 0],
            [1, "r", 46, 242, 0],
            [1, "r", 47, 242, 0],
            [1, "r", 48, 242, 0],
            [1, "r", 49, 242, 0],
            [1, "r", 50, 242, 0],
            [1, "r", 51, 242, 0],
            [1, "r", 52, 242, 0],
            [1, "r", 53, 242, 0],
            [1, "r", 54, 242, 0],
            [1, "r", 55, 242, 0],
            [1, "r", 56, 242, 0],
            [1, "r", 56, 243, 0],
            [1, "r", 55, 243, 0],
            [1, "r", 54, 243, 0],
            [1, "r", 53, 243, 0],
            [1, "r", 52, 243, 0],
            [1, "r", 51, 243, 0],
            [1, "r", 50, 243, 0],
            [1, "r", 49, 243, 0],
            [1, "r", 48, 243, 0],
            [1, "r", 47, 243, 0],
            [1, "r", 46, 243, 0],
            [1, "r", 45, 243, 0],
            [1, "r", 44, 243, 0],
            [1, "r", 43, 243, 0],
            [1, "r", 42, 243, 0],
            [1, "r", 41, 243, 0],
            [1, "r", 40, 243, 0],
            [1, "r", 40, 244, 0],
            [1, "r", 41, 244, 0],
            [1, "r", 43, 244, 0],
            [1, "r", 44, 244, 0],
            [1, "r", 45, 244, 0],
            [1, "r", 46, 244, 0],
            [1, "r", 47, 244, 0],
            [1, "r", 48, 244, 0],
            [1, "r", 49, 244, 0],
            [1, "r", 50, 244, 0],
            [1, "r", 51, 244, 0],
            [1, "r", 52, 244, 0],
            [1, "r", 53, 244, 0],
            [1, "r", 54, 244, 0],
            [1, "r", 55, 244, 0],
            [1, "r", 42, 244, 0],
            [1, "r", 40, 245, 0],
            [1, "r", 41, 245, 0],
            [1, "r", 42, 245, 0],
            [1, "r", 43, 245, 0],
            [1, "r", 44, 245, 0],
            [1, "r", 45, 245, 0],
            [1, "r", 46, 245, 0],
            [1, "r", 47, 245, 0],
            [1, "r", 48, 245, 0],
            [1, "r", 49, 245, 0],
            [1, "r", 50, 245, 0],
            [1, "r", 51, 245, 0],
            [1, "r", 52, 246, 0],
            [1, "r", 52, 245, 0],
            [1, "r", 53, 245, 0],
            [1, "r", 54, 245, 0],
            [1, "r", 55, 245, 0],
            [1, "r", 53, 246, 0],
            [1, "r", 51, 246, 0],
            [1, "r", 50, 246, 0],
            [1, "r", 49, 246, 0],
            [1, "r", 48, 246, 0],
            [1, "r", 47, 246, 0],
            [1, "r", 45, 246, 0],
            [1, "r", 46, 246, 0],
            [1, "r", 44, 246, 0],
            [1, "r", 43, 246, 0],
            [1, "r", 42, 246, 0],
            [1, "r", 41, 246, 0],
            [1, "r", 42, 247, 0],
            [1, "r", 43, 247, 0],
            [1, "r", 44, 247, 0],
            [1, "r", 45, 247, 0],
            [1, "r", 46, 247, 0],
            [1, "r", 47, 247, 0],
            [1, "r", 48, 247, 0],
            [1, "r", 50, 247, 0],
            [1, "r", 51, 247, 0],
            [1, "r", 52, 247, 0],
            [1, "r", 53, 247, 0],
            [1, "r", 54, 247, 0],
            [1, "r", 49, 247, 0],
            [1, "r", 49, 248, 0],
            [1, "r", 47, 248, 0],
            [1, "r", 46, 248, 0],
            [1, "r", 45, 248, 0],
            [1, "r", 51, 248, 0],
            [1, "r", 55, 246, 1],
            [1, "r", 55, 247, 1],
            [1, "r", 56, 247, 1],
            [1, "r", 56, 248, 1],
            [1, "r", 95, 270, 1],
            [1, "r", 93, 270, 1],
            [1, "r", 94, 270, 1],
            [1, "r", 95, 271, 1],
            [1, "r", 94, 271, 1],
            [1, "r", 93, 271, 1],
            [1, "r", 94, 282, 1],
            [1, "r", 93, 282, 1],
            [1, "r", 93, 281, 1],
            [1, "r", 92, 281, 1],
            [1, "r", 92, 280, 1],
            [1, "r", 91, 280, 1],
            [1, "r", 90, 279, 1],
            [1, "r", 95, 275, 1],
            [1, "r", 95, 274, 1],
            [1, "r", 95, 273, 1],
            [1, "r", 95, 272, 1],
            [1, "r", 94, 274, 1],
            [1, "r", 94, 273, 1],
            [1, "r", 94, 272, 1],
            [1, "r", 93, 272, 1],
            [1, "r", 93, 273, 1],
            [1, "r", 93, 274, 1],
            [1, "r", 92, 273, 1],
            [1, "r", 92, 272, 1],
            [1, "r", 92, 270, 1],
            [1, "r", 92, 271, 1],
            [1, "r", 92, 269, 1],
            [1, "r", 90, 269, 1],
            [1, "r", 91, 269, 1],
            [1, "r", 91, 271, 1],
            [1, "r", 91, 270, 1],
            [1, "r", 95, 278, 1],
            [1, "r", 95, 277, 1],
            [1, "r", 95, 276, 1],
            [1, "r", 94, 276, 1],
            [1, "r", 94, 275, 1],
            [1, "r", 93, 275, 1],
            [1, "r", 92, 274, 1],
            [1, "r", 92, 275, 1],
            [1, "r", 91, 275, 1],
            [1, "r", 90, 275, 1],
            [1, "r", 89, 274, 1],
            [1, "r", 90, 274, 1],
            [1, "r", 89, 275, 1],
            [1, "r", 88, 274, 1],
            [1, "r", 88, 273, 1],
            [1, "r", 86, 272, 1],
            [1, "r", 85, 271, 1],
            [1, "r", 86, 271, 1],
            [1, "r", 87, 272, 1],
            [1, "r", 55, 248, 1],
            [1, "r", 54, 248, 1],
            [1, "r", 56, 249, 1],
            [1, "r", 55, 249, 1],
            [1, "r", 55, 250, 1],
            [1, "r", 56, 250, 1],
            [1, "r", 57, 250, 1],
            [1, "r", 57, 249, 1],
            [1, "r", 59, 250, 1],
            [1, "r", 58, 250, 1],
            [1, "r", 60, 250, 1],
            [1, "r", 61, 251, 1],
            [1, "r", 60, 251, 1],
            [1, "r", 62, 251, 1],
            [1, "r", 62, 252, 1],
            [1, "r", 63, 252, 1],
            [1, "r", 58, 251, 1],
            [1, "r", 57, 251, 1],
            [1, "r", 56, 251, 1],
            [1, "r", 58, 252, 1],
            [1, "r", 57, 252, 1],
            [1, "r", 57, 253, 1],
            [1, "r", 58, 253, 1],
            [1, "r", 58, 254, 1],
            [1, "r", 59, 255, 1],
            [1, "r", 58, 255, 1],
            [1, "r", 57, 254, 1],
            [1, "r", 56, 252, 1],
            [1, "r", 55, 251, 1],
            [1, "r", 60, 255, 1],
            [1, "r", 61, 255, 1],
            [1, "r", 61, 256, 1],
            [1, "r", 60, 256, 1],
            [1, "r", 62, 256, 1],
            [1, "r", 62, 257, 1],
            [1, "r", 61, 257, 1],
            [1, "r", 64, 253, 1],
            [1, "r", 64, 254, 1],
            [1, "r", 65, 254, 1],
            [1, "r", 61, 250, 1],
            [1, "r", 64, 252, 1],
            [1, "r", 65, 253, 1],
            [1, "r", 66, 254, 1],
            [1, "r", 65, 255, 1],
            [1, "r", 64, 255, 1],
            [1, "r", 64, 256, 1],
            [1, "r", 65, 256, 1],
            [1, "r", 65, 257, 1],
            [1, "r", 64, 257, 1],
            [1, "r", 63, 257, 1],
            [1, "r", 62, 258, 1],
            [1, "r", 63, 258, 1],
            [1, "r", 64, 258, 1],
            [1, "r", 66, 255, 1],
            [1, "r", 66, 256, 1],
            [1, "r", 66, 257, 1],
            [1, "r", 66, 258, 1],
            [1, "r", 65, 258, 1],
            [1, "r", 67, 258, 1],
            [1, "r", 67, 257, 1],
            [1, "r", 67, 259, 1],
            [1, "r", 66, 259, 1],
            [1, "r", 65, 259, 1],
            [1, "r", 56, 246, 1],
            [1, "r", 56, 245, 1],
            [1, "r", 68, 258, 1],
            [1, "r", 68, 259, 1],
            [1, "r", 68, 260, 1],
            [1, "r", 69, 260, 1],
            [1, "r", 69, 261, 1],
            [1, "r", 70, 261, 1],
            [1, "r", 71, 261, 1],
            [1, "r", 67, 260, 1],
            [1, "r", 89, 269, 1],
            [1, "r", 89, 268, 1],
            [1, "r", 90, 268, 1],
            [1, "r", 82, 267, 1],
            [1, "r", 83, 267, 1],
            [1, "r", 80, 266, 1],
            [1, "r", 81, 266, 1],
            [1, "r", 81, 267, 1],
            [1, "r", 79, 266, 1],
            [1, "r", 78, 265, 1],
            [1, "r", 77, 265, 1],
            [1, "r", 76, 264, 1],
            [1, "r", 75, 264, 1],
            [1, "r", 75, 263, 1],
            [1, "r", 74, 263, 1],
            [1, "r", 74, 262, 1],
            [1, "r", 72, 262, 1],
            [1, "r", 73, 262, 1],
            [1, "r", 71, 262, 1],
            [1, "r", 85, 270, 1],
            [1, "r", 84, 270, 1],
            [1, "r", 84, 269, 1],
            [1, "r", 83, 269, 1],
            [1, "r", 82, 269, 1],
            [1, "r", 81, 269, 1],
            [1, "r", 81, 268, 1],
            [1, "r", 82, 268, 1],
            [1, "r", 83, 268, 1],
            [1, "r", 80, 268, 1],
            [1, "r", 80, 267, 1],
            [1, "r", 79, 267, 1],
            [1, "r", 78, 266, 1],
            [1, "r", 76, 265, 1],
            [1, "r", 75, 262, 1],
            [1, "r", 90, 280, 1],
            [1, "r", 89, 280, 1],
            [1, "r", 89, 279, 1],
            [1, "r", 88, 279, 1],
            [1, "r", 88, 278, 1],
            [1, "r", 87, 277, 1],
            [1, "r", 86, 276, 1],
            [1, "r", 86, 275, 1],
            [1, "r", 86, 274, 1],
            [1, "r", 86, 273, 1],
            [1, "r", 85, 273, 1],
            [1, "r", 85, 272, 1],
            [1, "r", 85, 274, 1],
            [1, "r", 86, 277, 1],
            [1, "r", 87, 278, 1],
            [1, "r", 84, 271, 1],
            [1, "r", 83, 270, 1],
            [1, "r", 87, 273, 1],
            [1, "r", 91, 274, 1],
            [1, "r", 89, 273, 1],
            [1, "r", 88, 272, 1],
            [1, "r", 91, 281, 1],
            [1, "r", 92, 282, 1],
            [1, "r", 88, 280, 1],
            [1, "r", 87, 279, 1],
            [1, "r", 85, 275, 1],
            [1, "r", 84, 273, 1],
            [1, "r", 84, 272, 1],
            [1, "r", 83, 271, 1],
            [1, "r", 82, 270, 1],
            [1, "r", 84, 267, 0],
            [1, "r", 85, 267, 0],
            [1, "r", 76, 262, 0],
            [1, "r", 77, 262, 0],
            [1, "r", 88, 268, 0],
            [1, "r", 78, 262, 0],
            [1, "r", 79, 262, 0],
            [1, "r", 80, 262, 0],
            [1, "r", 80, 263, 0],
            [1, "r", 81, 263, 0],
            [1, "r", 82, 263, 0],
            [1, "r", 83, 263, 0],
            [1, "r", 84, 263, 0],
            [1, "r", 85, 263, 0],
            [1, "r", 88, 262, 0],
            [1, "r", 89, 262, 0],
            [1, "r", 90, 262, 0],
            [1, "r", 87, 262, 0],
            [1, "r", 86, 262, 0],
            [1, "r", 86, 263, 0],
            [1, "r", 87, 263, 0],
            [1, "r", 91, 262, 0],
            [1, "r", 95, 262, 0],
            [1, "r", 94, 262, 0],
            [1, "r", 86, 267, 0],
            [1, "r", 87, 267, 0],
            [1, "r", 87, 268, 0],
            [1, "r", 86, 268, 0],
            [1, "r", 74, 189, 0],
            [1, "r", 75, 189, 0],
            [1, "r", 76, 189, 0],
            [1, "r", 77, 189, 0],
            [1, "r", 78, 190, 0],
            [1, "r", 77, 190, 0],
            [1, "r", 75, 190, 0],
            [1, "r", 76, 190, 0],
            [1, "r", 74, 190, 0],
            [1, "r", 73, 190, 0],
            [1, "r", 78, 191, 0],
            [1, "r", 76, 191, 0],
            [1, "r", 77, 191, 0],
            [1, "r", 75, 191, 0],
            [1, "r", 74, 191, 0],
            [1, "r", 78, 192, 0],
            [1, "r", 77, 192, 0],
            [1, "r", 76, 192, 0],
            [1, "r", 75, 192, 0],
            [1, "r", 74, 192, 0],
            [1, "r", 73, 191, 0],
            [1, "f", 1, 96, 22, 1],
            [1, "s", 1, 97, 22, 1],
            [1, "f", 1, 98, 22, 1],
            [1, "s", 0, 99, 22, 1],
            [1, "s", 1, 100, 21, 1],
            [1, "s", 1, 96, 49, 1],
            [1, "s", 1, 100, 50, 1],
            [1, "s", 0, 99, 49, 1],
            [1, "s", 0, 97, 49, 1],
            [1, "f", 1, 98, 49, 1],
            [1, "r", 70, 218, 0],
            [1, "r", 71, 218, 0],
            [1, "r", 72, 218, 0],
            [1, "r", 73, 218, 0],
            [1, "r", 74, 219, 0],
            [1, "r", 73, 219, 0],
            [1, "r", 72, 219, 0],
            [1, "r", 71, 219, 0],
            [1, "r", 70, 219, 0],
            [1, "r", 73, 220, 0],
            [1, "r", 72, 220, 0],
            [1, "r", 71, 220, 0],
            [1, "r", 72, 221, 0],
            [1, "r", 71, 221, 0],
            [1, "r", 70, 221, 0],
            [1, "r", 69, 221, 0],
            [1, "r", 68, 221, 0],
            [1, "r", 70, 220, 0],
            [1, "r", 69, 220, 0],
            [1, "r", 69, 219, 0],
            [1, "r", 68, 220, 0],
            [1, "r", 73, 221, 0],
            [1, "r", 73, 222, 0],
            [1, "r", 71, 222, 0],
            [1, "r", 72, 222, 0],
            [1, "r", 74, 221, 0],
            [1, "r", 74, 220, 0],
            [1, "r", 75, 220, 0],
            [1, "r", 75, 221, 0],
            [1, "r", 70, 222, 0],
            [1, "r", 69, 222, 0],
            [1, "r", 29, 217, 0],
            [1, "r", 30, 217, 0],
            [1, "r", 31, 217, 0],
            [1, "r", 32, 217, 0],
            [1, "r", 31, 219, 0],
            [1, "r", 30, 219, 0],
            [1, "r", 29, 219, 0],
            [1, "r", 27, 219, 0],
            [1, "r", 25, 219, 0],
            [1, "r", 26, 219, 0],
            [1, "r", 28, 219, 0],
            [1, "r", 26, 218, 0],
            [1, "r", 27, 218, 0],
            [1, "r", 28, 218, 0],
            [1, "r", 29, 218, 0],
            [1, "r", 30, 218, 0],
            [1, "r", 28, 217, 0],
            [1, "r", 26, 217, 0],
            [1, "r", 27, 217, 0],
            [1, "r", 28, 216, 0],
            [1, "r", 29, 216, 0],
            [1, "r", 30, 216, 0],
            [1, "r", 31, 218, 0],
            [1, "r", 32, 218, 0],
            [1, "r", 31, 216, 0],
            [1, "r", 31, 221, 0],
            [1, "r", 31, 220, 0],
            [1, "r", 30, 220, 0],
            [1, "r", 29, 220, 0],
            [1, "r", 28, 220, 0],
            [1, "r", 27, 220, 0],
            [1, "r", 26, 220, 0],
            [1, "r", 25, 218, 0],
            [1, "r", 27, 221, 0],
            [1, "r", 28, 221, 0],
            [1, "r", 29, 221, 0],
            [1, "r", 30, 221, 0],
            [1, "r", 32, 220, 0],
            [1, "r", 32, 219, 0],
            [1, "r", 33, 218, 0],
            [1, "r", 33, 219, 0],
            [1, "r", 75, 238, 0],
            [1, "r", 76, 238, 0],
            [1, "r", 77, 239, 0],
            [1, "r", 76, 239, 0],
            [1, "r", 75, 239, 0],
            [1, "r", 74, 239, 0],
            [1, "r", 76, 240, 0],
            [1, "r", 77, 240, 0],
            [1, "r", 78, 240, 0],
            [1, "r", 77, 241, 0],
            [1, "r", 76, 241, 0],
            [1, "r", 75, 241, 0],
            [1, "r", 75, 240, 0],
            [1, "r", 74, 240, 0],
            [1, "r", 78, 239, 0],
            [1, "r", 77, 238, 0],
            [1, "r", 18, 253, 0],
            [1, "r", 19, 252, 0],
            [1, "r", 20, 252, 0],
            [1, "r", 21, 253, 0],
            [1, "r", 23, 254, 0],
            [1, "r", 20, 254, 0],
            [1, "r", 19, 254, 0],
            [1, "r", 22, 254, 0],
            [1, "r", 18, 254, 0],
            [1, "r", 19, 253, 0],
            [1, "r", 20, 253, 0],
            [1, "r", 21, 254, 0],
            [1, "r", 22, 253, 0],
            [1, "r", 21, 255, 0],
            [1, "r", 20, 255, 0],
            [1, "r", 19, 255, 0],
            [1, "r", 18, 255, 0],
            [1, "r", 17, 255, 0],
            [1, "r", 17, 254, 0],
            [1, "r", 22, 255, 0],
            [1, "r", 19, 256, 0],
            [1, "r", 20, 256, 0],
            [1, "r", 21, 256, 0],
            [1, "r", 39, 270, 0],
            [1, "r", 40, 270, 0],
            [1, "r", 41, 270, 0],
            [1, "r", 43, 270, 0],
            [1, "r", 44, 270, 0],
            [1, "r", 46, 270, 0],
            [1, "r", 42, 270, 0],
            [1, "r", 45, 270, 0],
            [1, "r", 44, 269, 0],
            [1, "r", 43, 269, 0],
            [1, "r", 42, 269, 0],
            [1, "r", 40, 269, 0],
            [1, "r", 41, 269, 0],
            [1, "r", 45, 271, 0],
            [1, "r", 44, 271, 0],
            [1, "r", 43, 271, 0],
            [1, "r", 42, 271, 0],
            [1, "r", 41, 271, 0],
            [1, "r", 40, 271, 0],
            [1, "r", 39, 271, 0],
            [1, "r", 46, 271, 0],
            [1, "r", 45, 272, 0],
            [1, "r", 44, 272, 0],
            [1, "r", 43, 272, 0],
            [1, "r", 42, 272, 0],
            [1, "r", 19, 284, 0],
            [1, "r", 20, 284, 0],
            [1, "r", 21, 285, 0],
            [1, "r", 22, 285, 0],
            [1, "r", 23, 286, 0],
            [1, "r", 22, 288, 0],
            [1, "r", 20, 288, 0],
            [1, "r", 18, 288, 0],
            [1, "r", 17, 287, 0],
            [1, "r", 16, 287, 0],
            [1, "r", 16, 286, 0],
            [1, "r", 17, 286, 0],
            [1, "r", 18, 286, 0],
            [1, "r", 19, 286, 0],
            [1, "r", 20, 286, 0],
            [1, "r", 21, 286, 0],
            [1, "r", 22, 286, 0],
            [1, "r", 20, 285, 0],
            [1, "r", 19, 285, 0],
            [1, "r", 18, 285, 0],
            [1, "r", 17, 285, 0],
            [1, "r", 19, 287, 0],
            [1, "r", 18, 287, 0],
            [1, "r", 20, 287, 0],
            [1, "r", 21, 287, 0],
            [1, "r", 22, 287, 0],
            [1, "r", 23, 287, 0],
            [1, "r", 21, 288, 0],
            [1, "r", 19, 288, 0],
            [1, "r", 17, 288, 0],
            [1, "r", 19, 289, 0],
            [1, "r", 21, 289, 0],
            [1, "r", 22, 289, 0],
            [1, "r", 20, 289, 0],
            [1, "r", 23, 288, 0],
            [1, "r", 24, 287, 0],
            [1, "r", 24, 286, 0],
            [1, "r", 23, 285, 0],
            [1, "r", 66, 286, 0],
            [1, "r", 64, 287, 0],
            [1, "r", 63, 287, 0],
            [1, "r", 60, 287, 0],
            [1, "r", 59, 285, 0],
            [1, "r", 58, 284, 0],
            [1, "r", 59, 283, 0],
            [1, "r", 65, 283, 0],
            [1, "r", 64, 283, 0],
            [1, "r", 63, 283, 0],
            [1, "r", 62, 283, 0],
            [1, "r", 61, 283, 0],
            [1, "r", 60, 283, 0],
            [1, "r", 59, 284, 0],
            [1, "r", 58, 285, 0],
            [1, "r", 60, 286, 0],
            [1, "r", 59, 286, 0],
            [1, "r", 61, 287, 0],
            [1, "r", 62, 287, 0],
            [1, "r", 61, 286, 0],
            [1, "r", 62, 286, 0],
            [1, "r", 63, 286, 0],
            [1, "r", 64, 286, 0],
            [1, "r", 65, 286, 0],
            [1, "r", 67, 285, 0],
            [1, "r", 66, 285, 0],
            [1, "r", 65, 285, 0],
            [1, "r", 64, 285, 0],
            [1, "r", 63, 285, 0],
            [1, "r", 62, 285, 0],
            [1, "r", 61, 285, 0],
            [1, "r", 60, 285, 0],
            [1, "r", 60, 284, 0],
            [1, "r", 61, 284, 0],
            [1, "r", 62, 284, 0],
            [1, "r", 63, 284, 0],
            [1, "r", 64, 284, 0],
            [1, "r", 65, 284, 0],
            [1, "r", 66, 284, 0],
            [1, "r", 65, 287, 0],
            [1, "r", 67, 286, 0],
            [1, "p", 0, 13, 189, 1],
            [1, "p", 0, 32, 184, 1],
            [1, "p", 0, 47, 191, 1],
            [1, "p", 0, 64, 184, 1],
            [1, "p", 0, 84, 192, 1],
            [1, "p", 0, 78, 207, 1],
            [1, "p", 0, 58, 216, 1],
            [1, "p", 0, 41, 211, 1],
            [1, "p", 0, 18, 211, 1],
            [1, "p", 0, 14, 230, 1],
            [1, "p", 0, 29, 237, 1],
            [1, "p", 0, 50, 230, 1],
            [1, "p", 0, 78, 241, 1],
            [1, "p", 0, 74, 256, 1],
            [1, "p", 0, 68, 266, 1],
            [1, "p", 0, 48, 259, 1],
            [1, "p", 0, 31, 263, 1],
            [1, "p", 0, 18, 274, 1],
            [1, "p", 0, 33, 283, 1],
            [1, "p", 0, 66, 287, 1],
            [1, "p", 0, 82, 291, 1],
            [1, "p", 0, 16, 295, 1],
            [1, "p", 0, 45, 294, 1],
            [1, "p", 0, 18, 252, 1],
            [1, "p", 0, 79, 227, 1],
            [1, "p", 0, 32, 200, 1],
            [1, "p", 0, 64, 200, 1],
            [1, "s", 0, 21, 193, 1],
            [1, "s", 1, 18, 189, 1],
            [1, "s", 2, 26, 189, 1],
            [1, "b", 1, 15, 181, 0],
            [1, "b", 2, 18, 190, 0],
            [1, "b", 2, 29, 193, 0],
            [1, "t", 3, 16, 182, 0],
            [1, "t", 3, 13, 195, 0],
            [1, "t", 4, 16, 183, 0],
            [1, "t", 5, 10, 184, 0],
            [1, "t", 5, 23, 182, 0],
            [1, "t", 4, 30, 187, 0],
            [1, "t", 1, 26, 192, 0],
            [1, "b", 1, 25, 188, 0],
            [1, "s", 1, 24, 181, 1],
            [1, "t", 3, 33, 183, 0],
            [1, "b", 1, 36, 189, 0],
            [1, "t", 2, 35, 190, 0],
            [1, "b", 3, 19, 200, 0],
            [1, "s", 0, 28, 194, 1],
            [1, "s", 1, 32, 196, 1],
            [1, "s", 1, 36, 183, 1],
            [1, "s", 2, 38, 184, 1],
            [1, "s", 2, 10, 192, 1],
            [1, "s", 2, 12, 183, 1],
            [1, "s", 1, 15, 199, 1],
            [1, "b", 0, 12, 202, 0],
            [1, "t", 2, 13, 203, 0],
            [1, "t", 4, 20, 200, 0],
            [1, "t", 4, 12, 194, 0],
            [1, "t", 5, 15, 205, 0],
            [1, "t", 5, 29, 200, 0],
            [1, "t", 3, 28, 201, 0],
            [1, "s", 2, 25, 199, 1],
            [1, "s", 1, 22, 204, 1],
            [1, "g", 2, 25, 205, 1],
            [1, "b", 1, 27, 216, 0],
            [1, "s", 1, 25, 217, 1],
            [1, "s", 1, 33, 217, 1],
            [1, "s", 2, 35, 215, 1],
            [1, "s", 0, 32, 221, 1],
            [1, "t", 2, 31, 222, 0],
            [1, "t", 4, 26, 221, 0],
            [1, "b", 3, 27, 222, 0],
            [1, "b", 0, 17, 217, 0],
            [1, "t", 3, 18, 216, 0],
            [1, "t", 4, 13, 215, 0],
            [1, "t", 5, 30, 213, 0],
            [1, "t", 5, 24, 208, 0],
            [1, "s", 1, 12, 216, 1],
            [1, "s", 2, 11, 210, 1],
            [1, "s", 2, 34, 223, 1],
            [1, "b", 2, 36, 218, 0],
            [1, "t", 4, 40, 206, 0],
            [1, "t", 5, 35, 203, 0],
            [1, "t", 3, 39, 206, 0],
            [1, "b", 1, 34, 204, 0],
            [1, "s", 1, 33, 206, 1],
            [1, "s", 1, 42, 203, 1],
            [1, "s", 0, 47, 196, 1],
            [1, "b", 2, 40, 196, 0],
            [1, "t", 4, 39, 197, 0],
            [1, "t", 5, 44, 187, 0],
            [1, "b", 1, 46, 181, 0],
            [1, "t", 2, 47, 182, 0],
            [1, "b", 0, 57, 182, 0],
            [1, "b", 3, 56, 183, 0],
            [1, "t", 4, 55, 184, 0],
            [1, "t", 5, 62, 195, 0],
            [1, "s", 1, 51, 185, 1],
            [1, "s", 2, 62, 180, 1],
            [1, "s", 2, 61, 188, 1],
            [1, "s", 1, 61, 189, 1],
            [1, "s", 2, 48, 195, 1],
            [1, "b", 1, 51, 199, 0],
            [1, "t", 2, 52, 199, 0],
            [1, "t", 3, 56, 204, 0],
            [1, "t", 4, 57, 204, 0],
            [1, "t", 4, 51, 204, 0],
            [1, "s", 1, 52, 205, 1],
            [1, "s", 2, 57, 200, 1],
            [1, "s", 1, 56, 199, 1],
            [1, "b", 0, 55, 192, 0],
            [1, "t", 3, 56, 193, 0],
            [1, "t", 4, 50, 190, 0],
            [1, "b", 1, 76, 188, 0],
            [1, "t", 2, 75, 188, 0],
            [1, "t", 2, 73, 192, 0],
            [1, "t", 4, 72, 191, 0],
            [1, "t", 5, 78, 193, 0],
            [1, "b", 0, 79, 192, 0],
            [1, "s", 2, 79, 190, 1],
            [1, "s", 1, 74, 194, 1],
            [1, "s", 1, 72, 187, 1],
            [1, "s", 0, 74, 183, 1],
            [1, "s", 1, 75, 183, 1],
            [1, "t", 2, 69, 181, 0],
            [1, "t", 4, 70, 182, 0],
            [1, "t", 5, 69, 180, 0],
            [1, "b", 1, 65, 189, 0],
            [1, "b", 2, 66, 189, 0],
            [1, "t", 3, 64, 188, 0],
            [1, "t", 4, 67, 192, 0],
            [1, "b", 2, 85, 183, 0],
            [1, "t", 1, 84, 184, 0],
            [1, "t", 4, 81, 180, 0],
            [1, "t", 5, 89, 180, 0],
            [1, "t", 0, 90, 188, 0],
            [1, "t", 3, 89, 190, 0],
            [1, "s", 1, 87, 187, 1],
            [1, "s", 2, 87, 197, 1],
            [1, "b", 1, 84, 200, 0],
            [1, "t", 2, 83, 201, 0],
            [1, "t", 4, 87, 207, 0],
            [1, "s", 2, 79, 202, 1],
            [1, "s", 1, 80, 203, 1],
            [1, "t", 0, 71, 200, 0],
            [1, "b", 2, 72, 201, 0],
            [1, "t", 2, 65, 205, 0],
            [1, "t", 1, 66, 206, 0],
            [1, "t", 4, 63, 209, 0],
            [1, "t", 5, 73, 203, 0],
            [1, "s", 0, 70, 207, 1],
            [1, "s", 1, 71, 206, 1],
            [1, "s", 2, 68, 199, 1],
            [1, "s", 1, 64, 213, 1],
            [1, "t", 0, 85, 213, 0],
            [1, "b", 2, 84, 212, 0],
            [1, "t", 3, 77, 209, 0],
            [1, "t", 4, 83, 216, 0],
            [1, "t", 4, 73, 209, 0],
            [1, "b", 0, 86, 222, 0],
            [1, "b", 3, 87, 221, 0],
            [1, "s", 1, 80, 214, 1],
            [1, "s", 2, 87, 216, 1],
            [1, "s", 2, 84, 224, 1],
            [1, "s", 1, 77, 227, 1],
            [1, "t", 1, 74, 222, 0],
            [1, "b", 1, 69, 218, 0],
            [1, "b", 2, 75, 219, 0],
            [1, "s", 2, 74, 218, 1],
            [1, "s", 1, 69, 223, 1],
            [1, "s", 1, 77, 221, 1],
            [1, "b", 1, 72, 211, 0],
            [1, "b", 1, 85, 232, 0],
            [1, "t", 2, 84, 233, 0],
            [1, "t", 2, 78, 238, 0],
            [1, "b", 1, 77, 237, 0],
            [1, "t", 5, 87, 236, 0],
            [1, "t", 5, 76, 229, 0],
            [1, "b", 2, 74, 241, 0],
            [1, "s", 0, 73, 242, 1],
            [1, "s", 0, 81, 238, 1],
            [1, "s", 1, 82, 237, 1],
            [1, "s", 2, 72, 237, 1],
            [1, "s", 2, 78, 242, 1],
            [1, "b", 1, 66, 230, 0],
            [1, "b", 2, 62, 229, 0],
            [1, "t", 4, 67, 231, 0],
            [1, "t", 4, 62, 228, 0],
            [1, "t", 5, 64, 233, 0],
            [1, "t", 2, 65, 234, 0],
            [1, "t", 2, 51, 220, 0],
            [1, "t", 1, 50, 218, 0],
            [1, "b", 1, 45, 223, 0],
            [1, "b", 2, 46, 224, 0],
            [1, "t", 4, 49, 218, 0],
            [1, "t", 4, 47, 225, 0],
            [1, "s", 1, 50, 215, 1],
            [1, "s", 2, 51, 213, 1],
            [1, "s", 2, 42, 227, 1],
            [1, "s", 1, 44, 227, 1],
            [1, "s", 1, 60, 230, 1],
            [1, "s", 2, 59, 231, 1],
            [1, "b", 1, 85, 252, 0],
            [1, "t", 2, 84, 251, 0],
            [1, "t", 2, 74, 250, 0],
            [1, "t", 0, 75, 251, 0],
            [1, "b", 0, 83, 246, 0],
            [1, "t", 3, 82, 247, 0],
            [1, "t", 4, 81, 259, 0],
            [1, "t", 4, 69, 249, 0],
            [1, "t", 5, 87, 246, 0],
            [1, "t", 5, 75, 252, 0],
            [1, "s", 1, 79, 257, 1],
            [1, "s", 2, 78, 249, 1],
            [1, "s", 2, 80, 258, 1],
            [1, "s", 1, 88, 254, 1],
            [1, "s", 1, 85, 264, 1],
            [1, "s", 2, 89, 263, 1],
            [1, "s", 2, 87, 269, 1],
            [1, "s", 0, 84, 268, 1],
            [1, "s", 2, 76, 267, 1],
            [1, "s", 1, 66, 261, 1],
            [1, "s", 1, 87, 274, 1],
            [1, "s", 1, 76, 263, 1],
            [1, "s", 1, 59, 251, 1],
            [1, "s", 0, 59, 252, 1],
            [1, "t", 2, 86, 265, 0],
            [1, "t", 0, 78, 270, 0],
            [1, "t", 2, 79, 271, 0],
            [1, "t", 0, 77, 260, 0],
            [1, "t", 3, 78, 261, 0],
            [1, "b", 1, 71, 264, 0],
            [1, "b", 1, 88, 269, 0],
            [1, "t", 5, 84, 264, 0],
            [1, "t", 5, 79, 261, 0],
            [1, "t", 5, 72, 265, 0],
            [1, "t", 5, 77, 270, 0],
            [1, "t", 0, 87, 261, 0],
            [1, "t", 2, 86, 260, 0],
            [1, "t", 4, 84, 255, 0],
            [1, "t", 4, 68, 255, 0],
            [1, "t", 1, 67, 254, 0],
            [1, "t", 2, 65, 262, 0],
            [1, "t", 1, 57, 260, 0],
            [1, "t", 2, 58, 259, 0],
            [1, "b", 1, 63, 256, 0],
            [1, "b", 1, 52, 248, 0],
            [1, "t", 2, 53, 248, 0],
            [1, "s", 1, 50, 253, 1],
            [1, "s", 2, 67, 263, 1],
            [1, "s", 2, 52, 252, 1],
            [1, "s", 2, 71, 244, 1],
            [1, "b", 0, 57, 245, 0],
            [1, "t", 2, 58, 244, 0],
            [1, "b", 1, 53, 237, 0],
            [1, "t", 2, 54, 237, 0],
            [1, "t", 2, 41, 238, 0],
            [1, "t", 1, 42, 237, 0],
            [1, "t", 5, 57, 235, 0],
            [1, "t", 5, 60, 246, 0],
            [1, "t", 5, 50, 252, 0],
            [1, "t", 1, 42, 248, 0],
            [1, "b", 1, 43, 249, 0],
            [1, "b", 3, 37, 243, 0],
            [1, "s", 0, 50, 236, 1],
            [1, "s", 2, 39, 247, 1],
            [1, "s", 2, 51, 235, 1],
            [1, "s", 2, 60, 243, 1],
            [1, "s", 2, 36, 240, 1],
            [1, "s", 2, 43, 254, 1],
            [1, "s", 1, 42, 254, 1],
            [1, "t", 1, 38, 233, 0],
            [1, "t", 2, 35, 235, 0],
            [1, "t", 4, 33, 228, 0],
            [1, "t", 4, 33, 245, 0],
            [1, "t", 4, 43, 235, 0],
            [1, "t", 5, 45, 249, 0],
            [1, "t", 5, 41, 253, 0],
            [1, "b", 1, 20, 227, 0],
            [1, "b", 1, 14, 240, 0],
            [1, "t", 3, 21, 227, 0],
            [1, "t", 3, 27, 234, 0],
            [1, "t", 3, 15, 241, 0],
            [1, "t", 3, 12, 229, 0],
            [1, "t", 4, 17, 224, 0],
            [1, "t", 4, 11, 231, 0],
            [1, "t", 4, 22, 238, 0],
            [1, "t", 4, 11, 239, 0],
            [1, "t", 1, 22, 243, 0],
            [1, "b", 2, 23, 242, 0],
            [1, "s", 1, 23, 238, 1],
            [1, "s", 1, 22, 228, 1],
            [1, "s", 2, 24, 228, 1],
            [1, "s", 2, 21, 236, 1],
            [1, "s", 0, 13, 228, 1],
            [1, "s", 0, 16, 242, 1],
            [1, "s", 1, 15, 244, 1],
            [1, "s", 1, 34, 236, 1],
            [1, "t", 1, 26, 249, 0],
            [1, "t", 1, 22, 256, 0],
            [1, "t", 2, 23, 255, 0],
            [1, "b", 1, 17, 256, 0],
            [1, "b", 2, 18, 256, 0],
            [1, "s", 0, 21, 252, 1],
            [1, "s", 2, 20, 250, 1],
            [1, "s", 2, 23, 259, 1],
            [1, "s", 1, 13, 257, 1],
            [1, "t", 1, 31, 254, 0],
            [1, "t", 2, 32, 254, 0],
            [1, "t", 4, 28, 254, 0],
            [1, "t", 4, 34, 258, 0],
            [1, "t", 0, 29, 260, 0],
            [1, "b", 2, 30, 261, 0],
            [1, "t", 0, 43, 262, 0],
            [1, "t", 2, 42, 263, 0],
            [1, "t", 4, 46, 264, 0],
            [1, "b", 1, 39, 265, 0],
            [1, "b", 1, 58, 267, 0],
            [1, "t", 2, 57, 268, 0],
            [1, "t", 4, 62, 270, 0],
            [1, "t", 5, 52, 273, 0],
            [1, "s", 1, 52, 269, 1],
            [1, "s", 1, 41, 272, 1],
            [1, "s", 2, 41, 274, 1],
            [1, "t", 2, 42, 268, 0],
            [1, "t", 0, 43, 268, 0],
            [1, "b", 1, 46, 272, 0],
            [1, "b", 1, 14, 265, 0],
            [1, "t", 2, 15, 266, 0],
            [1, "t", 4, 19, 264, 0],
            [1, "t", 4, 29, 263, 0],
            [1, "t", 4, 11, 269, 0],
            [1, "t", 1, 29, 271, 0],
            [1, "b", 2, 28, 272, 0],
            [1, "t", 2, 24, 267, 0],
            [1, "t", 2, 20, 279, 0],
            [1, "t", 0, 19, 278, 0],
            [1, "t", 3, 13, 278, 0],
            [1, "b", 0, 21, 284, 0],
            [1, "b", 0, 18, 289, 0],
            [1, "t", 2, 20, 283, 0],
            [1, "t", 2, 19, 290, 0],
            [1, "t", 4, 19, 283, 0],
            [1, "t", 4, 20, 290, 0],
            [1, "s", 1, 16, 285, 1],
            [1, "s", 1, 24, 288, 1],
            [1, "s", 2, 26, 287, 1],
            [1, "s", 2, 16, 278, 1],
            [1, "s", 1, 21, 268, 1],
            [1, "s", 2, 19, 268, 1],
            [1, "t", 0, 12, 294, 0],
            [1, "b", 1, 13, 295, 0],
            [1, "t", 3, 13, 291, 0],
            [1, "t", 3, 10, 299, 0],
            [1, "t", 4, 11, 287, 0],
            [1, "t", 4, 17, 298, 0],
            [1, "t", 1, 27, 294, 0],
            [1, "b", 2, 26, 295, 0],
            [1, "t", 3, 33, 297, 0],
            [1, "b", 1, 48, 278, 0],
            [1, "b", 0, 46, 280, 0],
            [1, "b", 2, 50, 280, 0],
            [1, "t", 0, 44, 282, 0],
            [1, "b", 1, 49, 283, 0],
            [1, "b", 0, 51, 278, 0],
            [1, "b", 3, 50, 279, 0],
            [1, "b", 3, 44, 284, 0],
            [1, "b", 0, 47, 284, 0],
            [1, "b", 2, 42, 283, 0],
            [1, "t", 4, 51, 277, 0],
            [1, "b", 1, 44, 286, 0],
            [1, "b", 2, 46, 286, 0],
            [1, "b", 1, 42, 285, 0],
            [1, "b", 3, 41, 286, 0],
            [1, "t", 5, 42, 287, 0],
            [1, "b", 1, 42, 278, 0],
            [1, "b", 2, 43, 279, 0],
            [1, "b", 0, 40, 280, 0],
            [1, "t", 4, 39, 283, 0],
            [1, "t", 4, 39, 279, 0],
            [1, "t", 5, 43, 277, 0],
            [1, "t", 5, 47, 287, 0],
            [1, "t", 4, 46, 277, 0],
            [1, "t", 4, 45, 290, 0],
            [1, "t", 4, 36, 285, 0],
            [1, "t", 3, 35, 284, 0],
            [1, "t", 3, 36, 272, 0],
            [1, "t", 4, 35, 271, 0],
            [1, "t", 1, 29, 279, 0],
            [1, "b", 1, 32, 277, 0],
            [1, "t", 3, 31, 278, 0],
            [1, "b", 2, 28, 280, 0],
            [1, "t", 4, 29, 286, 0],
            [1, "t", 5, 28, 275, 0],
            [1, "t", 3, 37, 292, 0],
            [1, "b", 1, 36, 291, 0],
            [1, "b", 0, 34, 298, 0],
            [1, "t", 4, 31, 292, 0],
            [1, "t", 4, 46, 295, 0],
            [1, "t", 4, 59, 287, 0],
            [1, "b", 1, 58, 286, 0],
            [1, "s", 1, 68, 284, 1],
            [1, "s", 2, 70, 286, 1],
            [1, "s", 0, 67, 284, 1],
            [1, "t", 3, 66, 283, 0],
            [1, "t", 1, 65, 282, 0],
            [1, "b", 1, 64, 288, 0],
            [1, "t", 3, 60, 293, 0],
            [1, "t", 1, 61, 294, 0],
            [1, "b", 1, 76, 294, 0],
            [1, "t", 5, 75, 295, 0],
            [1, "t", 5, 56, 293, 0],
            [1, "t", 5, 59, 281, 0],
            [1, "t", 5, 67, 291, 0],
            [1, "b", 0, 88, 293, 0],
            [1, "t", 2, 89, 292, 0],
            [1, "t", 2, 85, 286, 0],
            [1, "t", 4, 88, 289, 0],
            [1, "t", 4, 79, 287, 0],
            [1, "b", 1, 84, 285, 0],
            [1, "t", 3, 75, 284, 0],
            [1, "b", 0, 75, 278, 0],
            [1, "t", 3, 74, 277, 0],
            [1, "t", 4, 81, 276, 0],
            [1, "t", 2, 65, 276, 0],
            [1, "b", 1, 66, 275, 0],
            [1, "g", 0, 45, 261, 1],
            [1, "g", 1, 39, 258, 1],
            [1, "g", 0, 35, 250, 1],
            [1, "g", 2, 22, 247, 1],
            [1, "g", 2, 27, 227, 1],
            [1, "g", 2, 63, 218, 1],
            [1, "g", 1, 56, 224, 1],
            [1, "g", 0, 46, 231, 1],
            [1, "g", 1, 65, 240, 1],
            [1, "g", 2, 67, 238, 1],
            [1, "g", 2, 79, 232, 1],
            [1, "g", 2, 72, 253, 1],
            [1, "g", 2, 62, 264, 1],
            [1, "g", 2, 28, 267, 1],
            [1, "g", 2, 58, 274, 1],
            [1, "de", 2, 14, 182, 0],
            [1, "de", 2, 24, 182, 0],
            [1, "de", 0, 11, 185, 0],
            [1, "de", 0, 14, 194, 0],
            [1, "de", 1, 25, 196, 0],
            [1, "de", 3, 31, 183, 0],
            [1, "de", 0, 38, 181, 0],
            [1, "de", 2, 45, 186, 0],
            [1, "de", 1, 38, 191, 0],
            [1, "de", 0, 56, 181, 0],
            [1, "de", 1, 68, 182, 0],
            [1, "de", 2, 80, 181, 0],
            [1, "de", 3, 86, 187, 0],
            [1, "de", 0, 84, 193, 0],
            [1, "de", 1, 82, 201, 0],
            [1, "de", 2, 64, 191, 0],
            [1, "de", 2, 72, 200, 0],
            [1, "de", 3, 64, 201, 0],
            [1, "de", 2, 76, 209, 0],
            [1, "de", 3, 71, 212, 0],
            [1, "de", 1, 86, 214, 0],
            [1, "de", 0, 57, 208, 0],
            [1, "de", 0, 41, 203, 0],
            [1, "de", 1, 15, 206, 0],
            [1, "de", 2, 25, 209, 0],
            [1, "de", 3, 16, 218, 0],
            [1, "de", 3, 11, 227, 0],
            [1, "de", 0, 22, 229, 0],
            [1, "de", 1, 15, 239, 0],
            [1, "de", 2, 24, 238, 0],
            [1, "de", 3, 22, 246, 0],
            [1, "de", 3, 10, 253, 0],
            [1, "de", 1, 18, 258, 0],
            [1, "de", 1, 28, 261, 0],
            [1, "de", 1, 14, 267, 0],
            [1, "de", 0, 24, 268, 0],
            [1, "de", 0, 15, 278, 0],
            [1, "de", 2, 21, 279, 0],
            [1, "de", 2, 30, 272, 0],
            [1, "de", 2, 29, 281, 0],
            [1, "de", 2, 15, 284, 0],
            [1, "de", 3, 12, 291, 0],
            [1, "de", 3, 30, 287, 0],
            [1, "de", 3, 27, 293, 0],
            [1, "de", 0, 25, 296, 0],
            [1, "de", 0, 11, 298, 0],
            [1, "de", 0, 8, 286, 0],
            [1, "de", 2, 36, 299, 0],
            [1, "de", 2, 37, 280, 0],
            [1, "de", 3, 38, 291, 0],
            [1, "de", 1, 48, 287, 0],
            [1, "de", 1, 46, 277, 0],
            [1, "de", 1, 53, 278, 0],
            [1, "de", 3, 48, 295, 0],
            [1, "de", 0, 57, 294, 0],
            [1, "de", 1, 65, 290, 0],
            [1, "de", 1, 84, 292, 0],
            [1, "de", 2, 77, 295, 0],
            [1, "de", 2, 84, 287, 0],
            [1, "de", 0, 74, 279, 0],
            [1, "de", 3, 65, 274, 0],
            [1, "de", 2, 71, 267, 0],
            [1, "de", 2, 65, 261, 0],
            [1, "de", 2, 47, 264, 0],
            [1, "de", 3, 47, 258, 0],
            [1, "de", 3, 53, 251, 0],
            [1, "de", 2, 40, 253, 0],
            [1, "de", 0, 35, 244, 0],
            [1, "de", 0, 37, 233, 0],
            [1, "de", 3, 44, 226, 0],
            [1, "de", 2, 37, 219, 0],
            [1, "de", 2, 54, 234, 0],
            [1, "de", 1, 66, 234, 0],
            [1, "de", 2, 65, 241, 0],
            [1, "de", 0, 68, 249, 0],
            [1, "de", 3, 78, 257, 0],
            [1, "de", 2, 86, 253, 0],
            [1, "de", 2, 83, 245, 0],
            [1, "de", 1, 82, 238, 0],
            [1, "de", 3, 76, 235, 0],
            [1, "de", 2, 86, 232, 0],
            [1, "de", 0, 86, 224, 0],
            [1, "de", 2, 76, 226, 0],
            [1, "de", 2, 61, 228, 0],
            [1, "de", 2, 58, 217, 0],
            [1, "de", 0, 49, 217, 0],
            [1, "de", 19, 11, 179, 0],
            [1, "de", 20, 17, 180, 0],
            [1, "de", 22, 18, 181, 0],
            [1, "de", 19, 30, 184, 0],
            [1, "de", 19, 27, 187, 0],
            [1, "de", 19, 30, 195, 0],
            [1, "de", 19, 18, 192, 0],
            [1, "de", 19, 44, 182, 0],
            [1, "de", 19, 49, 182, 0],
            [1, "de", 19, 54, 182, 0],
            [1, "de", 19, 59, 183, 0],
            [1, "de", 19, 56, 186, 0],
            [1, "de", 19, 46, 188, 0],
            [1, "de", 19, 58, 193, 0],
            [1, "de", 19, 67, 187, 0],
            [1, "de", 19, 65, 192, 0],
            [1, "de", 19, 71, 180, 0],
            [1, "de", 19, 78, 187, 0],
            [1, "de", 19, 80, 194, 0],
            [1, "de", 19, 72, 193, 0],
            [1, "de", 19, 82, 182, 0],
            [1, "de", 19, 88, 185, 0],
            [1, "de", 19, 87, 189, 0],
            [1, "de", 19, 86, 197, 0],
            [1, "de", 19, 85, 203, 0],
            [1, "de", 19, 74, 200, 0],
            [1, "de", 19, 70, 202, 0],
            [1, "de", 19, 83, 199, 0],
            [1, "de", 19, 86, 208, 0],
            [1, "de", 19, 84, 214, 0],
            [1, "de", 19, 83, 211, 0],
            [1, "de", 19, 84, 217, 0],
            [1, "de", 19, 77, 210, 0],
            [1, "de", 19, 71, 210, 0],
            [1, "de", 19, 73, 213, 0],
            [1, "de", 19, 66, 207, 0],
            [1, "de", 19, 66, 204, 0],
            [1, "de", 19, 62, 209, 0],
            [1, "de", 19, 63, 201, 0],
            [1, "de", 19, 56, 205, 0],
            [1, "de", 19, 49, 199, 0],
            [1, "de", 19, 50, 205, 0],
            [1, "de", 19, 40, 197, 0],
            [1, "de", 19, 38, 198, 0],
            [1, "de", 19, 40, 208, 0],
            [1, "de", 19, 36, 204, 0],
            [1, "de", 19, 33, 204, 0],
            [1, "de", 19, 29, 202, 0],
            [1, "de", 19, 27, 200, 0],
            [1, "de", 19, 26, 193, 0],
            [1, "de", 19, 18, 201, 0],
            [1, "de", 19, 20, 199, 0],
            [1, "de", 19, 12, 196, 0],
            [1, "de", 19, 12, 204, 0],
            [1, "de", 19, 11, 201, 0],
            [1, "de", 19, 23, 208, 0],
            [1, "de", 19, 31, 214, 0],
            [1, "de", 19, 26, 215, 0],
            [1, "de", 19, 36, 217, 0],
            [1, "de", 19, 32, 223, 0],
            [1, "de", 19, 26, 223, 0],
            [1, "de", 19, 18, 218, 0],
            [1, "de", 19, 15, 215, 0],
            [1, "de", 19, 17, 212, 0],
            [1, "de", 19, 15, 224, 0],
            [1, "de", 19, 19, 229, 0],
            [1, "de", 19, 10, 230, 0],
            [1, "de", 19, 22, 240, 0],
            [1, "de", 19, 13, 238, 0],
            [1, "de", 19, 13, 243, 0],
            [1, "de", 19, 24, 244, 0],
            [1, "de", 19, 24, 250, 0],
            [1, "de", 19, 28, 253, 0],
            [1, "de", 19, 33, 255, 0],
            [1, "de", 19, 34, 260, 0],
            [1, "de", 19, 31, 260, 0],
            [1, "de", 19, 38, 267, 0],
            [1, "de", 19, 44, 264, 0],
            [1, "de", 19, 43, 261, 0],
            [1, "de", 19, 16, 257, 0],
            [1, "de", 19, 22, 258, 0],
            [1, "de", 19, 12, 253, 0],
            [1, "de", 19, 8, 242, 0],
            [1, "de", 19, 8, 255, 0],
            [1, "de", 19, 15, 264, 0],
            [1, "de", 19, 20, 265, 0],
            [1, "de", 19, 12, 271, 0],
            [1, "de", 19, 8, 272, 0],
            [1, "de", 19, 13, 277, 0],
            [1, "de", 19, 21, 277, 0],
            [1, "de", 19, 21, 281, 0],
            [1, "de", 19, 27, 282, 0],
            [1, "de", 19, 29, 278, 0],
            [1, "de", 19, 29, 273, 0],
            [1, "de", 19, 36, 271, 0],
            [1, "de", 19, 8, 278, 0],
            [1, "de", 19, 11, 286, 0],
            [1, "de", 19, 17, 291, 0],
            [1, "de", 19, 14, 294, 0],
            [1, "de", 19, 8, 292, 0],
            [1, "de", 19, 12, 300, 0],
            [1, "de", 19, 18, 298, 0],
            [1, "de", 19, 16, 301, 0],
            [1, "de", 19, 27, 296, 0],
            [1, "de", 19, 25, 292, 0],
            [1, "de", 19, 23, 301, 0],
            [1, "de", 19, 28, 301, 0],
            [1, "de", 19, 35, 297, 0],
            [1, "de", 19, 37, 301, 0],
            [1, "de", 19, 43, 301, 0],
            [1, "de", 19, 46, 294, 0],
            [1, "de", 19, 46, 288, 0],
            [1, "de", 19, 40, 287, 0],
            [1, "de", 19, 50, 301, 0],
            [1, "de", 19, 58, 301, 0],
            [1, "de", 19, 64, 301, 0],
            [1, "de", 19, 71, 301, 0],
            [1, "de", 19, 80, 301, 0],
            [1, "de", 19, 87, 301, 0],
            [1, "de", 19, 86, 294, 0],
            [1, "de", 19, 87, 290, 0],
            [1, "de", 19, 82, 286, 0],
            [1, "de", 19, 75, 285, 0],
            [1, "de", 19, 66, 292, 0],
            [1, "de", 19, 66, 288, 0],
            [1, "de", 19, 58, 288, 0],
            [1, "de", 19, 67, 282, 0],
            [1, "de", 19, 61, 281, 0],
            [1, "de", 19, 60, 295, 0],
            [1, "de", 19, 50, 282, 0],
            [1, "de", 19, 47, 283, 0],
            [1, "de", 19, 48, 281, 0],
            [1, "de", 19, 44, 277, 0],
            [1, "de", 19, 41, 282, 0],
            [1, "de", 19, 38, 281, 0],
            [1, "de", 19, 42, 288, 0],
            [1, "de", 19, 52, 281, 0],
            [1, "de", 19, 50, 275, 0],
            [1, "de", 19, 39, 277, 0],
            [1, "de", 19, 38, 284, 0],
            [1, "de", 19, 51, 285, 0],
            [1, "de", 19, 38, 278, 0],
            [1, "de", 19, 47, 272, 0],
            [1, "de", 19, 44, 267, 0],
            [1, "de", 19, 76, 280, 0],
            [1, "de", 19, 78, 272, 0],
            [1, "de", 19, 68, 275, 0],
            [1, "de", 19, 70, 265, 0],
            [1, "de", 19, 65, 263, 0],
            [1, "de", 19, 64, 262, 0],
            [1, "de", 19, 60, 268, 0],
            [1, "de", 19, 56, 266, 0],
            [1, "de", 19, 55, 260, 0],
            [1, "de", 19, 59, 258, 0],
            [1, "de", 19, 62, 255, 0],
            [1, "de", 19, 67, 253, 0],
            [1, "de", 19, 69, 256, 0],
            [1, "de", 19, 44, 253, 0],
            [1, "de", 19, 44, 250, 0],
            [1, "de", 19, 36, 245, 0],
            [1, "de", 19, 39, 239, 0],
            [1, "de", 19, 42, 234, 0],
            [1, "de", 19, 37, 235, 0],
            [1, "de", 19, 45, 226, 0],
            [1, "de", 19, 46, 222, 0],
            [1, "de", 19, 51, 218, 0],
            [1, "de", 19, 68, 218, 0],
            [1, "de", 19, 74, 224, 0],
            [1, "de", 19, 76, 218, 0],
            [1, "de", 19, 84, 221, 0],
            [1, "de", 19, 88, 223, 0],
            [1, "de", 19, 76, 230, 0],
            [1, "de", 19, 86, 234, 0],
            [1, "de", 19, 79, 237, 0],
            [1, "de", 19, 75, 243, 0],
            [1, "de", 19, 81, 245, 0],
            [1, "de", 19, 83, 247, 0],
            [1, "de", 19, 88, 247, 0],
            [1, "de", 19, 84, 254, 0],
            [1, "de", 19, 86, 251, 0],
            [1, "de", 19, 85, 260, 0],
            [1, "de", 19, 79, 260, 0],
            [1, "de", 19, 76, 251, 0],
            [1, "de", 19, 72, 251, 0],
            [1, "de", 19, 69, 251, 0],
            [1, "de", 19, 87, 266, 0],
            [1, "de", 19, 89, 270, 0],
            [1, "de", 19, 87, 271, 0],
            [1, "de", 19, 82, 277, 0],
            [1, "de", 19, 87, 284, 0],
            [1, "de", 19, 87, 237, 0],
            [1, "de", 19, 88, 179, 0],
            [1, "de", 19, 50, 191, 0],
            [1, "de", 19, 52, 221, 0],
            [1, "de", 19, 34, 234, 0],
            [1, "de", 19, 27, 233, 0],
            [1, "de", 19, 37, 293, 0],
            [1, "de", 29, 13, 181, 0],
            [1, "de", 29, 8, 180, 0],
            [1, "de", 30, 13, 186, 0],
            [1, "de", 31, 24, 183, 0],
            [1, "de", 32, 33, 185, 0],
            [1, "de", 32, 37, 182, 0],
            [1, "de", 29, 45, 183, 0],
            [1, "de", 30, 48, 183, 0],
            [1, "de", 30, 58, 181, 0],
            [1, "de", 30, 66, 188, 0],
            [1, "de", 30, 66, 182, 0],
            [1, "de", 29, 63, 196, 0],
            [1, "de", 29, 54, 194, 0],
            [1, "de", 30, 79, 189, 0],
            [1, "de", 30, 87, 182, 0],
            [1, "de", 30, 83, 185, 0],
            [1, "de", 29, 88, 189, 0],
            [1, "de", 29, 85, 202, 0],
            [1, "de", 31, 82, 203, 0],
            [1, "de", 32, 80, 201, 0],
            [1, "de", 32, 87, 209, 0],
            [1, "de", 32, 83, 214, 0],
            [1, "de", 30, 88, 220, 0],
            [1, "de", 30, 78, 229, 0],
            [1, "de", 30, 73, 223, 0],
            [1, "de", 29, 74, 217, 0],
            [1, "de", 29, 67, 217, 0],
            [1, "de", 30, 72, 208, 0],
            [1, "de", 30, 73, 199, 0],
            [1, "de", 30, 65, 207, 0],
            [1, "de", 29, 63, 210, 0],
            [1, "de", 29, 50, 204, 0],
            [1, "de", 30, 41, 205, 0],
            [1, "de", 29, 35, 205, 0],
            [1, "de", 30, 27, 202, 0],
            [1, "de", 30, 20, 201, 0],
            [1, "de", 29, 10, 203, 0],
            [1, "de", 29, 14, 196, 0],
            [1, "de", 29, 24, 187, 0],
            [1, "de", 29, 28, 223, 0],
            [1, "de", 29, 32, 212, 0],
            [1, "de", 30, 28, 214, 0],
            [1, "de", 31, 24, 218, 0],
            [1, "de", 29, 36, 219, 0],
            [1, "de", 29, 37, 217, 0],
            [1, "de", 29, 52, 217, 0],
            [1, "de", 29, 59, 217, 0],
            [1, "de", 29, 69, 231, 0],
            [1, "de", 29, 64, 242, 0],
            [1, "de", 30, 53, 253, 0],
            [1, "de", 30, 45, 250, 0],
            [1, "de", 30, 58, 261, 0],
            [1, "de", 30, 73, 276, 0],
            [1, "de", 30, 64, 276, 0],
            [1, "de", 30, 82, 285, 0],
            [1, "de", 30, 65, 293, 0],
            [1, "de", 30, 56, 288, 0],
            [1, "de", 30, 45, 296, 0],
            [1, "de", 30, 40, 288, 0],
            [1, "de", 30, 37, 283, 0],
            [1, "de", 30, 53, 280, 0],
            [1, "de", 30, 41, 277, 0],
            [1, "de", 29, 28, 296, 0],
            [1, "de", 29, 18, 292, 0],
            [1, "de", 29, 24, 284, 0],
            [1, "de", 30, 10, 295, 0],
            [1, "de", 30, 10, 286, 0],
            [1, "de", 30, 15, 279, 0],
            [1, "de", 30, 15, 269, 0],
            [1, "de", 30, 21, 259, 0],
            [1, "de", 30, 12, 256, 0],
            [1, "de", 30, 31, 245, 0],
            [1, "de", 30, 12, 240, 0],
            [1, "de", 30, 28, 235, 0],
            [1, "de", 30, 13, 226, 0],
            [1, "de", 30, 39, 231, 0],
            [1, "de", 30, 61, 226, 0],
            [1, "r", 96, 262, 0],
            [1, "r", 97, 262, 0],
            [1, "r", 98, 262, 0],
            [1, "r", 97, 270, 0],
            [1, "r", 97, 271, 0],
            [1, "r", 97, 272, 0],
            [1, "r", 97, 273, 0],
            [1, "r", 97, 274, 0],
            [1, "r", 97, 275, 0],
            [1, "r", 97, 276, 0],
            [1, "r", 97, 277, 0],
            [1, "r", 97, 278, 0],
            [1, "r", 98, 270, 0],
            [1, "r", 98, 271, 0],
            [1, "r", 98, 272, 0],
            [1, "r", 98, 273, 0],
            [1, "r", 98, 274, 0],
            [1, "r", 98, 275, 0],
            [1, "r", 98, 276, 0],
            [1, "r", 98, 277, 0],
            [1, "r", 98, 278, 0],
            [1, "r", 96, 283, 0],
            [1, "r", 97, 283, 0],
            [1, "r", 97, 284, 0],
            [1, "r", 97, 285, 0],
            [1, "r", 98, 283, 0],
            [1, "r", 98, 284, 0],
            [1, "r", 98, 285, 0],
            [1, "r", 96, 270, 0],
            [1, "r", 96, 271, 0],
            [1, "r", 96, 272, 0],
            [1, "r", 96, 273, 0],
            [1, "r", 96, 274, 0],
            [1, "r", 96, 275, 0],
            [1, "r", 96, 276, 0],
            [1, "r", 96, 277, 0],
            [1, "r", 96, 278, 0],
            [1, "r", 44, 248, 0],
            [1, "de", 16, 94, 290, 0],
            [1, "de", 16, 94, 252, 0],
            [1, "de", 16, 94, 228, 0],
            [1, "de", 17, 94, 200, 0],
            [1, "r", 95, 282, 1],
            [1, "r", 95, 281, 1],
            [1, "r", 94, 281, 1],
            [1, "r", 90, 281, 1],
            [1, "r", 91, 282, 1],
            [1, "r", 89, 281, 1],
            [1, "r", 85, 276, 1],
            [1, "r", 85, 277, 1],
            [1, "r", 86, 278, 1],
            [1, "p", 0, 85, 279, 1],
            [1, "r", 86, 279, 1],
            [1, "r", 87, 280, 1],
            [1, "r", 96, 281, 0],
            [1, "r", 97, 281, 0],
            [1, "r", 98, 281, 0],
            [1, "r", 98, 282, 0],
            [1, "r", 97, 282, 0],
            [1, "r", 96, 282, 0],
            [1, "r", 68, 261, 1],
            [1, "fo", 1, 94, 168, 0],
            [1, "fo", 2, 94, 151, 0],
            [1, "fo", 1, 94, 138, 0],
            [1, "fo", 1, 93, 124, 0],
            [1, "fo", 1, 94, 129, 0],
            [1, "fo", 1, 93, 113, 0],
            [1, "fo", 1, 94, 102, 0],
            [1, "fo", 1, 94, 93, 0],
            [1, "fo", 1, 93, 90, 0],
            [1, "fo", 1, 94, 79, 0],
            [1, "fo", 1, 94, 76, 0],
            [1, "fo", 1, 93, 70, 0],
            [1, "fo", 1, 93, 63, 0],
            [1, "fo", 1, 94, 53, 0],
            [1, "fo", 1, 93, 10, 0],
            [1, "fo", 1, 85, 8, 0],
            [1, "fo", 1, 94, 12, 0],
            [1, "fo", 1, 66, 13, 0],
            [1, "fo", 1, 69, 9, 0],
            [1, "fo", 2, 68, 14, 0],
            [1, "fo", 2, 66, 25, 0],
            [1, "fo", 2, 92, 9, 0],
            [1, "fo", 2, 94, 14, 0],
            [1, "fo", 2, 87, 9, 0],
            [1, "fo", 2, 71, 9, 0],
            [1, "fo", 2, 90, 12, 0],
            [1, "fo", 2, 91, 13, 0],
            [1, "fo", 1, 74, 12, 0],
            [1, "fo", 2, 72, 12, 0],
            [1, "fo", 2, 75, 13, 0],
            [1, "fo", 2, 74, 15, 0],
            [1, "fo", 2, 84, 12, 0],
            [1, "fo", 2, 81, 14, 0],
            [1, "fo", 1, 84, 13, 0],
            [1, "fo", 1, 84, 19, 0],
            [1, "fo", 1, 11, 9, 0],
            [1, "fo", 1, 7, 14, 0],
            [1, "fo", 1, 8, 22, 0],
            [1, "fo", 1, 7, 34, 0],
            [1, "fo", 1, 12, 24, 0],
            [1, "fo", 2, 8, 24, 0],
            [1, "fo", 2, 9, 21, 0],
            [1, "fo", 2, 31, 10, 0],
            [1, "fo", 2, 33, 27, 0],
            [1, "fo", 2, 9, 34, 0],
            [1, "fo", 2, 8, 19, 0],
            [1, "fo", 1, 14, 10, 0],
            [1, "fo", 2, 13, 9, 0],
            [1, "fo", 2, 15, 11, 0],
            [1, "fo", 2, 9, 9, 0],
            [1, "fo", 2, 9, 10, 0],
            [1, "fo", 2, 9, 15, 0],
            [1, "fo", 2, 10, 23, 0],
            [1, "fo", 2, 34, 29, 0],
            [1, "fo", 2, 27, 18, 0],
            [1, "fo", 2, 25, 21, 0],
            [1, "fo", 2, 20, 18, 0],
            [1, "fo", 2, 18, 21, 0],
            [1, "fo", 2, 29, 9, 0],
            [1, "fo", 2, 13, 14, 0],
            [1, "fo", 2, 9, 38, 0],
            [1, "fo", 2, 21, 39, 0],
            [1, "fo", 2, 84, 26, 0],
            [1, "fo", 2, 77, 25, 0],
            [1, "fo", 2, 86, 35, 0],
            [1, "fo", 1, 70, 35, 0],
            [1, "fo", 2, 72, 36, 0],
            [1, "fo", 2, 73, 31, 0],
            [1, "fo", 2, 89, 39, 0],
            [1, "fo", 2, 65, 40, 0],
            [1, "fo", 2, 92, 32, 0],
            [1, "fo", 2, 90, 28, 0],
            [1, "de", 22, 25, 266, 0],
            [1, "de", 22, 17, 206, 0],
            [1, "de", 19, 8, 184, 0],
            [1, "de", 19, 22, 183, 0],
            [1, "de", 19, 35, 188, 0],
            [1, "de", 19, 36, 192, 0],
            [1, "de", 19, 50, 277, 0],
            [1, "de", 19, 35, 279, 0],
            [1, "t", 4, 7, 178, 0],
            [1, "t", 1, 7, 179, 0],
            [1, "t", 3, 7, 180, 0],
            [1, "t", 2, 7, 181, 0],
            [1, "t", 5, 7, 182, 0],
            [1, "t", 4, 7, 183, 0],
            [1, "t", 3, 7, 184, 0],
            [1, "t", 4, 7, 185, 0],
            [1, "t", 2, 7, 186, 0],
            [1, "t", 1, 7, 187, 0],
            [1, "t", 4, 7, 188, 0],
            [1, "t", 3, 7, 189, 0],
            [1, "t", 5, 7, 190, 0],
            [1, "t", 1, 7, 191, 0],
            [1, "t", 3, 7, 192, 0],
            [1, "t", 4, 7, 193, 0],
            [1, "t", 3, 7, 194, 0],
            [1, "t", 5, 7, 195, 0],
            [1, "t", 2, 7, 196, 0],
            [1, "t", 4, 7, 197, 0],
            [1, "b", 2, 7, 198, 0],
            [1, "t", 4, 7, 199, 0],
            [1, "t", 2, 7, 200, 0],
            [1, "t", 5, 7, 201, 0],
            [1, "t", 2, 7, 202, 0],
            [1, "t", 4, 7, 203, 0],
            [1, "t", 2, 7, 204, 0],
            [1, "t", 5, 7, 205, 0],
            [1, "t", 2, 7, 206, 0],
            [1, "t", 1, 7, 207, 0],
            [1, "t", 4, 7, 208, 0],
            [1, "t", 3, 7, 209, 0],
            [1, "t", 1, 7, 210, 0],
            [1, "b", 0, 7, 211, 0],
            [1, "t", 3, 7, 212, 0],
            [1, "t", 4, 7, 213, 0],
            [1, "t", 3, 7, 214, 0],
            [1, "t", 5, 7, 215, 0],
            [1, "t", 5, 7, 216, 0],
            [1, "t", 3, 7, 217, 0],
            [1, "t", 1, 7, 218, 0],
            [1, "t", 4, 7, 219, 0],
            [1, "b", 2, 7, 220, 0],
            [1, "t", 1, 7, 221, 0],
            [1, "t", 2, 7, 222, 0],
            [1, "t", 4, 7, 223, 0],
            [1, "t", 3, 7, 224, 0],
            [1, "t", 1, 7, 225, 0],
            [1, "t", 4, 7, 226, 0],
            [1, "t", 2, 7, 227, 0],
            [1, "t", 5, 7, 228, 0],
            [1, "t", 3, 7, 229, 0],
            [1, "t", 1, 7, 230, 0],
            [1, "t", 4, 7, 231, 0],
            [1, "b", 2, 7, 232, 0],
            [1, "t", 5, 7, 233, 0],
            [1, "t", 1, 7, 234, 0],
            [1, "t", 3, 7, 235, 0],
            [1, "t", 4, 7, 236, 0],
            [1, "t", 2, 7, 237, 0],
            [1, "t", 5, 7, 238, 0],
            [1, "b", 3, 7, 239, 0],
            [1, "t", 2, 7, 240, 0],
            [1, "t", 1, 7, 241, 0],
            [1, "t", 2, 7, 242, 0],
            [1, "t", 4, 7, 243, 0],
            [1, "t", 3, 7, 244, 0],
            [1, "t", 4, 7, 245, 0],
            [1, "t", 1, 7, 246, 0],
            [1, "b", 0, 7, 247, 0],
            [1, "t", 3, 7, 248, 0],
            [1, "t", 5, 7, 249, 0],
            [1, "t", 2, 7, 250, 0],
            [1, "t", 1, 7, 251, 0],
            [1, "t", 4, 7, 252, 0],
            [1, "t", 3, 7, 253, 0],
            [1, "t", 5, 7, 254, 0],
            [1, "t", 1, 7, 255, 0],
            [1, "t", 4, 7, 256, 0],
            [1, "t", 1, 7, 257, 0],
            [1, "t", 2, 7, 258, 0],
            [1, "t", 5, 7, 260, 0],
            [1, "t", 3, 7, 259, 0],
            [1, "t", 1, 7, 261, 0],
            [1, "t", 3, 7, 262, 0],
            [1, "t", 4, 7, 263, 0],
            [1, "t", 1, 7, 264, 0],
            [1, "t", 2, 7, 265, 0],
            [1, "t", 5, 7, 266, 0],
            [1, "t", 2, 7, 267, 0],
            [1, "t", 2, 7, 269, 0],
            [1, "b", 2, 7, 268, 0],
            [1, "t", 4, 7, 270, 0],
            [1, "t", 1, 7, 271, 0],
            [1, "t", 5, 7, 272, 0],
            [1, "b", 2, 7, 273, 0],
            [1, "t", 4, 7, 274, 0],
            [1, "t", 2, 7, 275, 0],
            [1, "t", 5, 7, 276, 0],
            [1, "t", 5, 7, 277, 0],
            [1, "t", 2, 7, 278, 0],
            [1, "t", 1, 7, 279, 0],
            [1, "t", 4, 7, 280, 0],
            [1, "b", 1, 7, 281, 0],
            [1, "t", 3, 7, 282, 0],
            [1, "t", 4, 7, 283, 0],
            [1, "t", 1, 7, 284, 0],
            [1, "t", 3, 7, 285, 0],
            [1, "t", 5, 7, 286, 0],
            [1, "t", 4, 7, 288, 0],
            [1, "t", 2, 7, 287, 0],
            [1, "b", 0, 7, 289, 0],
            [1, "t", 4, 7, 290, 0],
            [1, "t", 2, 7, 291, 0],
            [1, "t", 5, 7, 292, 0],
            [1, "t", 3, 7, 293, 0],
            [1, "t", 1, 7, 294, 0],
            [1, "t", 4, 7, 295, 0],
            [1, "t", 3, 7, 296, 0],
            [1, "t", 1, 7, 297, 0],
            [1, "t", 4, 7, 298, 0],
            [1, "t", 2, 7, 299, 0],
            [1, "b", 0, 7, 300, 0],
            [1, "t", 2, 7, 301, 0],
            [1, "r", 196, 271, 0],
            [1, "r", 199, 274, 0],
            [1, "r", 167, 238, 0],
            [1, "r", 171, 240, 0],
            [1, "r", 189, 207, 0],
            [1, "r", 192, 209, 0],
            [1, "r", 198, 271, 0],
            [1, "r", 197, 271, 0],
            [1, "r", 198, 272, 0],
            [1, "r", 197, 272, 0],
            [1, "r", 196, 272, 0],
            [1, "r", 195, 272, 0],
            [1, "r", 199, 272, 0],
            [1, "r", 199, 273, 0],
            [1, "r", 198, 273, 0],
            [1, "r", 197, 273, 0],
            [1, "r", 196, 273, 0],
            [1, "r", 198, 274, 0],
            [1, "r", 197, 274, 0],
            [1, "r", 195, 273, 0],
            [1, "r", 196, 274, 0],
            [1, "r", 198, 275, 0],
            [1, "r", 197, 275, 0],
            [1, "r", 200, 274, 0],
            [1, "r", 200, 273, 0],
            [1, "r", 199, 275, 0],
            [1, "plm", 2, 200, 272, 0],
            [1, "plm", 1, 195, 271, 0],
            [1, "plm", 0, 199, 268, 0],
            [1, "plm", 0, 193, 277, 0],
            [1, "plm", 1, 199, 276, 0],
            [1, "s", 1, 200, 275, 1],
            [1, "s", 1, 194, 272, 1],
            [1, "s", 2, 193, 270, 1],
            [1, "g", 2, 193, 273, 1],
            [1, "g", 2, 201, 267, 1],
            [1, "m", 2, 220, 298, 1],
            [1, "m", 1, 219, 292, 1],
            [1, "m", 1, 214, 297, 1],
            [1, "r", 168, 238, 0],
            [1, "r", 169, 238, 0],
            [1, "r", 170, 238, 0],
            [1, "r", 171, 239, 0],
            [1, "r", 170, 239, 0],
            [1, "r", 169, 239, 0],
            [1, "r", 168, 239, 0],
            [1, "r", 167, 239, 0],
            [1, "r", 166, 239, 0],
            [1, "r", 166, 240, 0],
            [1, "r", 167, 240, 0],
            [1, "r", 168, 240, 0],
            [1, "r", 169, 240, 0],
            [1, "r", 170, 240, 0],
            [1, "r", 168, 241, 0],
            [1, "r", 169, 241, 0],
            [1, "r", 170, 241, 0],
            [1, "r", 171, 241, 0],
            [1, "plm", 2, 171, 238, 0],
            [1, "plm", 1, 166, 238, 0],
            [1, "plm", 0, 167, 237, 0],
            [1, "plm", 0, 171, 242, 0],
            [1, "plm", 0, 165, 243, 0],
            [1, "plm", 0, 171, 235, 0],
            [1, "plm", 0, 174, 241, 0],
            [1, "s", 1, 165, 239, 1],
            [1, "s", 1, 172, 241, 1],
            [1, "s", 0, 170, 237, 1],
            [1, "s", 1, 171, 237, 1],
            [1, "s", 2, 174, 236, 1],
            [1, "s", 2, 162, 241, 1],
            [1, "s", 2, 170, 246, 1],
            [1, "s", 2, 167, 235, 1],
            [1, "s", 2, 176, 243, 1],
            [1, "r", 190, 207, 0],
            [1, "r", 191, 207, 0],
            [1, "r", 192, 208, 0],
            [1, "r", 191, 208, 0],
            [1, "r", 190, 208, 0],
            [1, "r", 189, 208, 0],
            [1, "r", 188, 208, 0],
            [1, "r", 189, 209, 0],
            [1, "r", 190, 209, 0],
            [1, "r", 191, 209, 0],
            [1, "r", 188, 209, 0],
            [1, "r", 190, 210, 0],
            [1, "r", 191, 210, 0],
            [1, "r", 192, 210, 0],
            [1, "plm", 2, 189, 210, 0],
            [1, "plm", 2, 192, 205, 0],
            [1, "plm", 1, 192, 207, 0],
            [1, "plm", 0, 193, 210, 0],
            [1, "plm", 0, 187, 208, 0],
            [1, "plm", 0, 197, 206, 0],
            [1, "plm", 0, 191, 213, 0],
            [1, "plm", 0, 190, 204, 0],
            [1, "s", 1, 188, 207, 1],
            [1, "s", 1, 190, 211, 1],
            [1, "s", 2, 188, 213, 1],
            [1, "s", 2, 187, 205, 1],
            [1, "s", 0, 194, 210, 1],
            [1, "s", 0, 198, 207, 1],
            [1, "s", 1, 193, 204, 1],
            [1, "s", 1, 193, 213, 1],
            [1, "s", 2, 198, 212, 1],
            [1, "s", 2, 182, 208, 1],
            [1, "s", 1, 204, 271, 1],
            [1, "s", 0, 203, 272, 1],
            [1, "s", 0, 189, 275, 1],
            [1, "s", 0, 195, 265, 1],
            [1, "s", 2, 196, 264, 1],
            [1, "s", 2, 186, 274, 1],
            [1, "s", 2, 197, 280, 1],
            [1, "s", 0, 217, 282, 1],
            [1, "s", 1, 214, 285, 1],
            [1, "s", 1, 214, 274, 1],
            [1, "s", 1, 203, 282, 1],
            [1, "s", 1, 205, 290, 1],
            [1, "s", 0, 207, 292, 1],
            [1, "s", 0, 197, 297, 1],
            [1, "s", 0, 184, 287, 1],
            [1, "s", 2, 213, 289, 1],
            [1, "s", 2, 196, 294, 1],
            [1, "s", 2, 187, 286, 1],
            [1, "s", 1, 192, 289, 1],
            [1, "s", 1, 189, 299, 1],
            [1, "s", 0, 213, 273, 1],
            [1, "g", 2, 212, 278, 1],
            [1, "g", 1, 200, 288, 1],
            [1, "g", 2, 215, 265, 1],
            [1, "g", 2, 183, 281, 1],
            [1, "s", 0, 178, 295, 1],
            [1, "s", 0, 167, 281, 1],
            [1, "s", 0, 175, 263, 1],
            [1, "s", 1, 176, 293, 1],
            [1, "s", 1, 163, 285, 1],
            [1, "s", 1, 177, 266, 1],
            [1, "s", 1, 161, 272, 1],
            [1, "s", 2, 185, 261, 1],
            [1, "c", 0, 217, 270, 1],
            [1, "c", 0, 220, 278, 1],
            [1, "c", 0, 217, 283, 1],
            [1, "c", 0, 220, 287, 1],
            [1, "c", 0, 210, 292, 1],
            [1, "c", 0, 205, 297, 1],
            [1, "c", 0, 198, 293, 1],
            [1, "c", 0, 208, 283, 1],
            [1, "c", 0, 197, 283, 1],
            [1, "c", 0, 190, 289, 1],
            [1, "c", 0, 183, 296, 1],
            [1, "c", 0, 189, 291, 1],
            [1, "c", 0, 178, 284, 1],
            [1, "c", 0, 208, 265, 1],
            [1, "c", 0, 169, 292, 1],
            [1, "s", 1, 158, 294, 1],
            [1, "s", 0, 151, 297, 1],
            [1, "s", 0, 147, 288, 1],
            [1, "c", 0, 150, 289, 1],
            [1, "c", 0, 160, 282, 1],
            [1, "c", 0, 146, 274, 1],
            [1, "c", 0, 167, 264, 1],
            [1, "c", 0, 165, 267, 1],
            [1, "g", 0, 189, 257, 1],
            [1, "g", 1, 197, 248, 1],
            [1, "g", 2, 170, 255, 1],
            [1, "g", 2, 212, 234, 1],
            [1, "g", 2, 189, 230, 1],
            [1, "g", 2, 173, 221, 1],
            [1, "g", 1, 210, 214, 1],
            [1, "s", 1, 153, 257, 1],
            [1, "s", 0, 158, 255, 1],
            [1, "s", 0, 184, 248, 1],
            [1, "s", 0, 212, 254, 1],
            [1, "s", 1, 203, 249, 1],
            [1, "s", 2, 204, 252, 1],
            [1, "s", 2, 187, 248, 1],
            [1, "s", 0, 206, 237, 1],
            [1, "s", 0, 196, 227, 1],
            [1, "s", 0, 181, 228, 1],
            [1, "s", 1, 199, 227, 1],
            [1, "s", 1, 208, 238, 1],
            [1, "s", 1, 179, 222, 1],
            [1, "s", 1, 213, 223, 1],
            [1, "s", 2, 182, 222, 1],
            [1, "s", 2, 211, 226, 1],
            [1, "s", 2, 214, 214, 1],
            [1, "s", 2, 201, 216, 1],
            [1, "s", 2, 215, 192, 1],
            [1, "s", 1, 210, 198, 1],
            [1, "s", 1, 198, 196, 1],
            [1, "s", 2, 208, 199, 1],
            [1, "s", 2, 187, 192, 1],
            [1, "s", 1, 179, 198, 1],
            [1, "s", 2, 177, 197, 1],
            [1, "s", 0, 164, 197, 1],
            [1, "s", 1, 159, 193, 1],
            [1, "s", 1, 149, 206, 1],
            [1, "s", 1, 164, 209, 1],
            [1, "s", 2, 165, 210, 1],
            [1, "s", 2, 161, 191, 1],
            [1, "s", 1, 162, 224, 1],
            [1, "s", 0, 150, 236, 1],
            [1, "s", 1, 149, 239, 1],
            [1, "s", 2, 153, 236, 1],
            [1, "s", 2, 160, 223, 1],
            [1, "s", 2, 151, 207, 1],
            [1, "s", 2, 147, 220, 1],
            [1, "s", 2, 145, 265, 1],
            [1, "s", 2, 145, 285, 1],
            [1, "c", 0, 152, 266, 1],
            [1, "c", 0, 185, 271, 1],
            [1, "c", 0, 210, 254, 1],
            [1, "c", 0, 209, 256, 1],
            [1, "c", 0, 198, 254, 1],
            [1, "c", 0, 213, 246, 1],
            [1, "c", 0, 216, 237, 1],
            [1, "c", 0, 204, 240, 1],
            [1, "c", 0, 196, 234, 1],
            [1, "c", 0, 188, 238, 1],
            [1, "c", 0, 182, 245, 1],
            [1, "c", 0, 173, 252, 1],
            [1, "c", 0, 153, 248, 1],
            [1, "c", 0, 158, 233, 1],
            [1, "c", 0, 147, 230, 1],
            [1, "c", 0, 151, 224, 1],
            [1, "c", 0, 157, 214, 1],
            [1, "c", 0, 167, 219, 1],
            [1, "c", 0, 171, 208, 1],
            [1, "c", 0, 179, 219, 1],
            [1, "c", 0, 176, 229, 1],
            [1, "c", 0, 195, 221, 1],
            [1, "c", 0, 207, 222, 1],
            [1, "c", 0, 214, 207, 1],
            [1, "c", 0, 205, 210, 1],
            [1, "c", 0, 204, 196, 1],
            [1, "c", 0, 214, 196, 1],
            [1, "c", 0, 190, 199, 1],
            [1, "c", 0, 184, 194, 1],
            [1, "c", 0, 172, 199, 1],
            [1, "c", 0, 161, 204, 1],
            [1, "c", 0, 157, 196, 1],
            [1, "c", 0, 149, 194, 1],
            [1, "c", 0, 147, 208, 1],
            [1, "c", 0, 207, 274, 1],
            [1, "c", 0, 217, 258, 1],
            [1, "c", 0, 201, 260, 1],
            [1, "c", 0, 178, 276, 1],
            [1, "c", 0, 187, 265, 1],
            [1, "s", 1, 204, 260, 1],
            [1, "s", 1, 216, 260, 1],
            [1, "s", 1, 187, 255, 1],
            [1, "s", 2, 189, 254, 1],
            [1, "s", 2, 212, 257, 1],
            [1, "s", 2, 182, 286, 1],
            [1, "s", 2, 169, 280, 1],
            [1, "s", 2, 217, 273, 1],
            [1, "s", 2, 215, 282, 1],
            [1, "s", 2, 172, 263, 1],
            [1, "s", 2, 176, 267, 1],
            [1, "s", 2, 215, 251, 1],
            [1, "fod", 1, 221, 282, 0],
            [1, "fod", 1, 222, 284, 0],
            [1, "fod", 1, 221, 290, 0],
            [1, "fod", 1, 222, 294, 0],
            [1, "fod", 1, 221, 297, 0],
            [1, "fod", 1, 223, 298, 0],
            [1, "fod", 1, 222, 300, 0],
            [1, "fod", 1, 218, 301, 0],
            [1, "fod", 1, 217, 299, 0],
            [1, "fod", 1, 215, 301, 0],
            [1, "fod", 1, 212, 300, 0],
            [1, "fod", 1, 206, 300, 0],
            [1, "fod", 1, 209, 301, 0],
            [1, "fod", 1, 204, 299, 0],
            [1, "fod", 1, 202, 301, 0],
            [1, "fod", 1, 199, 301, 0],
            [1, "fod", 1, 222, 282, 0],
            [1, "fod", 1, 207, 301, 0],
            [1, "fod", 1, 197, 301, 0],
            [1, "fod", 1, 215, 291, 0],
            [1, "fod", 1, 216, 286, 0],
            [1, "fod", 1, 214, 292, 0],
            [1, "fod", 1, 210, 289, 0],
            [1, "fod", 1, 208, 294, 0],
            [1, "fod", 1, 210, 298, 0],
            [1, "fod", 1, 212, 281, 0],
            [1, "fod", 1, 219, 278, 0],
            [1, "fod", 1, 219, 282, 0],
            [1, "fod", 1, 205, 286, 0],
            [1, "fod", 1, 202, 293, 0],
            [1, "fod", 1, 198, 295, 0],
            [1, "fod", 2, 213, 282, 0],
            [1, "fod", 2, 213, 291, 0],
            [1, "fod", 2, 216, 289, 0],
            [1, "fod", 2, 219, 289, 0],
            [1, "fod", 2, 218, 285, 0],
            [1, "fod", 2, 220, 283, 0],
            [1, "fod", 2, 211, 283, 0],
            [1, "fod", 2, 215, 281, 0],
            [1, "fod", 2, 217, 279, 0],
            [1, "fod", 2, 208, 290, 0],
            [1, "fod", 2, 211, 296, 0],
            [1, "fod", 2, 215, 294, 0],
            [1, "fod", 2, 212, 298, 0],
            [1, "fod", 2, 203, 294, 0],
            [1, "fod", 2, 204, 288, 0],
            [1, "fod", 2, 200, 294, 0],
            [1, "fod", 2, 198, 297, 0],
            [1, "fod", 2, 202, 299, 0],
            [1, "fod", 2, 200, 299, 0],
            [1, "fod", 2, 220, 300, 0],
            [1, "fod", 2, 220, 295, 0],
            [1, "fod", 2, 220, 292, 0],
            [1, "fod", 2, 219, 287, 0],
            [1, "fod", 2, 211, 288, 0],
            [1, "fod", 2, 213, 287, 0],
            [1, "fod", 2, 211, 289, 0],
            [1, "fod", 2, 212, 290, 0],
            [1, "fod", 2, 195, 296, 0],
            [1, "fod", 2, 196, 299, 0],
            [1, "fod", 2, 194, 300, 0],
            [1, "fod", 2, 195, 300, 0],
            [1, "fod", 2, 213, 279, 0],
            [1, "fod", 2, 211, 279, 0],
            [1, "fod", 0, 218, 290, 0],
            [1, "fod", 0, 212, 294, 0],
            [1, "fod", 1, 213, 295, 0],
            [1, "fod", 1, 217, 292, 0],
            [1, "fod", 1, 218, 288, 0],
            [1, "fod", 1, 210, 295, 0],
            [1, "fod", 1, 213, 292, 0],
            [1, "fod", 1, 212, 289, 0],
            [1, "fod", 1, 205, 295, 0],
            [1, "fod", 2, 206, 296, 0],
            [1, "fod", 2, 208, 296, 0],
            [1, "fod", 2, 221, 288, 0],
            [1, "fod", 2, 209, 299, 0],
            [1, "fod", 2, 211, 291, 0],
            [1, "fod", 1, 203, 275, 0],
            [1, "fod", 1, 204, 272, 0],
            [1, "fod", 2, 205, 273, 0],
            [1, "fod", 2, 204, 276, 0],
            [1, "fod", 2, 202, 276, 0],
            [1, "fod", 2, 199, 277, 0],
            [1, "fod", 2, 202, 273, 0],
            [1, "fod", 2, 199, 270, 0],
            [1, "fod", 2, 194, 274, 0],
            [1, "fod", 2, 194, 277, 0],
            [1, "fod", 1, 192, 274, 0],
            [1, "fod", 1, 194, 267, 0],
            [1, "fod", 2, 194, 265, 0],
            [1, "fod", 2, 190, 272, 0],
            [1, "fod", 2, 191, 275, 0],
            [1, "fod", 2, 195, 274, 0],
            [1, "fod", 2, 200, 271, 0],
            [1, "fod", 1, 168, 243, 0],
            [1, "fod", 1, 175, 240, 0],
            [1, "fod", 1, 169, 234, 0],
            [1, "fod", 1, 162, 235, 0],
            [1, "fod", 2, 169, 236, 0],
            [1, "fod", 2, 171, 234, 0],
            [1, "fod", 2, 165, 238, 0],
            [1, "fod", 2, 173, 241, 0],
            [1, "fod", 2, 174, 238, 0],
            [1, "fod", 2, 176, 240, 0],
            [1, "fod", 2, 169, 244, 0],
            [1, "fod", 2, 166, 243, 0],
            [1, "fod", 2, 162, 236, 0],
            [1, "fod", 2, 164, 235, 0],
            [1, "fod", 2, 162, 233, 0],
            [1, "fod", 2, 163, 236, 0],
            [1, "fod", 2, 174, 242, 0],
            [1, "fod", 2, 171, 243, 0],
            [1, "fod", 1, 194, 206, 0],
            [1, "fod", 1, 190, 214, 0],
            [1, "fod", 1, 186, 206, 0],
            [1, "fod", 1, 197, 207, 0],
            [1, "fod", 2, 196, 208, 0],
            [1, "fod", 2, 198, 206, 0],
            [1, "fod", 2, 198, 208, 0],
            [1, "fod", 2, 194, 204, 0],
            [1, "fod", 2, 187, 206, 0],
            [1, "fod", 2, 186, 204, 0],
            [1, "fod", 2, 189, 214, 0],
            [1, "fod", 2, 189, 213, 0],
            [1, "fod", 2, 193, 215, 0],
            [1, "fod", 2, 194, 214, 0],
            [1, "fod", 2, 187, 215, 0],
            [1, "fod", 2, 193, 209, 0],
            [1, "fod", 2, 189, 211, 0],
            [1, "fod", 2, 187, 209, 0],
            [1, "fod", 2, 187, 207, 0],
            [1, "fod", 2, 191, 205, 0],
            [1, "fod", 2, 189, 203, 0],
            [1, "cs", 2, 224, 176, 1],
            [1, "cs", 0, 224, 177, 1],
            [1, "cs", 3, 224, 178, 1],
            [1, "cs", 2, 224, 179, 1],
            [1, "cs", 1, 224, 180, 1],
            [1, "cs", 2, 224, 181, 1],
            [1, "cs", 0, 224, 182, 1],
            [1, "cs", 2, 224, 183, 1],
            [1, "cs", 0, 224, 184, 1],
            [1, "cs", 3, 224, 185, 1],
            [1, "cs", 2, 224, 186, 1],
            [1, "cs", 0, 224, 187, 1],
            [1, "cs", 2, 224, 188, 1],
            [1, "cs", 0, 224, 189, 1],
            [1, "cs", 1, 224, 190, 1],
            [1, "cs", 2, 224, 191, 1],
            [1, "cs", 0, 224, 192, 1],
            [1, "cs", 2, 224, 193, 1],
            [1, "cs", 2, 224, 194, 1],
            [1, "cs", 1, 224, 195, 1],
            [1, "cs", 2, 224, 196, 1],
            [1, "cs", 0, 224, 197, 1],
            [1, "cs", 3, 224, 198, 1],
            [1, "cs", 2, 224, 199, 1],
            [1, "cs", 1, 224, 200, 1],
            [1, "cs", 2, 224, 201, 1],
            [1, "cs", 3, 224, 202, 1],
            [1, "cs", 0, 224, 203, 1],
            [1, "cs", 1, 224, 204, 1],
            [1, "cs", 2, 224, 205, 1],
            [1, "cs", 0, 224, 206, 1],
            [1, "cs", 1, 224, 207, 1],
            [1, "cs", 3, 224, 208, 1],
            [1, "cs", 2, 224, 209, 1],
            [1, "cs", 2, 224, 210, 1],
            [1, "cs", 0, 223, 211, 1],
            [1, "cs", 1, 224, 211, 1],
            [1, "cs", 2, 224, 212, 1],
            [1, "cs", 2, 224, 213, 1],
            [1, "cs", 1, 224, 214, 1],
            [1, "cs", 3, 224, 215, 1],
            [1, "cs", 0, 224, 216, 1],
            [1, "cs", 1, 224, 217, 1],
            [1, "cs", 2, 224, 218, 1],
            [1, "cs", 3, 224, 219, 1],
            [1, "cs", 0, 223, 215, 1],
            [1, "cs", 2, 223, 214, 1],
            [1, "cs", 2, 223, 212, 1],
            [1, "cs", 2, 223, 216, 1],
            [1, "cs", 3, 223, 217, 1],
            [1, "cs", 0, 223, 218, 1],
            [1, "cs", 0, 224, 220, 1],
            [1, "cs", 0, 224, 222, 1],
            [1, "cs", 0, 223, 209, 1],
            [1, "cs", 0, 223, 205, 1],
            [1, "cs", 2, 224, 221, 1],
            [1, "cs", 2, 223, 219, 1],
            [1, "cs", 2, 223, 220, 1],
            [1, "cs", 2, 223, 213, 1],
            [1, "cs", 2, 223, 210, 1],
            [1, "cs", 1, 223, 178, 1],
            [1, "cs", 3, 223, 179, 1],
            [1, "cs", 3, 223, 181, 1],
            [1, "cs", 3, 223, 182, 1],
            [1, "cs", 1, 223, 185, 1],
            [1, "cs", 2, 223, 184, 1],
            [1, "cs", 2, 223, 186, 1],
            [1, "cs", 0, 223, 180, 1],
            [1, "cs", 0, 223, 183, 1],
            [1, "cs", 2, 223, 187, 1],
            [1, "cs", 1, 223, 188, 1],
            [1, "cs", 2, 223, 189, 1],
            [1, "cs", 2, 223, 190, 1],
            [1, "cs", 3, 223, 191, 1],
            [1, "cs", 1, 223, 192, 1],
            [1, "cs", 2, 223, 193, 1],
            [1, "cs", 2, 223, 194, 1],
            [1, "cs", 3, 223, 195, 1],
            [1, "cs", 1, 223, 196, 1],
            [1, "cs", 2, 223, 197, 1],
            [1, "cs", 2, 223, 199, 1],
            [1, "cs", 2, 223, 198, 1],
            [1, "cs", 0, 223, 200, 1],
            [1, "cs", 2, 223, 201, 1],
            [1, "cs", 0, 223, 202, 1],
            [1, "cs", 3, 223, 203, 1],
            [1, "cs", 3, 223, 204, 1],
            [1, "cs", 3, 223, 206, 1],
            [1, "cs", 3, 223, 207, 1],
            [1, "cs", 3, 223, 208, 1],
            [1, "cs", 2, 223, 221, 1],
            [1, "cs", 2, 223, 222, 1],
            [1, "cs", 0, 223, 224, 1],
            [1, "cs", 0, 224, 228, 1],
            [1, "cs", 0, 224, 230, 1],
            [1, "cs", 0, 223, 234, 1],
            [1, "cs", 2, 223, 223, 1],
            [1, "cs", 2, 224, 223, 1],
            [1, "cs", 2, 224, 224, 1],
            [1, "cs", 2, 224, 225, 1],
            [1, "cs", 1, 223, 226, 1],
            [1, "cs", 1, 224, 231, 1],
            [1, "cs", 1, 223, 232, 1],
            [1, "cs", 3, 223, 225, 1],
            [1, "cs", 3, 224, 226, 1],
            [1, "cs", 3, 223, 227, 1],
            [1, "cs", 3, 224, 227, 1],
            [1, "cs", 3, 223, 229, 1],
            [1, "cs", 3, 223, 228, 1],
            [1, "cs", 3, 224, 229, 1],
            [1, "cs", 3, 223, 230, 1],
            [1, "cs", 3, 223, 231, 1],
            [1, "cs", 3, 224, 232, 1],
            [1, "cs", 3, 224, 233, 1],
            [1, "cs", 3, 223, 233, 1],
            [1, "cs", 3, 224, 234, 1],
            [1, "cs", 3, 224, 235, 1],
            [1, "cs", 3, 223, 235, 1],
            [1, "cs", 1, 224, 236, 1],
            [1, "cs", 2, 223, 236, 1],
            [1, "cs", 2, 223, 237, 1],
            [1, "cs", 3, 224, 237, 1],
            [1, "cs", 3, 224, 238, 1],
            [1, "cs", 0, 224, 239, 1],
            [1, "cs", 1, 223, 241, 1],
            [1, "cs", 0, 224, 243, 1],
            [1, "cs", 0, 223, 245, 1],
            [1, "cs", 0, 224, 247, 1],
            [1, "cs", 2, 223, 240, 1],
            [1, "cs", 2, 223, 239, 1],
            [1, "cs", 2, 224, 240, 1],
            [1, "cs", 2, 224, 241, 1],
            [1, "cs", 2, 224, 242, 1],
            [1, "cs", 2, 223, 242, 1],
            [1, "cs", 2, 223, 243, 1],
            [1, "cs", 2, 223, 244, 1],
            [1, "cs", 2, 224, 244, 1],
            [1, "cs", 2, 224, 245, 1],
            [1, "cs", 2, 224, 246, 1],
            [1, "cs", 3, 223, 238, 1],
            [1, "cs", 3, 223, 246, 1],
            [1, "cs", 2, 223, 247, 1],
            [1, "cs", 1, 223, 249, 1],
            [1, "cs", 1, 224, 253, 1],
            [1, "cs", 1, 223, 256, 1],
            [1, "cs", 0, 223, 254, 1],
            [1, "cs", 0, 224, 250, 1],
            [1, "cs", 3, 223, 248, 1],
            [1, "cs", 3, 223, 250, 1],
            [1, "cs", 3, 223, 252, 1],
            [1, "cs", 3, 223, 255, 1],
            [1, "cs", 3, 223, 257, 1],
            [1, "cs", 2, 224, 248, 1],
            [1, "cs", 2, 224, 249, 1],
            [1, "cs", 2, 223, 251, 1],
            [1, "cs", 2, 224, 251, 1],
            [1, "cs", 2, 224, 252, 1],
            [1, "cs", 2, 223, 253, 1],
            [1, "cs", 2, 224, 254, 1],
            [1, "cs", 2, 224, 255, 1],
            [1, "cs", 2, 224, 256, 1],
            [1, "cs", 2, 224, 257, 1],
            [1, "cs", 0, 224, 258, 1],
            [1, "cs", 0, 223, 261, 1],
            [1, "cs", 0, 224, 263, 1],
            [1, "cs", 0, 224, 266, 1],
            [1, "cs", 0, 224, 272, 1],
            [1, "cs", 0, 223, 270, 1],
            [1, "cs", 0, 223, 275, 1],
            [1, "cs", 1, 223, 259, 1],
            [1, "cs", 1, 223, 264, 1],
            [1, "cs", 1, 223, 268, 1],
            [1, "cs", 1, 224, 274, 1],
            [1, "cs", 2, 223, 258, 1],
            [1, "cs", 2, 223, 260, 1],
            [1, "cs", 2, 223, 263, 1],
            [1, "cs", 2, 223, 265, 1],
            [1, "cs", 2, 223, 267, 1],
            [1, "cs", 2, 223, 271, 1],
            [1, "cs", 2, 223, 273, 1],
            [1, "cs", 3, 223, 262, 1],
            [1, "cs", 3, 223, 266, 1],
            [1, "cs", 3, 223, 269, 1],
            [1, "cs", 3, 223, 272, 1],
            [1, "cs", 3, 223, 274, 1],
            [1, "cs", 3, 224, 275, 1],
            [1, "cs", 3, 224, 273, 1],
            [1, "cs", 3, 224, 271, 1],
            [1, "cs", 3, 224, 270, 1],
            [1, "cs", 3, 224, 269, 1],
            [1, "cs", 3, 224, 268, 1],
            [1, "cs", 3, 224, 267, 1],
            [1, "cs", 3, 224, 265, 1],
            [1, "cs", 3, 224, 264, 1],
            [1, "cs", 3, 224, 262, 1],
            [1, "cs", 3, 224, 261, 1],
            [1, "cs", 3, 224, 260, 1],
            [1, "cs", 3, 224, 259, 1],
            [1, "cs", 2, 223, 276, 1],
            [1, "cs", 1, 224, 276, 1],
            [1, "cs", 1, 224, 280, 1],
            [1, "cs", 1, 223, 281, 1],
            [1, "cs", 1, 224, 286, 1],
            [1, "cs", 0, 223, 280, 1],
            [1, "cs", 0, 223, 284, 1],
            [1, "cs", 0, 224, 288, 1],
            [1, "cs", 0, 224, 279, 1],
            [1, "cs", 2, 223, 277, 1],
            [1, "cs", 2, 224, 277, 1],
            [1, "cs", 2, 224, 278, 1],
            [1, "cs", 2, 224, 281, 1],
            [1, "cs", 2, 224, 283, 1],
            [1, "cs", 2, 224, 282, 1],
            [1, "cs", 2, 224, 284, 1],
            [1, "cs", 2, 224, 285, 1],
            [1, "cs", 2, 224, 287, 1],
            [1, "cs", 2, 223, 287, 1],
            [1, "cs", 2, 223, 285, 1],
            [1, "cs", 2, 223, 283, 1],
            [1, "cs", 2, 223, 279, 1],
            [1, "cs", 3, 223, 278, 1],
            [1, "cs", 3, 223, 282, 1],
            [1, "cs", 3, 223, 286, 1],
            [1, "cs", 3, 223, 289, 1],
            [1, "cs", 3, 224, 289, 1],
            [1, "cs", 2, 223, 288, 1],
            [1, "cs", 2, 224, 290, 1],
            [1, "cs", 1, 223, 290, 1],
            [1, "cs", 0, 224, 292, 1],
            [1, "cs", 0, 223, 294, 1],
            [1, "cs", 0, 224, 297, 1],
            [1, "cs", 0, 223, 299, 1],
            [1, "cs", 2, 223, 291, 1],
            [1, "cs", 2, 224, 291, 1],
            [1, "cs", 2, 223, 292, 1],
            [1, "cs", 2, 223, 293, 1],
            [1, "cs", 2, 224, 293, 1],
            [1, "cs", 2, 224, 294, 1],
            [1, "cs", 1, 224, 295, 1],
            [1, "cs", 2, 223, 295, 1],
            [1, "cs", 2, 223, 296, 1],
            [1, "cs", 2, 224, 296, 1],
            [1, "cs", 2, 223, 297, 1],
            [1, "cs", 2, 223, 298, 1],
            [1, "cs", 2, 224, 298, 1],
            [1, "cs", 2, 224, 299, 1],
            [1, "cs", 2, 223, 300, 1],
            [1, "cs", 1, 224, 300, 1],
            [1, "cs", 0, 223, 301, 1],
            [1, "cs", 0, 224, 302, 1],
            [1, "cs", 0, 224, 304, 1],
            [1, "cs", 3, 224, 301, 1],
            [1, "cs", 3, 224, 303, 1],
            [1, "cs", 0, 221, 303, 1],
            [1, "cs", 0, 219, 304, 1],
            [1, "cs", 1, 222, 304, 1],
            [1, "cs", 1, 222, 302, 1],
            [1, "cs", 2, 223, 302, 1],
            [1, "cs", 2, 223, 303, 1],
            [1, "cs", 2, 222, 303, 1],
            [1, "cs", 2, 223, 304, 1],
            [1, "cs", 2, 221, 304, 1],
            [1, "cs", 2, 220, 304, 1],
            [1, "cs", 2, 220, 303, 1],
            [1, "cs", 2, 220, 302, 1],
            [1, "cs", 2, 221, 302, 1],
            [1, "cs", 2, 219, 303, 1],
            [1, "cs", 0, 217, 302, 1],
            [1, "cs", 0, 215, 304, 1],
            [1, "cs", 0, 214, 302, 1],
            [1, "cs", 1, 218, 302, 1],
            [1, "cs", 1, 217, 304, 1],
            [1, "cs", 1, 215, 302, 1],
            [1, "cs", 2, 219, 302, 1],
            [1, "cs", 2, 218, 303, 1],
            [1, "cs", 2, 218, 304, 1],
            [1, "cs", 2, 217, 303, 1],
            [1, "cs", 2, 216, 304, 1],
            [1, "cs", 2, 215, 303, 1],
            [1, "cs", 2, 216, 303, 1],
            [1, "cs", 2, 216, 302, 1],
            [1, "cs", 2, 214, 303, 1],
            [1, "cs", 2, 214, 304, 1],
            [1, "cs", 0, 212, 302, 1],
            [1, "cs", 0, 210, 303, 1],
            [1, "cs", 0, 212, 304, 1],
            [1, "cs", 0, 208, 304, 1],
            [1, "cs", 1, 210, 302, 1],
            [1, "cs", 1, 208, 303, 1],
            [1, "cs", 2, 213, 302, 1],
            [1, "cs", 2, 213, 303, 1],
            [1, "cs", 2, 213, 304, 1],
            [1, "cs", 2, 212, 303, 1],
            [1, "cs", 2, 211, 304, 1],
            [1, "cs", 2, 211, 303, 1],
            [1, "cs", 2, 211, 302, 1],
            [1, "cs", 2, 209, 302, 1],
            [1, "cs", 2, 209, 303, 1],
            [1, "cs", 2, 209, 304, 1],
            [1, "cs", 2, 210, 304, 1],
            [1, "cs", 2, 208, 302, 1],
            [1, "cs", 0, 206, 303, 1],
            [1, "cs", 0, 203, 304, 1],
            [1, "cs", 0, 200, 303, 1],
            [1, "cs", 0, 199, 304, 1],
            [1, "cs", 0, 195, 304, 1],
            [1, "cs", 0, 191, 303, 1],
            [1, "cs", 0, 193, 304, 1],
            [1, "cs", 0, 189, 304, 1],
            [1, "cs", 1, 204, 303, 1],
            [1, "cs", 0, 197, 302, 1],
            [1, "cs", 0, 202, 302, 1],
            [1, "cs", 0, 188, 302, 1],
            [1, "cs", 0, 194, 302, 1],
            [1, "cs", 1, 197, 303, 1],
            [1, "cs", 1, 201, 304, 1],
            [1, "cs", 1, 192, 302, 1],
            [1, "cs", 1, 189, 303, 1],
            [1, "cs", 1, 205, 302, 1],
            [1, "cs", 1, 188, 304, 1],
            [1, "cs", 2, 207, 302, 1],
            [1, "cs", 2, 207, 303, 1],
            [1, "cs", 2, 207, 304, 1],
            [1, "cs", 2, 206, 304, 1],
            [1, "cs", 2, 206, 302, 1],
            [1, "cs", 2, 205, 303, 1],
            [1, "cs", 2, 204, 304, 1],
            [1, "cs", 2, 205, 304, 1],
            [1, "cs", 2, 204, 302, 1],
            [1, "cs", 2, 203, 302, 1],
            [1, "cs", 2, 203, 303, 1],
            [1, "cs", 2, 202, 303, 1],
            [1, "cs", 2, 201, 303, 1],
            [1, "cs", 2, 201, 302, 1],
            [1, "cs", 2, 200, 302, 1],
            [1, "cs", 2, 199, 302, 1],
            [1, "cs", 2, 198, 303, 1],
            [1, "cs", 2, 198, 302, 1],
            [1, "cs", 2, 199, 303, 1],
            [1, "cs", 2, 200, 304, 1],
            [1, "cs", 2, 202, 304, 1],
            [1, "cs", 2, 197, 304, 1],
            [1, "cs", 2, 198, 304, 1],
            [1, "cs", 2, 196, 304, 1],
            [1, "cs", 2, 196, 303, 1],
            [1, "cs", 2, 196, 302, 1],
            [1, "cs", 2, 195, 302, 1],
            [1, "cs", 2, 195, 303, 1],
            [1, "cs", 2, 194, 303, 1],
            [1, "cs", 2, 194, 304, 1],
            [1, "cs", 2, 193, 303, 1],
            [1, "cs", 2, 193, 302, 1],
            [1, "cs", 2, 192, 303, 1],
            [1, "cs", 2, 192, 304, 1],
            [1, "cs", 2, 191, 304, 1],
            [1, "cs", 2, 190, 304, 1],
            [1, "cs", 2, 190, 303, 1],
            [1, "cs", 2, 189, 302, 1],
            [1, "cs", 2, 190, 302, 1],
            [1, "cs", 2, 191, 302, 1],
            [1, "cs", 2, 188, 303, 1],
            [1, "cs", 0, 186, 303, 1],
            [1, "cs", 0, 183, 304, 1],
            [1, "cs", 0, 184, 302, 1],
            [1, "cs", 0, 181, 302, 1],
            [1, "cs", 0, 176, 302, 1],
            [1, "cs", 0, 178, 303, 1],
            [1, "cs", 0, 173, 304, 1],
            [1, "cs", 0, 170, 303, 1],
            [1, "cs", 0, 172, 302, 1],
            [1, "cs", 1, 182, 303, 1],
            [1, "cs", 1, 178, 304, 1],
            [1, "cs", 1, 175, 304, 1],
            [1, "cs", 1, 173, 302, 1],
            [1, "cs", 1, 185, 304, 1],
            [1, "cs", 1, 169, 304, 1],
            [1, "cs", 3, 187, 304, 1],
            [1, "cs", 3, 186, 304, 1],
            [1, "cs", 3, 187, 303, 1],
            [1, "cs", 3, 187, 302, 1],
            [1, "cs", 3, 186, 302, 1],
            [1, "cs", 3, 185, 302, 1],
            [1, "cs", 3, 185, 303, 1],
            [1, "cs", 3, 184, 303, 1],
            [1, "cs", 3, 183, 303, 1],
            [1, "cs", 3, 183, 302, 1],
            [1, "cs", 3, 182, 302, 1],
            [1, "cs", 3, 184, 304, 1],
            [1, "cs", 3, 182, 304, 1],
            [1, "cs", 3, 181, 304, 1],
            [1, "cs", 3, 179, 304, 1],
            [1, "cs", 3, 180, 304, 1],
            [1, "cs", 3, 181, 303, 1],
            [1, "cs", 3, 180, 303, 1],
            [1, "cs", 3, 179, 303, 1],
            [1, "cs", 3, 180, 302, 1],
            [1, "cs", 3, 179, 302, 1],
            [1, "cs", 3, 178, 302, 1],
            [1, "cs", 3, 177, 302, 1],
            [1, "cs", 3, 177, 304, 1],
            [1, "cs", 3, 177, 303, 1],
            [1, "cs", 3, 176, 303, 1],
            [1, "cs", 3, 176, 304, 1],
            [1, "cs", 3, 174, 304, 1],
            [1, "cs", 3, 175, 303, 1],
            [1, "cs", 3, 174, 303, 1],
            [1, "cs", 3, 173, 303, 1],
            [1, "cs", 3, 172, 303, 1],
            [1, "cs", 3, 171, 303, 1],
            [1, "cs", 3, 170, 304, 1],
            [1, "cs", 3, 171, 304, 1],
            [1, "cs", 3, 172, 304, 1],
            [1, "cs", 3, 174, 302, 1],
            [1, "cs", 3, 175, 302, 1],
            [1, "cs", 3, 171, 302, 1],
            [1, "cs", 3, 170, 302, 1],
            [1, "cs", 3, 169, 302, 1],
            [1, "cs", 3, 169, 303, 1],
            [1, "cs", 0, 168, 302, 1],
            [1, "cs", 0, 166, 303, 1],
            [1, "cs", 0, 163, 304, 1],
            [1, "cs", 0, 161, 302, 1],
            [1, "cs", 0, 159, 303, 1],
            [1, "cs", 0, 152, 304, 1],
            [1, "cs", 0, 155, 303, 1],
            [1, "cs", 1, 164, 303, 1],
            [1, "cs", 1, 162, 303, 1],
            [1, "cs", 1, 158, 304, 1],
            [1, "cs", 1, 156, 302, 1],
            [1, "cs", 1, 153, 302, 1],
            [1, "cs", 1, 154, 304, 1],
            [1, "cs", 2, 168, 304, 1],
            [1, "cs", 2, 168, 303, 1],
            [1, "cs", 2, 167, 303, 1],
            [1, "cs", 2, 167, 304, 1],
            [1, "cs", 2, 166, 304, 1],
            [1, "cs", 2, 165, 304, 1],
            [1, "cs", 2, 164, 304, 1],
            [1, "cs", 2, 165, 303, 1],
            [1, "cs", 2, 167, 302, 1],
            [1, "cs", 2, 166, 302, 1],
            [1, "cs", 2, 165, 302, 1],
            [1, "cs", 2, 164, 302, 1],
            [1, "cs", 2, 163, 302, 1],
            [1, "cs", 2, 162, 302, 1],
            [1, "cs", 2, 163, 303, 1],
            [1, "cs", 2, 162, 304, 1],
            [1, "cs", 2, 160, 304, 1],
            [1, "cs", 2, 159, 304, 1],
            [1, "cs", 2, 161, 304, 1],
            [1, "cs", 2, 161, 303, 1],
            [1, "cs", 2, 160, 303, 1],
            [1, "cs", 2, 160, 302, 1],
            [1, "cs", 2, 158, 302, 1],
            [1, "cs", 2, 159, 302, 1],
            [1, "cs", 2, 157, 302, 1],
            [1, "cs", 2, 156, 303, 1],
            [1, "cs", 2, 157, 303, 1],
            [1, "cs", 2, 158, 303, 1],
            [1, "cs", 2, 157, 304, 1],
            [1, "cs", 2, 156, 304, 1],
            [1, "cs", 2, 155, 304, 1],
            [1, "cs", 2, 153, 304, 1],
            [1, "cs", 2, 153, 303, 1],
            [1, "cs", 2, 154, 303, 1],
            [1, "cs", 2, 154, 302, 1],
            [1, "cs", 2, 155, 302, 1],
            [1, "cs", 2, 152, 303, 1],
            [1, "cs", 2, 152, 302, 1],
            [1, "cs", 0, 151, 302, 1],
            [1, "cs", 0, 149, 303, 1],
            [1, "cs", 0, 145, 304, 1],
            [1, "cs", 0, 147, 302, 1],
            [1, "cs", 0, 143, 303, 1],
            [1, "cs", 0, 141, 303, 1],
            [1, "cs", 1, 147, 304, 1],
            [1, "cs", 1, 145, 302, 1],
            [1, "cs", 1, 142, 302, 1],
            [1, "cs", 1, 150, 304, 1],
            [1, "cs", 2, 151, 304, 1],
            [1, "cs", 2, 151, 303, 1],
            [1, "cs", 2, 150, 303, 1],
            [1, "cs", 2, 150, 302, 1],
            [1, "cs", 2, 148, 302, 1],
            [1, "cs", 2, 146, 302, 1],
            [1, "cs", 2, 144, 302, 1],
            [1, "cs", 2, 141, 302, 1],
            [1, "cs", 2, 141, 304, 1],
            [1, "cs", 2, 142, 304, 1],
            [1, "cs", 2, 142, 303, 1],
            [1, "cs", 2, 143, 304, 1],
            [1, "cs", 2, 144, 304, 1],
            [1, "cs", 2, 144, 303, 1],
            [1, "cs", 2, 148, 304, 1],
            [1, "cs", 2, 148, 303, 1],
            [1, "cs", 2, 146, 303, 1],
            [1, "cs", 2, 145, 303, 1],
            [1, "cs", 2, 147, 303, 1],
            [1, "cs", 2, 146, 304, 1],
            [1, "cs", 2, 149, 304, 1],
            [1, "cs", 3, 149, 302, 1],
            [1, "cs", 3, 143, 302, 1],
            [1, "cs", 0, 139, 304, 1],
            [1, "cs", 0, 138, 302, 1],
            [1, "cs", 1, 139, 302, 1],
            [1, "cs", 2, 140, 302, 1],
            [1, "cs", 2, 140, 303, 1],
            [1, "cs", 2, 139, 303, 1],
            [1, "cs", 2, 138, 303, 1],
            [1, "cs", 2, 138, 304, 1],
            [1, "cs", 2, 140, 304, 1],
            [1, "cs", 0, 137, 304, 1],
            [1, "cs", 0, 135, 303, 1],
            [1, "cs", 0, 133, 304, 1],
            [1, "cs", 1, 135, 304, 1],
            [1, "cs", 1, 136, 302, 1],
            [1, "cs", 2, 137, 302, 1],
            [1, "cs", 2, 136, 303, 1],
            [1, "cs", 2, 137, 303, 1],
            [1, "cs", 2, 136, 304, 1],
            [1, "cs", 2, 134, 304, 1],
            [1, "cs", 2, 134, 303, 1],
            [1, "cs", 2, 133, 303, 1],
            [1, "cs", 2, 132, 304, 1],
            [1, "cs", 0, 131, 302, 1],
            [1, "cs", 0, 134, 302, 1],
            [1, "cs", 0, 129, 304, 1],
            [1, "cs", 1, 130, 303, 1],
            [1, "cs", 1, 132, 302, 1],
            [1, "cs", 2, 135, 302, 1],
            [1, "cs", 2, 133, 302, 1],
            [1, "cs", 2, 132, 303, 1],
            [1, "cs", 2, 131, 303, 1],
            [1, "cs", 2, 130, 304, 1],
            [1, "cs", 2, 131, 304, 1],
            [1, "cs", 2, 128, 304, 1],
            [1, "cs", 2, 129, 303, 1],
            [1, "cs", 2, 130, 302, 1],
            [1, "cs", 3, 127, 304, 1],
            [1, "cs", 2, 132, 301, 1],
            [1, "cs", 2, 133, 301, 1],
            [1, "cs", 2, 134, 301, 1],
            [1, "cs", 2, 135, 301, 1],
            [1, "cs", 3, 131, 301, 1],
            [1, "cs", 3, 136, 301, 1],
            [1, "cs", 3, 136, 178, 1],
            [1, "cs", 0, 136, 183, 1],
            [1, "cs", 2, 136, 182, 1],
            [1, "cs", 1, 136, 181, 1],
            [1, "cs", 0, 136, 179, 1],
            [1, "cs", 3, 136, 180, 1],
            [1, "cs", 2, 135, 183, 1],
            [1, "cs", 1, 135, 182, 1],
            [1, "cs", 3, 135, 180, 1],
            [1, "cs", 0, 134, 183, 1],
            [1, "cs", 2, 133, 183, 1],
            [1, "cs", 3, 133, 182, 1],
            [1, "cs", 1, 132, 183, 1],
            [1, "cs", 3, 131, 183, 1],
            [1, "cs", 2, 135, 181, 1],
            [1, "cs", 2, 134, 182, 1],
            [1, "cs", 3, 134, 181, 1],
            [1, "fod", 0, 213, 301, 0],
            [1, "fod", 0, 204, 301, 0],
            [1, "fod", 1, 196, 288, 0],
            [1, "fod", 1, 198, 283, 0],
            [1, "fod", 1, 190, 288, 0],
            [1, "fod", 1, 189, 296, 0],
            [1, "fod", 1, 193, 293, 0],
            [1, "fod", 1, 183, 292, 0],
            [1, "fod", 1, 186, 287, 0],
            [1, "fod", 1, 190, 290, 0],
            [1, "fod", 1, 218, 271, 0],
            [1, "fod", 1, 220, 266, 0],
            [1, "fod", 1, 211, 268, 0],
            [1, "fod", 1, 210, 274, 0],
            [1, "fod", 1, 205, 263, 0],
            [1, "fod", 1, 216, 258, 0],
            [1, "fod", 2, 201, 294, 0],
            [1, "fod", 2, 190, 296, 0],
            [1, "fod", 2, 188, 299, 0],
            [1, "fod", 2, 186, 297, 0],
            [1, "fod", 2, 188, 296, 0],
            [1, "fod", 2, 189, 291, 0],
            [1, "fod", 2, 189, 286, 0],
            [1, "fod", 2, 191, 286, 0],
            [1, "fod", 2, 197, 286, 0],
            [1, "fod", 2, 195, 290, 0],
            [1, "fod", 2, 186, 288, 0],
            [1, "fod", 2, 184, 290, 0],
            [1, "fod", 2, 183, 293, 0],
            [1, "fod", 2, 198, 286, 0],
            [1, "fod", 2, 196, 283, 0],
            [1, "fod", 2, 196, 281, 0],
            [1, "fod", 2, 201, 280, 0],
            [1, "fod", 2, 205, 287, 0],
            [1, "fod", 2, 209, 283, 0],
            [1, "fod", 2, 212, 280, 0],
            [1, "fod", 2, 209, 277, 0],
            [1, "fod", 2, 217, 278, 0],
            [1, "fod", 2, 219, 275, 0],
            [1, "fod", 2, 220, 271, 0],
            [1, "fod", 2, 220, 267, 0],
            [1, "fod", 2, 217, 265, 0],
            [1, "fod", 2, 213, 267, 0],
            [1, "fod", 2, 208, 264, 0],
            [1, "fod", 2, 206, 261, 0],
            [1, "fod", 2, 203, 265, 0],
            [1, "fod", 2, 204, 270, 0],
            [1, "fod", 2, 196, 267, 0],
            [1, "fod", 2, 214, 261, 0],
            [1, "fod", 2, 211, 260, 0],
            [1, "fod", 2, 218, 256, 0],
            [1, "fod", 2, 219, 262, 0],
            [1, "fod", 2, 220, 253, 0],
            [1, "fod", 2, 211, 257, 0],
            [1, "la", 3, 198, 27, 1],
            [1, "la", 3, 201, 30, 1],
            [1, "la", 3, 200, 32, 1],
            [1, "la", 3, 198, 33, 1],
            [1, "la", 3, 196, 33, 1],
            [1, "la", 3, 194, 32, 1],
            [1, "la", 3, 194, 28, 1],
            [1, "la", 0, 200, 28, 1],
            [1, "la", 0, 193, 30, 1],
            [1, "la", 3, 196, 27, 1],
            [1, "la", 3, 199, 30, 1],
            [1, "la", 3, 197, 29, 1],
            [1, "la", 3, 195, 30, 1],
            [1, "la", 3, 197, 31, 1],
            [1, "la", 2, 201, 33, 1],
            [1, "la", 4, 202, 34, 1],
            [1, "la", 4, 202, 35, 1],
            [1, "la", 4, 203, 36, 1],
            [1, "la", 4, 204, 37, 1],
            [1, "la", 2, 205, 38, 1],
            [1, "la", 5, 205, 39, 1],
            [1, "la", 5, 205, 40, 1],
            [1, "la", 2, 206, 41, 1],
            [1, "la", 1, 207, 42, 1],
            [1, "la", 1, 205, 41, 1],
            [1, "la", 4, 208, 43, 1],
            [1, "la", 4, 209, 43, 1],
            [1, "la", 1, 210, 43, 1],
            [1, "la", 2, 211, 43, 1],
            [1, "la", 5, 212, 43, 1],
            [1, "la", 4, 213, 44, 1],
            [1, "la", 3, 223, 54, 1],
            [1, "la", 3, 221, 53, 1],
            [1, "la", 3, 219, 53, 1],
            [1, "la", 4, 218, 52, 1],
            [1, "la", 4, 217, 51, 1],
            [1, "la", 4, 216, 51, 1],
            [1, "la", 1, 215, 50, 1],
            [1, "la", 4, 212, 46, 1],
            [1, "la", 1, 210, 44, 1],
            [1, "la", 3, 206, 50, 1],
            [1, "re", 0, 217, 24, 1],
            [1, "re", 0, 207, 16, 1],
            [1, "de", 44, 54, 14, 0],
            [1, "de", 44, 53, 13, 0],
            [1, "de", 44, 51, 16, 0],
            [1, "de", 44, 49, 13, 0],
            [1, "de", 44, 48, 14, 0],
            [1, "de", 21, 78, 293, 0],
            [1, "cs", 0, 221, 8, 1],
            [1, "cs", 0, 224, 9, 1],
            [1, "cs", 1, 223, 8, 1],
            [1, "cs", 2, 224, 8, 1],
            [1, "cs", 2, 222, 8, 1],
            [1, "cs", 0, 224, 6, 1],
            [1, "cs", 0, 222, 5, 1],
            [1, "cs", 0, 219, 7, 1],
            [1, "cs", 1, 220, 5, 1],
            [1, "cs", 1, 217, 7, 1],
            [1, "cs", 2, 224, 5, 1],
            [1, "cs", 2, 223, 5, 1],
            [1, "cs", 2, 224, 7, 1],
            [1, "cs", 2, 223, 7, 1],
            [1, "cs", 2, 223, 6, 1],
            [1, "cs", 2, 222, 6, 1],
            [1, "cs", 2, 222, 7, 1],
            [1, "cs", 2, 221, 7, 1],
            [1, "cs", 2, 221, 6, 1],
            [1, "cs", 2, 221, 5, 1],
            [1, "cs", 2, 220, 6, 1],
            [1, "cs", 2, 220, 7, 1],
            [1, "cs", 2, 220, 8, 1],
            [1, "cs", 2, 219, 8, 1],
            [1, "cs", 2, 219, 6, 1],
            [1, "cs", 2, 219, 5, 1],
            [1, "cs", 0, 218, 5, 1],
            [1, "cs", 0, 216, 8, 1],
            [1, "cs", 2, 218, 8, 1],
            [1, "cs", 2, 217, 8, 1],
            [1, "cs", 2, 218, 7, 1],
            [1, "cs", 2, 218, 6, 1],
            [1, "cs", 2, 217, 6, 1],
            [1, "cs", 2, 217, 5, 1],
            [1, "cs", 1, 215, 6, 1],
            [1, "cs", 1, 213, 5, 1],
            [1, "cs", 0, 214, 6, 1],
            [1, "cs", 0, 216, 5, 1],
            [1, "cs", 0, 213, 8, 1],
            [1, "cs", 0, 211, 7, 1],
            [1, "cs", 0, 209, 5, 1],
            [1, "cs", 0, 208, 7, 1],
            [1, "cs", 0, 207, 8, 1],
            [1, "cs", 2, 216, 6, 1],
            [1, "cs", 2, 216, 7, 1],
            [1, "cs", 2, 215, 7, 1],
            [1, "cs", 2, 215, 8, 1],
            [1, "cs", 2, 214, 8, 1],
            [1, "cs", 2, 214, 7, 1],
            [1, "cs", 2, 215, 5, 1],
            [1, "cs", 2, 214, 5, 1],
            [1, "cs", 2, 213, 6, 1],
            [1, "cs", 2, 213, 7, 1],
            [1, "cs", 2, 212, 7, 1],
            [1, "cs", 1, 211, 5, 1],
            [1, "cs", 1, 209, 8, 1],
            [1, "cs", 2, 212, 8, 1],
            [1, "cs", 2, 211, 8, 1],
            [1, "cs", 2, 210, 8, 1],
            [1, "cs", 2, 209, 7, 1],
            [1, "cs", 2, 210, 7, 1],
            [1, "cs", 2, 210, 6, 1],
            [1, "cs", 2, 212, 6, 1],
            [1, "cs", 2, 212, 5, 1],
            [1, "cs", 2, 211, 6, 1],
            [1, "cs", 2, 210, 5, 1],
            [1, "cs", 2, 209, 6, 1],
            [1, "cs", 2, 208, 6, 1],
            [1, "cs", 2, 208, 5, 1],
            [1, "cs", 2, 207, 7, 1],
            [1, "cs", 2, 207, 6, 1],
            [1, "cs", 2, 207, 5, 1],
            [1, "cs", 2, 206, 5, 1],
            [1, "cs", 2, 208, 8, 1],
            [1, "cs", 2, 206, 6, 1],
            [1, "cs", 0, 204, 8, 1],
            [1, "cs", 0, 205, 6, 1],
            [1, "cs", 0, 203, 5, 1],
            [1, "cs", 0, 202, 7, 1],
            [1, "cs", 0, 199, 8, 1],
            [1, "cs", 0, 200, 6, 1],
            [1, "cs", 0, 197, 6, 1],
            [1, "cs", 0, 195, 8, 1],
            [1, "cs", 0, 194, 6, 1],
            [1, "cs", 1, 202, 8, 1],
            [1, "cs", 1, 206, 7, 1],
            [1, "cs", 1, 201, 5, 1],
            [1, "cs", 1, 197, 8, 1],
            [1, "cs", 1, 192, 7, 1],
            [1, "cs", 1, 195, 5, 1],
            [1, "cs", 2, 205, 7, 1],
            [1, "cs", 2, 205, 8, 1],
            [1, "cs", 2, 206, 8, 1],
            [1, "cs", 2, 204, 7, 1],
            [1, "cs", 2, 204, 6, 1],
            [1, "cs", 2, 204, 5, 1],
            [1, "cs", 2, 205, 5, 1],
            [1, "cs", 2, 203, 6, 1],
            [1, "cs", 2, 203, 7, 1],
            [1, "cs", 2, 203, 8, 1],
            [1, "cs", 2, 201, 8, 1],
            [1, "cs", 2, 200, 8, 1],
            [1, "cs", 2, 200, 7, 1],
            [1, "cs", 2, 201, 7, 1],
            [1, "cs", 2, 201, 6, 1],
            [1, "cs", 2, 202, 5, 1],
            [1, "cs", 2, 202, 6, 1],
            [1, "cs", 2, 200, 5, 1],
            [1, "cs", 2, 199, 5, 1],
            [1, "cs", 2, 197, 5, 1],
            [1, "cs", 2, 196, 5, 1],
            [1, "cs", 2, 198, 5, 1],
            [1, "cs", 2, 198, 6, 1],
            [1, "cs", 2, 199, 6, 1],
            [1, "cs", 2, 199, 7, 1],
            [1, "cs", 2, 198, 7, 1],
            [1, "cs", 2, 198, 8, 1],
            [1, "cs", 2, 197, 7, 1],
            [1, "cs", 2, 196, 7, 1],
            [1, "cs", 2, 196, 8, 1],
            [1, "cs", 2, 196, 6, 1],
            [1, "cs", 2, 195, 6, 1],
            [1, "cs", 2, 195, 7, 1],
            [1, "cs", 2, 194, 7, 1],
            [1, "cs", 2, 193, 8, 1],
            [1, "cs", 2, 194, 8, 1],
            [1, "cs", 2, 193, 7, 1],
            [1, "cs", 2, 193, 6, 1],
            [1, "cs", 2, 193, 5, 1],
            [1, "cs", 2, 194, 5, 1],
            [1, "cs", 0, 192, 5, 1],
            [1, "cs", 0, 191, 8, 1],
            [1, "cs", 0, 190, 6, 1],
            [1, "cs", 0, 188, 7, 1],
            [1, "cs", 0, 186, 8, 1],
            [1, "cs", 0, 186, 5, 1],
            [1, "cs", 0, 184, 7, 1],
            [1, "cs", 0, 182, 8, 1],
            [1, "cs", 0, 181, 6, 1],
            [1, "cs", 1, 189, 8, 1],
            [1, "cs", 1, 183, 8, 1],
            [1, "cs", 1, 188, 5, 1],
            [1, "cs", 1, 185, 6, 1],
            [1, "cs", 1, 180, 7, 1],
            [1, "cs", 1, 183, 5, 1],
            [1, "cs", 1, 178, 8, 1],
            [1, "cs", 1, 177, 6, 1],
            [1, "cs", 1, 173, 7, 1],
            [1, "cs", 1, 171, 7, 1],
            [1, "cs", 0, 177, 8, 1],
            [1, "cs", 0, 175, 7, 1],
            [1, "cs", 0, 179, 5, 1],
            [1, "cs", 0, 174, 5, 1],
            [1, "cs", 0, 176, 5, 1],
            [1, "cs", 0, 172, 8, 1],
            [1, "cs", 0, 170, 8, 1],
            [1, "cs", 0, 169, 6, 1],
            [1, "cs", 2, 192, 6, 1],
            [1, "cs", 2, 192, 8, 1],
            [1, "cs", 2, 191, 7, 1],
            [1, "cs", 2, 191, 6, 1],
            [1, "cs", 2, 191, 5, 1],
            [1, "cs", 2, 190, 5, 1],
            [1, "cs", 2, 189, 5, 1],
            [1, "cs", 2, 189, 6, 1],
            [1, "cs", 2, 189, 7, 1],
            [1, "cs", 2, 190, 7, 1],
            [1, "cs", 2, 190, 8, 1],
            [1, "cs", 2, 188, 8, 1],
            [1, "cs", 2, 187, 8, 1],
            [1, "cs", 2, 187, 7, 1],
            [1, "cs", 2, 187, 6, 1],
            [1, "cs", 2, 188, 6, 1],
            [1, "cs", 2, 187, 5, 1],
            [1, "cs", 2, 186, 6, 1],
            [1, "cs", 2, 186, 7, 1],
            [1, "cs", 2, 185, 7, 1],
            [1, "cs", 2, 185, 8, 1],
            [1, "cs", 2, 184, 8, 1],
            [1, "cs", 2, 183, 7, 1],
            [1, "cs", 2, 183, 6, 1],
            [1, "cs", 2, 184, 6, 1],
            [1, "cs", 2, 184, 5, 1],
            [1, "cs", 2, 185, 5, 1],
            [1, "cs", 2, 182, 6, 1],
            [1, "cs", 2, 182, 7, 1],
            [1, "cs", 2, 181, 7, 1],
            [1, "cs", 2, 181, 8, 1],
            [1, "cs", 2, 180, 8, 1],
            [1, "cs", 2, 179, 8, 1],
            [1, "cs", 2, 182, 5, 1],
            [1, "cs", 2, 181, 5, 1],
            [1, "cs", 2, 180, 5, 1],
            [1, "cs", 2, 180, 6, 1],
            [1, "cs", 2, 179, 6, 1],
            [1, "cs", 2, 179, 7, 1],
            [1, "cs", 2, 178, 7, 1],
            [1, "cs", 2, 178, 6, 1],
            [1, "cs", 2, 178, 5, 1],
            [1, "cs", 2, 177, 5, 1],
            [1, "cs", 2, 177, 7, 1],
            [1, "cs", 2, 176, 7, 1],
            [1, "cs", 2, 176, 6, 1],
            [1, "cs", 2, 175, 6, 1],
            [1, "cs", 2, 175, 5, 1],
            [1, "cs", 2, 176, 8, 1],
            [1, "cs", 2, 174, 8, 1],
            [1, "cs", 2, 175, 8, 1],
            [1, "cs", 2, 173, 8, 1],
            [1, "cs", 2, 174, 7, 1],
            [1, "cs", 2, 173, 6, 1],
            [1, "cs", 2, 174, 6, 1],
            [1, "cs", 2, 172, 5, 1],
            [1, "cs", 2, 173, 5, 1],
            [1, "cs", 2, 172, 6, 1],
            [1, "cs", 2, 172, 7, 1],
            [1, "cs", 2, 171, 8, 1],
            [1, "cs", 2, 170, 7, 1],
            [1, "cs", 2, 170, 6, 1],
            [1, "cs", 2, 170, 5, 1],
            [1, "cs", 2, 171, 5, 1],
            [1, "cs", 2, 171, 6, 1],
            [1, "cs", 2, 169, 5, 1],
            [1, "cs", 2, 169, 7, 1],
            [1, "cs", 2, 169, 8, 1],
            [1, "cs", 1, 168, 7, 1],
            [1, "cs", 1, 166, 5, 1],
            [1, "cs", 1, 164, 7, 1],
            [1, "cs", 1, 160, 7, 1],
            [1, "cs", 1, 156, 8, 1],
            [1, "cs", 0, 166, 8, 1],
            [1, "cs", 0, 168, 5, 1],
            [1, "cs", 0, 164, 6, 1],
            [1, "cs", 0, 162, 7, 1],
            [1, "cs", 0, 158, 8, 1],
            [1, "cs", 0, 157, 6, 1],
            [1, "cs", 0, 161, 5, 1],
            [1, "cs", 0, 159, 5, 1],
            [1, "cs", 0, 155, 7, 1],
            [1, "cs", 0, 154, 5, 1],
            [1, "cs", 0, 151, 7, 1],
            [1, "cs", 1, 153, 8, 1],
            [1, "cs", 1, 151, 5, 1],
            [1, "cs", 2, 168, 6, 1],
            [1, "cs", 2, 168, 8, 1],
            [1, "cs", 2, 167, 8, 1],
            [1, "cs", 2, 167, 7, 1],
            [1, "cs", 2, 167, 6, 1],
            [1, "cs", 2, 167, 5, 1],
            [1, "cs", 2, 166, 6, 1],
            [1, "cs", 2, 166, 7, 1],
            [1, "cs", 2, 165, 7, 1],
            [1, "cs", 2, 165, 6, 1],
            [1, "cs", 2, 165, 5, 1],
            [1, "cs", 2, 164, 5, 1],
            [1, "cs", 2, 163, 5, 1],
            [1, "cs", 2, 162, 5, 1],
            [1, "cs", 2, 162, 6, 1],
            [1, "cs", 2, 163, 6, 1],
            [1, "cs", 2, 163, 7, 1],
            [1, "cs", 2, 163, 8, 1],
            [1, "cs", 2, 164, 8, 1],
            [1, "cs", 2, 165, 8, 1],
            [1, "cs", 2, 161, 8, 1],
            [1, "cs", 2, 162, 8, 1],
            [1, "cs", 2, 160, 8, 1],
            [1, "cs", 2, 159, 8, 1],
            [1, "cs", 2, 159, 7, 1],
            [1, "cs", 2, 159, 6, 1],
            [1, "cs", 2, 160, 5, 1],
            [1, "cs", 2, 160, 6, 1],
            [1, "cs", 2, 161, 6, 1],
            [1, "cs", 2, 161, 7, 1],
            [1, "cs", 2, 157, 7, 1],
            [1, "cs", 2, 158, 7, 1],
            [1, "cs", 2, 158, 6, 1],
            [1, "cs", 2, 158, 5, 1],
            [1, "cs", 2, 155, 5, 1],
            [1, "cs", 2, 155, 6, 1],
            [1, "cs", 2, 156, 6, 1],
            [1, "cs", 2, 156, 7, 1],
            [1, "cs", 2, 157, 8, 1],
            [1, "cs", 2, 155, 8, 1],
            [1, "cs", 2, 154, 8, 1],
            [1, "cs", 2, 154, 7, 1],
            [1, "cs", 2, 154, 6, 1],
            [1, "cs", 2, 152, 8, 1],
            [1, "cs", 2, 153, 7, 1],
            [1, "cs", 2, 153, 6, 1],
            [1, "cs", 2, 153, 5, 1],
            [1, "cs", 2, 152, 5, 1],
            [1, "cs", 2, 152, 6, 1],
            [1, "cs", 2, 152, 7, 1],
            [1, "cs", 2, 151, 6, 1],
            [1, "cs", 2, 157, 5, 1],
            [1, "cs", 1, 156, 5, 1],
            [1, "cs", 0, 150, 5, 1],
            [1, "cs", 0, 149, 7, 1],
            [1, "cs", 0, 147, 8, 1],
            [1, "cs", 0, 146, 5, 1],
            [1, "cs", 0, 144, 7, 1],
            [1, "cs", 0, 142, 5, 1],
            [1, "cs", 1, 147, 6, 1],
            [1, "cs", 1, 145, 8, 1],
            [1, "cs", 1, 144, 5, 1],
            [1, "cs", 2, 148, 5, 1],
            [1, "cs", 2, 149, 5, 1],
            [1, "cs", 2, 150, 6, 1],
            [1, "cs", 2, 150, 8, 1],
            [1, "cs", 2, 151, 8, 1],
            [1, "cs", 2, 150, 7, 1],
            [1, "cs", 2, 149, 8, 1],
            [1, "cs", 2, 148, 8, 1],
            [1, "cs", 2, 149, 6, 1],
            [1, "cs", 2, 148, 6, 1],
            [1, "cs", 2, 148, 7, 1],
            [1, "cs", 2, 147, 7, 1],
            [1, "cs", 2, 147, 5, 1],
            [1, "cs", 2, 146, 6, 1],
            [1, "cs", 2, 146, 7, 1],
            [1, "cs", 2, 146, 8, 1],
            [1, "cs", 2, 145, 7, 1],
            [1, "cs", 2, 145, 6, 1],
            [1, "cs", 2, 145, 5, 1],
            [1, "cs", 2, 144, 6, 1],
            [1, "cs", 2, 143, 5, 1],
            [1, "cs", 2, 143, 6, 1],
            [1, "cs", 2, 142, 6, 1],
            [1, "cs", 2, 141, 5, 1],
            [1, "cs", 2, 224, 10, 1],
            [1, "cs", 0, 224, 11, 1],
            [1, "cs", 0, 224, 13, 1],
            [1, "cs", 0, 224, 17, 1],
            [1, "cs", 0, 224, 19, 1],
            [1, "cs", 0, 224, 22, 1],
            [1, "cs", 0, 224, 24, 1],
            [1, "cs", 0, 224, 29, 1],
            [1, "cs", 0, 224, 33, 1],
            [1, "cs", 0, 224, 35, 1],
            [1, "cs", 0, 224, 38, 1],
            [1, "cs", 1, 224, 14, 1],
            [1, "cs", 1, 224, 20, 1],
            [1, "cs", 1, 224, 27, 1],
            [1, "cs", 1, 224, 31, 1],
            [1, "cs", 1, 224, 36, 1],
            [1, "cs", 2, 224, 12, 1],
            [1, "cs", 2, 224, 15, 1],
            [1, "cs", 2, 224, 16, 1],
            [1, "cs", 2, 224, 18, 1],
            [1, "cs", 2, 224, 21, 1],
            [1, "cs", 2, 224, 23, 1],
            [1, "cs", 2, 224, 25, 1],
            [1, "cs", 2, 224, 26, 1],
            [1, "cs", 2, 224, 28, 1],
            [1, "cs", 2, 224, 30, 1],
            [1, "cs", 2, 224, 32, 1],
            [1, "cs", 2, 224, 34, 1],
            [1, "cs", 2, 224, 37, 1],
            [1, "cs", 2, 224, 39, 1],
            [1, "cs", 0, 224, 41, 1],
            [1, "cs", 0, 224, 44, 1],
            [1, "cs", 0, 224, 46, 1],
            [1, "cs", 0, 224, 52, 1],
            [1, "cs", 0, 224, 57, 1],
            [1, "cs", 1, 224, 47, 1],
            [1, "cs", 2, 224, 40, 1],
            [1, "cs", 2, 224, 42, 1],
            [1, "cs", 2, 224, 43, 1],
            [1, "cs", 2, 224, 45, 1],
            [1, "cs", 2, 224, 49, 1],
            [1, "cs", 1, 224, 50, 1],
            [1, "cs", 2, 224, 51, 1],
            [1, "la", 3, 224, 54, 1],
            [1, "cs", 2, 224, 56, 1],
            [1, "cs", 2, 224, 58, 1],
            [1, "cs", 2, 224, 61, 1],
            [1, "cs", 0, 224, 60, 1],
            [1, "cs", 0, 224, 64, 1],
            [1, "cs", 0, 224, 66, 1],
            [1, "cs", 0, 224, 70, 1],
            [1, "cs", 0, 224, 74, 1],
            [1, "cs", 0, 224, 77, 1],
            [1, "cs", 1, 224, 62, 1],
            [1, "cs", 1, 224, 68, 1],
            [1, "cs", 1, 224, 72, 1],
            [1, "cs", 1, 224, 76, 1],
            [1, "cs", 1, 224, 80, 1],
            [1, "cs", 1, 224, 83, 1],
            [1, "cs", 1, 224, 91, 1],
            [1, "cs", 1, 224, 95, 1],
            [1, "cs", 1, 224, 97, 1],
            [1, "cs", 0, 224, 85, 1],
            [1, "cs", 0, 224, 88, 1],
            [1, "cs", 0, 224, 93, 1],
            [1, "cs", 0, 224, 98, 1],
            [1, "cs", 2, 224, 59, 1],
            [1, "cs", 2, 224, 63, 1],
            [1, "cs", 2, 224, 65, 1],
            [1, "cs", 2, 224, 67, 1],
            [1, "cs", 2, 224, 69, 1],
            [1, "cs", 2, 224, 71, 1],
            [1, "cs", 2, 224, 73, 1],
            [1, "cs", 2, 224, 75, 1],
            [1, "cs", 2, 224, 78, 1],
            [1, "cs", 2, 224, 79, 1],
            [1, "cs", 2, 224, 81, 1],
            [1, "cs", 2, 224, 82, 1],
            [1, "cs", 2, 224, 84, 1],
            [1, "cs", 2, 224, 86, 1],
            [1, "cs", 2, 224, 87, 1],
            [1, "cs", 2, 224, 89, 1],
            [1, "cs", 2, 224, 90, 1],
            [1, "cs", 2, 224, 92, 1],
            [1, "cs", 2, 224, 94, 1],
            [1, "cs", 2, 224, 96, 1],
            [1, "cs", 2, 224, 99, 1],
            [1, "cs", 2, 224, 100, 1],
            [1, "cs", 0, 224, 101, 1],
            [1, "cs", 1, 224, 103, 1],
            [1, "cs", 2, 224, 102, 1],
            [1, "cs", 0, 222, 10, 1],
            [1, "cs", 2, 223, 9, 1],
            [1, "cs", 2, 222, 9, 1],
            [1, "cs", 2, 221, 9, 1],
            [1, "cs", 2, 223, 10, 1],
            [1, "cs", 2, 223, 11, 1],
            [1, "cs", 2, 223, 12, 1],
            [1, "cs", 3, 223, 13, 1],
            [1, "cs", 3, 222, 11, 1],
            [1, "cs", 3, 220, 9, 1],
            [1, "cs", 3, 219, 9, 1],
            [1, "cs", 3, 221, 10, 1],
            [1, "re", 2, 219, 13, 1],
            [1, "re", 1, 218, 18, 1],
            [1, "re", 1, 214, 13, 1],
            [1, "cs", 0, 221, 20, 1],
            [1, "cs", 1, 223, 18, 1],
            [1, "cs", 2, 222, 19, 1],
            [1, "cs", 2, 223, 19, 1],
            [1, "cs", 2, 223, 20, 1],
            [1, "cs", 2, 222, 20, 1],
            [1, "cs", 2, 220, 21, 1],
            [1, "cs", 0, 219, 21, 1],
            [1, "cs", 3, 221, 21, 1],
            [1, "cs", 3, 218, 21, 1],
            [1, "cs", 3, 222, 21, 1],
            [1, "cs", 3, 220, 22, 1],
            [1, "cs", 3, 219, 22, 1],
            [1, "cs", 3, 221, 22, 1],
            [1, "cs", 0, 211, 9, 1],
            [1, "cs", 1, 211, 10, 1],
            [1, "cs", 1, 210, 12, 1],
            [1, "cs", 0, 211, 13, 1],
            [1, "cs", 2, 210, 9, 1],
            [1, "cs", 2, 210, 10, 1],
            [1, "cs", 2, 210, 11, 1],
            [1, "cs", 2, 212, 9, 1],
            [1, "cs", 2, 210, 13, 1],
            [1, "cs", 2, 211, 12, 1],
            [1, "cs", 2, 211, 11, 1],
            [1, "cs", 2, 211, 14, 1],
            [1, "cs", 2, 212, 15, 1],
            [1, "cs", 2, 210, 14, 1],
            [1, "cs", 3, 211, 15, 1],
            [1, "cs", 3, 213, 9, 1],
            [1, "cs", 3, 212, 10, 1],
            [1, "cs", 3, 223, 21, 1],
            [1, "cs", 3, 209, 9, 1],
            [1, "la", 3, 223, 22, 1],
            [1, "la", 3, 221, 23, 1],
            [1, "la", 3, 207, 9, 1],
            [1, "la", 3, 209, 10, 1],
            [1, "la", 0, 209, 12, 1],
            [1, "la", 4, 209, 14, 1],
            [1, "la", 4, 219, 23, 1],
            [1, "la", 3, 210, 15, 1],
            [1, "la", 3, 217, 22, 1],
            [1, "la", 4, 212, 16, 1],
            [1, "la", 2, 214, 19, 1],
            [1, "la", 4, 213, 20, 1],
            [1, "la", 1, 212, 21, 1],
            [1, "la", 4, 215, 18, 1],
            [1, "la", 2, 216, 17, 1],
            [1, "la", 5, 216, 16, 1],
            [1, "la", 5, 216, 15, 1],
            [1, "la", 1, 217, 16, 1],
            [1, "la", 2, 218, 16, 1],
            [1, "la", 2, 216, 14, 1],
            [1, "la", 2, 219, 16, 1],
            [1, "la", 5, 220, 16, 1],
            [1, "la", 5, 216, 13, 1],
            [1, "la", 4, 217, 15, 1],
            [1, "cs", 0, 211, 44, 1],
            [1, "cs", 1, 212, 45, 1],
            [1, "cs", 2, 213, 45, 1],
            [1, "cs", 0, 214, 46, 1],
            [1, "cs", 2, 215, 46, 1],
            [1, "cs", 3, 213, 46, 1],
            [1, "cs", 3, 214, 47, 1],
            [1, "cs", 3, 214, 48, 1],
            [1, "cs", 3, 216, 46, 1],
            [1, "cs", 0, 208, 20, 1],
            [1, "cs", 0, 210, 21, 1],
            [1, "cs", 0, 212, 23, 1],
            [1, "cs", 0, 213, 25, 1],
            [1, "cs", 2, 213, 24, 1],
            [1, "cs", 2, 211, 22, 1],
            [1, "cs", 2, 210, 20, 1],
            [1, "cs", 2, 209, 21, 1],
            [1, "cs", 2, 209, 20, 1],
            [1, "cs", 2, 211, 21, 1],
            [1, "cs", 2, 212, 22, 1],
            [1, "cs", 2, 213, 23, 1],
            [1, "cs", 3, 213, 26, 1],
            [1, "cs", 3, 207, 20, 1],
            [1, "la", 4, 192, 33, 1],
            [1, "la", 4, 191, 34, 1],
            [1, "la", 4, 190, 35, 1],
            [1, "la", 3, 189, 37, 1],
            [1, "la", 3, 188, 39, 1],
            [1, "la", 4, 186, 40, 1],
            [1, "la", 4, 185, 39, 1],
            [1, "la", 4, 184, 39, 1],
            [1, "la", 2, 183, 39, 1],
            [1, "la", 1, 182, 40, 1],
            [1, "la", 2, 181, 41, 1],
            [1, "la", 5, 180, 41, 1],
            [1, "la", 5, 179, 41, 1],
            [1, "la", 4, 192, 28, 1],
            [1, "la", 4, 191, 28, 1],
            [1, "la", 4, 190, 27, 1],
            [1, "la", 3, 188, 27, 1],
            [1, "la", 4, 187, 26, 1],
            [1, "la", 4, 186, 25, 1],
            [1, "la", 4, 185, 25, 1],
            [1, "la", 4, 184, 24, 1],
            [1, "la", 5, 184, 23, 1],
            [1, "la", 2, 184, 22, 1],
            [1, "la", 5, 184, 21, 1],
            [1, "la", 1, 183, 20, 1],
            [1, "la", 5, 182, 20, 1],
            [1, "la", 2, 181, 20, 1],
            [1, "la", 5, 180, 20, 1],
            [1, "la", 2, 179, 20, 1],
            [1, "la", 4, 178, 19, 1],
            [1, "la", 3, 178, 17, 1],
            [1, "la", 3, 176, 18, 1],
            [1, "cs", 0, 177, 15, 1],
            [1, "cs", 0, 175, 17, 1],
            [1, "cs", 0, 180, 16, 1],
            [1, "cs", 0, 174, 19, 1],
            [1, "cs", 0, 172, 20, 1],
            [1, "cs", 1, 175, 15, 1],
            [1, "cs", 1, 172, 18, 1],
            [1, "cs", 1, 181, 15, 1],
            [1, "cs", 2, 179, 15, 1],
            [1, "cs", 2, 177, 16, 1],
            [1, "cs", 2, 176, 16, 1],
            [1, "cs", 2, 174, 18, 1],
            [1, "cs", 2, 173, 19, 1],
            [1, "cs", 2, 172, 19, 1],
            [1, "cs", 2, 173, 18, 1],
            [1, "cs", 2, 173, 17, 1],
            [1, "cs", 2, 174, 17, 1],
            [1, "cs", 2, 174, 16, 1],
            [1, "cs", 2, 175, 16, 1],
            [1, "cs", 2, 176, 15, 1],
            [1, "cs", 2, 178, 15, 1],
            [1, "cs", 2, 178, 16, 1],
            [1, "cs", 2, 179, 16, 1],
            [1, "cs", 2, 180, 15, 1],
            [1, "cs", 2, 181, 16, 1],
            [1, "cs", 3, 182, 16, 1],
            [1, "cs", 3, 172, 21, 1],
            [1, "la", 1, 175, 19, 1],
            [1, "la", 2, 174, 20, 1],
            [1, "la", 2, 173, 20, 1],
            [1, "la", 1, 180, 17, 1],
            [1, "la", 2, 181, 17, 1],
            [1, "la", 3, 191, 20, 1],
            [1, "s", 0, 217, 30, 1],
            [1, "s", 0, 208, 35, 1],
            [1, "s", 0, 204, 24, 1],
            [1, "s", 1, 218, 32, 1],
            [1, "s", 1, 207, 34, 1],
            [1, "s", 1, 202, 23, 1],
            [1, "s", 1, 195, 16, 1],
            [1, "s", 2, 222, 28, 1],
            [1, "s", 2, 212, 38, 1],
            [1, "s", 2, 207, 23, 1],
            [1, "s", 2, 202, 12, 1],
            [1, "s", 2, 195, 18, 1],
            [1, "s", 1, 191, 12, 1],
            [1, "s", 0, 187, 16, 1],
            [1, "s", 2, 188, 16, 1],
            [1, "s", 1, 186, 14, 1],
            [1, "s", 1, 201, 16, 1],
            [1, "g", 1, 216, 31, 1],
            [1, "g", 0, 200, 15, 1],
            [1, "g", 0, 202, 40, 1],
            [1, "g", 0, 189, 32, 1],
            [1, "g", 0, 204, 28, 1],
            [1, "g", 0, 196, 24, 1],
            [1, "g", 2, 198, 37, 1],
            [1, "s", 0, 193, 39, 1],
            [1, "s", 0, 201, 45, 1],
            [1, "a", 0, 210, 29, 1],
            [1, "a", 0, 200, 20, 1],
            [1, "cs", 0, 200, 34, 1],
            [1, "cs", 0, 193, 27, 1],
            [1, "cs", 1, 203, 30, 1],
            [1, "cs", 1, 191, 31, 1],
            [1, "cs", 2, 202, 32, 1],
            [1, "cs", 2, 194, 26, 1],
            [1, "cs", 2, 192, 27, 1],
            [1, "cs", 2, 192, 32, 1],
            [1, "cs", 2, 203, 31, 1],
            [1, "cs", 2, 202, 31, 1],
            [1, "cs", 2, 202, 30, 1],
            [1, "cs", 3, 202, 29, 1],
            [1, "cs", 3, 201, 32, 1],
            [1, "cs", 3, 199, 35, 1],
            [1, "cs", 0, 193, 34, 1],
            [1, "cs", 2, 194, 34, 1],
            [1, "cs", 2, 198, 35, 1],
            [1, "cs", 3, 199, 34, 1],
            [1, "cs", 3, 191, 29, 1],
            [1, "cs", 0, 191, 30, 1],
            [1, "cs", 3, 190, 29, 1],
            [1, "la", 3, 180, 69, 1],
            [1, "la", 3, 182, 68, 1],
            [1, "la", 3, 184, 68, 1],
            [1, "la", 3, 186, 70, 1],
            [1, "la", 3, 184, 72, 1],
            [1, "la", 3, 182, 72, 1],
            [1, "la", 3, 180, 71, 1],
            [1, "cs", 0, 186, 68, 1],
            [1, "cs", 0, 187, 70, 1],
            [1, "cs", 0, 183, 74, 1],
            [1, "cs", 0, 178, 70, 1],
            [1, "cs", 2, 182, 66, 1],
            [1, "cs", 2, 182, 74, 1],
            [1, "cs", 2, 181, 73, 1],
            [1, "cs", 2, 180, 74, 1],
            [1, "cs", 2, 181, 74, 1],
            [1, "la", 0, 184, 70, 1],
            [1, "la", 3, 182, 70, 1],
            [1, "cs", 2, 181, 67, 1],
            [1, "cs", 3, 184, 67, 1],
            [1, "cs", 3, 182, 67, 1],
            [1, "la", 4, 187, 69, 1],
            [1, "la", 1, 188, 68, 1],
            [1, "la", 4, 189, 68, 1],
            [1, "la", 2, 190, 68, 1],
            [1, "la", 1, 191, 68, 1],
            [1, "la", 4, 192, 68, 1],
            [1, "la", 2, 193, 68, 1],
            [1, "la", 4, 194, 69, 1],
            [1, "la", 2, 194, 70, 1],
            [1, "la", 5, 195, 71, 1],
            [1, "la", 1, 194, 71, 1],
            [1, "la", 2, 196, 72, 1],
            [1, "la", 4, 196, 71, 1],
            [1, "la", 1, 197, 73, 1],
            [1, "la", 5, 196, 73, 1],
            [1, "la", 5, 198, 73, 1],
            [1, "la", 3, 201, 73, 1],
            [1, "la", 3, 203, 72, 1],
            [1, "la", 4, 199, 73, 1],
            [1, "la", 1, 205, 72, 1],
            [1, "la", 2, 206, 72, 1],
            [1, "la", 5, 207, 72, 1],
            [1, "la", 1, 208, 72, 1],
            [1, "la", 1, 209, 73, 1],
            [1, "la", 2, 209, 74, 1],
            [1, "la", 5, 211, 76, 1],
            [1, "la", 4, 210, 75, 1],
            [1, "la", 5, 212, 76, 1],
            [1, "la", 4, 202, 75, 1],
            [1, "la", 2, 203, 76, 1],
            [1, "la", 4, 204, 77, 1],
            [1, "la", 2, 204, 78, 1],
            [1, "la", 2, 204, 79, 1],
            [1, "la", 5, 204, 80, 1],
            [1, "cs", 0, 202, 74, 1],
            [1, "cs", 1, 203, 74, 1],
            [1, "cs", 2, 204, 73, 1],
            [1, "cs", 2, 203, 75, 1],
            [1, "cs", 3, 204, 76, 1],
            [1, "cs", 3, 205, 73, 1],
            [1, "cs", 0, 205, 74, 1],
            [1, "cs", 2, 204, 74, 1],
            [1, "cs", 2, 204, 75, 1],
            [1, "cs", 2, 206, 73, 1],
            [1, "cs", 3, 207, 73, 1],
            [1, "cs", 2, 205, 76, 1],
            [1, "cs", 3, 205, 77, 1],
            [1, "la", 3, 183, 66, 1],
            [1, "la", 4, 183, 65, 1],
            [1, "la", 4, 184, 64, 1],
            [1, "la", 4, 185, 63, 1],
            [1, "la", 1, 185, 62, 1],
            [1, "la", 2, 185, 61, 1],
            [1, "la", 2, 185, 60, 1],
            [1, "la", 4, 186, 59, 1],
            [1, "la", 1, 187, 58, 1],
            [1, "la", 2, 187, 57, 1],
            [1, "la", 2, 187, 56, 1],
            [1, "s", 0, 191, 60, 1],
            [1, "s", 1, 195, 58, 1],
            [1, "s", 1, 199, 46, 1],
            [1, "s", 2, 202, 49, 1],
            [1, "g", 2, 197, 55, 1],
            [1, "g", 1, 213, 55, 1],
            [1, "g", 0, 192, 45, 1],
            [1, "g", 0, 210, 61, 1],
            [1, "g", 0, 182, 52, 1],
            [1, "g", 0, 180, 35, 1],
            [1, "g", 0, 175, 25, 1],
            [1, "g", 0, 168, 32, 1],
            [1, "g", 1, 179, 28, 1],
            [1, "g", 1, 161, 16, 1],
            [1, "g", 2, 172, 12, 1],
            [1, "g", 2, 160, 25, 1],
            [1, "g", 2, 157, 39, 1],
            [1, "g", 2, 170, 43, 1],
            [1, "g", 2, 202, 67, 1],
            [1, "g", 2, 217, 72, 1],
            [1, "g", 2, 214, 82, 1],
            [1, "g", 2, 193, 86, 1],
            [1, "g", 2, 168, 60, 1],
            [1, "g", 2, 165, 78, 1],
            [1, "g", 2, 173, 88, 1],
            [1, "s", 0, 185, 51, 1],
            [1, "s", 0, 175, 44, 1],
            [1, "s", 0, 165, 50, 1],
            [1, "s", 0, 160, 32, 1],
            [1, "s", 1, 162, 30, 1],
            [1, "s", 1, 176, 28, 1],
            [1, "s", 1, 154, 17, 1],
            [1, "s", 1, 184, 49, 1],
            [1, "s", 1, 192, 62, 1],
            [1, "s", 1, 216, 62, 1],
            [1, "s", 1, 204, 65, 1],
            [1, "s", 1, 217, 79, 1],
            [1, "s", 1, 206, 86, 1],
            [1, "la", 3, 211, 69, 1],
            [1, "la", 4, 215, 69, 1],
            [1, "la", 5, 201, 81, 1],
            [1, "la", 1, 207, 83, 1],
            [1, "la", 3, 173, 32, 1],
            [1, "la", 2, 181, 45, 1],
            [1, "la", 1, 178, 38, 1],
            [1, "la", 1, 213, 69, 1],
            [1, "la", 5, 214, 69, 1],
            [1, "la", 4, 216, 68, 1],
            [1, "la", 0, 191, 78, 1],
            [1, "la", 3, 191, 80, 1],
            [1, "la", 3, 189, 79, 1],
            [1, "g", 2, 150, 29, 1],
            [1, "g", 2, 154, 67, 1],
            [1, "g", 2, 202, 94, 1],
            [1, "g", 2, 155, 90, 1],
            [1, "s", 2, 215, 80, 1],
            [1, "s", 2, 204, 62, 1],
            [1, "s", 2, 218, 60, 1],
            [1, "s", 2, 194, 62, 1],
            [1, "s", 0, 216, 86, 1],
            [1, "s", 0, 211, 93, 1],
            [1, "la", 0, 216, 92, 1],
            [1, "la", 0, 151, 96, 1],
            [1, "la", 1, 155, 95, 1],
            [1, "la", 4, 214, 88, 1],
            [1, "s", 0, 205, 99, 1],
            [1, "s", 1, 217, 88, 1],
            [1, "s", 1, 213, 94, 1],
            [1, "s", 1, 202, 97, 1],
            [1, "s", 0, 199, 85, 1],
            [1, "s", 0, 190, 93, 1],
            [1, "s", 1, 199, 87, 1],
            [1, "s", 1, 192, 97, 1],
            [1, "la", 3, 196, 92, 1],
            [1, "la", 1, 199, 91, 1],
            [1, "la", 1, 220, 91, 1],
            [1, "la", 0, 219, 77, 1],
            [1, "la", 0, 200, 59, 1],
            [1, "la", 3, 188, 87, 1],
            [1, "la", 0, 183, 94, 1],
            [1, "la", 1, 187, 83, 1],
            [1, "la", 1, 175, 82, 1],
            [1, "la", 1, 172, 94, 1],
            [1, "la", 2, 179, 78, 1],
            [1, "la", 0, 166, 87, 1],
            [1, "la", 3, 159, 80, 1],
            [1, "la", 3, 167, 15, 1],
            [1, "la", 1, 164, 17, 1],
            [1, "la", 1, 172, 28, 1],
            [1, "la", 3, 153, 24, 1],
            [1, "la", 4, 164, 91, 1],
            [1, "la", 4, 156, 82, 1],
            [1, "la", 4, 149, 90, 1],
            [1, "s", 0, 178, 85, 1],
            [1, "s", 1, 180, 85, 1],
            [1, "s", 0, 163, 96, 1],
            [1, "s", 0, 159, 86, 1],
            [1, "s", 0, 185, 78, 1],
            [1, "s", 1, 194, 75, 1],
            [1, "s", 2, 195, 76, 1],
            [1, "s", 2, 181, 78, 1],
            [1, "s", 2, 161, 87, 1],
            [1, "s", 2, 166, 97, 1],
            [1, "s", 2, 177, 97, 1],
            [1, "s", 0, 149, 85, 1],
            [1, "s", 1, 151, 83, 1],
            [1, "s", 1, 175, 74, 1],
            [1, "s", 0, 174, 72, 1],
            [1, "la", 3, 168, 71, 1],
            [1, "la", 3, 180, 60, 1],
            [1, "s", 0, 156, 63, 1],
            [1, "s", 0, 151, 47, 1],
            [1, "s", 1, 158, 64, 1],
            [1, "s", 1, 161, 75, 1],
            [1, "s", 1, 162, 51, 1],
            [1, "s", 1, 175, 45, 1],
            [1, "s", 1, 152, 47, 1],
            [1, "s", 1, 159, 33, 1],
            [1, "s", 1, 152, 18, 1],
            [1, "s", 0, 151, 13, 1],
            [1, "s", 0, 166, 22, 1],
            [1, "s", 0, 170, 63, 1],
            [1, "s", 2, 172, 62, 1],
            [1, "s", 2, 155, 61, 1],
            [1, "s", 2, 167, 51, 1],
            [1, "s", 2, 150, 52, 1],
            [1, "la", 4, 178, 69, 1],
            [1, "la", 4, 177, 68, 1],
            [1, "la", 3, 176, 67, 1],
            [1, "la", 0, 174, 67, 1],
            [1, "la", 1, 172, 67, 1],
            [1, "la", 4, 171, 67, 1],
            [1, "la", 4, 170, 66, 1],
            [1, "la", 4, 169, 66, 1],
            [1, "la", 1, 168, 66, 1],
            [1, "la", 4, 167, 67, 1],
            [1, "la", 1, 166, 67, 1],
            [1, "la", 4, 165, 68, 1],
            [1, "la", 5, 164, 68, 1],
            [1, "la", 2, 163, 68, 1],
            [1, "la", 5, 162, 68, 1],
            [1, "la", 2, 161, 68, 1],
            [1, "la", 3, 153, 72, 1],
            [1, "la", 3, 163, 60, 1],
            [1, "la", 3, 164, 42, 1],
            [1, "la", 0, 155, 51, 1],
            [1, "la", 1, 168, 42, 1],
            [1, "la", 4, 158, 48, 1],
            [1, "la", 4, 178, 57, 1],
            [1, "la", 4, 151, 69, 1],
            [1, "la", 2, 170, 74, 1],
            [1, "la", 2, 160, 84, 1],
            [1, "la", 2, 174, 92, 1],
            [1, "la", 2, 188, 90, 1],
            [1, "la", 2, 209, 84, 1],
            [1, "la", 2, 206, 93, 1],
            [1, "la", 5, 156, 70, 1],
            [1, "la", 5, 165, 57, 1],
            [1, "la", 5, 182, 58, 1],
            [1, "la", 5, 166, 44, 1],
            [1, "la", 1, 163, 39, 1],
            [1, "la", 1, 152, 53, 1],
            [1, "la", 1, 152, 37, 1],
            [1, "la", 2, 163, 13, 1],
            [1, "de", 12, 219, 12, 0],
            [1, "de", 14, 203, 13, 0],
            [1, "de", 15, 220, 19, 0],
            [1, "de", 12, 223, 15, 0],
            [1, "de", 12, 213, 10, 0],
            [1, "de", 37, 217, 19, 0],
            [1, "de", 38, 220, 14, 0],
            [1, "de", 38, 215, 10, 0],
            [1, "de", 40, 214, 14, 0],
            [1, "de", 40, 222, 16, 0],
            [1, "de", 40, 209, 18, 0],
            [1, "de", 37, 212, 18, 0],
            [1, "de", 38, 215, 26, 0],
            [1, "de", 37, 222, 25, 0],
            [1, "de", 40, 221, 29, 0],
            [1, "de", 12, 220, 27, 0],
            [1, "de", 13, 213, 27, 0],
            [1, "de", 14, 215, 30, 0],
            [1, "de", 15, 219, 33, 0],
            [1, "de", 38, 220, 31, 0],
            [1, "de", 38, 217, 35, 0],
            [1, "de", 40, 221, 34, 0],
            [1, "de", 39, 215, 32, 0],
            [1, "de", 37, 211, 35, 0],
            [1, "de", 12, 223, 38, 0],
            [1, "de", 13, 213, 38, 0],
            [1, "de", 14, 222, 44, 0],
            [1, "de", 15, 208, 33, 0],
            [1, "de", 15, 206, 23, 0],
            [1, "de", 13, 205, 28, 0],
            [1, "de", 14, 211, 23, 0],
            [1, "de", 14, 201, 20, 0],
            [1, "de", 15, 198, 9, 0],
            [1, "de", 15, 199, 16, 0],
            [1, "de", 12, 194, 15, 0],
            [1, "de", 12, 197, 23, 0],
            [1, "de", 37, 205, 13, 0],
            [1, "de", 39, 204, 9, 0],
            [1, "de", 40, 196, 12, 0],
            [1, "de", 40, 198, 18, 0],
            [1, "de", 37, 192, 11, 0],
            [1, "de", 37, 199, 24, 0],
            [1, "de", 37, 209, 24, 0],
            [1, "de", 39, 209, 30, 0],
            [1, "de", 39, 204, 31, 0],
            [1, "de", 39, 192, 24, 0],
            [1, "de", 40, 187, 23, 0],
            [1, "de", 38, 187, 18, 0],
            [1, "de", 39, 192, 18, 0],
            [1, "de", 37, 185, 15, 0],
            [1, "de", 12, 188, 15, 0],
            [1, "de", 13, 185, 13, 0],
            [1, "de", 14, 189, 9, 0],
            [1, "de", 15, 187, 22, 0],
            [1, "de", 15, 180, 9, 0],
            [1, "de", 12, 177, 14, 0],
            [1, "de", 14, 173, 9, 0],
            [1, "de", 14, 171, 15, 0],
            [1, "de", 40, 182, 9, 0],
            [1, "de", 39, 179, 13, 0],
            [1, "de", 39, 175, 9, 0],
            [1, "de", 40, 173, 14, 0],
            [1, "de", 37, 169, 11, 0],
            [1, "de", 37, 163, 10, 0],
            [1, "de", 38, 164, 15, 0],
            [1, "de", 39, 170, 20, 0],
            [1, "de", 40, 160, 17, 0],
            [1, "de", 40, 154, 10, 0],
            [1, "de", 40, 165, 23, 0],
            [1, "de", 40, 150, 19, 0],
            [1, "de", 37, 155, 16, 0],
            [1, "de", 39, 146, 10, 0],
            [1, "de", 12, 159, 12, 0],
            [1, "de", 13, 151, 9, 0],
            [1, "de", 14, 150, 14, 0],
            [1, "de", 15, 153, 19, 0],
            [1, "de", 13, 161, 25, 0],
            [1, "de", 14, 169, 25, 0],
            [1, "de", 15, 176, 25, 0],
            [1, "de", 12, 180, 29, 0],
            [1, "de", 12, 188, 31, 0],
            [1, "de", 14, 181, 36, 0],
            [1, "de", 37, 186, 33, 0],
            [1, "de", 38, 183, 26, 0],
            [1, "de", 39, 177, 21, 0],
            [1, "de", 40, 175, 31, 0],
            [1, "de", 37, 176, 39, 0],
            [1, "de", 37, 168, 34, 0],
            [1, "de", 38, 162, 32, 0],
            [1, "de", 38, 168, 45, 0],
            [1, "de", 38, 173, 45, 0],
            [1, "de", 39, 160, 35, 0],
            [1, "de", 40, 161, 42, 0],
            [1, "de", 40, 170, 39, 0],
            [1, "de", 40, 181, 43, 0],
            [1, "de", 40, 156, 26, 0],
            [1, "de", 40, 150, 32, 0],
            [1, "de", 37, 159, 26, 0],
            [1, "de", 37, 155, 40, 0],
            [1, "de", 37, 154, 45, 0],
            [1, "de", 39, 149, 45, 0],
            [1, "de", 40, 150, 50, 0],
            [1, "de", 40, 160, 52, 0],
            [1, "de", 37, 164, 52, 0],
            [1, "de", 38, 168, 50, 0],
            [1, "de", 12, 176, 45, 0],
            [1, "de", 12, 167, 32, 0],
            [1, "de", 13, 158, 32, 0],
            [1, "de", 14, 149, 28, 0],
            [1, "de", 15, 163, 30, 0],
            [1, "de", 14, 158, 39, 0],
            [1, "de", 12, 171, 43, 0],
            [1, "de", 12, 174, 36, 0],
            [1, "de", 12, 151, 43, 0],
            [1, "de", 13, 152, 48, 0],
            [1, "de", 14, 164, 49, 0],
            [1, "de", 15, 149, 52, 0],
            [1, "de", 12, 174, 49, 0],
            [1, "de", 13, 183, 51, 0],
            [1, "de", 14, 186, 48, 0],
            [1, "de", 37, 182, 48, 0],
            [1, "de", 38, 187, 52, 0],
            [1, "de", 39, 188, 43, 0],
            [1, "de", 37, 200, 38, 0],
            [1, "de", 40, 194, 37, 0],
            [1, "de", 39, 199, 44, 0],
            [1, "de", 38, 200, 49, 0],
            [1, "de", 37, 196, 54, 0],
            [1, "de", 12, 194, 40, 0],
            [1, "de", 13, 202, 45, 0],
            [1, "de", 14, 198, 47, 0],
            [1, "de", 15, 198, 55, 0],
            [1, "de", 15, 212, 54, 0],
            [1, "de", 15, 216, 63, 0],
            [1, "de", 14, 209, 62, 0],
            [1, "de", 12, 219, 60, 0],
            [1, "de", 12, 206, 56, 0],
            [1, "de", 12, 218, 72, 0],
            [1, "de", 12, 223, 67, 0],
            [1, "de", 12, 205, 64, 0],
            [1, "de", 12, 193, 63, 0],
            [1, "de", 14, 216, 80, 0],
            [1, "de", 14, 222, 87, 0],
            [1, "de", 38, 210, 53, 0],
            [1, "de", 37, 210, 47, 0],
            [1, "de", 37, 200, 63, 0],
            [1, "de", 37, 218, 62, 0],
            [1, "de", 37, 222, 60, 0],
            [1, "de", 37, 207, 70, 0],
            [1, "de", 38, 203, 68, 0],
            [1, "de", 38, 195, 66, 0],
            [1, "de", 38, 218, 55, 0],
            [1, "de", 38, 212, 61, 0],
            [1, "de", 38, 222, 70, 0],
            [1, "de", 38, 218, 70, 0],
            [1, "de", 40, 222, 81, 0],
            [1, "de", 38, 214, 79, 0],
            [1, "de", 39, 213, 83, 0],
            [1, "de", 39, 207, 76, 0],
            [1, "de", 39, 208, 86, 0],
            [1, "de", 39, 218, 87, 0],
            [1, "de", 39, 222, 93, 0],
            [1, "de", 39, 216, 96, 0],
            [1, "de", 39, 209, 94, 0],
            [1, "de", 39, 201, 87, 0],
            [1, "de", 39, 198, 82, 0],
            [1, "de", 39, 207, 99, 0],
            [1, "de", 39, 200, 97, 0],
            [1, "de", 39, 202, 92, 0],
            [1, "de", 37, 194, 97, 0],
            [1, "de", 39, 204, 88, 0],
            [1, "de", 39, 189, 90, 0],
            [1, "de", 39, 194, 81, 0],
            [1, "de", 39, 188, 98, 0],
            [1, "de", 37, 183, 91, 0],
            [1, "de", 37, 186, 80, 0],
            [1, "de", 37, 191, 72, 0],
            [1, "de", 38, 184, 77, 0],
            [1, "de", 38, 180, 80, 0],
            [1, "de", 39, 173, 75, 0],
            [1, "de", 40, 178, 87, 0],
            [1, "de", 40, 174, 94, 0],
            [1, "de", 40, 192, 93, 0],
            [1, "de", 40, 165, 92, 0],
            [1, "de", 37, 160, 89, 0],
            [1, "de", 38, 161, 85, 0],
            [1, "de", 38, 164, 98, 0],
            [1, "de", 38, 151, 99, 0],
            [1, "de", 38, 151, 85, 0],
            [1, "de", 40, 148, 83, 0],
            [1, "de", 40, 160, 77, 0],
            [1, "de", 40, 167, 77, 0],
            [1, "de", 40, 153, 69, 0],
            [1, "de", 40, 149, 74, 0],
            [1, "de", 37, 161, 64, 0],
            [1, "de", 37, 154, 61, 0],
            [1, "de", 39, 157, 55, 0],
            [1, "de", 39, 174, 64, 0],
            [1, "de", 39, 175, 56, 0],
            [1, "de", 39, 149, 67, 0],
            [1, "de", 12, 218, 96, 0],
            [1, "de", 13, 212, 95, 0],
            [1, "de", 14, 204, 85, 0],
            [1, "de", 15, 215, 85, 0],
            [1, "de", 15, 197, 97, 0],
            [1, "de", 12, 198, 87, 0],
            [1, "de", 14, 196, 77, 0],
            [1, "de", 13, 194, 86, 0],
            [1, "de", 15, 181, 84, 0],
            [1, "de", 14, 184, 79, 0],
            [1, "de", 14, 188, 93, 0],
            [1, "de", 13, 180, 87, 0],
            [1, "de", 13, 178, 96, 0],
            [1, "de", 13, 163, 95, 0],
            [1, "de", 15, 172, 88, 0],
            [1, "de", 15, 176, 75, 0],
            [1, "de", 14, 172, 72, 0],
            [1, "de", 14, 169, 82, 0],
            [1, "de", 13, 164, 78, 0],
            [1, "de", 13, 158, 87, 0],
            [1, "de", 13, 149, 86, 0],
            [1, "de", 15, 154, 91, 0],
            [1, "de", 15, 160, 74, 0],
            [1, "de", 14, 152, 76, 0],
            [1, "de", 14, 158, 63, 0],
            [1, "de", 14, 150, 60, 0],
            [1, "de", 12, 169, 59, 0],
            [1, "de", 13, 173, 61, 0],
            [1, "cs", 1, 143, 104, 1],
            [1, "cs", 0, 141, 102, 1],
            [1, "cs", 3, 138, 102, 1],
            [1, "cs", 2, 139, 102, 1],
            [1, "cs", 2, 140, 102, 1],
            [1, "cs", 3, 143, 107, 1],
            [1, "cs", 0, 143, 106, 1],
            [1, "cs", 2, 143, 105, 1],
            [1, "cs", 2, 142, 103, 1],
            [1, "cs", 0, 142, 104, 1],
            [1, "cs", 2, 141, 103, 1],
            [1, "cs", 3, 142, 105, 1],
            [1, "cs", 3, 140, 103, 1],
            [1, "cs", 3, 141, 104, 1],
            [1, "la", 4, 151, 23, 1],
            [1, "la", 4, 150, 22, 1],
            [1, "la", 1, 149, 21, 1],
            [1, "la", 4, 148, 21, 1],
            [1, "la", 2, 147, 20, 1],
            [1, "la", 4, 147, 19, 1],
            [1, "la", 5, 147, 18, 1],
            [1, "la", 1, 147, 17, 1],
            [1, "la", 3, 144, 9, 1],
            [1, "la", 5, 147, 16, 1],
            [1, "la", 2, 147, 15, 1],
            [1, "la", 4, 147, 14, 1],
            [1, "la", 4, 145, 11, 1],
            [1, "la", 5, 145, 12, 1],
            [1, "la", 1, 146, 13, 1],
            [1, "la", 2, 145, 13, 1],
            [1, "la", 3, 155, 25, 1],
            [1, "la", 0, 155, 24, 1],
            [1, "la", 3, 153, 26, 1],
            [1, "cs", 0, 151, 24, 1],
            [1, "cs", 0, 153, 22, 1],
            [1, "cs", 3, 152, 22, 1],
            [1, "cs", 3, 154, 22, 1],
            [1, "cs", 1, 157, 26, 1],
            [1, "cs", 2, 157, 24, 1],
            [1, "cs", 2, 156, 26, 1],
            [1, "cs", 2, 154, 28, 1],
            [1, "cs", 2, 151, 26, 1],
            [1, "cs", 2, 152, 25, 1],
            [1, "cs", 2, 151, 25, 1],
            [1, "cs", 2, 156, 27, 1],
            [1, "cs", 2, 157, 23, 1],
            [1, "cs", 2, 157, 22, 1],
            [1, "cs", 3, 150, 24, 1],
            [1, "cs", 3, 150, 23, 1],
            [1, "de", 38, 155, 29, 0],
            [1, "de", 12, 157, 27, 0],
            [1, "de", 14, 153, 29, 0],
            [1, "de", 15, 158, 23, 0],
            [1, "de", 13, 156, 21, 0],
            [1, "de", 13, 147, 36, 0],
            [1, "de", 13, 161, 56, 0],
            [1, "de", 13, 147, 79, 0],
            [1, "de", 12, 157, 99, 0],
            [1, "de", 12, 172, 99, 0],
            [1, "la", 3, 143, 102, 1],
            [1, "la", 4, 149, 96, 1],
            [1, "la", 4, 145, 102, 1],
            [1, "la", 1, 148, 97, 1],
            [1, "la", 5, 148, 98, 1],
            [1, "cs", 3, 144, 104, 1],
            [1, "cs", 3, 144, 103, 1],
            [1, "cs", 3, 145, 103, 1],
            [1, "cs", 3, 145, 104, 1],
            [1, "cs", 3, 142, 101, 1],
            [1, "cs", 3, 143, 100, 1],
            [1, "cs", 3, 141, 101, 1],
            [1, "cs", 3, 142, 100, 1],
            [1, "cs", 0, 141, 100, 1],
            [1, "cs", 2, 140, 101, 1],
            [1, "cs", 2, 144, 105, 1],
            [1, "cs", 3, 146, 103, 1],
            [1, "cs", 3, 146, 102, 1],
            [1, "cs", 3, 150, 95, 1],
            [1, "cs", 0, 150, 97, 1],
            [1, "cs", 2, 151, 98, 1],
            [1, "cs", 0, 153, 97, 1],
            [1, "cs", 3, 153, 96, 1],
            [1, "cs", 2, 149, 95, 1],
            [1, "s", 0, 213, 127, 1],
            [1, "plm", 1, 214, 131, 0],
            [1, "plm", 1, 207, 128, 0],
            [1, "plm", 0, 208, 127, 0],
            [1, "s", 1, 207, 132, 1],
            [1, "s", 2, 208, 133, 1],
            [1, "plm", 0, 217, 132, 0],
            [1, "plm", 2, 186, 158, 0],
            [1, "plm", 0, 184, 160, 0],
            [1, "s", 1, 183, 156, 1],
            [1, "s", 2, 186, 159, 1],
            [1, "p", 0, 182, 157, 1],
            [1, "p", 0, 114, 205, 1],
            [1, "plm", 1, 117, 204, 0],
            [1, "plm", 0, 117, 205, 0],
            [1, "plm", 2, 112, 204, 0],
            [1, "s", 2, 114, 207, 1],
            [1, "s", 2, 115, 204, 1],
            [1, "plm", 2, 122, 151, 0],
            [1, "plm", 1, 123, 150, 0],
            [1, "plm", 1, 117, 151, 0],
            [1, "s", 0, 118, 150, 1],
            [1, "s", 1, 122, 152, 1],
            [1, "plm", 2, 156, 130, 0],
            [1, "plm", 1, 154, 127, 0],
            [1, "s", 0, 153, 128, 1],
            [1, "s", 2, 152, 130, 1],
            [1, "p", 0, 123, 65, 1],
            [1, "plm", 2, 125, 62, 0],
            [1, "plm", 1, 124, 62, 0],
            [1, "plm", 0, 120, 65, 0],
            [1, "s", 1, 125, 63, 1],
            [1, "s", 1, 121, 64, 1],
            [1, "s", 2, 122, 62, 1],
            [1, "cs", 0, 140, 106, 1],
            [1, "cs", 2, 144, 106, 1],
            [1, "cs", 2, 145, 105, 1],
            [1, "cs", 2, 144, 107, 1],
            [1, "cs", 2, 141, 106, 1],
            [1, "cs", 2, 141, 105, 1],
            [1, "cs", 2, 140, 105, 1],
            [1, "cs", 2, 140, 104, 1],
            [1, "cs", 1, 138, 103, 1],
            [1, "cs", 0, 139, 104, 1],
            [1, "cs", 2, 139, 103, 1],
            [1, "cs", 2, 139, 105, 1],
            [1, "cs", 2, 142, 106, 1],
            [1, "cs", 2, 142, 107, 1],
            [1, "cs", 2, 139, 101, 1],
            [1, "de", 19, 27, 264, 0],
            [1, "la", 4, 147, 99, 1],
            [1, "la", 1, 146, 100, 1],
            [1, "la", 4, 145, 101, 1],
            [1, "cs", 1, 215, 47, 1],
            [1, "cs", 2, 216, 47, 1],
            [1, "cs", 2, 215, 48, 1],
            [1, "la", 4, 214, 45, 1],
            [1, "la", 4, 215, 45, 1],
            [1, "la", 0, 216, 46, 1],
            [1, "la", 4, 216, 48, 1],
            [1, "la", 4, 216, 49, 1],
            [1, "la", 4, 217, 50, 1],
            [1, "la", 3, 214, 49, 1],
            [1, "la", 4, 211, 45, 1],
            [1, "la", 3, 213, 47, 1],
            [1, "cs", 2, 224, 48, 1],
            [1, "plm", 2, 111, 243, 0],
            [1, "plm", 1, 108, 246, 0],
            [1, "s", 1, 110, 243, 1],
            [1, "s", 0, 108, 245, 1],
            [1, "s", 0, 121, 276, 1],
            [1, "plm", 2, 122, 277, 0],
            [1, "plm", 2, 117, 276, 0],
            [1, "plm", 1, 118, 277, 0],
            [1, "s", 1, 118, 278, 1],
            [1, "cs", 2, 66, 16, 1],
            [1, "cs", 3, 67, 16, 1],
            [1, "cs", 0, 67, 17, 1],
            [1, "cs", 2, 66, 17, 1],
            [1, "cs", 3, 66, 18, 1],
            [1, "cs", 3, 68, 17, 1],
            [1, "cs", 0, 36, 16, 1],
            [1, "cs", 2, 36, 17, 1],
            [1, "cs", 2, 36, 18, 1],
            [1, "cs", 3, 35, 17, 1],
            [1, "cs", 3, 36, 19, 1],
            [1, "cs", 3, 35, 18, 1],
            [1, "cs", 2, 66, 30, 1],
            [1, "cs", 2, 66, 23, 1],
            [1, "cs", 3, 66, 22, 1],
            [1, "cs", 3, 66, 31, 1],
            [1, "cs", 2, 36, 30, 1],
            [1, "cs", 2, 36, 23, 1],
            [1, "cs", 1, 36, 22, 1],
            [1, "cs", 2, 36, 31, 1],
            [1, "cs", 3, 42, 13, 1],
            [1, "cs", 0, 43, 13, 1],
            [1, "cs", 2, 44, 13, 1],
            [1, "cs", 3, 42, 16, 1],
            [1, "cs", 3, 41, 16, 1],
            [1, "cs", 3, 40, 16, 1],
            [1, "cs", 0, 42, 19, 1],
            [1, "cs", 3, 43, 19, 1],
            [1, "cs", 3, 44, 19, 1],
            [1, "cs", 3, 45, 19, 1],
            [1, "cs", 2, 46, 19, 1],
            [1, "cs", 0, 43, 22, 1],
            [1, "cs", 2, 42, 22, 1],
            [1, "cs", 1, 41, 22, 1],
            [1, "cs", 0, 40, 22, 1],
            [1, "cs", 3, 39, 17, 1],
            [1, "cs", 1, 44, 26, 1],
            [1, "cs", 2, 45, 26, 1],
            [1, "cs", 3, 46, 26, 1],
            [1, "cs", 0, 47, 26, 1],
            [1, "cs", 2, 48, 26, 1],
            [1, "cs", 3, 47, 25, 1],
            [1, "cs", 3, 43, 27, 1],
            [1, "cs", 1, 49, 32, 1],
            [1, "cs", 2, 50, 32, 1],
            [1, "cs", 2, 51, 32, 1],
            [1, "cs", 2, 52, 32, 1],
            [1, "d", 0, 51, 29, 1],
            [1, "d", 1, 53, 29, 1],
            [1, "d", 1, 49, 29, 1],
            [1, "cs", 3, 55, 31, 1],
            [1, "cs", 3, 54, 32, 1],
            [1, "cs", 3, 47, 31, 1],
            [1, "cs", 3, 48, 32, 1],
            [1, "cs", 0, 51, 33, 1],
            [1, "cs", 2, 52, 33, 1],
            [1, "cs", 2, 50, 33, 1],
            [1, "cs", 3, 56, 30, 1],
            [1, "cs", 3, 56, 31, 1],
            [1, "cs", 3, 46, 30, 1],
            [1, "cs", 3, 46, 31, 1],
            [1, "cs", 1, 53, 33, 1],
            [1, "cs", 2, 49, 33, 1],
            [1, "cs", 2, 53, 32, 1],
            [1, "cs", 0, 55, 32, 1],
            [1, "cs", 0, 47, 32, 1],
            [1, "d", 1, 54, 35, 1],
            [1, "fo", 2, 35, 15, 0],
            [1, "fo", 2, 36, 12, 0],
            [1, "fo", 2, 67, 15, 0],
            [1, "cs", 3, 60, 13, 1],
            [1, "cs", 2, 59, 13, 1],
            [1, "cs", 1, 58, 13, 1],
            [1, "cs", 3, 62, 16, 1],
            [1, "cs", 0, 61, 16, 1],
            [1, "cs", 3, 60, 16, 1],
            [1, "cs", 3, 63, 17, 1],
            [1, "cs", 2, 60, 19, 1],
            [1, "cs", 1, 59, 19, 1],
            [1, "cs", 3, 58, 19, 1],
            [1, "cs", 2, 57, 19, 1],
            [1, "cs", 2, 56, 19, 1],
            [1, "cs", 0, 55, 18, 1],
            [1, "cs", 2, 55, 17, 1],
            [1, "cs", 2, 63, 23, 1],
            [1, "cs", 0, 62, 22, 1],
            [1, "cs", 2, 61, 22, 1],
            [1, "cs", 1, 60, 22, 1],
            [1, "cs", 0, 59, 22, 1],
            [1, "cs", 2, 54, 26, 1],
            [1, "cs", 2, 55, 26, 1],
            [1, "cs", 2, 56, 26, 1],
            [1, "cs", 1, 57, 26, 1],
            [1, "cs", 2, 58, 26, 1],
            [1, "cs", 2, 59, 27, 1],
            [1, "cs", 2, 68, 16, 1],
            [1, "cs", 2, 68, 15, 1],
            [1, "cs", 3, 69, 15, 1],
            [1, "cs", 3, 70, 15, 1],
            [1, "cs", 3, 70, 14, 1],
            [1, "cs", 1, 69, 14, 1],
            [1, "cs", 1, 69, 16, 1],
            [1, "cs", 2, 71, 13, 1],
            [1, "cs", 2, 71, 14, 1],
            [1, "cs", 3, 72, 13, 1],
            [1, "cs", 3, 70, 8, 1],
            [1, "cs", 3, 71, 8, 1],
            [1, "cs", 2, 72, 8, 1],
            [1, "cs", 0, 73, 8, 1],
            [1, "cs", 3, 74, 9, 1],
            [1, "cs", 3, 74, 8, 1],
            [1, "cs", 0, 75, 8, 1],
            [1, "cs", 3, 76, 8, 1],
            [1, "cs", 3, 75, 9, 1],
            [1, "cs", 3, 75, 10, 1],
            [1, "cs", 0, 76, 10, 1],
            [1, "cs", 0, 76, 16, 1],
            [1, "cs", 3, 76, 15, 1],
            [1, "cs", 3, 75, 16, 1],
            [1, "cs", 2, 77, 11, 1],
            [1, "cs", 2, 77, 14, 1],
            [1, "cs", 3, 77, 12, 1],
            [1, "cs", 3, 77, 13, 1],
            [1, "cs", 3, 77, 15, 1],
            [1, "cs", 0, 74, 18, 1],
            [1, "cs", 1, 75, 17, 1],
            [1, "cs", 2, 74, 17, 1],
            [1, "cs", 3, 73, 19, 1],
            [1, "cs", 3, 67, 23, 1],
            [1, "cs", 0, 68, 23, 1],
            [1, "cs", 0, 72, 20, 1],
            [1, "cs", 2, 73, 20, 1],
            [1, "cs", 2, 74, 19, 1],
            [1, "cs", 2, 74, 36, 1],
            [1, "cs", 2, 77, 27, 1],
            [1, "cs", 2, 76, 26, 1],
            [1, "cs", 2, 75, 26, 1],
            [1, "cs", 0, 74, 26, 1],
            [1, "cs", 2, 75, 25, 1],
            [1, "cs", 0, 76, 25, 1],
            [1, "cs", 1, 77, 23, 1],
            [1, "cs", 2, 77, 16, 1],
            [1, "cs", 2, 76, 17, 1],
            [1, "cs", 2, 76, 24, 1],
            [1, "cs", 2, 77, 24, 1],
            [1, "cs", 2, 77, 25, 1],
            [1, "cs", 2, 77, 26, 1],
            [1, "cs", 1, 75, 27, 1],
            [1, "cs", 3, 76, 27, 1],
            [1, "cs", 2, 67, 24, 1],
            [1, "cs", 2, 66, 24, 1],
            [1, "cs", 2, 73, 26, 1],
            [1, "cs", 2, 74, 27, 1],
            [1, "cs", 2, 74, 25, 1],
            [1, "cs", 2, 66, 19, 1],
            [1, "cs", 2, 66, 20, 1],
            [1, "cs", 2, 66, 21, 1],
            [1, "cs", 2, 67, 18, 1],
            [1, "cs", 2, 67, 22, 1],
            [1, "cs", 0, 77, 36, 1],
            [1, "cs", 0, 77, 32, 1],
            [1, "cs", 1, 75, 35, 1],
            [1, "cs", 2, 75, 36, 1],
            [1, "cs", 2, 76, 36, 1],
            [1, "cs", 2, 77, 35, 1],
            [1, "cs", 2, 77, 34, 1],
            [1, "cs", 2, 76, 35, 1],
            [1, "cs", 2, 77, 33, 1],
            [1, "cs", 2, 77, 31, 1],
            [1, "cs", 0, 77, 29, 1],
            [1, "cs", 0, 71, 32, 1],
            [1, "cs", 0, 76, 34, 1],
            [1, "cs", 2, 77, 30, 1],
            [1, "cs", 2, 77, 28, 1],
            [1, "cs", 2, 76, 28, 1],
            [1, "cs", 2, 75, 28, 1],
            [1, "cs", 2, 76, 29, 1],
            [1, "cs", 2, 76, 33, 1],
            [1, "cs", 2, 70, 32, 1],
            [1, "cs", 2, 69, 31, 1],
            [1, "cs", 0, 68, 31, 1],
            [1, "cs", 2, 67, 31, 1],
            [1, "cs", 2, 67, 30, 1],
            [1, "cs", 2, 69, 32, 1],
            [1, "cs", 1, 67, 32, 1],
            [1, "cs", 2, 68, 32, 1],
            [1, "cs", 2, 66, 32, 1],
            [1, "cs", 2, 66, 33, 1],
            [1, "cs", 2, 67, 33, 1],
            [1, "cs", 2, 70, 33, 1],
            [1, "cs", 2, 69, 33, 1],
            [1, "cs", 2, 68, 33, 1],
            [1, "cs", 0, 68, 34, 1],
            [1, "cs", 1, 66, 35, 1],
            [1, "cs", 2, 67, 34, 1],
            [1, "cs", 2, 66, 34, 1],
            [1, "cs", 2, 65, 35, 1],
            [1, "cs", 2, 64, 36, 1],
            [1, "cs", 2, 65, 36, 1],
            [1, "cs", 2, 67, 35, 1],
            [1, "cs", 2, 66, 36, 1],
            [1, "cs", 2, 69, 34, 1],
            [1, "cs", 2, 68, 35, 1],
            [1, "cs", 2, 76, 9, 1],
            [1, "cs", 2, 77, 9, 1],
            [1, "cs", 2, 77, 8, 1],
            [1, "cs", 2, 77, 10, 1],
            [1, "cs", 2, 78, 8, 1],
            [1, "cs", 2, 78, 9, 1],
            [1, "cs", 2, 78, 10, 1],
            [1, "cs", 2, 78, 11, 1],
            [1, "cs", 2, 78, 12, 1],
            [1, "cs", 2, 78, 13, 1],
            [1, "cs", 0, 79, 9, 1],
            [1, "cs", 1, 79, 11, 1],
            [1, "cs", 3, 79, 8, 1],
            [1, "cs", 3, 79, 10, 1],
            [1, "cs", 3, 79, 12, 1],
            [1, "cs", 3, 80, 8, 1],
            [1, "cs", 1, 80, 10, 1],
            [1, "cs", 2, 80, 9, 1],
            [1, "cs", 2, 80, 11, 1],
            [1, "cs", 2, 81, 8, 1],
            [1, "cs", 2, 81, 9, 1],
            [1, "cs", 2, 81, 10, 1],
            [1, "cs", 2, 78, 14, 1],
            [1, "cs", 2, 79, 13, 1],
            [1, "cs", 2, 78, 15, 1],
            [1, "cs", 2, 80, 12, 1],
            [1, "cs", 0, 79, 14, 1],
            [1, "cs", 0, 82, 9, 1],
            [1, "cs", 2, 82, 8, 1],
            [1, "cs", 2, 82, 10, 1],
            [1, "cs", 2, 81, 11, 1],
            [1, "cs", 3, 80, 13, 1],
            [1, "cs", 1, 78, 30, 1],
            [1, "cs", 1, 78, 34, 1],
            [1, "cs", 1, 78, 27, 1],
            [1, "cs", 0, 78, 25, 1],
            [1, "cs", 0, 79, 29, 1],
            [1, "cs", 0, 79, 32, 1],
            [1, "cs", 0, 79, 35, 1],
            [1, "cs", 2, 78, 35, 1],
            [1, "cs", 2, 78, 36, 1],
            [1, "cs", 2, 79, 34, 1],
            [1, "cs", 2, 78, 33, 1],
            [1, "cs", 2, 79, 33, 1],
            [1, "cs", 2, 78, 32, 1],
            [1, "cs", 2, 78, 31, 1],
            [1, "cs", 2, 79, 31, 1],
            [1, "cs", 2, 79, 30, 1],
            [1, "cs", 2, 78, 29, 1],
            [1, "cs", 2, 78, 28, 1],
            [1, "cs", 2, 79, 28, 1],
            [1, "cs", 2, 79, 27, 1],
            [1, "cs", 2, 78, 26, 1],
            [1, "cs", 2, 79, 26, 1],
            [1, "cs", 2, 78, 24, 1],
            [1, "cs", 2, 80, 34, 1],
            [1, "cs", 2, 80, 33, 1],
            [1, "cs", 2, 80, 31, 1],
            [1, "cs", 2, 80, 30, 1],
            [1, "cs", 2, 80, 32, 1],
            [1, "cs", 2, 80, 29, 1],
            [1, "cs", 2, 80, 28, 1],
            [1, "cs", 2, 80, 27, 1],
            [1, "cs", 0, 81, 30, 1],
            [1, "cs", 1, 81, 32, 1],
            [1, "cs", 1, 81, 28, 1],
            [1, "cs", 2, 81, 29, 1],
            [1, "cs", 2, 81, 31, 1],
            [1, "cs", 2, 81, 33, 1],
            [1, "cs", 2, 82, 30, 1],
            [1, "cs", 2, 82, 31, 1],
            [1, "cs", 2, 82, 32, 1],
            [1, "cs", 0, 37, 36, 1],
            [1, "cs", 2, 38, 36, 1],
            [1, "cs", 2, 37, 35, 1],
            [1, "cs", 2, 36, 36, 1],
            [1, "cs", 2, 34, 35, 1],
            [1, "cs", 2, 35, 35, 1],
            [1, "cs", 2, 36, 35, 1],
            [1, "cs", 0, 33, 34, 1],
            [1, "cs", 1, 35, 34, 1],
            [1, "cs", 2, 36, 34, 1],
            [1, "cs", 2, 34, 34, 1],
            [1, "cs", 2, 36, 33, 1],
            [1, "cs", 2, 35, 33, 1],
            [1, "cs", 2, 34, 33, 1],
            [1, "cs", 2, 33, 33, 1],
            [1, "cs", 2, 31, 32, 1],
            [1, "cs", 1, 36, 32, 1],
            [1, "cs", 1, 32, 32, 1],
            [1, "cs", 2, 35, 32, 1],
            [1, "cs", 2, 33, 32, 1],
            [1, "cs", 2, 32, 33, 1],
            [1, "cs", 2, 33, 31, 1],
            [1, "cs", 2, 34, 31, 1],
            [1, "cs", 2, 35, 31, 1],
            [1, "cs", 0, 34, 32, 1],
            [1, "cs", 2, 35, 30, 1],
            [1, "cs", 1, 39, 23, 1],
            [1, "cs", 3, 39, 22, 1],
            [1, "cs", 3, 36, 24, 1],
            [1, "cs", 3, 35, 24, 1],
            [1, "cs", 2, 34, 23, 1],
            [1, "cs", 2, 35, 23, 1],
            [1, "cs", 2, 36, 20, 1],
            [1, "cs", 2, 36, 21, 1],
            [1, "cs", 2, 35, 22, 1],
            [1, "cs", 2, 35, 16, 1],
            [1, "cs", 2, 34, 16, 1],
            [1, "cs", 2, 33, 16, 1],
            [1, "cs", 0, 34, 17, 1],
            [1, "cs", 0, 32, 15, 1],
            [1, "cs", 2, 31, 14, 1],
            [1, "cs", 3, 30, 13, 1],
            [1, "cs", 1, 33, 15, 1],
            [1, "cs", 1, 31, 13, 1],
            [1, "cs", 2, 32, 14, 1],
            [1, "cs", 0, 31, 8, 1],
            [1, "cs", 2, 32, 8, 1],
            [1, "cs", 2, 25, 13, 1],
            [1, "cs", 0, 25, 12, 1],
            [1, "cs", 2, 25, 11, 1],
            [1, "cs", 3, 25, 10, 1],
            [1, "cs", 0, 25, 9, 1],
            [1, "cs", 2, 25, 8, 1],
            [1, "cs", 2, 26, 8, 1],
            [1, "cs", 2, 27, 8, 1],
            [1, "cs", 2, 28, 8, 1],
            [1, "cs", 2, 29, 8, 1],
            [1, "cs", 2, 30, 8, 1],
            [1, "cs", 2, 26, 9, 1],
            [1, "cs", 2, 27, 9, 1],
            [1, "cs", 2, 26, 10, 1],
            [1, "cs", 1, 27, 10, 1],
            [1, "cs", 3, 28, 9, 1],
            [1, "cs", 3, 25, 14, 1],
            [1, "cs", 0, 25, 15, 1],
            [1, "cs", 2, 26, 15, 1],
            [1, "cs", 3, 27, 16, 1],
            [1, "cs", 0, 28, 17, 1],
            [1, "cs", 1, 29, 18, 1],
            [1, "cs", 2, 26, 16, 1],
            [1, "cs", 2, 25, 16, 1],
            [1, "cs", 2, 27, 17, 1],
            [1, "cs", 2, 26, 17, 1],
            [1, "cs", 1, 27, 18, 1],
            [1, "cs", 2, 28, 18, 1],
            [1, "cs", 2, 30, 19, 1],
            [1, "cs", 2, 29, 19, 1],
            [1, "cs", 2, 24, 14, 1],
            [1, "cs", 2, 24, 15, 1],
            [1, "cs", 0, 23, 14, 1],
            [1, "cs", 2, 24, 10, 1],
            [1, "cs", 2, 24, 11, 1],
            [1, "cs", 2, 24, 12, 1],
            [1, "cs", 2, 24, 13, 1],
            [1, "cs", 1, 23, 10, 1],
            [1, "cs", 0, 22, 8, 1],
            [1, "cs", 0, 22, 12, 1],
            [1, "cs", 1, 23, 8, 1],
            [1, "cs", 2, 24, 8, 1],
            [1, "cs", 2, 24, 9, 1],
            [1, "cs", 2, 23, 9, 1],
            [1, "cs", 2, 22, 9, 1],
            [1, "cs", 2, 22, 10, 1],
            [1, "cs", 2, 22, 11, 1],
            [1, "cs", 2, 23, 11, 1],
            [1, "cs", 2, 23, 12, 1],
            [1, "cs", 2, 23, 13, 1],
            [1, "cs", 2, 22, 13, 1],
            [1, "cs", 2, 21, 9, 1],
            [1, "cs", 2, 21, 8, 1],
            [1, "cs", 2, 29, 25, 1],
            [1, "cs", 2, 25, 24, 1],
            [1, "cs", 2, 26, 25, 1],
            [1, "cs", 2, 27, 25, 1],
            [1, "cs", 0, 28, 25, 1],
            [1, "cs", 1, 25, 23, 1],
            [1, "cs", 2, 26, 24, 1],
            [1, "cs", 0, 24, 25, 1],
            [1, "cs", 3, 23, 24, 1],
            [1, "cs", 3, 24, 24, 1],
            [1, "cs", 3, 25, 25, 1],
            [1, "cs", 3, 23, 25, 1],
            [1, "cs", 1, 22, 26, 1],
            [1, "cs", 1, 26, 26, 1],
            [1, "cs", 1, 29, 26, 1],
            [1, "cs", 2, 23, 26, 1],
            [1, "cs", 2, 24, 26, 1],
            [1, "cs", 2, 25, 26, 1],
            [1, "cs", 2, 27, 26, 1],
            [1, "cs", 2, 28, 26, 1],
            [1, "cs", 2, 30, 26, 1],
            [1, "cs", 2, 29, 27, 1],
            [1, "cs", 2, 28, 28, 1],
            [1, "cs", 1, 26, 29, 1],
            [1, "cs", 0, 28, 27, 1],
            [1, "cs", 2, 27, 28, 1],
            [1, "cs", 2, 27, 27, 1],
            [1, "cs", 2, 26, 28, 1],
            [1, "cs", 2, 26, 27, 1],
            [1, "cs", 2, 25, 28, 1],
            [1, "cs", 2, 25, 27, 1],
            [1, "cs", 2, 23, 27, 1],
            [1, "cs", 2, 22, 27, 1],
            [1, "cs", 2, 24, 27, 1],
            [1, "cs", 0, 24, 28, 1],
            [1, "cs", 0, 25, 32, 1],
            [1, "cs", 1, 24, 30, 1],
            [1, "cs", 2, 25, 31, 1],
            [1, "cs", 2, 25, 30, 1],
            [1, "cs", 2, 25, 29, 1],
            [1, "cs", 2, 24, 29, 1],
            [1, "cs", 2, 23, 29, 1],
            [1, "cs", 2, 26, 33, 1],
            [1, "cs", 0, 26, 34, 1],
            [1, "cs", 2, 27, 35, 1],
            [1, "cs", 2, 22, 28, 1],
            [1, "cs", 2, 23, 28, 1],
            [1, "cs", 2, 24, 31, 1],
            [1, "cs", 2, 24, 32, 1],
            [1, "cs", 2, 25, 33, 1],
            [1, "cs", 2, 26, 35, 1],
            [1, "cs", 2, 24, 33, 1],
            [1, "cs", 2, 25, 34, 1],
            [1, "cs", 1, 22, 29, 1],
            [1, "cs", 1, 24, 34, 1],
            [1, "cs", 0, 23, 35, 1],
            [1, "cs", 2, 25, 35, 1],
            [1, "cs", 2, 24, 35, 1],
            [1, "cs", 2, 23, 34, 1],
            [1, "cs", 2, 23, 33, 1],
            [1, "cs", 0, 22, 33, 1],
            [1, "cs", 1, 23, 32, 1],
            [1, "cs", 2, 22, 32, 1],
            [1, "cs", 2, 23, 31, 1],
            [1, "cs", 2, 23, 30, 1],
            [1, "cs", 2, 22, 30, 1],
            [1, "cs", 2, 22, 31, 1],
            [1, "cs", 1, 21, 31, 1],
            [1, "cs", 0, 21, 29, 1],
            [1, "cs", 2, 21, 30, 1],
            [1, "cs", 2, 24, 36, 1],
            [1, "cs", 2, 26, 36, 1],
            [1, "cs", 2, 25, 36, 1],
            [1, "cs", 2, 27, 36, 1],
            [1, "cs", 2, 28, 36, 1],
            [1, "d", 2, 83, 65, 1],
            [1, "d", 2, 16, 67, 1],
            [1, "g", 0, 15, 17, 1],
            [1, "s", 0, 18, 13, 1],
            [1, "s", 0, 85, 11, 1],
            [1, "f", 0, 41, 102, 1],
            [1, "f", 0, 42, 124, 1],
            [1, "f", 0, 64, 116, 1],
            [1, "f", 0, 74, 104, 1],
            [1, "f", 0, 70, 87, 1],
            [1, "f", 0, 27, 96, 1],
            [1, "f", 0, 22, 79, 1],
            [1, "f", 0, 20, 117, 1],
            [1, "f", 0, 30, 137, 1],
            [1, "f", 0, 59, 146, 1],
            [1, "f", 0, 52, 147, 1],
            [1, "f", 0, 20, 149, 1],
            [1, "f", 0, 36, 146, 1],
            [1, "f", 0, 62, 124, 1],
            [1, "g", 1, 34, 121, 1],
            [1, "g", 1, 52, 116, 1],
            [1, "g", 1, 78, 116, 1],
            [1, "g", 1, 71, 129, 1],
            [1, "s", 0, 53, 100, 1],
            [1, "s", 0, 73, 111, 1],
            [1, "s", 0, 77, 126, 1],
            [1, "s", 0, 48, 90, 1],
            [1, "s", 0, 19, 102, 1],
            [1, "s", 0, 18, 127, 1],
            [1, "s", 0, 35, 159, 1],
            [1, "s", 0, 65, 54, 1],
            [1, "s", 0, 44, 52, 1],
            [1, "s", 0, 26, 51, 1],
            [1, "f", 1, 56, 136, 1],
            [1, "f", 1, 41, 133, 1],
            [1, "f", 1, 80, 120, 1],
            [1, "f", 1, 16, 117, 1],
            [1, "f", 1, 13, 99, 1],
            [1, "f", 1, 17, 89, 1],
            [1, "f", 1, 90, 98, 1],
            [1, "f", 1, 84, 95, 1],
            [1, "f", 1, 16, 57, 1],
            [1, "f", 1, 77, 53, 1],
            [1, "d", 1, 48, 35, 1],
            [1, "de", 8, 33, 13, 0],
            [1, "de", 8, 30, 9, 0],
            [1, "de", 9, 32, 30, 0],
            [1, "de", 10, 30, 25, 0],
            [1, "de", 10, 33, 21, 0],
            [1, "de", 8, 31, 34, 0],
            [1, "de", 8, 67, 29, 0],
            [1, "de", 9, 70, 22, 0],
            [1, "de", 10, 70, 16, 0],
            [1, "de", 10, 75, 11, 0],
            [1, "de", 8, 68, 10, 0],
            [1, "de", 8, 75, 30, 0],
            [1, "de", 11, 71, 33, 0],
            [1, "de", 11, 72, 25, 0],
            [1, "de", 11, 64, 25, 0],
            [1, "de", 11, 52, 10, 0],
            [1, "de", 11, 31, 15, 0],
            [1, "de", 30, 29, 14, 0],
            [1, "de", 30, 36, 15, 0],
            [1, "de", 30, 34, 29, 0],
            [1, "de", 30, 30, 29, 0],
            [1, "de", 30, 71, 29, 0],
            [1, "de", 28, 68, 25, 0],
            [1, "de", 28, 75, 15, 0],
            [1, "de", 27, 67, 19, 0],
            [1, "de", 29, 72, 10, 0],
            [1, "de", 29, 75, 32, 0],
            [1, "de", 29, 32, 20, 0],
            [1, "fo", 1, 39, 12, 0],
            [1, "fo", 1, 34, 14, 0],
            [1, "fo", 1, 74, 28, 0],
            [1, "fo", 2, 74, 29, 0],
            [1, "fo", 2, 69, 30, 0],
            [1, "fo", 2, 77, 22, 0],
            [1, "fo", 2, 74, 21, 0],
            [1, "fo", 2, 76, 18, 0],
            [1, "fo", 1, 78, 17, 0],
            [1, "fo", 1, 28, 19, 0],
            [1, "fo", 2, 27, 24, 0],
            [1, "fo", 2, 24, 17, 0],
            [1, "fo", 2, 29, 21, 0],
            [1, "fo", 1, 27, 32, 0],
            [1, "fo", 2, 30, 33, 0],
            [1, "fo", 1, 29, 28, 0],
            [1, "fo", 2, 28, 31, 0],
            [1, "fo", 2, 20, 24, 0],
            [1, "fo", 2, 20, 26, 0],
            [1, "fo", 2, 23, 16, 0],
            [1, "fo", 2, 11, 25, 0],
            [1, "de", 33, 29, 22, 0],
            [1, "de", 34, 32, 25, 0],
            [1, "de", 34, 30, 18, 0],
            [1, "de", 33, 78, 18, 0],
            [1, "de", 33, 73, 35, 0],
            [1, "de", 36, 72, 23, 0],
            [1, "de", 35, 25, 18, 0],
            [1, "d", 1, 83, 41, 1],
            [1, "d", 1, 17, 40, 1],
            [1, "cs", 2, 224, 104, 1],
            [1, "cs", 0, 224, 105, 1],
            [1, "cs", 3, 224, 106, 1],
            [1, "la", 3, 216, 128, 1],
            [1, "la", 0, 215, 126, 1],
            [1, "s", 0, 216, 130, 1],
            [1, "s", 1, 217, 129, 1],
            [1, "s", 0, 218, 128, 1],
            [1, "s", 1, 217, 127, 1],
            [1, "s", 0, 217, 126, 1],
            [1, "s", 1, 217, 125, 1],
            [1, "s", 0, 216, 124, 1],
            [1, "s", 1, 215, 124, 1],
            [1, "s", 0, 214, 124, 1],
            [1, "s", 1, 213, 125, 1],
            [1, "s", 0, 213, 126, 1],
            [1, "plm", 2, 217, 130, 0],
            [1, "plm", 2, 212, 125, 0],
            [1, "p", 0, 214, 134, 1],
            [1, "s", 1, 211, 126, 1],
            [1, "b", 1, 45, 277, 0],
            [1, "b", 1, 50, 286, 0],
            [1, "b", 2, 51, 284, 0],
            [1, "b", 1, 47, 287, 0],
            [1, "b", 0, 39, 285, 0],
            [1, "b", 3, 40, 283, 0],
            [1, "b", 0, 52, 283, 0],
            [1, "b", 1, 51, 280, 0],
            [1, "g", 0, 45, 269, 1],
            [1, "p", 0, 55, 281, 1],
            [1, "b", 1, 5, 172, 0],
            [1, "b", 2, 6, 172, 0],
            [1, "t", 5, 6, 171, 0],
            [1, "t", 1, 5, 170, 0],
            [1, "t", 1, 5, 164, 0],
            [1, "t", 3, 6, 164, 0],
            [1, "b", 0, 6, 165, 0],
            [1, "t", 3, 5, 165, 0],
            [1, "b", 2, 6, 166, 0],
            [1, "t", 4, 5, 166, 0],
            [1, "t", 4, 6, 167, 0],
            [1, "t", 2, 6, 168, 0],
            [1, "t", 0, 6, 169, 0],
            [1, "t", 4, 6, 170, 0],
            [1, "t", 0, 5, 167, 0],
            [1, "t", 2, 5, 169, 0],
            [1, "b", 0, 5, 168, 0],
            [1, "s", 1, 7, 153, 1],
            [1, "s", 2, 7, 151, 1],
            [1, "de", 5, 7, 152, 0],
            [1, "t", 1, 5, 154, 0],
            [1, "b", 0, 6, 154, 0],
            [1, "t", 2, 6, 155, 0],
            [1, "b", 2, 6, 156, 0],
            [1, "t", 2, 5, 157, 0],
            [1, "t", 4, 5, 155, 0],
            [1, "b", 0, 6, 157, 0],
            [1, "t", 1, 5, 156, 0],
            [1, "t", 5, 6, 158, 0],
            [1, "b", 2, 6, 159, 0],
            [1, "b", 0, 6, 162, 0],
            [1, "t", 4, 6, 163, 0],
            [1, "t", 4, 6, 161, 0],
            [1, "b", 1, 6, 160, 0],
            [1, "b", 2, 5, 163, 0],
            [1, "b", 2, 5, 158, 0],
            [1, "b", 2, 5, 161, 0],
            [1, "t", 1, 5, 162, 0],
            [1, "t", 1, 5, 160, 0],
            [1, "b", 1, 85, 176, 0],
            [1, "b", 2, 83, 178, 0],
            [1, "s", 1, 82, 177, 1],
            [1, "b", 0, 76, 172, 0],
            [1, "b", 3, 76, 174, 0],
            [1, "t", 3, 73, 174, 0],
            [1, "t", 5, 72, 175, 0],
            [1, "t", 5, 87, 173, 0],
            [1, "de", 2, 76, 175, 0],
            [1, "de", 3, 77, 171, 0],
            [1, "de", 3, 86, 177, 0],
            [1, "de", 2, 71, 175, 0],
            [1, "s", 1, 70, 174, 1],
            [1, "r", 48, 174, 0],
            [1, "r", 49, 175, 0],
            [1, "r", 50, 175, 0],
            [1, "r", 51, 175, 0],
            [1, "r", 51, 174, 0],
            [1, "r", 50, 174, 0],
            [1, "r", 49, 174, 0],
            [1, "r", 52, 175, 0],
            [1, "r", 52, 176, 0],
            [1, "r", 51, 176, 0],
            [1, "r", 50, 176, 0],
            [1, "r", 49, 176, 0],
            [1, "r", 48, 175, 0],
            [1, "r", 47, 175, 0],
            [1, "r", 48, 176, 0],
            [1, "r", 69, 163, 0],
            [1, "r", 70, 163, 0],
            [1, "r", 71, 163, 0],
            [1, "r", 73, 163, 0],
            [1, "r", 72, 163, 0],
            [1, "r", 73, 164, 0],
            [1, "r", 72, 164, 0],
            [1, "r", 71, 164, 0],
            [1, "r", 70, 164, 0],
            [1, "r", 69, 164, 0],
            [1, "r", 68, 164, 0],
            [1, "r", 68, 165, 0],
            [1, "r", 69, 165, 0],
            [1, "r", 70, 165, 0],
            [1, "r", 71, 165, 0],
            [1, "r", 72, 165, 0],
            [1, "r", 74, 164, 0],
            [1, "r", 73, 165, 0],
            [1, "r", 72, 166, 0],
            [1, "r", 71, 166, 0],
            [1, "r", 70, 166, 0],
            [1, "r", 74, 165, 0],
            [1, "r", 24, 164, 0],
            [1, "r", 25, 164, 0],
            [1, "r", 27, 164, 0],
            [1, "r", 26, 164, 0],
            [1, "r", 28, 165, 0],
            [1, "r", 26, 165, 0],
            [1, "r", 27, 165, 0],
            [1, "r", 25, 165, 0],
            [1, "r", 24, 165, 0],
            [1, "r", 23, 165, 0],
            [1, "r", 22, 165, 0],
            [1, "r", 21, 165, 0],
            [1, "r", 21, 166, 0],
            [1, "r", 22, 166, 0],
            [1, "r", 23, 166, 0],
            [1, "r", 24, 166, 0],
            [1, "r", 25, 166, 0],
            [1, "r", 26, 166, 0],
            [1, "r", 27, 166, 0],
            [1, "r", 28, 166, 0],
            [1, "r", 28, 167, 0],
            [1, "r", 26, 167, 0],
            [1, "r", 25, 167, 0],
            [1, "r", 24, 167, 0],
            [1, "r", 23, 167, 0],
            [1, "r", 22, 167, 0],
            [1, "r", 27, 167, 0],
            [1, "r", 29, 166, 0],
            [1, "r", 29, 167, 0],
            [1, "r", 28, 168, 0],
            [1, "r", 27, 168, 0],
            [1, "r", 26, 168, 0],
            [1, "r", 25, 168, 0],
            [1, "r", 24, 168, 0],
            [1, "r", 23, 168, 0],
            [1, "r", 27, 169, 0],
            [1, "r", 26, 169, 0],
            [1, "r", 25, 169, 0],
            [1, "r", 24, 169, 0],
            [1, "r", 23, 169, 0],
            [1, "r", 22, 168, 0],
            [1, "r", 21, 167, 0],
            [1, "s", 1, 52, 174, 1],
            [1, "t", 3, 50, 177, 0],
            [1, "t", 4, 49, 177, 0],
            [1, "b", 0, 47, 174, 0],
            [1, "b", 0, 69, 166, 0],
            [1, "t", 2, 68, 166, 0],
            [1, "t", 5, 74, 163, 0],
            [1, "t", 1, 73, 162, 0],
            [1, "s", 0, 73, 166, 1],
            [1, "s", 2, 76, 165, 1],
            [1, "g", 2, 59, 175, 1],
            [1, "p", 0, 78, 168, 1],
            [1, "p", 0, 61, 162, 1],
            [1, "p", 0, 42, 170, 1],
            [1, "p", 0, 20, 174, 1],
            [1, "p", 0, 16, 160, 1],
            [1, "b", 1, 23, 164, 0],
            [1, "b", 1, 28, 169, 0],
            [1, "b", 2, 29, 168, 0],
            [1, "b", 2, 16, 170, 0],
            [1, "t", 1, 15, 171, 0],
            [1, "t", 5, 13, 175, 0],
            [1, "t", 5, 19, 166, 0],
            [1, "t", 5, 26, 163, 0],
            [1, "s", 1, 29, 165, 1],
            [1, "t", 5, 11, 167, 0],
            [1, "t", 0, 29, 176, 0],
            [1, "b", 2, 30, 175, 0],
            [1, "t", 2, 24, 177, 0],
            [1, "b", 1, 37, 174, 0],
            [1, "b", 0, 35, 172, 0],
            [1, "b", 3, 37, 170, 0],
            [1, "t", 4, 38, 169, 0],
            [1, "t", 4, 34, 173, 0],
            [1, "t", 5, 38, 175, 0],
            [1, "b", 2, 39, 173, 0],
            [1, "t", 3, 37, 176, 0],
            [1, "t", 4, 30, 168, 0],
            [1, "s", 2, 35, 176, 1],
            [1, "s", 1, 41, 175, 1],
            [1, "b", 2, 53, 176, 0],
            [1, "t", 5, 55, 173, 0],
            [1, "t", 5, 45, 170, 0],
            [1, "b", 1, 53, 162, 0],
            [1, "b", 0, 50, 164, 0],
            [1, "t", 2, 54, 163, 0],
            [1, "t", 3, 49, 165, 0],
            [1, "t", 4, 48, 160, 0],
            [1, "t", 4, 57, 164, 0],
            [1, "t", 4, 66, 162, 0],
            [1, "b", 1, 86, 161, 0],
            [1, "b", 2, 81, 163, 0],
            [1, "t", 3, 85, 162, 0],
            [1, "t", 5, 81, 162, 0],
            [1, "t", 5, 88, 163, 0],
            [1, "t", 1, 84, 166, 0],
            [1, "t", 5, 72, 160, 0],
            [1, "t", 5, 70, 170, 0],
            [1, "s", 1, 57, 162, 1],
            [1, "b", 1, 39, 161, 0],
            [1, "b", 0, 34, 164, 0],
            [1, "b", 2, 54, 164, 0],
            [1, "t", 1, 59, 169, 0],
            [1, "t", 3, 60, 170, 0],
            [1, "t", 4, 63, 169, 0],
            [1, "t", 4, 63, 174, 0],
            [1, "t", 1, 62, 175, 0],
            [1, "t", 5, 40, 162, 0],
            [1, "t", 1, 63, 180, 0],
            [1, "t", 2, 64, 179, 0],
            [1, "t", 2, 35, 165, 0],
            [1, "s", 1, 63, 173, 1],
            [1, "s", 2, 40, 165, 1],
            [1, "b", 0, 46, 169, 0],
            [1, "de", 22, 74, 168, 0],
            [1, "de", 22, 86, 168, 0],
            [1, "de", 22, 83, 175, 0],
            [1, "de", 22, 78, 175, 0],
            [1, "de", 19, 72, 176, 0],
            [1, "de", 19, 68, 168, 0],
            [1, "de", 19, 65, 163, 0],
            [1, "de", 19, 75, 162, 0],
            [1, "de", 19, 80, 162, 0],
            [1, "de", 19, 88, 159, 0],
            [1, "de", 19, 87, 164, 0],
            [1, "de", 19, 61, 177, 0],
            [1, "de", 19, 59, 172, 0],
            [1, "de", 19, 59, 167, 0],
            [1, "de", 19, 53, 165, 0],
            [1, "de", 19, 56, 163, 0],
            [1, "de", 19, 51, 161, 0],
            [1, "de", 19, 48, 167, 0],
            [1, "de", 19, 47, 170, 0],
            [1, "de", 19, 41, 163, 0],
            [1, "de", 19, 37, 161, 0],
            [1, "de", 19, 36, 166, 0],
            [1, "de", 19, 36, 171, 0],
            [1, "de", 19, 34, 174, 0],
            [1, "de", 19, 40, 172, 0],
            [1, "de", 19, 38, 177, 0],
            [1, "de", 19, 42, 176, 0],
            [1, "de", 19, 53, 178, 0],
            [1, "de", 19, 53, 172, 0],
            [1, "de", 19, 64, 181, 0],
            [1, "de", 19, 64, 175, 0],
            [1, "de", 19, 79, 172, 0],
            [1, "de", 19, 30, 170, 0],
            [1, "de", 19, 17, 168, 0],
            [1, "de", 19, 14, 173, 0],
            [1, "de", 19, 12, 162, 0],
            [1, "de", 19, 9, 167, 0],
            [1, "de", 19, 20, 161, 0],
            [1, "de", 19, 27, 162, 0],
            [1, "de", 19, 83, 195, 0],
            [1, "de", 2, 85, 163, 0],
            [1, "de", 2, 80, 164, 0],
            [1, "de", 2, 84, 169, 0],
            [1, "de", 2, 55, 165, 0],
            [1, "de", 3, 46, 163, 0],
            [1, "de", 2, 66, 169, 0],
            [1, "de", 0, 63, 175, 0],
            [1, "de", 0, 34, 164, 0],
            [1, "de", 0, 18, 160, 0],
            [1, "de", 2, 40, 160, 0],
            [1, "de", 2, 53, 160, 0],
            [1, "de", 2, 14, 170, 0],
            [1, "de", 2, 19, 175, 0],
            [1, "de", 2, 23, 176, 0],
            [1, "de", 5, 60, 147, 0],
            [1, "de", 33, 59, 160, 0],
            [1, "de", 33, 85, 157, 0],
            [1, "de", 33, 29, 143, 0],
            [1, "de", 33, 62, 140, 0],
            [1, "de", 33, 43, 127, 0],
            [1, "de", 33, 18, 129, 0],
            [1, "de", 33, 50, 134, 0],
            [1, "de", 33, 79, 127, 0],
            [1, "de", 33, 89, 139, 0],
            [1, "b", 1, 44, 156, 0],
            [1, "t", 2, 45, 157, 0],
            [1, "b", 0, 75, 156, 0],
            [1, "t", 3, 76, 157, 0],
            [1, "t", 5, 62, 157, 0],
            [1, "t", 5, 79, 156, 0],
            [1, "t", 5, 41, 156, 0],
            [1, "b", 1, 28, 156, 0],
            [1, "t", 2, 27, 157, 0],
            [1, "t", 4, 21, 156, 0],
            [1, "t", 4, 56, 159, 0],
            [1, "f", 1, 94, 153, 1],
            [1, "f", 2, 93, 153, 1],
            [1, "f", 2, 99, 153, 1],
            [1, "f", 1, 98, 153, 1],
            [1, "f", 0, 97, 153, 1],
            [1, "f", 1, 96, 153, 1],
            [1, "s", 1, 7, 149, 1],
            [1, "de", 4, 7, 150, 0],
            [1, "b", 3, 43, 281, 0],
            [1, "de", 50, 24, 39, 0],
            [1, "de", 50, 21, 39, 0],
            [1, "de", 50, 22, 43, 0],
            [1, "de", 50, 15, 34, 0],
            [1, "de", 50, 18, 26, 0],
            [1, "de", 50, 44, 42, 0],
            [1, "de", 50, 57, 39, 0],
            [1, "de", 50, 62, 43, 0],
            [1, "de", 50, 77, 44, 0],
            [1, "de", 50, 71, 41, 0],
            [1, "de", 50, 55, 39, 0],
            [1, "de", 50, 22, 39, 0],
            [1, "de", 50, 20, 41, 0],
            [1, "de", 50, 18, 21, 0],
            [1, "de", 50, 15, 21, 0],
            [1, "de", 50, 18, 19, 0],
            [1, "de", 50, 17, 17, 0],
            [1, "de", 50, 18, 10, 0],
            [1, "de", 50, 18, 9, 0],
            [1, "de", 50, 52, 41, 0],
            [1, "de", 50, 82, 39, 0],
            [1, "de", 50, 86, 38, 0],
            [1, "de", 50, 84, 31, 0],
            [1, "de", 50, 86, 30, 0],
            [1, "de", 50, 84, 26, 0],
            [1, "de", 50, 86, 23, 0],
            [1, "de", 50, 86, 14, 0],
            [1, "de", 50, 29, 42, 0],
            [1, "de", 9, 74, 37, 0],
            [1, "de", 9, 76, 22, 0],
            [1, "de", 10, 79, 24, 0],
            [1, "de", 11, 77, 17, 0],
            [1, "de", 36, 81, 25, 0],
            [1, "de", 36, 80, 36, 0],
            [1, "de", 36, 21, 36, 0],
            [1, "de", 28, 23, 22, 0],
            [1, "de", 28, 27, 31, 0],
            [1, "de", 28, 69, 36, 0],
            [1, "de", 28, 80, 20, 0],
            [1, "de", 51, 24, 155, 0],
            [1, "de", 51, 7, 154, 0],
            [1, "de", 51, 11, 154, 0],
            [1, "de", 51, 12, 156, 0],
            [1, "de", 51, 16, 154, 0],
            [1, "de", 51, 20, 154, 0],
            [1, "de", 51, 23, 154, 0],
            [1, "de", 51, 18, 157, 0],
            [1, "de", 51, 31, 154, 0],
            [1, "de", 51, 32, 157, 0],
            [1, "de", 51, 86, 154, 0],
            [1, "de", 51, 88, 156, 0],
            [1, "de", 51, 82, 154, 0],
            [1, "de", 51, 80, 154, 0],
            [1, "de", 51, 77, 154, 0],
            [1, "de", 51, 74, 154, 0],
            [1, "de", 51, 71, 154, 0],
            [1, "de", 51, 67, 154, 0],
            [1, "de", 51, 60, 154, 0],
            [1, "de", 51, 57, 154, 0],
            [1, "de", 51, 65, 154, 0],
            [1, "de", 51, 68, 156, 0],
            [1, "de", 51, 59, 156, 0],
            [1, "de", 51, 55, 154, 0],
            [1, "de", 51, 54, 154, 0],
            [1, "de", 51, 52, 154, 0],
            [1, "de", 51, 55, 155, 0],
            [1, "de", 51, 54, 157, 0],
            [1, "de", 51, 49, 154, 0],
            [1, "de", 51, 46, 154, 0],
            [1, "de", 51, 44, 154, 0],
            [1, "de", 51, 43, 154, 0],
            [1, "de", 51, 41, 154, 0],
            [1, "de", 51, 38, 154, 0],
            [1, "de", 51, 39, 156, 0],
            [1, "de", 51, 34, 154, 0],
            [1, "de", 5, 19, 142, 0],
            [1, "de", 5, 37, 147, 0],
            [1, "de", 7, 53, 147, 0],
            [1, "de", 6, 69, 150, 0],
            [1, "de", 4, 94, 148, 0],
            [1, "de", 4, 66, 147, 0],
            [1, "de", 4, 10, 145, 0],
            [1, "de", 4, 28, 137, 0],
            [1, "de", 4, 15, 137, 0],
            [1, "de", 4, 48, 134, 0],
            [1, "de", 5, 67, 135, 0],
            [1, "de", 34, 84, 155, 0],
            [1, "de", 35, 70, 156, 0],
            [1, "de", 35, 51, 156, 0],
            [1, "de", 35, 56, 157, 0],
            [1, "de", 35, 65, 159, 0],
            [1, "de", 35, 23, 156, 0],
            [1, "de", 35, 15, 155, 0],
            [1, "de", 35, 8, 155, 0],
            [1, "de", 33, 13, 155, 0],
            [1, "de", 33, 33, 158, 0],
            [1, "de", 36, 78, 155, 0],
            [1, "de", 36, 87, 157, 0],
            [1, "fo", 1, 73, 36, 0],
            [1, "fo", 1, 80, 24, 0],
            [1, "fo", 2, 67, 36, 0],
            [1, "fo", 2, 45, 36, 0],
            [1, "fo", 2, 53, 34, 0],
            [1, "fo", 1, 51, 35, 0],
            [1, "fo", 1, 58, 35, 0],
            [1, "fo", 1, 33, 35, 0],
            [1, "fo", 1, 31, 33, 0],
            [1, "fo", 2, 29, 36, 0],
            [1, "fo", 2, 56, 36, 0],
            [1, "fo", 2, 60, 37, 0],
            [1, "fo", 2, 45, 32, 0],
            [1, "fo", 2, 22, 25, 0],
            [1, "fo", 2, 21, 35, 0],
            [1, "de", 52, 90, 208, 0],
            [1, "de", 18, 94, 250, 0],
            [1, "de", 17, 95, 253, 0],
            [1, "cs", 0, 140, 5, 1],
            [1, "cs", 2, 139, 5, 1],
            [1, "cs", 2, 138, 5, 1],
            [1, "cs", 2, 138, 6, 1],
            [1, "cs", 2, 139, 6, 1],
            [1, "cs", 2, 141, 6, 1],
            [1, "cs", 2, 140, 6, 1],
            [1, "la", 3, 143, 7, 1],
            [1, "la", 3, 139, 7, 1],
            [1, "cs", 0, 137, 7, 1],
            [1, "cs", 1, 138, 8, 1],
            [1, "cs", 2, 137, 6, 1],
            [1, "cs", 2, 137, 8, 1],
            [1, "cs", 2, 136, 7, 1],
            [1, "cs", 2, 138, 9, 1],
            [1, "cs", 3, 139, 9, 1],
            [1, "cs", 3, 136, 8, 1],
            [1, "cs", 3, 137, 9, 1],
            [1, "de", 53, 92, 165, 0],
            [1, "de", 53, 92, 180, 0],
            [1, "de", 53, 92, 188, 0],
            [1, "de", 54, 92, 153, 0],
            [1, "de", 54, 91, 153, 0],
            [1, "de", 54, 90, 153, 0],
            [1, "de", 54, 89, 153, 0],
            [1, "de", 54, 88, 153, 0],
            [1, "de", 54, 87, 153, 0],
            [1, "de", 54, 86, 153, 0],
            [1, "de", 54, 85, 153, 0],
            [1, "de", 54, 84, 153, 0],
            [1, "de", 54, 83, 153, 0],
            [1, "de", 54, 82, 153, 0],
            [1, "de", 54, 81, 153, 0],
            [1, "de", 54, 80, 153, 0],
            [1, "de", 54, 79, 153, 0],
            [1, "de", 54, 78, 153, 0],
            [1, "de", 54, 77, 153, 0],
            [1, "de", 54, 76, 153, 0],
            [1, "de", 54, 75, 153, 0],
            [1, "de", 54, 74, 153, 0],
            [1, "de", 54, 73, 153, 0],
            [1, "de", 54, 72, 153, 0],
            [1, "de", 54, 70, 153, 0],
            [1, "de", 54, 71, 153, 0],
            [1, "de", 54, 69, 153, 0],
            [1, "de", 54, 68, 153, 0],
            [1, "de", 54, 67, 153, 0],
            [1, "de", 54, 66, 153, 0],
            [1, "de", 54, 65, 153, 0],
            [1, "de", 54, 64, 153, 0],
            [1, "de", 54, 63, 153, 0],
            [1, "de", 54, 61, 153, 0],
            [1, "de", 54, 62, 153, 0],
            [1, "de", 54, 60, 153, 0],
            [1, "de", 54, 59, 153, 0],
            [1, "de", 54, 57, 153, 0],
            [1, "de", 54, 58, 153, 0],
            [1, "de", 54, 56, 153, 0],
            [1, "de", 54, 55, 153, 0],
            [1, "de", 54, 54, 153, 0],
            [1, "de", 54, 53, 153, 0],
            [1, "de", 54, 52, 153, 0],
            [1, "de", 54, 51, 153, 0],
            [1, "de", 54, 50, 153, 0],
            [1, "de", 54, 49, 153, 0],
            [1, "de", 54, 48, 153, 0],
            [1, "de", 54, 47, 153, 0],
            [1, "de", 54, 46, 153, 0],
            [1, "de", 54, 45, 153, 0],
            [1, "de", 54, 44, 153, 0],
            [1, "de", 54, 43, 153, 0],
            [1, "de", 54, 42, 153, 0],
            [1, "de", 54, 41, 153, 0],
            [1, "de", 54, 40, 153, 0],
            [1, "de", 54, 39, 153, 0],
            [1, "de", 54, 37, 153, 0],
            [1, "de", 54, 38, 153, 0],
            [1, "de", 54, 36, 153, 0],
            [1, "de", 54, 35, 153, 0],
            [1, "de", 54, 34, 153, 0],
            [1, "de", 54, 33, 153, 0],
            [1, "de", 54, 32, 153, 0],
            [1, "de", 54, 31, 153, 0],
            [1, "de", 54, 30, 153, 0],
            [1, "de", 54, 29, 153, 0],
            [1, "de", 54, 28, 153, 0],
            [1, "de", 54, 27, 153, 0],
            [1, "de", 54, 26, 153, 0],
            [1, "de", 54, 25, 153, 0],
            [1, "de", 54, 24, 153, 0],
            [1, "de", 54, 23, 153, 0],
            [1, "de", 54, 22, 153, 0],
            [1, "de", 54, 21, 153, 0],
            [1, "de", 54, 20, 153, 0],
            [1, "de", 54, 19, 153, 0],
            [1, "de", 54, 18, 153, 0],
            [1, "de", 54, 17, 153, 0],
            [1, "de", 54, 16, 153, 0],
            [1, "de", 54, 15, 153, 0],
            [1, "de", 54, 14, 153, 0],
            [1, "de", 54, 13, 153, 0],
            [1, "de", 54, 12, 153, 0],
            [1, "de", 54, 11, 153, 0],
            [1, "de", 54, 10, 153, 0],
            [1, "de", 54, 8, 153, 0],
            [1, "de", 54, 9, 153, 0],
            [1, "de", 55, 83, 8, 0],
            [1, "de", 55, 83, 9, 0],
            [1, "de", 55, 83, 10, 0],
            [1, "de", 55, 83, 11, 0],
            [1, "de", 55, 83, 12, 0],
            [1, "de", 55, 83, 13, 0],
            [1, "de", 55, 83, 14, 0],
            [1, "de", 55, 83, 15, 0],
            [1, "de", 55, 83, 16, 0],
            [1, "de", 55, 83, 17, 0],
            [1, "de", 55, 83, 19, 0],
            [1, "de", 55, 83, 18, 0],
            [1, "de", 55, 83, 20, 0],
            [1, "de", 55, 83, 21, 0],
            [1, "de", 55, 83, 22, 0],
            [1, "de", 55, 83, 23, 0],
            [1, "de", 55, 83, 24, 0],
            [1, "de", 55, 83, 25, 0],
            [1, "de", 55, 83, 26, 0],
            [1, "de", 55, 83, 27, 0],
            [1, "de", 55, 83, 28, 0],
            [1, "de", 55, 83, 29, 0],
            [1, "de", 55, 83, 30, 0],
            [1, "de", 55, 83, 31, 0],
            [1, "de", 55, 83, 32, 0],
            [1, "de", 55, 83, 33, 0],
            [1, "de", 55, 83, 34, 0],
            [1, "de", 55, 83, 36, 0],
            [1, "de", 55, 83, 35, 0],
            [1, "de", 55, 83, 37, 0],
            [1, "de", 55, 83, 38, 0],
            [1, "de", 55, 81, 38, 0],
            [1, "de", 55, 82, 38, 0],
            [1, "de", 55, 80, 38, 0],
            [1, "de", 55, 79, 38, 0],
            [1, "de", 55, 78, 38, 0],
            [1, "de", 55, 77, 38, 0],
            [1, "de", 55, 76, 38, 0],
            [1, "de", 55, 75, 38, 0],
            [1, "de", 55, 73, 38, 0],
            [1, "de", 55, 74, 38, 0],
            [1, "de", 55, 72, 38, 0],
            [1, "de", 55, 71, 38, 0],
            [1, "de", 55, 70, 38, 0],
            [1, "de", 55, 68, 38, 0],
            [1, "de", 55, 69, 38, 0],
            [1, "de", 55, 67, 38, 0],
            [1, "de", 55, 66, 38, 0],
            [1, "de", 55, 65, 38, 0],
            [1, "de", 55, 64, 38, 0],
            [1, "de", 55, 63, 38, 0],
            [1, "de", 55, 62, 38, 0],
            [1, "de", 55, 60, 38, 0],
            [1, "de", 55, 61, 38, 0],
            [1, "de", 55, 59, 38, 0],
            [1, "de", 55, 57, 38, 0],
            [1, "de", 55, 58, 38, 0],
            [1, "de", 55, 56, 38, 0],
            [1, "de", 55, 55, 38, 0],
            [1, "de", 55, 54, 38, 0],
            [1, "de", 55, 53, 38, 0],
            [1, "de", 55, 52, 38, 0],
            [1, "de", 55, 51, 38, 0],
            [1, "de", 55, 49, 38, 0],
            [1, "de", 55, 50, 38, 0],
            [1, "de", 55, 48, 38, 0],
            [1, "de", 55, 47, 38, 0],
            [1, "de", 55, 46, 38, 0],
            [1, "de", 55, 45, 38, 0],
            [1, "de", 55, 44, 38, 0],
            [1, "de", 55, 43, 38, 0],
            [1, "de", 55, 42, 38, 0],
            [1, "de", 55, 41, 38, 0],
            [1, "de", 55, 40, 38, 0],
            [1, "de", 55, 39, 38, 0],
            [1, "de", 55, 38, 38, 0],
            [1, "de", 55, 37, 38, 0],
            [1, "de", 55, 36, 38, 0],
            [1, "de", 55, 34, 38, 0],
            [1, "de", 55, 35, 38, 0],
            [1, "de", 55, 33, 38, 0],
            [1, "de", 55, 31, 38, 0],
            [1, "de", 55, 32, 38, 0],
            [1, "de", 55, 30, 38, 0],
            [1, "de", 55, 29, 38, 0],
            [1, "de", 55, 28, 38, 0],
            [1, "de", 55, 27, 38, 0],
            [1, "de", 55, 26, 38, 0],
            [1, "de", 55, 25, 38, 0],
            [1, "de", 55, 24, 38, 0],
            [1, "de", 55, 23, 38, 0],
            [1, "de", 55, 21, 38, 0],
            [1, "de", 55, 22, 38, 0],
            [1, "de", 55, 20, 38, 0],
            [1, "de", 55, 19, 38, 0],
            [1, "de", 55, 19, 37, 0],
            [1, "de", 55, 19, 36, 0],
            [1, "de", 55, 19, 35, 0],
            [1, "de", 55, 19, 34, 0],
            [1, "de", 55, 19, 33, 0],
            [1, "de", 55, 19, 32, 0],
            [1, "de", 55, 19, 31, 0],
            [1, "de", 55, 19, 30, 0],
            [1, "de", 55, 19, 28, 0],
            [1, "de", 55, 19, 29, 0],
            [1, "de", 55, 19, 27, 0],
            [1, "de", 55, 19, 26, 0],
            [1, "de", 55, 19, 25, 0],
            [1, "de", 55, 19, 24, 0],
            [1, "de", 55, 19, 23, 0],
            [1, "de", 55, 19, 22, 0],
            [1, "de", 55, 19, 21, 0],
            [1, "de", 55, 19, 20, 0],
            [1, "de", 55, 19, 18, 0],
            [1, "de", 55, 19, 19, 0],
            [1, "de", 55, 19, 16, 0],
            [1, "de", 55, 19, 17, 0],
            [1, "de", 55, 19, 15, 0],
            [1, "de", 55, 19, 14, 0],
            [1, "de", 55, 19, 13, 0],
            [1, "de", 55, 19, 12, 0],
            [1, "de", 55, 19, 11, 0],
            [1, "de", 55, 19, 10, 0],
            [1, "de", 55, 19, 9, 0],
            [1, "de", 55, 19, 8, 0],
            [1, "de", 55, 84, 35, 0],
            [1, "de", 55, 84, 32, 0],
            [1, "de", 55, 84, 25, 0],
            [1, "de", 50, 84, 24, 0],
            [1, "de", 55, 84, 20, 0],
            [1, "de", 55, 84, 17, 0],
            [1, "de", 55, 84, 16, 0],
            [1, "de", 50, 84, 15, 0],
            [1, "de", 55, 84, 8, 0],
            [1, "de", 55, 84, 9, 0],
            [1, "de", 50, 85, 11, 0],
            [1, "de", 55, 81, 39, 0],
            [1, "de", 50, 83, 40, 0],
            [1, "de", 55, 72, 39, 0],
            [1, "de", 55, 74, 39, 0],
            [1, "de", 55, 66, 39, 0],
            [1, "de", 55, 65, 39, 0],
            [1, "de", 50, 67, 41, 0],
            [1, "de", 55, 56, 39, 0],
            [1, "de", 55, 58, 39, 0],
            [1, "de", 55, 50, 39, 0],
            [1, "de", 50, 49, 39, 0],
            [1, "de", 55, 44, 39, 0],
            [1, "de", 55, 42, 39, 0],
            [1, "de", 50, 43, 39, 0],
            [1, "de", 50, 41, 39, 0],
            [1, "de", 50, 37, 39, 0],
            [1, "de", 55, 36, 39, 0],
            [1, "de", 55, 32, 39, 0],
            [1, "de", 50, 31, 39, 0],
            [1, "de", 55, 23, 39, 0],
            [1, "de", 55, 18, 37, 0],
            [1, "de", 50, 18, 36, 0],
            [1, "de", 55, 18, 35, 0],
            [1, "de", 50, 18, 34, 0],
            [1, "de", 55, 18, 31, 0],
            [1, "de", 50, 18, 30, 0],
            [1, "de", 55, 18, 25, 0],
            [1, "de", 50, 18, 24, 0],
            [1, "de", 55, 18, 20, 0],
            [1, "de", 55, 18, 14, 0],
            [1, "de", 50, 18, 15, 0],
            [1, "de", 55, 18, 8, 0],
            [1, "de", 54, 90, 154, 0],
            [1, "de", 51, 89, 154, 0],
            [1, "de", 54, 85, 154, 0],
            [1, "de", 54, 81, 154, 0],
            [1, "de", 54, 76, 154, 0],
            [1, "de", 54, 70, 154, 0],
            [1, "de", 54, 66, 154, 0],
            [1, "de", 54, 61, 154, 0],
            [1, "de", 54, 56, 154, 0],
            [1, "de", 54, 53, 154, 0],
            [1, "de", 54, 45, 154, 0],
            [1, "de", 54, 42, 154, 0],
            [1, "de", 54, 37, 154, 0],
            [1, "de", 54, 30, 154, 0],
            [1, "de", 54, 25, 154, 0],
            [1, "de", 54, 17, 154, 0],
            [1, "de", 54, 10, 154, 0],
            [1, "de", 54, 8, 154, 0],
            [1, "de", 55, 20, 9, 0],
            [1, "de", 53, 93, 154, 0],
            [1, "de", 53, 93, 156, 0],
            [1, "de", 53, 93, 158, 0],
            [1, "de", 52, 91, 157, 0],
            [1, "de", 53, 93, 159, 0],
            [1, "de", 53, 93, 161, 0],
            [1, "de", 53, 93, 162, 0],
            [1, "de", 53, 93, 163, 0],
            [1, "de", 53, 93, 164, 0],
            [1, "de", 53, 93, 165, 0],
            [1, "de", 53, 93, 166, 0],
            [1, "de", 53, 93, 167, 0],
            [1, "de", 52, 91, 167, 0],
            [1, "de", 53, 93, 169, 0],
            [1, "de", 53, 93, 168, 0],
            [1, "de", 53, 93, 170, 0],
            [1, "de", 53, 93, 171, 0],
            [1, "de", 53, 93, 173, 0],
            [1, "de", 53, 93, 176, 0],
            [1, "de", 53, 93, 175, 0],
            [1, "de", 53, 92, 169, 0],
            [1, "de", 53, 93, 178, 0],
            [1, "de", 53, 93, 179, 0],
            [1, "de", 53, 93, 180, 0],
            [1, "de", 53, 93, 181, 0],
            [1, "de", 53, 93, 183, 0],
            [1, "de", 53, 93, 184, 0],
            [1, "de", 53, 93, 186, 0],
            [1, "de", 18, 95, 185, 0],
            [1, "de", 53, 93, 187, 0],
            [1, "de", 53, 93, 188, 0],
            [1, "de", 52, 91, 186, 0],
            [1, "de", 53, 93, 190, 0],
            [1, "de", 53, 93, 192, 0],
            [1, "de", 53, 93, 195, 0],
            [1, "de", 53, 93, 194, 0],
            [1, "de", 52, 91, 196, 0],
            [1, "de", 53, 93, 197, 0],
            [1, "de", 53, 93, 200, 0],
            [1, "de", 53, 93, 198, 0],
            [1, "de", 53, 93, 201, 0],
            [1, "de", 53, 93, 202, 0],
            [1, "de", 53, 93, 203, 0],
            [1, "de", 53, 93, 204, 0],
            [1, "de", 53, 93, 206, 0],
            [1, "de", 53, 93, 205, 0],
            [1, "de", 53, 93, 207, 0],
            [1, "de", 53, 93, 209, 0],
            [1, "de", 53, 93, 210, 0],
            [1, "de", 53, 93, 212, 0],
            [1, "de", 52, 91, 204, 0],
            [1, "de", 53, 93, 213, 0],
            [1, "de", 53, 93, 214, 0],
            [1, "de", 53, 93, 215, 0],
            [1, "de", 53, 93, 216, 0],
            [1, "de", 53, 93, 217, 0],
            [1, "de", 53, 93, 218, 0],
            [1, "de", 53, 93, 219, 0],
            [1, "de", 53, 93, 220, 0],
            [1, "de", 52, 92, 213, 0],
            [1, "de", 52, 92, 206, 0],
            [1, "de", 52, 92, 202, 0],
            [1, "de", 53, 92, 201, 0],
            [1, "de", 52, 92, 194, 0],
            [1, "de", 52, 92, 178, 0],
            [1, "de", 52, 92, 171, 0],
            [1, "de", 53, 93, 221, 0],
            [1, "de", 53, 93, 222, 0],
            [1, "de", 53, 93, 223, 0],
            [1, "de", 53, 93, 225, 0],
            [1, "de", 53, 93, 228, 0],
            [1, "de", 53, 93, 227, 0],
            [1, "de", 52, 92, 217, 0],
            [1, "de", 53, 92, 218, 0],
            [1, "de", 52, 92, 221, 0],
            [1, "de", 52, 92, 225, 0],
            [1, "de", 52, 93, 226, 0],
            [1, "de", 52, 93, 224, 0],
            [1, "de", 52, 93, 208, 0],
            [1, "de", 52, 93, 211, 0],
            [1, "de", 52, 93, 196, 0],
            [1, "de", 52, 93, 199, 0],
            [1, "de", 52, 93, 189, 0],
            [1, "de", 52, 93, 191, 0],
            [1, "de", 52, 93, 193, 0],
            [1, "de", 52, 93, 182, 0],
            [1, "de", 52, 93, 185, 0],
            [1, "de", 52, 93, 172, 0],
            [1, "de", 52, 93, 174, 0],
            [1, "de", 52, 93, 177, 0],
            [1, "de", 52, 93, 155, 0],
            [1, "de", 52, 93, 157, 0],
            [1, "de", 52, 93, 160, 0],
            [1, "de", 52, 92, 162, 0],
            [1, "de", 53, 93, 229, 0],
            [1, "de", 53, 93, 231, 0],
            [1, "de", 53, 93, 232, 0],
            [1, "de", 53, 93, 234, 0],
            [1, "de", 52, 93, 230, 0],
            [1, "de", 52, 92, 228, 0],
            [1, "de", 53, 93, 235, 0],
            [1, "de", 53, 93, 236, 0],
            [1, "de", 53, 93, 237, 0],
            [1, "de", 53, 93, 239, 0],
            [1, "de", 53, 93, 240, 0],
            [1, "de", 52, 93, 238, 0],
            [1, "de", 53, 93, 241, 0],
            [1, "de", 52, 93, 242, 0],
            [1, "de", 52, 93, 243, 0],
            [1, "de", 53, 93, 244, 0],
            [1, "de", 53, 93, 246, 0],
            [1, "de", 53, 93, 245, 0],
            [1, "de", 52, 93, 247, 0],
            [1, "de", 53, 93, 248, 0],
            [1, "de", 52, 92, 235, 0],
            [1, "de", 52, 92, 245, 0],
            [1, "de", 52, 93, 249, 0],
            [1, "de", 53, 93, 250, 0],
            [1, "de", 53, 93, 251, 0],
            [1, "de", 53, 93, 252, 0],
            [1, "de", 53, 93, 254, 0],
            [1, "de", 52, 93, 253, 0],
            [1, "de", 52, 93, 255, 0],
            [1, "de", 53, 93, 257, 0],
            [1, "de", 53, 93, 256, 0],
            [1, "de", 52, 93, 258, 0],
            [1, "de", 53, 93, 259, 0],
            [1, "de", 52, 93, 260, 0],
            [1, "de", 53, 93, 263, 0],
            [1, "de", 53, 93, 264, 0],
            [1, "de", 53, 93, 265, 0],
            [1, "de", 52, 93, 266, 0],
            [1, "de", 53, 93, 267, 0],
            [1, "de", 52, 93, 268, 0],
            [1, "de", 52, 93, 269, 0],
            [1, "de", 53, 93, 276, 0],
            [1, "de", 53, 93, 277, 0],
            [1, "de", 52, 93, 278, 0],
            [1, "de", 53, 93, 279, 0],
            [1, "de", 52, 93, 280, 0],
            [1, "de", 52, 93, 283, 0],
            [1, "de", 53, 93, 284, 0],
            [1, "de", 53, 93, 285, 0],
            [1, "de", 53, 93, 286, 0],
            [1, "de", 52, 93, 287, 0],
            [1, "de", 53, 93, 288, 0],
            [1, "de", 53, 93, 289, 0],
            [1, "de", 52, 93, 290, 0],
            [1, "de", 52, 93, 291, 0],
            [1, "de", 53, 93, 292, 0],
            [1, "de", 52, 93, 293, 0],
            [1, "de", 53, 93, 294, 0],
            [1, "de", 52, 93, 295, 0],
            [1, "de", 52, 93, 296, 0],
            [1, "de", 53, 93, 297, 0],
            [1, "de", 53, 93, 298, 0],
            [1, "de", 52, 93, 299, 0],
            [1, "de", 53, 93, 300, 0],
            [1, "de", 52, 92, 298, 0],
            [1, "de", 52, 92, 293, 0],
            [1, "r", 92, 262, 0],
            [1, "r", 93, 262, 0],
            [1, "de", 52, 93, 261, 0],
            [1, "cs", 0, 223, 104, 1],
            [1, "cs", 2, 223, 105, 1],
            [1, "cs", 2, 223, 102, 1],
            [1, "cs", 2, 223, 103, 1],
            [1, "la", 3, 141, 8, 1],
            [1, "cs", 2, 140, 9, 1],
            [1, "la", 4, 142, 9, 1],
            [1, "de", 4, 81, 149, 0],
            [1, "f", 0, 83, 148, 1],
            [1, "f", 1, 82, 149, 1],
            [1, "de", 34, 81, 156, 0],
            [1, "de", 51, 17, 9, 0],
            [1, "de", 54, 16, 9, 0],
            [1, "de", 54, 15, 9, 0],
            [1, "cs", 3, 223, 106, 1],
            [1, "p", 0, 119, 279, 1],
            [1, "p", 0, 109, 242, 1],
            [1, "cs", 1, 29, 9, 1],
            [1, "cs", 2, 30, 9, 1],
            [1, "cs", 2, 31, 9, 1],
            [1, "cs", 2, 32, 9, 1],
            [1, "cs", 2, 33, 9, 1],
            [1, "cs", 2, 69, 9, 1],
            [1, "cs", 2, 71, 9, 1],
            [1, "cs", 2, 70, 9, 1],
            [1, "cs", 1, 72, 9, 1],
            [1, "cs", 2, 73, 9, 1],
            [1, "de", 10, 31, 10, 0],
            [1, "de", 10, 29, 10, 0],
            [1, "de", 10, 44, 10, 0],
            [1, "de", 4, 87, 10, 0],
            [1, "de", 4, 86, 10, 0],
            [1, "de", 5, 87, 9, 0],
            [1, "de", 5, 13, 10, 0],
            [1, "de", 4, 14, 11, 0],
            [1, "de", 4, 16, 10, 0],
            [1, "de", 4, 17, 10, 0],
            [1, "cs", 2, 146, 9, 1],
            [1, "cs", 2, 148, 9, 1],
            [1, "cs", 2, 150, 9, 1],
            [1, "cs", 2, 153, 9, 1],
            [1, "cs", 2, 155, 9, 1],
            [1, "cs", 1, 149, 9, 1],
            [1, "cs", 1, 154, 9, 1],
            [1, "cs", 3, 147, 9, 1],
            [1, "cs", 3, 151, 9, 1],
            [1, "cs", 3, 152, 9, 1],
            [1, "cs", 3, 156, 9, 1],
            [1, "cs", 3, 157, 9, 1],
            [1, "cs", 3, 158, 9, 1],
            [1, "cs", 3, 159, 9, 1],
            [1, "cs", 3, 160, 9, 1],
            [1, "cs", 0, 161, 9, 1],
            [1, "cs", 2, 162, 9, 1],
            [1, "cs", 2, 163, 9, 1],
            [1, "cs", 1, 164, 9, 1],
            [1, "cs", 2, 165, 9, 1],
            [1, "cs", 3, 166, 9, 1],
            [1, "cs", 3, 168, 9, 1],
            [1, "cs", 3, 170, 9, 1],
            [1, "cs", 1, 169, 9, 1],
            [1, "cs", 2, 167, 9, 1],
            [1, "cs", 2, 171, 9, 1],
            [1, "cs", 2, 173, 9, 1],
            [1, "cs", 2, 172, 9, 1],
            [1, "cs", 2, 174, 9, 1],
            [1, "cs", 1, 175, 9, 1],
            [1, "cs", 3, 176, 9, 1],
            [1, "cs", 3, 178, 9, 1],
            [1, "cs", 3, 179, 9, 1],
            [1, "cs", 0, 180, 9, 1],
            [1, "cs", 2, 177, 9, 1],
            [1, "cs", 2, 182, 9, 1],
            [1, "cs", 2, 181, 9, 1],
            [1, "cs", 2, 183, 9, 1],
            [1, "cs", 2, 184, 9, 1],
            [1, "cs", 2, 185, 9, 1],
            [1, "cs", 2, 186, 9, 1],
            [1, "cs", 1, 187, 9, 1],
            [1, "cs", 2, 188, 9, 1],
            [1, "cs", 3, 189, 9, 1],
            [1, "cs", 3, 190, 9, 1],
            [1, "cs", 3, 191, 9, 1],
            [1, "cs", 2, 192, 9, 1],
            [1, "cs", 0, 193, 9, 1],
            [1, "cs", 2, 194, 9, 1],
            [1, "cs", 2, 196, 9, 1],
            [1, "cs", 2, 198, 9, 1],
            [1, "cs", 2, 200, 9, 1],
            [1, "cs", 3, 195, 9, 1],
            [1, "cs", 3, 197, 9, 1],
            [1, "cs", 3, 199, 9, 1],
            [1, "cs", 0, 201, 9, 1],
            [1, "cs", 2, 202, 9, 1],
            [1, "cs", 2, 203, 9, 1],
            [1, "cs", 3, 208, 9, 1],
            [1, "cs", 3, 207, 9, 1],
            [1, "cs", 3, 206, 9, 1],
            [1, "cs", 3, 205, 9, 1],
            [1, "cs", 3, 204, 9, 1],
            [1, "cs", 3, 214, 9, 1],
            [1, "cs", 3, 215, 9, 1],
            [1, "cs", 3, 216, 9, 1],
            [1, "cs", 3, 217, 9, 1],
            [1, "cs", 3, 218, 9, 1],
            [1, "b", 0, 5, 159, 0],
            [1, "b", 0, 5, 171, 0],
            [2, "isl", 1, 122, 63, 0],
            [2, "isl", 2, 119, 277, 0],
            [2, "isl", 2, 109, 244, 0],
            [2, "isl", 2, 114, 205, 0],
            [2, "isl", 1, 120, 150, 0],
            [2, "isl", 2, 154, 129, 0],
            [2, "isl", 0, 184, 158, 0],
            [2, "isl", 1, 208, 128, 0],
            [2, "isl", 1, 215, 132, 0],
            [2, "isl", 1, 214, 128, 0],
            [2, "isl", 1, 209, 132, 0],
            [1, "la", 3, 217, 20, 1],
            [1, "la", 1, 215, 19, 1],
            [1, "la", 0, 212, 18, 1],
            [1, "la", 4, 214, 18, 1],
            [1, "la", 4, 216, 19, 1],
            [1, "la", 4, 211, 20, 1],
            [1, "la", 3, 210, 19, 1],
            [1, "la", 3, 215, 21, 1],
            [1, "la", 1, 214, 20, 1],
            [1, "la", 3, 214, 22, 1],
            [1, "la", 3, 214, 24, 1],
            [1, "la", 4, 214, 26, 1],
            [1, "la", 4, 213, 27, 1],
            [1, "la", 1, 212, 28, 1],
            [1, "la", 2, 212, 29, 1],
            [1, "la", 5, 212, 30, 1],
            [1, "la", 4, 208, 19, 1],
            [1, "la", 4, 207, 19, 1],
            [1, "la", 1, 206, 19, 1],
            [1, "la", 1, 205, 19, 1],
            [1, "la", 2, 204, 19, 1],
            [1, "la", 5, 203, 19, 1],
            [1, "la", 3, 210, 17, 1]
        ],
        F = 0,
        k = {
            GROUND: ["#133A2B", "#042b30"],
            SNOW_GROUND: ["#EBF2F0", "#136167"],
            CRAFT_LOADING: ["#4EB687", "#187484"],
            BROWN_LIFE: ["#664516", "#13474C"],
            SAND_COLOR: ["#FCEFBB", "#0F4D48"],
            SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"],
            GRD_SHOVEL_CO: ["#594837", "#163A3A"],
            ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"],
            WATER_3_COLOR: ["#0B6A84", "#09373F"],
            WATER_2_COLOR: ["#2A8B9B", "#0F464C"],
            WATER_1_COLOR: ["#A9D6D3", "#115E60"],
            FLOAM_COLOR: ["#ECF7F9", "#539CA0"],
            WEAPON_LOADING: ["#FFF", "#FFF"],
            HELMET_LOADING: ["#FFF", "#FFF"],
            SWIM_COLOR: ["#1C9BA4", "#00272F"],
            LAVA_GROUND: ["#2D2017", "#031C1E"],
            DAY: 0,
            NIGHT: 1,
            DRAGON_DEN_X: 2300,
            DRAGON_DEN_Y: 2290,
            FLAKES_NUMBER: 34,
            FLAKES_SIZES: 5,
            SAND_NUMBER: 68,
            ASHES_NUMBER: 34,
            ASHES_SIZES: 5,
            SMOG: 1,
            SMOG_PUSH: .6,
            SMOG_SPEED: .25,
            STEP_SPACE: 50,
            TRAIL_SPACE: 10,
            SWIM_SPACE: 75,
            GHOST_BUBBLES: 20,
            BUBBLES_SIZES: 5,
            SWORD: F++,
            PICK: F++,
            FUR: F++,
            PICK_GOLD: F++,
            PICK_DIAMOND: F++,
            SWORD_GOLD: F++,
            SWORD_DIAMOND: F++,
            HAND: F++,
            PICK_WOOD: F++,
            PIRATE_SWORD: F++,
            EARMUFFS: F++,
            COAT: F++,
            WOOD_SPEAR: F++,
            SPEAR: F++,
            GOLD_SPEAR: F++,
            DIAMOND_SPEAR: F++,
            DRAGON_SPEAR: F++,
            LAVA_SPEAR: F++,
            CRAB_SPEAR: F++,
            REIDITE_SWORD: F++,
            DIAMOND_PROTECTION: F++,
            AMETHYST_PROTECTION: F++,
            REIDITE_PROTECTION: F++,
            EXPLORER_HAT: F++,
            PIRATE_HAT: F++,
            STONE_HELMET: F++,
            GOLD_HELMET: F++,
            DIAMOND_HELMET: F++,
            BOOK: F++,
            BAG: F++,
            SWORD_AMETHYST: F++,
            PICK_AMETHYST: F++,
            PICK_REIDITE: F++,
            AMETHYST_SPEAR: F++,
            REIDITE_SPEAR: F++,
            HAMMER: F++,
            HAMMER_GOLD: F++,
            HAMMER_DIAMOND: F++,
            HAMMER_AMETHYST: F++,
            HAMMER_REIDITE: F++,
            CAP_SCARF: F++,
            CHRISTMAS_HAT: F++,
            ELF_HAT: F++,
            AMETHYST_HELMET: F++,
            REIDITE_HELMET: F++,
            SUPER_HAMMER: F++,
            SHOVEL: F++,
            SUPER_DIVING_SUIT: F++,
            DIVING_MASK: F++,
            WATERING_CAN_FULL: F++,
            SHOVEL_GOLD: F++,
            SHOVEL_DIAMOND: F++,
            SHOVEL_AMETHYST: F++,
            PITCHFORK: F++,
            PITCHFORK2: F++,
            SPANNER: F++,
            MACHETE: F++,
            SWORD_WOOD: F++,
            WOOD_HELMET: F++,
            DRAGON_HELMET: F++,
            LAVA_HELMET: F++,
            CROWN_CRAB: F++,
            DRAGON_SWORD: F++,
            LAVA_SWORD: F++,
            WOOD_BOW: F++,
            STONE_BOW: F++,
            GOLD_BOW: F++,
            DIAMOND_BOW: F++,
            AMETHYST_BOW: F++,
            REIDITE_BOW: F++,
            DRAGON_BOW: F++,
            WOOD_SHIELD: F++,
            STONE_SHIELD: F++,
            GOLD_SHIELD: F++,
            DIAMOND_SHIELD: F++,
            AMETHYST_SHIELD: F++,
            REIDITE_SHIELD: F++,
            CROWN_GREEN: F++,
            CROWN_ORANGE: F++,
            CROWN_BLUE: F++,
            TURBAN1: F++,
            TURBAN2: F++,
            PILOT_HELMET: F++,
            HOOD: F++,
            PEASANT: F++,
            WINTER_HOOD: F++,
            WINTER_PEASANT: F++,
            FLOWER_HAT: F++,
            FUR_HAT: F++,
            SADDLE: F++,
            WITCH: F++,
            NIMBUS: F++,
            WAND1: F++,
            WAND2: F++,
            FIREFLY_ITEM: F++,
            WOOD_ARROW: F++,
            STONE_ARROW: F++,
            GOLD_ARROW: F++,
            DIAMOND_ARROW: F++,
            AMETHYST_ARROW: F++,
            REIDITE_ARROW: F++,
            DRAGON_ARROW: F++,
            STONES: F++,
            TREE: F++,
            PLANT: F++,
            GOLD: F++,
            DIAMOND: F++,
            WOOD_FIRE: F++,
            WORKBENCH: F++,
            PLANT_SEED: F++,
            MEAT: F++,
            COOKED_MEAT: F++,
            BIG_FIRE_WOOD: F++,
            FURNACE_OFF: F++,
            PAPER: F++,
            AMETHYST: F++,
            AMETHYST_WALL: F++,
            AMETHYST_SPIKE: F++,
            DOOR_AMETHYST_CLOSE: F++,
            BRIDGE: F++,
            SAND: F++,
            BOTTLE_FULL: F++,
            BOTTLE_EMPTY: F++,
            KRAKEN_SKIN: F++,
            WATERING_CAN: F++,
            FLOUR: F++,
            WHEAT_SEED: F++,
            COOKIE: F++,
            WILD_WHEAT: F++,
            WINDMILL: F++,
            CAKE: F++,
            FOODFISH: F++,
            FOODFISH_COOKED: F++,
            SCALES: F++,
            INV_GROUND: F++,
            PLOT: F++,
            INV_ICE: F++,
            INV_BREAD: F++,
            BREAD_OVEN_OFF: F++,
            INV_SANDWICH: F++,
            FUR_WINTER: F++,
            BLUE_CORD: F++,
            LOCK: F++,
            DRAGON_HEART: F++,
            LAVA_HEART: F++,
            RESURRECTION: F++,
            EMERALD_MACHINE: F++,
            EXTRACTOR_MACHINE_STONE: F++,
            EXTRACTOR_MACHINE_GOLD: F++,
            EXTRACTOR_MACHINE_DIAMOND: F++,
            EXTRACTOR_MACHINE_AMETHYST: F++,
            EXTRACTOR_MACHINE_REIDITE: F++,
            LOCKPICK: F++,
            TOTEM: F++,
            SPIKE: F++,
            CORD: F++,
            WALL: F++,
            STONE_WALL: F++,
            GOLD_WALL: F++,
            DIAMOND_WALL: F++,
            DOOR_WOOD_CLOSE: F++,
            CHEST: F++,
            STONE_SPIKE: F++,
            GOLD_SPIKE: F++,
            DIAMOND_SPIKE: F++,
            DOOR_STONE_CLOSE: F++,
            DOOR_GOLD_CLOSE: F++,
            DOOR_DIAMOND_CLOSE: F++,
            FUR_WOLF: F++,
            INV_GEMME_BLUE: F++,
            INV_GEMME_GREEN: F++,
            INV_GEMME_ORANGE: F++,
            INV_SPECIAL_FUR: F++,
            INV_SPECIAL_FUR_2: F++,
            INV_BUCKET_FULL: F++,
            INV_BUCKET_EMPTY: F++,
            WELL_EMPTY: F++,
            SIGN: F++,
            DRAGON_CUBE: F++,
            DRAGON_ORB: F++,
            LAVA_CUBE: F++,
            LAVA_ORB: F++,
            PLANT_PUMPKIN: F++,
            PUMPKIN: F++,
            ROOF: F++,
            PLANT_GARLIC: F++,
            GARLIC: F++,
            PLANT_THORNBUSH: F++,
            THORNBUSH: F++,
            BANDAGE: F++,
            INV_CRAB_STICK: F++,
            INV_CRAB_LOOT: F++,
            BED: F++,
            SUGAR_CAN: F++,
            INV_CANDY: F++,
            GARLAND: F++,
            REIDITE: F++,
            MAGMA: F++,
            PLANT_CARROT: F++,
            CARROT: F++,
            PLANT_TOMATO: F++,
            TOMATO: F++,
            PLANT_WATERMELON: F++,
            WATERMELON: F++,
            PLANT_ALOE_VERA: F++,
            ALOE_VERA_GROWN: F++,
            WOOD_DOOR_SPIKE: F++,
            STONE_DOOR_SPIKE: F++,
            GOLD_DOOR_SPIKE: F++,
            DIAMOND_DOOR_SPIKE: F++,
            AMETHYST_DOOR_SPIKE: F++,
            REIDITE_WALL: F++,
            REIDITE_DOOR: F++,
            REIDITE_SPIKE: F++,
            REIDITE_DOOR_SPIKE: F++,
            WOOD_TOWER: F++,
            PENGUIN_FEATHER: F++,
            BOAT: F++,
            SLED: F++,
            BOAT_WAVE: F++,
            SLED_WAVE: F++,
            MOUNT_BOAR: F++,
            BOAR_STEP: F++,
            CRAB_STICK: F++,
            CRAB_LOOT: F++,
            CRAB_BOSS: F++,
            BABY_DRAGON: F++,
            BABY_LAVA: F++,
            CRAB_STEP: F++,
            HAWK: F++,
            PLANE: F++,
            HAWK_FEATHER: F++,
            VULTURE: F++,
            ALOE_VERA: F++,
            VULTURE_FEATHER: F++,
            EMERALD: F++,
            FUR_BOAR: F++,
            DECORATION: F++,
            FOD: F++,
            FIREFLY: F++,
            HURT_FIREFLY: F++,
            SPELL: F++,
            BABY_MAMMOTH: F++,
            BABY_MAMMOTH_STEP: F++,
            CRATE: F++,
            SEED: F++,
            INV_DRAGON_ORB: F++,
            INV_LAVA_ORB: F++,
            CRAFT_SWORD: F++,
            BODY: F++,
            CRAFT_PICK: F++,
            CRAFT_PICK_DIAMOND: F++,
            INV_PICK_GOLD: F++,
            MINIMAP: F++,
            SPIDER: F++,
            INV_SWORD: F++,
            CRAFT_WORK: F++,
            CRAFT_STONE_WALL: F++,
            RABBIT: F++,
            CRAFT_GOLD_WALL: F++,
            WEB: F++,
            GAUGES: F++,
            CRAFT_DOOR_WOOD_CLOSE: F++,
            CHEST_PLANT: F++,
            CHEST_GOLD: F++,
            CHEST_DIAMOND: F++,
            CHEST_PICK_GOLD: F++,
            CHEST_FIRE: F++,
            CHEST_PICK_WOOD: F++,
            CHEST_MEAT: F++,
            CHEST_BIG_FIRE: F++,
            INV_PLANT: F++,
            LEADERBOARD: F++,
            HURT: F++,
            COLD: F++,
            HUNGER: F++,
            GROUND_FIRE: F++,
            COUNTER: F++,
            CRAFT_SEED: F++,
            HERB: F++,
            HAND_SHADOW: F++,
            PLANT_MINI: F++,
            FIRE: F++,
            HALO_FIRE: F++,
            CRAFT_SWORD_GOLD: F++,
            CRAFT_SWORD_DIAMOND: F++,
            INV_SWORD_GOLD: F++,
            INV_SWORD_DIAMOND: F++,
            FRUIT: F++,
            CRAFT_PICK_GOLD: F++,
            INV_PICK_DIAMOND: F++,
            INV_GOLD: F++,
            INV_DIAMOND: F++,
            WOLF: F++,
            INV_MEAT: F++,
            GEAR2: F++,
            CRAFT_FIRE: F++,
            INV_BANDAGE: F++,
            CRAFT_BANDAGE: F++,
            INV_CORD: F++,
            YOUR_SCORE: F++,
            TREE_BRANCH: F++,
            HEAL: F++,
            INV_FIRE: F++,
            INV_WORK: F++,
            INV_SEED: F++,
            INV_PICK: F++,
            INV_PICK_WOOD: F++,
            CRAFT_PICK_WOOD: F++,
            INV_STONE: F++,
            INV_WOOD: F++,
            INV_WALL: F++,
            CRAFT_WALL: F++,
            INV_SPIKE: F++,
            CRAFT_SPIKE: F++,
            WHEAT_MOB: F++,
            HURT_RABBIT: F++,
            INV_COOKED_MEAT: F++,
            GEAR: F++,
            CRAFT_COOKED_MEAT: F++,
            HURT_WOLF: F++,
            CRAFT_BIG_FIRE: F++,
            INV_BIG_FIRE: F++,
            INV_STONE_WALL: F++,
            INV_GOLD_WALL: F++,
            INV_DIAMOND_WALL: F++,
            CRAFT_DIAMOND_WALL: F++,
            HURT_SPIDER: F++,
            EMPTY_SLOT: F++,
            INV_DOOR_WOOD_CLOSE: F++,
            DOOR_WOOD_OPEN: F++,
            INV_CHEST: F++,
            CRAFT_CHEST: F++,
            CHEST_SLOT: F++,
            CHEST_SWORD: F++,
            CHEST_PICK: F++,
            CHEST_STONE: F++,
            CHEST_WOOD: F++,
            CHEST_PICK_DIAMOND: F++,
            CHEST_SWORD_GOLD: F++,
            CHEST_SWORD_DIAMOND: F++,
            CHEST_WORK: F++,
            CHEST_SEED: F++,
            CHEST_WALL: F++,
            CHEST_SPIKE: F++,
            CHEST_COOKED_MEAT: F++,
            CHEST_BANDAGE: F++,
            CHEST_CORD: F++,
            CHEST_STONE_WALL: F++,
            CHEST_GOLD_WALL: F++,
            CHEST_DIAMOND_WALL: F++,
            CHEST_DOOR_WOOD_CLOSE: F++,
            CHEST_WORKBENCH: F++,
            CHEST_CHEST: F++,
            CRAFT_STONE_SPIKE: F++,
            INV_STONE_SPIKE: F++,
            INV_GOLD_SPIKE: F++,
            CRAFT_GOLD_SPIKE: F++,
            INV_DIAMOND_SPIKE: F++,
            CRAFT_DIAMOND_SPIKE: F++,
            CHEST_PLUS: F++,
            CRAFT_BAG: F++,
            INV_FUR: F++,
            INV_EARMUFFS: F++,
            CRAFT_EARMUFFS: F++,
            CRAFT_DOOR_STONE_CLOSE: F++,
            INV_DOOR_STONE_CLOSE: F++,
            DOOR_STONE_OPEN: F++,
            CRAFT_DOOR_GOLD_CLOSE: F++,
            INV_DOOR_GOLD_CLOSE: F++,
            DOOR_GOLD_OPEN: F++,
            CRAFT_DOOR_DIAMOND_CLOSE: F++,
            INV_DOOR_DIAMOND_CLOSE: F++,
            DOOR_DIAMOND_OPEN: F++,
            CRAFT_COAT: F++,
            INV_COAT: F++,
            CHEST_STONE_SPIKE: F++,
            CHEST_GOLD_SPIKE: F++,
            CHEST_DIAMOND_SPIKE: F++,
            CHEST_BAG: F++,
            CHEST_FUR: F++,
            CHEST_EARMUFFS: F++,
            CHEST_DOOR_STONE_CLOSE: F++,
            CHEST_DOOR_GOLD_CLOSE: F++,
            CHEST_DOOR_DIAMOND_CLOSE: F++,
            CHEST_COAT: F++,
            INV_BAG: F++,
            INV_FUR_WOLF: F++,
            CHEST_FUR_WOLF: F++,
            INV_SPEAR: F++,
            CRAFT_SPEAR: F++,
            CHEST_SPEAR: F++,
            INV_GOLD_SPEAR: F++,
            CRAFT_GOLD_SPEAR: F++,
            CHEST_GOLD_SPEAR: F++,
            INV_WOOD_SPEAR: F++,
            CRAFT_WOOD_SPEAR: F++,
            CHEST_WOOD_SPEAR: F++,
            INV_DIAMOND_SPEAR: F++,
            CRAFT_DIAMOND_SPEAR: F++,
            CHEST_DIAMOND_SPEAR: F++,
            FURNACE_ON: F++,
            INV_FURNACE: F++,
            CRAFT_FURNACE: F++,
            CHEST_FURNACE: F++,
            FURNACE_SLOT: F++,
            FURNACE_BUTTON: F++,
            FIR: F++,
            STONES_WINTER: F++,
            GOLD_WINTER: F++,
            DIAMOND_WINTER: F++,
            GROUND_FIRE_WINTER: F++,
            INV_AMETHYST: F++,
            FOX: F++,
            INV_EXPLORER_HAT: F++,
            CRAFT_EXPLORER_HAT: F++,
            CHEST_EXPLORER_HAT: F++,
            INV_PIRATE_HAT: F++,
            CRAFT_PIRATE_HAT: F++,
            CHEST_PIRATE_HAT: F++,
            INV_PILOT_HELMET: F++,
            CRAFT_PILOT_HELMET: F++,
            CHEST_PILOT_HELMET: F++,
            INV_STONE_HELMET: F++,
            CRAFT_STONE_HELMET: F++,
            CHEST_STONE_HELMET: F++,
            INV_GOLD_HELMET: F++,
            CRAFT_GOLD_HELMET: F++,
            CHEST_GOLD_HELMET: F++,
            INV_DIAMOND_HELMET: F++,
            CRAFT_DIAMOND_HELMET: F++,
            CHEST_DIAMOND_HELMET: F++,
            INV_BOOK: F++,
            CRAFT_BOOK: F++,
            CHEST_BOOK: F++,
            INV_PAPER: F++,
            CRAFT_PAPER: F++,
            CHEST_PAPER: F++,
            HERB_WINTER: F++,
            BEAR: F++,
            CHEST_AMETHYST: F++,
            SNOW: F++,
            DRAGON_GROUND: F++,
            DRAGON: F++,
            LAVA_DRAGON: F++,
            WING_LEFT: F++,
            WING_RIGHT: F++,
            LAVA_WING_LEFT: F++,
            LAVA_WING_RIGHT: F++,
            INV_SWORD_AMETHYST: F++,
            CRAFT_SWORD_AMETHYST: F++,
            CHEST_SWORD_AMETHYST: F++,
            INV_PICK_AMETHYST: F++,
            CHEST_PICK_AMETHYST: F++,
            CRAFT_PICK_AMETHYST: F++,
            HURT_FOX: F++,
            HURT_BEAR: F++,
            HURT_DRAGON: F++,
            HURT_LAVA_DRAGON: F++,
            SLOT_NUMBER: F++,
            HURT_WING_LEFT: F++,
            HURT_WING_RIGHT: F++,
            HURT_LAVA_WING_LEFT: F++,
            HURT_LAVA_WING_RIGHT: F++,
            FLAKES: F++,
            DESERT: F++,
            INV_AMETHYST_SPEAR: F++,
            CRAFT_AMETHYST_SPEAR: F++,
            CHEST_AMETHYST_SPEAR: F++,
            SNOW_STEP: F++,
            LAVA_STEP: F++,
            INV_HAMMER: F++,
            CRAFT_HAMMER: F++,
            CHEST_HAMMER: F++,
            INV_HAMMER_GOLD: F++,
            CRAFT_HAMMER_GOLD: F++,
            CHEST_HAMMER_GOLD: F++,
            INV_HAMMER_DIAMOND: F++,
            CRAFT_HAMMER_DIAMOND: F++,
            CHEST_HAMMER_DIAMOND: F++,
            INV_HAMMER_AMETHYST: F++,
            CRAFT_HAMMER_AMETHYST: F++,
            CHEST_HAMMER_AMETHYST: F++,
            INV_HAMMER_REIDITE: F++,
            CRAFT_HAMMER_REIDITE: F++,
            CHEST_HAMMER_REIDITE: F++,
            INV_AMETHYST_WALL: F++,
            CRAFT_AMETHYST_WALL: F++,
            CHEST_AMETHYST_WALL: F++,
            INV_AMETHYST_SPIKE: F++,
            CRAFT_AMETHYST_SPIKE: F++,
            CHEST_AMETHYST_SPIKE: F++,
            CRAFT_DOOR_AMETHYST_CLOSE: F++,
            INV_DOOR_AMETHYST_CLOSE: F++,
            DOOR_AMETHYST_OPEN: F++,
            CHEST_DOOR_AMETHYST_CLOSE: F++,
            INV_CAP_SCARF: F++,
            CRAFT_CAP_SCARF: F++,
            CHEST_CAP_SCARF: F++,
            INV_FUR_WINTER: F++,
            CHEST_FUR_WINTER: F++,
            SLOT_NUMBER: F++,
            DOOR_WOOD_OPEN_WINTER: F++,
            DOOR_STONE_OPEN_WINTER: F++,
            DOOR_GOLD_OPEN_WINTER: F++,
            DOOR_DIAMOND_OPEN_WINTER: F++,
            DOOR_AMETHYST_OPEN_WINTER: F++,
            INV_BLUE_CORD: F++,
            CHEST_BLUE_CORD: F++,
            CRAFT_BLUE_CORD: F++,
            BIGMAP: F++,
            SHOW_SPECTATORS: F++,
            INV_LOCK: F++,
            CRAFT_LOCK: F++,
            CHEST_LOCK: F++,
            INV_DRAGON_HEART: F++,
            CHEST_DRAGON_HEART: F++,
            INV_LAVA_HEART: F++,
            CHEST_LAVA_HEART: F++,
            RECONNECT: F++,
            RESURRECTION_GROUND: F++,
            RESURRECTION_HOLE: F++,
            RESURRECTION_ROTATE: F++,
            INV_RESURRECTION: F++,
            CRAFT_RESURRECTION: F++,
            CHEST_RESURRECTION: F++,
            INV_LOCKPICK: F++,
            CRAFT_LOCKPICK: F++,
            CHEST_LOCKPICK: F++,
            KEY: F++,
            PADLOCK: F++,
            DELAY_WEAPON: F++,
            LOCKED: F++,
            PADLOCK_ON_CHEST: F++,
            BUBBLES: F++,
            INV_AMETHYST_HELMET: F++,
            CRAFT_AMETHYST_HELMET: F++,
            CHEST_AMETHYST_HELMET: F++,
            SPECIAL_ITEMS: F++,
            POINTS: F++,
            AUTO_FEED: F++,
            BANDAGE_ACTIVATED: F++,
            STOP_REGENERATION: F++,
            STOP_REGENERATION_BLIZZARD: F++,
            INV_SUPER_HAMMER: F++,
            CRAFT_SUPER_HAMMER: F++,
            CHEST_SUPER_HAMMER: F++,
            INV_TOTEM: F++,
            CHEST_TOTEM: F++,
            CRAFT_TOTEM: F++,
            TEAM_BUTTON: F++,
            MANAGE_TEAM_BUTTON: F++,
            ICON_MEMBER: F++,
            ICON_LEADER: F++,
            FULL_TEAM_BUTTON: F++,
            SHOW_TEAM_BUTTON: F++,
            DELAY_TEAM: F++,
            INV_DRAGON_SWORD: F++,
            CRAFT_DRAGON_SWORD: F++,
            CHEST_DRAGON_SWORD: F++,
            INV_LAVA_SWORD: F++,
            CRAFT_LAVA_SWORD: F++,
            CHEST_LAVA_SWORD: F++,
            INV_WOOD_BOW: F++,
            CRAFT_WOOD_BOW: F++,
            CHEST_WOOD_BOW: F++,
            INV_STONE_BOW: F++,
            CRAFT_STONE_BOW: F++,
            CHEST_STONE_BOW: F++,
            INV_GOLD_BOW: F++,
            CRAFT_GOLD_BOW: F++,
            CHEST_GOLD_BOW: F++,
            INV_DIAMOND_BOW: F++,
            CRAFT_DIAMOND_BOW: F++,
            CHEST_DIAMOND_BOW: F++,
            INV_AMETHYST_BOW: F++,
            CRAFT_AMETHYST_BOW: F++,
            CHEST_AMETHYST_BOW: F++,
            INV_REIDITE_BOW: F++,
            CRAFT_REIDITE_BOW: F++,
            CHEST_REIDITE_BOW: F++,
            INV_DRAGON_BOW: F++,
            CRAFT_DRAGON_BOW: F++,
            CHEST_DRAGON_BOW: F++,
            CHEST_DRAGON_ORB: F++,
            CHEST_LAVA_ORB: F++,
            SHOP: F++,
            CURSED_SWORD: F++,
            INV_CURSED_SWORD: F++,
            CRAFT_CURSED_SWORD: F++,
            CHEST_CURSED_SWORD: F++,
            ITEM1: F++,
            ITEM2: F++,
            ITEM3: F++,
            ITEM4: F++,
            SAND_BORDER: F++,
            SAND_STEP: F++,
            OCEAN: F++,
            CRAFT_BRIDGE: F++,
            INV_BRIDGE: F++,
            CHEST_BRIDGE: F++,
            LACK: F++,
            OXYGEN: F++,
            INV_SAND: F++,
            CHEST_SAND: F++,
            CRAFT_BOTTLE_EMPTY: F++,
            INV_BOTTLE_EMPTY: F++,
            INV_BOTTLE_FULL: F++,
            CHEST_BOTTLE_EMPTY: F++,
            CHEST_BOTTLE_FULL: F++,
            INV_SHOVEL: F++,
            CHEST_SHOVEL: F++,
            CRAFT_SHOVEL: F++,
            LAKE_DEEP: F++,
            LAKE: F++,
            LAKE_EDGE: F++,
            SHINGLE: F++,
            DRIED_PLANT: F++,
            INV_KRAKEN_SKIN: F++,
            CHEST_KRAKEN_SKIN: F++,
            INV_WATERING_CAN: F++,
            CRAFT_WATERING_CAN: F++,
            CHEST_WATERING_CAN: F++,
            INV_FLOUR: F++,
            CHEST_FLOUR: F++,
            INV_WHEAT_SEED: F++,
            CRAFT_WHEAT_SEED: F++,
            CHEST_WHEAT_SEED: F++,
            INV_COOKIE: F++,
            CRAFT_COOKIE: F++,
            CHEST_COOKIE: F++,
            KRAKEN: F++,
            DRIED_WHEAT: F++,
            INV_WILD_WHEAT: F++,
            CHEST_WILD_WHEAT: F++,
            WINDMILL_WINGS: F++,
            WINDMILL_HEAD: F++,
            CRAFT_WINDMILL: F++,
            INV_WINDMILL: F++,
            CHEST_WINDMILL: F++,
            INV_SUPER_DIVING_SUIT: F++,
            CRAFT_SUPER_DIVING_SUIT: F++,
            CHEST_SUPER_DIVING_SUIT: F++,
            INV_DIVING_MASK: F++,
            CRAFT_DIVING_MASK: F++,
            CHEST_DIVING_MASK: F++,
            INV_WATERING_CAN_FULL: F++,
            CHEST_WATERING_CAN_FULL: F++,
            CRAFT_WATERING_CAN_FULL: F++,
            WINDMILL_CASES: F++,
            EXTRACTOR_CASES: F++,
            WINDMILL_WHEAT_SEED: F++,
            WINDMILL_FLOUR: F++,
            INV_CAKE: F++,
            CRAFT_CAKE: F++,
            CHEST_CAKE: F++,
            INV_FOODFISH: F++,
            CHEST_FOODFISH: F++,
            INV_FOODFISH_COOKED: F++,
            CHEST_FOODFISH_COOKED: F++,
            CRAFT_FOODFISH_COOKED: F++,
            DELAY_DRINK: F++,
            WHEAT_SEED_DRIED: F++,
            HEART_SYMBOL_HUD: F++,
            COLD_SYMBOL_HUD: F++,
            FOOD_SYMBOL_HUD: F++,
            WATER_SYMBOL_HUD: F++,
            PIRANHA: F++,
            INV_SCALES: F++,
            CHEST_SCALES: F++,
            CAVE_STONES: F++,
            HERB_CAVE: F++,
            WATERBLOCK: F++,
            SHADOW_CAVE_STONES: F++,
            CAVE_STEP: F++,
            DELAY_SPIKE: F++,
            CHEST_GROUND: F++,
            CHEST_PLOT: F++,
            CRAFT_PLOT: F++,
            INV_PLOT: F++,
            CHEST_ICE: F++,
            HURT_KRAKEN: F++,
            HURT_PIRANHA: F++,
            CHEST_BREAD: F++,
            CRAFT_BREAD: F++,
            TREASURE_CHEST: F++,
            ISLAND: F++,
            PALM: F++,
            WAVE_ONE: F++,
            WAVE_TWO: F++,
            ISLAND_BLOCK: F++,
            HURT_TREASURE_CHEST: F++,
            ISLAND_STEP: F++,
            INV_SHOVEL_GOLD: F++,
            CRAFT_SHOVEL_GOLD: F++,
            CHEST_SHOVEL_GOLD: F++,
            INV_SHOVEL_DIAMOND: F++,
            CHEST_SHOVEL_DIAMOND: F++,
            CRAFT_SHOVEL_DIAMOND: F++,
            INV_SHOVEL_AMETHYST: F++,
            CRAFT_SHOVEL_AMETHYST: F++,
            CHEST_SHOVEL_AMETHYST: F++,
            RECIPE_BUTTON: F++,
            INV_SPANNER: F++,
            CHEST_SPANNER: F++,
            CRAFT_SPANNER: F++,
            INV_MACHETE: F++,
            CHEST_MACHETE: F++,
            CRAFT_MACHETE: F++,
            CRAFT_BOTTLE_FULL: F++,
            BREAD_OVEN_ON: F++,
            INV_BREAD_OVEN: F++,
            CRAFT_BREAD_OVEN: F++,
            CHEST_BREAD_OVEN: F++,
            BREAD_LIGHT_UP: F++,
            BREAD_LIGHT_DOWN: F++,
            BREAD_OVEN_UI: F++,
            BREAD_OVEN_WOOD: F++,
            BREAD_OVEN_BREAD: F++,
            CLOCK: F++,
            ARROW_CLOCK: F++,
            OPTION_BUTTON: F++,
            DEAD_BOX: F++,
            HURT_DEAD_BOX: F++,
            CRAFT_SANDWICH: F++,
            CHEST_SANDWICH: F++,
            INV_DRAGON_HELMET: F++,
            CHEST_DRAGON_HELMET: F++,
            CRAFT_DRAGON_HELMET: F++,
            INV_LAVA_HELMET: F++,
            CHEST_LAVA_HELMET: F++,
            CRAFT_LAVA_HELMET: F++,
            INV_WITCH: F++,
            CHEST_WITCH: F++,
            CRAFT_WITCH: F++,
            INV_NIMBUS: F++,
            CHEST_NIMBUS: F++,
            CRAFT_NIMBUS: F++,
            INV_WAND1: F++,
            CHEST_WAND1: F++,
            CRAFT_WAND1: F++,
            INV_WAND2: F++,
            CHEST_WAND2: F++,
            CRAFT_WAND2: F++,
            DRAGON_SWORD_HALO: F++,
            INV_DRAGON_CUBE: F++,
            CHEST_DRAGON_CUBE: F++,
            INV_LAVA_CUBE: F++,
            CHEST_LAVA_CUBE: F++,
            QUEST_BUTTON: F++,
            INV_CROWN_GREEN: F++,
            CHEST_CROWN_GREEN: F++,
            CRAFT_CROWN_GREEN: F++,
            CHEST_GEMME_GREEN: F++,
            INV_CROWN_ORANGE: F++,
            CHEST_CROWN_ORANGE: F++,
            CRAFT_CROWN_ORANGE: F++,
            CHEST_GEMME_ORANGE: F++,
            INV_CROWN_BLUE: F++,
            CHEST_CROWN_BLUE: F++,
            CHEST_GEMME_BLUE: F++,
            INV_HOOD: F++,
            CRAFT_HOOD: F++,
            CHEST_HOOD: F++,
            CRAFT_CROWN_BLUE: F++,
            INV_PEASANT: F++,
            CRAFT_PEASANT: F++,
            CHEST_PEASANT: F++,
            CHEST_SPECIAL_FUR: F++,
            CHEST_SPECIAL_FUR_2: F++,
            INV_WINTER_PEASANT: F++,
            CRAFT_WINTER_PEASANT: F++,
            CHEST_WINTER_PEASANT: F++,
            INV_WINTER_HOOD: F++,
            CRAFT_WINTER_HOOD: F++,
            CHEST_WINTER_HOOD: F++,
            SOUND_BUTTON_ON: F++,
            SOUND_BUTTON_OFF: F++,
            CRAFT_BUCKET_FULL: F++,
            CRAFT_BUCKET_EMPTY: F++,
            CHEST_BUCKET_FULL: F++,
            CHEST_BUCKET_EMPTY: F++,
            WELL_FULL: F++,
            INV_WELL: F++,
            CHEST_WELL: F++,
            CRAFT_WELL: F++,
            DELAY_HELMET: F++,
            GLOVES_HOOD: F++,
            DELAY_WALL: F++,
            MARKET_BUTTON: F++,
            ACCESSORY: F++,
            MARKET_BGD: F++,
            DEAD_BOX_UI: F++,
            CRAFT_SIGN: F++,
            INV_SIGN: F++,
            CHEST_SIGN: F++,
            SYMBOLS: F++,
            SIGN_BUTTON: F++,
            TREE_WEB1: F++,
            TREE_WEB2: F++,
            TREE_BRANCH_WEB1: F++,
            TREE_BRANCH_WEB2: F++,
            INV_PUMPKIN_SEED: F++,
            CRAFT_PUMPKIN_SEED: F++,
            CHEST_PUMPKIN_SEED: F++,
            PUMPKIN_SEED_MOB: F++,
            PLANT_PUMPKIN_DRIED: F++,
            DRIED_PUMPKIN: F++,
            INV_PUMPKIN: F++,
            CHEST_PUMPKIN: F++,
            HALO_FIRE_PUMPKIN: F++,
            GROUND_FIRE_PUMPKIN: F++,
            MINIMAP_CTX: F++,
            BIGMAP_CTX: F++,
            ZOMBIE_BODY: F++,
            ZOMBIE_HEAD: F++,
            ZOMBIE_HAND: F++,
            ZOMBIE_HURT: F++,
            ZOMBIE_HUNGER: F++,
            ZOMBIE_HEAL: F++,
            INV_WOOD_HELMET: F++,
            CRAFT_WOOD_HELMET: F++,
            CHEST_WOOD_HELMET: F++,
            INV_SWORD_WOOD: F++,
            CRAFT_SWORD_WOOD: F++,
            CHEST_SWORD_WOOD: F++,
            ZOMBIE_PLAYER: F++,
            VAMPIRE: F++,
            INV_GARLIC_SEED: F++,
            CRAFT_GARLIC_SEED: F++,
            CHEST_GARLIC_SEED: F++,
            GARLIC_SEED_MOB: F++,
            PLANT_GARLIC_DRIED: F++,
            DRIED_GARLIC: F++,
            INV_GARLIC: F++,
            CHEST_GARLIC: F++,
            INV_ROOF: F++,
            CRAFT_ROOF: F++,
            CHEST_ROOF: F++,
            INV_THORNBUSH_SEED: F++,
            CRAFT_THORNBUSH_SEED: F++,
            CHEST_THORNBUSH_SEED: F++,
            THORNBUSH_SEED_MOB: F++,
            PLANT_THORNBUSH_DRIED: F++,
            INV_THORNBUSH: F++,
            CHEST_THORNBUSH: F++,
            CRAFT_THORNBUSH: F++,
            ROOFS: F++,
            GIFT: F++,
            TREE_SNOW1: F++,
            TREE_SNOW2: F++,
            TREE_BRANCH_SNOW1: F++,
            TREE_BRANCH_SNOW2: F++,
            HURT_GIFT: F++,
            INV_PIRATE_SWORD: F++,
            CRAFT_PIRATE_SWORD: F++,
            CHEST_PIRATE_SWORD: F++,
            CHEST_SUGAR_CAN: F++,
            CRAFT_SUGAR_CAN: F++,
            INV_SUGAR_CAN: F++,
            INV_FERRERO: F++,
            CHEST_FERRERO: F++,
            CHEST_CANDY: F++,
            DRIED_THORNBUSH: F++,
            INV_GARLAND: F++,
            CHEST_GARLAND: F++,
            GARLANDS: F++,
            GARLANDS_LIGHT: F++,
            INV_DRAGON_SPEAR: F++,
            CHEST_DRAGON_SPEAR: F++,
            CRAFT_DRAGON_SPEAR: F++,
            INV_LAVA_SPEAR: F++,
            CHEST_LAVA_SPEAR: F++,
            CRAFT_LAVA_SPEAR: F++,
            INV_CHRISTMAS_HAT: F++,
            CHEST_CHRISTMAS_HAT: F++,
            INV_ELF_HAT: F++,
            CHEST_ELF_HAT: F++,
            ROBOT_SKIN: F++,
            VERIFIED: F++,
            CRAB_ATTACK: F++,
            CRAB: F++,
            HURT_CRAB: F++,
            HURT_CRAB_CLAW_LEFT: F++,
            HURT_CRAB_CLAW_RIGHT: F++,
            HEAL_CRAB: F++,
            HEAL_CRAB_CLAW_LEFT: F++,
            HEAL_CRAB_CLAW_RIGHT: F++,
            CRAB_CLAW_LEFT: F++,
            CRAB_CLAW_RIGHT: F++,
            CRAB_CLAW_LEFT_ATTACK: F++,
            CRAB_CLAW_RIGHT_ATTACK: F++,
            CHEST_CRAB_STICK: F++,
            CHEST_CRAB_SPEAR: F++,
            CRAFT_CRAB_SPEAR: F++,
            INV_CRAB_SPEAR: F++,
            FISH1: F++,
            FISH2: F++,
            HURT_FISH1: F++,
            HURT_FISH2: F++,
            CHEST_CRAB_LOOT: F++,
            INV_BED: F++,
            CHEST_BED: F++,
            CRAFT_BED: F++,
            INV_CROWN_CRAB: F++,
            CHEST_CROWN_CRAB: F++,
            CRAFT_CROWN_CRAB: F++,
            BED_TOP: F++,
            HURT_RABBIT_SKIN: F++,
            COLD_RABBIT_SKIN: F++,
            HUNGER_RABBIT_SKIN: F++,
            HEAL_RABBIT_SKIN: F++,
            FIRE_MOB: F++,
            HURT_FIRE_MOB: F++,
            GLOVES_DIAMOND_PROTECTION: F++,
            INV_DIAMOND_PROTECTION: F++,
            CRAFT_DIAMOND_PROTECTION: F++,
            CHEST_DIAMOND_PROTECTION: F++,
            GLOVES_AMETHYST_PROTECTION: F++,
            INV_AMETHYST_PROTECTION: F++,
            CRAFT_AMETHYST_PROTECTION: F++,
            CHEST_AMETHYST_PROTECTION: F++,
            GLOVES_REIDITE_PROTECTION: F++,
            INV_REIDITE_PROTECTION: F++,
            CRAFT_REIDITE_PROTECTION: F++,
            CHEST_REIDITE_PROTECTION: F++,
            INV_REIDITE_SWORD: F++,
            CRAFT_REIDITE_SWORD: F++,
            CHEST_REIDITE_SWORD: F++,
            LAVA_SHINGLE: F++,
            INV_FLAME: F++,
            CHEST_FLAME: F++,
            INV_REIDITE: F++,
            CHEST_REIDITE: F++,
            HERB_LAVA: F++,
            LAVA_BUBBLE: F++,
            ASHES: F++,
            INV_REIDITE_SPEAR: F++,
            CRAFT_REIDITE_SPEAR: F++,
            CHEST_REIDITE_SPEAR: F++,
            INV_REIDITE_HELMET: F++,
            CRAFT_REIDITE_HELMET: F++,
            CHEST_REIDITE_HELMET: F++,
            INV_CARROT_SEED: F++,
            CRAFT_CARROT_SEED: F++,
            CHEST_CARROT_SEED: F++,
            CARROT_SEED_MOB: F++,
            PLANT_CARROT_DRIED: F++,
            DRIED_CARROT: F++,
            INV_CARROT: F++,
            CHEST_CARROT: F++,
            TOMATO_MINI: F++,
            DRIED_TOMATO_MINI: F++,
            INV_TOMATO_SEED: F++,
            CRAFT_TOMATO_SEED: F++,
            CHEST_TOMATO_SEED: F++,
            TOMATO_SEED_MOB: F++,
            PLANT_TOMATO_DRIED: F++,
            DRIED_TOMATO: F++,
            INV_TOMATO: F++,
            INV_WATERMELON_SEED: F++,
            CRAFT_WATERMELON_SEED: F++,
            CHEST_WATERMELON_SEED: F++,
            WATERMELON_SEED_MOB: F++,
            PLANT_WATERMELON_DRIED: F++,
            DRIED_WATERMELON: F++,
            INV_WATERMELON: F++,
            CHEST_WATERMELON: F++,
            CHEST_TOMATO: F++,
            INV_PITCHFORK: F++,
            CHEST_PITCHFORK: F++,
            CRAFT_PITCHFORK: F++,
            INV_PITCHFORK2: F++,
            CHEST_PITCHFORK2: F++,
            CRAFT_PITCHFORK2: F++,
            INV_ALOE_VERA_SEED: F++,
            CRAFT_ALOE_VERA_SEED: F++,
            CHEST_ALOE_VERA_SEED: F++,
            ALOE_VERA_SEED_MOB: F++,
            PLANT_ALOE_VERA_DRIED: F++,
            DRIED_ALOE_VERA: F++,
            INV_ALOE_VERA: F++,
            CHEST_ALOE_VERA: F++,
            CACTUS: F++,
            CRAFT_WOOD_DOOR_SPIKE: F++,
            INV_WOOD_DOOR_SPIKE: F++,
            CHEST_WOOD_DOOR_SPIKE: F++,
            CRAFT_STONE_DOOR_SPIKE: F++,
            INV_STONE_DOOR_SPIKE: F++,
            CHEST_STONE_DOOR_SPIKE: F++,
            CRAFT_GOLD_DOOR_SPIKE: F++,
            INV_GOLD_DOOR_SPIKE: F++,
            CHEST_GOLD_DOOR_SPIKE: F++,
            CRAFT_DIAMOND_DOOR_SPIKE: F++,
            INV_DIAMOND_DOOR_SPIKE: F++,
            CHEST_DIAMOND_DOOR_SPIKE: F++,
            CRAFT_AMETHYST_DOOR_SPIKE: F++,
            INV_AMETHYST_DOOR_SPIKE: F++,
            CHEST_AMETHYST_DOOR_SPIKE: F++,
            CRAFT_REIDITE_DOOR_SPIKE: F++,
            INV_REIDITE_DOOR_SPIKE: F++,
            CHEST_REIDITE_DOOR_SPIKE: F++,
            CRAFT_REIDITE_DOOR: F++,
            INV_REIDITE_DOOR: F++,
            CHEST_REIDITE_DOOR: F++,
            CRAFT_REIDITE_SPIKE: F++,
            INV_REIDITE_SPIKE: F++,
            CHEST_REIDITE_SPIKE: F++,
            CRAFT_REIDITE_WALL: F++,
            INV_REIDITE_WALL: F++,
            CHEST_REIDITE_WALL: F++,
            INV_PICK_REIDITE: F++,
            CHEST_PICK_REIDITE: F++,
            CRAFT_PICK_REIDITE: F++,
            GOLDEN_HEN: F++,
            GOLDEN_CHICKEN: F++,
            HURT_GOLDEN_HEN: F++,
            HURT_GOLDEN_CHICKEN: F++,
            RIVER: F++,
            RIVER_DECO: F++,
            RIVER_WAVE: F++,
            CRAFT_BOAT: F++,
            INV_BOAT: F++,
            CHEST_BOAT: F++,
            CRAFT_SLED: F++,
            INV_SLED: F++,
            CHEST_SLED: F++,
            PENGUIN: F++,
            HURT_PENGUIN: F++,
            INV_PENGUIN_FEATHER: F++,
            CHEST_PENGUIN_FEATHER: F++,
            INV_HAWK_FEATHER: F++,
            CHEST_HAWK_FEATHER: F++,
            INV_VULTURE_FEATHER: F++,
            CHEST_VULTURE_FEATHER: F++,
            FOG: F++,
            BOAR: F++,
            BOAR_TAMED: F++,
            BOAR_ATTACK: F++,
            HURT_BOAR: F++,
            INV_SADDLE: F++,
            CHEST_SADDLE: F++,
            CRAFT_SADDLE: F++,
            INV_MOUNT_BOAR: F++,
            CHEST_MOUNT_BOAR: F++,
            CRAFT_MOUNT_BOAR: F++,
            MARKER: F++,
            CRAB_BOSS_ATTACK: F++,
            CRAB_BOSS: F++,
            CRAB_BOSS_TAMED: F++,
            HURT_CRAB_BOSS: F++,
            HURT_CRAB_BOSS_CLAW_LEFT: F++,
            HURT_CRAB_BOSS_CLAW_RIGHT: F++,
            CRAB_BOSS_CLAW_LEFT_ATTACK: F++,
            CRAB_BOSS_CLAW_LEFT: F++,
            CRAB_BOSS_CLAW_LEFT_TAMED: F++,
            CRAB_BOSS_CLAW_RIGHT_ATTACK: F++,
            CRAB_BOSS_CLAW_RIGHT: F++,
            CRAB_BOSS_CLAW_RIGHT_TAMED: F++,
            HEAL_CRAB_BOSS: F++,
            HEAL_CRAB_BOSS_CLAW_LEFT: F++,
            HEAL_CRAB_BOSS_CLAW_RIGHT: F++,
            BABY_DRAGON_ATTACK: F++,
            BABY_DRAGON: F++,
            BABY_DRAGON_TAMED: F++,
            BABY_DRAGON_WING_LEFT_ATTACK: F++,
            BABY_DRAGON_WING_LEFT: F++,
            BABY_DRAGON_WING_LEFT_TAMED: F++,
            BABY_DRAGON_WING_RIGHT_ATTACK: F++,
            BABY_DRAGON_WING_RIGHT: F++,
            BABY_DRAGON_WING_RIGHT_TAMED: F++,
            HURT_BABY_DRAGON: F++,
            HURT_BABY_DRAGON_WING_LEFT: F++,
            HURT_BABY_DRAGON_WING_RIGHT: F++,
            INV_BABY_DRAGON: F++,
            CHEST_BABY_DRAGON: F++,
            CRAFT_BABY_DRAGON: F++,
            BABY_LAVA_ATTACK: F++,
            BABY_LAVA: F++,
            BABY_LAVA_TAMED: F++,
            BABY_LAVA_WING_LEFT_ATTACK: F++,
            BABY_LAVA_WING_LEFT: F++,
            BABY_LAVA_WING_LEFT_TAMED: F++,
            BABY_LAVA_WING_RIGHT_ATTACK: F++,
            BABY_LAVA_WING_RIGHT: F++,
            BABY_LAVA_WING_RIGHT_TAMED: F++,
            HURT_BABY_LAVA: F++,
            HURT_BABY_LAVA_WING_LEFT: F++,
            HURT_BABY_LAVA_WING_RIGHT: F++,
            INV_BABY_LAVA: F++,
            CHEST_BABY_LAVA: F++,
            CRAFT_BABY_LAVA: F++,
            HAWK_ATTACK: F++,
            HAWK: F++,
            HAWK_TAMED: F++,
            HAWK_WING_LEFT_ATTACK: F++,
            HAWK_WING_LEFT: F++,
            HAWK_WING_LEFT_TAMED: F++,
            HAWK_WING_RIGHT_ATTACK: F++,
            HAWK_WING_RIGHT: F++,
            HAWK_WING_RIGHT_TAMED: F++,
            HURT_HAWK: F++,
            HURT_HAWK_WING_LEFT: F++,
            HURT_HAWK_WING_RIGHT: F++,
            INV_HAWK: F++,
            CHEST_HAWK: F++,
            CRAFT_HAWK: F++,
            HAWK_GROUND: F++,
            HAWK_GROUND_ATTACK: F++,
            HURT_HAWK_GROUND: F++,
            CRAFT_PLANE: F++,
            INV_PLANE: F++,
            CHEST_PLANE: F++,
            VULTURE_ATTACK: F++,
            VULTURE: F++,
            VULTURE_TAMED: F++,
            VULTURE_WING_LEFT_ATTACK: F++,
            VULTURE_WING_LEFT: F++,
            VULTURE_WING_LEFT_TAMED: F++,
            VULTURE_WING_RIGHT_ATTACK: F++,
            VULTURE_WING_RIGHT: F++,
            VULTURE_WING_RIGHT_TAMED: F++,
            HURT_VULTURE: F++,
            HURT_VULTURE_WING_LEFT: F++,
            HURT_VULTURE_WING_RIGHT: F++,
            INV_VULTURE: F++,
            CHEST_VULTURE: F++,
            CRAFT_VULTURE: F++,
            VULTURE_GROUND: F++,
            VULTURE_GROUND_ATTACK: F++,
            HURT_VULTURE_GROUND: F++,
            INV_TURBAN1: F++,
            CRAFT_TURBAN1: F++,
            CHEST_TURBAN1: F++,
            INV_TURBAN2: F++,
            CRAFT_TURBAN2: F++,
            CHEST_TURBAN2: F++,
            SCORPION: F++,
            HURT_SCORPION: F++,
            SCORPION_HAND_LEFT: F++,
            SCORPION_HAND_RIGHT: F++,
            HURT_SCORPION_HAND_LEFT: F++,
            HURT_SCORPION_HAND_RIGHT: F++,
            SAND_WORM_GROUND: ["#E9CF96", "#144940"],
            HURT_SAND_WORM0: F++,
            SAND_WORM1: F++,
            HURT_SAND_WORM1: F++,
            SAND_WORM2: F++,
            HURT_SAND_WORM2: F++,
            INV_CACTUS: F++,
            CHEST_CACTUS: F++,
            INV_EMERALD: F++,
            CHEST_EMERALD: F++,
            INV_PITCHFORK_PART: F++,
            CHEST_PITCHFORK_PART: F++,
            INV_PILOT_GLASSES: F++,
            CHEST_PILOT_GLASSES: F++,
            INV_FUR_BOAR: F++,
            CHEST_FUR_BOAR: F++,
            INV_FIREFLY: F++,
            CHEST_FIREFLY: F++,
            INV_WOOD_ARROW: F++,
            CHEST_WOOD_ARROW: F++,
            CRAFT_WOOD_ARROW: F++,
            INV_STONE_ARROW: F++,
            CHEST_STONE_ARROW: F++,
            CRAFT_STONE_ARROW: F++,
            INV_GOLD_ARROW: F++,
            CHEST_GOLD_ARROW: F++,
            CRAFT_GOLD_ARROW: F++,
            INV_DIAMOND_ARROW: F++,
            CHEST_DIAMOND_ARROW: F++,
            CRAFT_DIAMOND_ARROW: F++,
            INV_AMETHYST_ARROW: F++,
            CHEST_AMETHYST_ARROW: F++,
            CRAFT_AMETHYST_ARROW: F++,
            INV_REIDITE_ARROW: F++,
            CHEST_REIDITE_ARROW: F++,
            CRAFT_REIDITE_ARROW: F++,
            INV_DRAGON_ARROW: F++,
            CHEST_DRAGON_ARROW: F++,
            CRAFT_DRAGON_ARROW: F++,
            INV_SANDWORM_JUICE: F++,
            CHEST_SANDWORM_JUICE: F++,
            INV_CRAB_BOSS: F++,
            CHEST_CRAB_BOSS: F++,
            CRAFT_CRAB_BOSS: F++,
            EMERALD_MACHINE_GROUND: F++,
            EMERALD_MACHINE_HOLE: F++,
            EMERALD_MACHINE_ROTATE: F++,
            INV_EMERALD_MACHINE: F++,
            CRAFT_EMERALD_MACHINE: F++,
            CHEST_EMERALD_MACHINE: F++,
            EXTRACTOR_MACHINE0_STONE: F++,
            INV_EXTRACTOR_MACHINE_STONE: F++,
            CRAFT_EXTRACTOR_MACHINE_STONE: F++,
            CHEST_EXTRACTOR_MACHINE_STONE: F++,
            EXTRACTOR_MACHINE0_GOLD: F++,
            INV_EXTRACTOR_MACHINE_GOLD: F++,
            CRAFT_EXTRACTOR_MACHINE_GOLD: F++,
            CHEST_EXTRACTOR_MACHINE_GOLD: F++,
            EXTRACTOR_MACHINE0_DIAMOND: F++,
            INV_EXTRACTOR_MACHINE_DIAMOND: F++,
            CRAFT_EXTRACTOR_MACHINE_DIAMOND: F++,
            CHEST_EXTRACTOR_MACHINE_DIAMOND: F++,
            EXTRACTOR_MACHINE0_AMETHYST: F++,
            INV_EXTRACTOR_MACHINE_AMETHYST: F++,
            CRAFT_EXTRACTOR_MACHINE_AMETHYST: F++,
            CHEST_EXTRACTOR_MACHINE_AMETHYST: F++,
            EXTRACTOR_MACHINE0_REIDITE: F++,
            INV_EXTRACTOR_MACHINE_REIDITE: F++,
            CRAFT_EXTRACTOR_MACHINE_REIDITE: F++,
            CHEST_EXTRACTOR_MACHINE_REIDITE: F++,
            MAMMOTH: F++,
            HURT_MAMMOTH: F++,
            BABY_MAMMOTH: F++,
            BABY_MAMMOTH_TAMED: F++,
            BABY_MAMMOTH_ATTACK: F++,
            HURT_BABY_MAMMOTH: F++,
            INV_BABY_MAMMOTH: F++,
            CHEST_BABY_MAMMOTH: F++,
            CRAFT_BABY_MAMMOTH: F++,
            INV_FLOWER_HAT: F++,
            CRAFT_FLOWER_HAT: F++,
            CHEST_FLOWER_HAT: F++,
            INV_FUR_HAT: F++,
            CRAFT_FUR_HAT: F++,
            CHEST_FUR_HAT: F++,
            INV_FUR_MAMMOTH: F++,
            CHEST_FUR_MAMMOTH: F++,
            CRAFT_WOOD_TOWER: F++,
            INV_WOOD_TOWER: F++,
            CHEST_WOOD_TOWER: F++,
            CRAFT_WOOD_SHIELD: F++,
            INV_WOOD_SHIELD: F++,
            CHEST_WOOD_SHIELD: F++,
            CRAFT_STONE_SHIELD: F++,
            INV_STONE_SHIELD: F++,
            CHEST_STONE_SHIELD: F++,
            CRAFT_GOLD_SHIELD: F++,
            INV_GOLD_SHIELD: F++,
            CHEST_GOLD_SHIELD: F++,
            CRAFT_DIAMOND_SHIELD: F++,
            INV_DIAMOND_SHIELD: F++,
            CHEST_DIAMOND_SHIELD: F++,
            CRAFT_AMETHYST_SHIELD: F++,
            INV_AMETHYST_SHIELD: F++,
            CHEST_AMETHYST_SHIELD: F++,
            CRAFT_REIDITE_SHIELD: F++,
            INV_REIDITE_SHIELD: F++,
            CHEST_REIDITE_SHIELD: F++
        },
        J = (F = 0, {
            FIRE: F++,
            BIG_FIRE: F++,
            FURNACE: F++,
            WORKBENCH: F++,
            PICK_WOOD: F++,
            PICK: F++,
            PICK_GOLD: F++,
            PICK_DIAMOND: F++,
            PICK_AMETHYST: F++,
            PICK_REIDITE: F++,
            HAMMER: F++,
            HAMMER_GOLD: F++,
            HAMMER_DIAMOND: F++,
            HAMMER_AMETHYST: F++,
            HAMMER_REIDITE: F++,
            SUPER_HAMMER: F++,
            SHOVEL: F++,
            SHOVEL_GOLD: F++,
            SHOVEL_DIAMOND: F++,
            SHOVEL_AMETHYST: F++,
            WATERING_CAN: F++,
            WATERING_CAN_FULL: F++,
            PITCHFORK: F++,
            PITCHFORK2: F++,
            BOOK: F++,
            WOOD_SPEAR: F++,
            SPEAR: F++,
            GOLD_SPEAR: F++,
            DIAMOND_SPEAR: F++,
            AMETHYST_SPEAR: F++,
            REIDITE_SPEAR: F++,
            DRAGON_SPEAR: F++,
            LAVA_SPEAR: F++,
            CRAB_SPEAR: F++,
            SWORD_WOOD: F++,
            SWORD: F++,
            SWORD_GOLD: F++,
            SWORD_DIAMOND: F++,
            SWORD_AMETHYST: F++,
            REIDITE_SWORD: F++,
            SEED: F++,
            WHEAT_SEED: F++,
            PUMPKIN_SEED: F++,
            GARLIC_SEED: F++,
            THORNBUSH_SEED: F++,
            CARROT_SEED: F++,
            TOMATO_SEED: F++,
            WATERMELON_SEED: F++,
            ALOE_VERA_SEED: F++,
            COOKED_MEAT: F++,
            FOODFISH_COOKED: F++,
            BREAD: F++,
            COOKIE: F++,
            CAKE: F++,
            BANDAGE: F++,
            WALL: F++,
            STONE_WALL: F++,
            GOLD_WALL: F++,
            DIAMOND_WALL: F++,
            AMETHYST_WALL: F++,
            REIDITE_WALL: F++,
            WOOD_DOOR: F++,
            STONE_DOOR: F++,
            GOLD_DOOR: F++,
            DIAMOND_DOOR: F++,
            AMETHYST_DOOR: F++,
            REIDITE_DOOR: F++,
            SPIKE: F++,
            STONE_SPIKE: F++,
            GOLD_SPIKE: F++,
            DIAMOND_SPIKE: F++,
            AMETHYST_SPIKE: F++,
            REIDITE_SPIKE: F++,
            WOOD_DOOR_SPIKE: F++,
            STONE_DOOR_SPIKE: F++,
            GOLD_DOOR_SPIKE: F++,
            DIAMOND_DOOR_SPIKE: F++,
            AMETHYST_DOOR_SPIKE: F++,
            REIDITE_DOOR_SPIKE: F++,
            CHEST: F++,
            EXPLORER_HAT: F++,
            PIRATE_HAT: F++,
            PILOT_HELMET: F++,
            EARMUFFS: F++,
            COAT: F++,
            CAP_SCARF: F++,
            FUR_HAT: F++,
            WOOD_HELMET: F++,
            STONE_HELMET: F++,
            GOLD_HELMET: F++,
            DIAMOND_HELMET: F++,
            AMETHYST_HELMET: F++,
            REIDITE_HELMET: F++,
            DIVING_MASK: F++,
            SUPER_DIVING_SUIT: F++,
            DIAMOND_PROTECTION: F++,
            AMETHYST_PROTECTION: F++,
            REIDITE_PROTECTION: F++,
            TURBAN1: F++,
            TURBAN2: F++,
            BAG: F++,
            PAPER: F++,
            BLUE_CORD: F++,
            LOCK: F++,
            LOCKPICK: F++,
            TOTEM: F++,
            BRIDGE: F++,
            ROOF: F++,
            WOOD_TOWER: F++,
            PLOT: F++,
            BOTTLE_EMPTY: F++,
            BOTTLE_FULL: F++,
            BOTTLE_FULL_2: F++,
            BOTTLE_FULL_3: F++,
            WINDMILL: F++,
            RESURRECTION: F++,
            EMERALD_MACHINE: F++,
            EXTRACTOR_MACHINE_STONE: F++,
            EXTRACTOR_MACHINE_GOLD: F++,
            EXTRACTOR_MACHINE_DIAMOND: F++,
            EXTRACTOR_MACHINE_AMETHYST: F++,
            EXTRACTOR_MACHINE_REIDITE: F++,
            SPANNER: F++,
            MACHETE: F++,
            BREAD_OVEN: F++,
            SANDWICH: F++,
            DRAGON_HELMET: F++,
            LAVA_HELMET: F++,
            CROWN_CRAB: F++,
            DRAGON_SWORD: F++,
            LAVA_SWORD: F++,
            WOOD_BOW: F++,
            WOOD_ARROW: F++,
            STONE_BOW: F++,
            STONE_ARROW: F++,
            GOLD_BOW: F++,
            GOLD_ARROW: F++,
            DIAMOND_BOW: F++,
            DIAMOND_ARROW: F++,
            AMETHYST_BOW: F++,
            AMETHYST_ARROW: F++,
            REIDITE_BOW: F++,
            REIDITE_ARROW: F++,
            DRAGON_BOW: F++,
            DRAGON_ARROW: F++,
            WOOD_SHIELD: F++,
            STONE_SHIELD: F++,
            GOLD_SHIELD: F++,
            DIAMOND_SHIELD: F++,
            AMETHYST_SHIELD: F++,
            REIDITE_SHIELD: F++,
            CROWN_GREEN: F++,
            CROWN_ORANGE: F++,
            CROWN_BLUE: F++,
            HOOD: F++,
            PEASANT: F++,
            WINTER_HOOD: F++,
            WINTER_PEASANT: F++,
            BUCKET_FULL: F++,
            BUCKET_EMPTY: F++,
            WELL: F++,
            SIGN: F++,
            BED: F++,
            BOAT: F++,
            SLED: F++,
            SADDLE: F++,
            PLANE: F++,
            WITCH: F++,
            WAND1: F++,
            WAND2: F++,
            NIMBUS: F++
        }),
        X = (F = 0, {
            SWORD: F++,
            PICK: F++,
            FUR: F++,
            PICK_GOLD: F++,
            PICK_DIAMOND: F++,
            SWORD_GOLD: F++,
            SWORD_DIAMOND: F++,
            HAND: F++,
            PICK_WOOD: F++,
            PIRATE_SWORD: F++,
            EARMUFFS: F++,
            COAT: F++,
            WOOD_SPEAR: F++,
            SPEAR: F++,
            GOLD_SPEAR: F++,
            DIAMOND_SPEAR: F++,
            DRAGON_SPEAR: F++,
            LAVA_SPEAR: F++,
            CRAB_SPEAR: F++,
            REIDITE_SWORD: F++,
            DIAMOND_PROTECTION: F++,
            AMETHYST_PROTECTION: F++,
            REIDITE_PROTECTION: F++,
            EXPLORER_HAT: F++,
            PIRATE_HAT: F++,
            STONE_HELMET: F++,
            GOLD_HELMET: F++,
            DIAMOND_HELMET: F++,
            BOOK: F++,
            BAG: F++,
            SWORD_AMETHYST: F++,
            PICK_AMETHYST: F++,
            PICK_REIDITE: F++,
            AMETHYST_SPEAR: F++,
            REIDITE_SPEAR: F++,
            HAMMER: F++,
            HAMMER_GOLD: F++,
            HAMMER_DIAMOND: F++,
            HAMMER_AMETHYST: F++,
            HAMMER_REIDITE: F++,
            CAP_SCARF: F++,
            CHRISTMAS_HAT: F++,
            ELF_HAT: F++,
            AMETHYST_HELMET: F++,
            REIDITE_HELMET: F++,
            SUPER_HAMMER: F++,
            SHOVEL: F++,
            SUPER_DIVING_SUIT: F++,
            DIVING_MASK: F++,
            WATERING_CAN_FULL: F++,
            SHOVEL_GOLD: F++,
            SHOVEL_DIAMOND: F++,
            SHOVEL_AMETHYST: F++,
            PITCHFORK: F++,
            PITCHFORK2: F++,
            SPANNER: F++,
            MACHETE: F++,
            SWORD_WOOD: F++,
            WOOD_HELMET: F++,
            DRAGON_HELMET: F++,
            LAVA_HELMET: F++,
            CROWN_CRAB: F++,
            DRAGON_SWORD: F++,
            LAVA_SWORD: F++,
            WOOD_BOW: F++,
            STONE_BOW: F++,
            GOLD_BOW: F++,
            DIAMOND_BOW: F++,
            AMETHYST_BOW: F++,
            REIDITE_BOW: F++,
            DRAGON_BOW: F++,
            WOOD_SHIELD: F++,
            STONE_SHIELD: F++,
            GOLD_SHIELD: F++,
            DIAMOND_SHIELD: F++,
            AMETHYST_SHIELD: F++,
            REIDITE_SHIELD: F++,
            CROWN_GREEN: F++,
            CROWN_ORANGE: F++,
            CROWN_BLUE: F++,
            TURBAN1: F++,
            TURBAN2: F++,
            PILOT_HELMET: F++,
            HOOD: F++,
            PEASANT: F++,
            WINTER_HOOD: F++,
            WINTER_PEASANT: F++,
            FLOWER_HAT: F++,
            FUR_HAT: F++,
            SADDLE: F++,
            WITCH: F++,
            NIMBUS: F++,
            WAND1: F++,
            WAND2: F++,
            FIREFLY: F++,
            WOOD_ARROW: F++,
            STONE_ARROW: F++,
            GOLD_ARROW: F++,
            DIAMOND_ARROW: F++,
            AMETHYST_ARROW: F++,
            REIDITE_ARROW: F++,
            DRAGON_ARROW: F++,
            STONE: F++,
            WOOD: F++,
            PLANT: F++,
            GOLD: F++,
            DIAMOND: F++,
            FIRE: F++,
            WORKBENCH: F++,
            SEED: F++,
            MEAT: F++,
            COOKED_MEAT: F++,
            BIG_FIRE: F++,
            FURNACE: F++,
            PAPER: F++,
            AMETHYST: F++,
            AMETHYST_WALL: F++,
            AMETHYST_SPIKE: F++,
            AMETHYST_DOOR: F++,
            BRIDGE: F++,
            SAND: F++,
            BOTTLE_FULL: F++,
            BOTTLE_EMPTY: F++,
            KRAKEN_SKIN: F++,
            WATERING_CAN: F++,
            FLOUR: F++,
            WHEAT_SEED: F++,
            COOKIE: F++,
            WILD_WHEAT: F++,
            WINDMILL: F++,
            CAKE: F++,
            FOODFISH: F++,
            FOODFISH_COOKED: F++,
            SCALES: F++,
            GROUND: F++,
            PLOT: F++,
            ICE: F++,
            BREAD: F++,
            BREAD_OVEN: F++,
            SANDWICH: F++,
            FUR_WINTER: F++,
            BLUE_CORD: F++,
            LOCK: F++,
            DRAGON_HEART: F++,
            LAVA_HEART: F++,
            RESURRECTION: F++,
            EMERALD_MACHINE: F++,
            EXTRACTOR_MACHINE_STONE: F++,
            EXTRACTOR_MACHINE_GOLD: F++,
            EXTRACTOR_MACHINE_DIAMOND: F++,
            EXTRACTOR_MACHINE_AMETHYST: F++,
            EXTRACTOR_MACHINE_REIDITE: F++,
            LOCKPICK: F++,
            TOTEM: F++,
            SPIKE: F++,
            CORD: F++,
            WALL: F++,
            STONE_WALL: F++,
            GOLD_WALL: F++,
            DIAMOND_WALL: F++,
            WOOD_DOOR: F++,
            CHEST: F++,
            STONE_SPIKE: F++,
            GOLD_SPIKE: F++,
            DIAMOND_SPIKE: F++,
            STONE_DOOR: F++,
            GOLD_DOOR: F++,
            DIAMOND_DOOR: F++,
            FUR_WOLF: F++,
            GEMME_GREEN: F++,
            GEMME_ORANGE: F++,
            GEMME_BLUE: F++,
            SPECIAL_FUR: F++,
            SPECIAL_FUR_2: F++,
            BUCKET_FULL: F++,
            BUCKET_EMPTY: F++,
            WELL: F++,
            SIGN: F++,
            DRAGON_CUBE: F++,
            DRAGON_ORB: F++,
            LAVA_CUBE: F++,
            LAVA_ORB: F++,
            PUMPKIN_SEED: F++,
            PUMPKIN: F++,
            ROOF: F++,
            GARLIC_SEED: F++,
            GARLIC: F++,
            THORNBUSH_SEED: F++,
            THORNBUSH: F++,
            BANDAGE: F++,
            CRAB_STICK: F++,
            CRAB_LOOT: F++,
            BED: F++,
            SUGAR_CAN: F++,
            CANDY: F++,
            GARLAND: F++,
            REIDITE: F++,
            FLAME: F++,
            CARROT_SEED: F++,
            CARROT: F++,
            TOMATO_SEED: F++,
            TOMATO: F++,
            WATERMELON_SEED: F++,
            WATERMELON: F++,
            ALOE_VERA_SEED: F++,
            ALOE_VERA: F++,
            WOOD_DOOR_SPIKE: F++,
            STONE_DOOR_SPIKE: F++,
            GOLD_DOOR_SPIKE: F++,
            DIAMOND_DOOR_SPIKE: F++,
            AMETHYST_DOOR_SPIKE: F++,
            REIDITE_WALL: F++,
            REIDITE_DOOR: F++,
            REIDITE_SPIKE: F++,
            REIDITE_DOOR_SPIKE: F++,
            WOOD_TOWER: F++,
            PENGUIN_FEATHER: F++,
            BOAT: F++,
            SLED: F++,
            MOUNT_BOAR: F++,
            CRAB_BOSS: F++,
            BABY_DRAGON: F++,
            BABY_LAVA: F++,
            HAWK: F++,
            PLANE: F++,
            HAWK_FEATHER: F++,
            VULTURE_FEATHER: F++,
            CACTUS: F++,
            EMERALD: F++,
            PITCHFORK_PART: F++,
            PILOT_GLASSES: F++,
            FUR_BOAR: F++,
            SANDWORM_JUICE: F++,
            BABY_MAMMOTH: F++,
            FUR_MAMMOTH: F++
        }),
        q = 0,
        Z = 1,
        Q = 2,
        ee = 3,
        ie = 4,
        te = 5,
        re = [];
    re[X.WOOD] = {
        name: "Wood",
        img: k.INV_WOOD,
        grid: 0,
        recycle: 0
    }, re[X.STONE] = {
        name: "Stone",
        img: k.INV_STONE,
        grid: 0,
        recycle: 0
    }, re[X.GOLD] = {
        name: "Gold",
        img: k.INV_GOLD,
        grid: 0,
        recycle: 0
    }, re[X.DIAMOND] = {
        name: "Diamond",
        img: k.INV_DIAMOND,
        grid: 0,
        recycle: 0
    }, re[X.AMETHYST] = {
        name: "Amethyst",
        img: k.INV_AMETHYST,
        grid: 0,
        recycle: 0
    }, re[X.FUR] = {
        name: "Rabbit fur",
        img: k.INV_FUR,
        grid: 0,
        recycle: 0
    }, re[X.FUR_WOLF] = {
        name: "Wolf fur",
        img: k.INV_FUR_WOLF,
        grid: 0,
        recycle: 0
    }, re[X.FUR_BOAR] = {
        name: "Boar fur",
        img: k.INV_FUR_BOAR,
        grid: 0,
        recycle: 0
    }, re[X.FIREFLY] = {
        name: "Firefly",
        img: k.INV_FIREFLY,
        grid: 0,
        recycle: 0
    }, re[X.WOOD_ARROW] = {
        name: "Wood arrow",
        img: k.INV_WOOD_ARROW,
        grid: 0,
        recycle: 1
    }, re[X.STONE_ARROW] = {
        name: "Stone arrow",
        img: k.INV_STONE_ARROW,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_ARROW] = {
        name: "Gold arrow",
        img: k.INV_GOLD_ARROW,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_ARROW] = {
        name: "Diamond arrow",
        img: k.INV_DIAMOND_ARROW,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_ARROW] = {
        name: "Amethyst arrow",
        img: k.INV_AMETHYST_ARROW,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_ARROW] = {
        name: "Reidite arrow",
        img: k.INV_REIDITE_ARROW,
        grid: 0,
        recycle: 1
    }, re[X.DRAGON_ARROW] = {
        name: "Dragon arrow",
        img: k.INV_DRAGON_ARROW,
        grid: 0,
        recycle: 0
    }, re[X.FUR_WINTER] = {
        name: "Winter fur",
        img: k.INV_FUR_WINTER,
        grid: 0,
        recycle: 0
    }, re[X.FUR_MAMMOTH] = {
        name: "Fur mammoth",
        img: k.INV_FUR_MAMMOTH,
        grid: 0,
        recycle: 0
    }, re[X.CORD] = {
        name: "Web",
        img: k.INV_CORD,
        grid: 0,
        recycle: 0
    }, re[X.MEAT] = {
        name: "Meat",
        img: k.INV_MEAT,
        grid: 0,
        recycle: 0
    }, re[X.FOODFISH] = {
        name: "Fish",
        img: k.INV_FOODFISH,
        grid: 0,
        recycle: 0
    }, re[X.KRAKEN_SKIN] = {
        name: "Kraken skin",
        img: k.INV_KRAKEN_SKIN,
        grid: 0,
        recycle: 0
    }, re[X.SCALES] = {
        name: "Piranha scales",
        img: k.INV_SCALES,
        grid: 0,
        recycle: 0
    }, re[X.ICE] = {
        name: "Ice",
        img: k.INV_ICE,
        grid: 0,
        recycle: 0
    }, re[X.SAND] = {
        name: "Sand",
        img: k.INV_SAND,
        grid: 0,
        recycle: 0
    }, re[X.GROUND] = {
        name: "Dirt",
        img: k.INV_GROUND,
        grid: 0,
        recycle: 0
    }, re[X.PLANT] = {
        name: "Berrie",
        img: k.INV_PLANT,
        grid: 0,
        recycle: 0
    }, re[X.FLOUR] = {
        name: "Flour",
        img: k.INV_FLOUR,
        grid: 0,
        recycle: 0
    }, re[X.WILD_WHEAT] = {
        name: "Flour",
        img: k.INV_WILD_WHEAT,
        grid: 0,
        recycle: 0
    }, re[X.SPECIAL_FUR] = {
        name: "Special fur peasant",
        img: k.INV_SPECIAL_FUR,
        grid: 0,
        recycle: 0
    }, re[X.SPECIAL_FUR_2] = {
        name: "Special fur hood",
        img: k.INV_SPECIAL_FUR_2,
        grid: 0,
        recycle: 0
    }, re[X.PUMPKIN] = {
        name: "Pumpkin",
        img: k.INV_PUMPKIN,
        grid: 0,
        recycle: 0
    }, re[X.GARLIC] = {
        name: "Garlic",
        img: k.INV_GARLIC,
        grid: 0,
        recycle: 0
    }, re[X.THORNBUSH] = {
        name: "Thornbush",
        img: k.INV_THORNBUSH,
        grid: 0,
        recycle: 0
    }, re[X.CARROT] = {
        name: "Carrot",
        img: k.INV_CARROT,
        grid: 0,
        recycle: 0
    }, re[X.TOMATO] = {
        name: "Tomato",
        img: k.INV_TOMATO,
        grid: 0,
        recycle: 0
    }, re[X.WATERMELON] = {
        name: "Watermelon",
        img: k.INV_WATERMELON,
        grid: 0,
        recycle: 0
    }, re[X.ALOE_VERA] = {
        name: "Aloe Vera",
        img: k.INV_ALOE_VERA,
        grid: 0,
        recycle: 0
    }, re[X.PENGUIN_FEATHER] = {
        name: "Penguin Feather",
        img: k.INV_PENGUIN_FEATHER,
        grid: 0,
        recycle: 0
    }, re[X.HAWK_FEATHER] = {
        name: "Hawk Feather",
        img: k.INV_HAWK_FEATHER,
        grid: 0,
        recycle: 0
    }, re[X.VULTURE_FEATHER] = {
        name: "Vulture Feather",
        img: k.INV_VULTURE_FEATHER,
        grid: 0,
        recycle: 0
    }, re[X.CACTUS] = {
        name: "Cactus",
        img: k.INV_CACTUS,
        grid: 0,
        recycle: 0
    }, re[X.PILOT_GLASSES] = {
        name: "Cactus",
        img: k.INV_PILOT_GLASSES,
        grid: 0,
        recycle: 0
    }, re[X.PITCHFORK_PART] = {
        name: "Pitchfork Part",
        img: k.INV_PITCHFORK_PART,
        grid: 0,
        recycle: 0
    }, re[X.SANDWORM_JUICE] = {
        name: "Emerald Machine",
        img: k.INV_SANDWORM_JUICE,
        grid: 0,
        recycle: 0
    }, re[X.EMERALD] = {
        name: "Emerald",
        img: k.INV_EMERALD,
        grid: 0,
        recycle: 0
    }, re[X.CHRISTMAS_HAT] = {
        name: "Christmas Hat",
        img: k.INV_CHRISTMAS_HAT,
        recycle: 0
    }, re[X.ELF_HAT] = {
        name: "Elf Hat",
        img: k.INV_ELF_HAT,
        recycle: 0
    }, re[X.GARLAND] = {
        name: "Garland",
        img: k.INV_GARLAND,
        recycle: 0,
        grid: 0
    }, re[X.CANDY] = {
        name: "Candy",
        img: k.INV_CANDY,
        recycle: 0
    }, re[X.SUGAR_CAN] = {
        name: "Sugar Cane",
        img: k.INV_SUGAR_CAN,
        recycle: 0
    }, re[X.PIRATE_SWORD] = {
        name: "Pirate Sword",
        img: k.INV_PIRATE_SWORD,
        grid: 0,
        recycle: 0
    }, re[X.CRAB_STICK] = {
        name: "Crab Stick",
        img: k.INV_CRAB_STICK,
        grid: 0,
        recycle: 0
    }, re[X.REIDITE] = {
        name: "Reidite",
        img: k.INV_REIDITE,
        grid: 0,
        recycle: 0
    }, re[X.FLAME] = {
        name: "Flame",
        img: k.INV_FLAME,
        grid: 0,
        recycle: 0
    }, re[X.FIRE] = {
        name: "Campfire",
        img: k.CRAFT_FIRE,
        grid: 0,
        recycle: 1
    }, re[X.BED] = {
        name: "Bed",
        img: k.CRAFT_BED,
        grid: 0,
        recycle: 1
    }, re[X.WORKBENCH] = {
        name: "Workbench",
        img: k.CRAFT_WORK,
        grid: 0,
        recycle: 1
    }, re[X.SWORD] = {
        name: "Stone sword",
        img: k.CRAFT_SWORD,
        grid: 0,
        recycle: 1
    }, re[X.PICK] = {
        name: "Stone pick",
        img: k.CRAFT_PICK,
        grid: 0,
        recycle: 1
    }, re[X.SEED] = {
        name: "Berries bush",
        img: k.CRAFT_SEED,
        grid: 0,
        recycle: 0
    }, re[X.PICK_GOLD] = {
        name: "Gold pick",
        img: k.CRAFT_PICK_GOLD,
        grid: 0,
        recycle: 1
    }, re[X.PICK_DIAMOND] = {
        name: "Diamond pick",
        img: k.CRAFT_PICK_DIAMOND,
        grid: 0,
        recycle: 1
    }, re[X.SWORD_WOOD] = {
        name: "Wood sword",
        img: k.CRAFT_SWORD_WOOD,
        grid: 0,
        recycle: 1
    }, re[X.SWORD_GOLD] = {
        name: "Gold sword",
        img: k.CRAFT_SWORD_GOLD,
        grid: 0,
        recycle: 1
    }, re[X.SWORD_DIAMOND] = {
        name: "Diamond sword",
        img: k.CRAFT_SWORD_DIAMOND,
        grid: 0,
        recycle: 1
    }, re[X.PICK_WOOD] = {
        name: "Wood pick",
        img: k.CRAFT_PICK_WOOD,
        grid: 0,
        recycle: 1
    }, re[X.WALL] = {
        name: "Wood wall",
        img: k.CRAFT_WALL,
        grid: 0,
        recycle: 1
    }, re[X.SPIKE] = {
        name: "Wood spike",
        img: k.CRAFT_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.COOKED_MEAT] = {
        name: "Cooked meat",
        img: k.CRAFT_COOKED_MEAT,
        grid: 0,
        recycle: 0
    }, re[X.BIG_FIRE] = {
        name: "Big campfire",
        img: k.CRAFT_BIG_FIRE,
        grid: 0,
        recycle: 1
    }, re[X.BANDAGE] = {
        name: "Bandage",
        img: k.CRAFT_BANDAGE,
        grid: 0,
        recycle: 1
    }, re[X.STONE_WALL] = {
        name: "Stone wall",
        img: k.CRAFT_STONE_WALL,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_WALL] = {
        name: "Gold wall",
        img: k.CRAFT_GOLD_WALL,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_WALL] = {
        name: "Diamond wall",
        img: k.CRAFT_DIAMOND_WALL,
        grid: 0,
        recycle: 1
    }, re[X.WOOD_DOOR] = {
        name: "Wood door",
        img: k.CRAFT_DOOR_WOOD_CLOSE,
        grid: 0,
        recycle: 1
    }, re[X.CHEST] = {
        name: "Chest",
        img: k.CRAFT_CHEST,
        grid: 0,
        recycle: 1
    }, re[X.STONE_SPIKE] = {
        name: "Stone spike",
        img: k.CRAFT_STONE_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_SPIKE] = {
        name: "Gold spike",
        img: k.CRAFT_GOLD_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_SPIKE] = {
        name: "Diamond spike",
        img: k.CRAFT_DIAMOND_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.STONE_DOOR] = {
        name: "Stone door",
        img: k.CRAFT_DOOR_STONE_CLOSE,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_DOOR] = {
        name: "Gold door",
        img: k.CRAFT_DOOR_GOLD_CLOSE,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_DOOR] = {
        name: "Diamond door",
        img: k.CRAFT_DOOR_DIAMOND_CLOSE,
        grid: 0,
        recycle: 1
    }, re[X.EARMUFFS] = {
        name: "Chapka",
        img: k.CRAFT_EARMUFFS,
        grid: 0,
        recycle: 1
    }, re[X.COAT] = {
        name: "Big Chapka",
        img: k.CRAFT_COAT,
        grid: 0,
        recycle: 1
    }, re[X.WOOD_SPEAR] = {
        name: "Wood spear",
        img: k.CRAFT_WOOD_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.SPEAR] = {
        name: "Stone spear",
        img: k.CRAFT_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_SPEAR] = {
        name: "Gold spear",
        img: k.CRAFT_GOLD_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_SPEAR] = {
        name: "Diamond spear",
        img: k.CRAFT_DIAMOND_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.DRAGON_SPEAR] = {
        name: "Dragon spear",
        img: k.CRAFT_DRAGON_SPEAR,
        grid: 0,
        recycle: 0
    }, re[X.LAVA_SPEAR] = {
        name: "Dragon spear",
        img: k.CRAFT_LAVA_SPEAR,
        grid: 0,
        recycle: 0
    }, re[X.CRAB_SPEAR] = {
        name: "Crab spear",
        img: k.CRAFT_CRAB_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.CRAB_LOOT] = {
        name: "Crab loot",
        img: k.INV_CRAB_LOOT,
        grid: 0,
        recycle: 0
    }, re[X.FURNACE] = {
        name: "Furnace",
        img: k.CRAFT_FURNACE,
        grid: 0,
        recycle: 1
    }, re[X.EXPLORER_HAT] = {
        name: "Explorer hat",
        img: k.CRAFT_EXPLORER_HAT,
        grid: 0,
        recycle: 1
    }, re[X.PIRATE_HAT] = {
        name: "Pirate hat",
        img: k.CRAFT_PIRATE_HAT,
        grid: 0,
        recycle: 1
    }, re[X.FLOWER_HAT] = {
        name: "Flower hat",
        img: k.CRAFT_FLOWER_HAT,
        grid: 0,
        recycle: 1
    }, re[X.FUR_HAT] = {
        name: "Fur hat",
        img: k.CRAFT_FUR_HAT,
        grid: 0,
        recycle: 1
    }, re[X.WOOD_HELMET] = {
        name: "Wood helmet",
        img: k.CRAFT_WOOD_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.STONE_HELMET] = {
        name: "Stone helmet",
        img: k.CRAFT_STONE_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_HELMET] = {
        name: "Gold helmet",
        img: k.CRAFT_GOLD_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_HELMET] = {
        name: "Diamond helmet",
        img: k.CRAFT_DIAMOND_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.BOOK] = {
        name: "Book",
        img: k.CRAFT_BOOK,
        grid: 0,
        recycle: 1
    }, re[X.PAPER] = {
        name: "Paper",
        img: k.CRAFT_PAPER,
        grid: 0,
        recycle: 0
    }, re[X.BAG] = {
        name: "Bag",
        img: k.CRAFT_BAG,
        grid: 0,
        recycle: 1
    }, re[X.SWORD_AMETHYST] = {
        name: "Amethyst sword",
        img: k.CRAFT_SWORD_AMETHYST,
        grid: 0,
        recycle: 1
    }, re[X.PICK_AMETHYST] = {
        name: "Amethyst pick",
        img: k.CRAFT_PICK_AMETHYST,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_SPEAR] = {
        name: "Amethyst spear",
        img: k.CRAFT_AMETHYST_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.HAMMER] = {
        name: "Stone hammer",
        img: k.CRAFT_HAMMER,
        grid: 0,
        recycle: 1
    }, re[X.HAMMER_GOLD] = {
        name: "Gold hammer",
        img: k.CRAFT_HAMMER_GOLD,
        grid: 0,
        recycle: 1
    }, re[X.HAMMER_DIAMOND] = {
        name: "Diamond hammer",
        img: k.CRAFT_HAMMER_DIAMOND,
        grid: 0,
        recycle: 1
    }, re[X.HAMMER_AMETHYST] = {
        name: "Amethyst hammer",
        img: k.CRAFT_HAMMER_AMETHYST,
        grid: 0,
        recycle: 1
    }, re[X.HAMMER_REIDITE] = {
        name: "Reidite hammer",
        img: k.CRAFT_HAMMER_REIDITE,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_WALL] = {
        name: "Amethyst wall",
        img: k.CRAFT_AMETHYST_WALL,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_SPIKE] = {
        name: "Amethyst spike",
        img: k.CRAFT_AMETHYST_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_DOOR] = {
        name: "Amethyst door",
        img: k.CRAFT_DOOR_AMETHYST_CLOSE,
        grid: 0,
        recycle: 1
    }, re[X.CAP_SCARF] = {
        name: "Cap & scarf",
        img: k.CRAFT_CAP_SCARF,
        grid: 0,
        recycle: 1
    }, re[X.BLUE_CORD] = {
        name: "Blue cord",
        img: k.CRAFT_BLUE_CORD,
        grid: 0,
        recycle: 0
    }, re[X.LOCK] = {
        name: "Lock",
        img: k.CRAFT_LOCK,
        grid: 0,
        recycle: 1
    }, re[X.RESURRECTION] = {
        name: "Resurrection",
        img: k.CRAFT_RESURRECTION,
        grid: 0,
        recycle: 1
    }, re[X.LOCKPICK] = {
        name: "Lockpick",
        img: k.CRAFT_LOCKPICK,
        grid: 0,
        recycle: 1
    }, re[X.TOTEM] = {
        name: "Totem",
        img: k.CRAFT_TOTEM,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_HELMET] = {
        name: "Amethyst helmet",
        img: k.CRAFT_AMETHYST_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.SUPER_HAMMER] = {
        name: "Super hammer",
        img: k.CRAFT_SUPER_HAMMER,
        grid: 0,
        recycle: 1
    }, re[X.BRIDGE] = {
        name: "Bridge",
        img: k.CRAFT_BRIDGE,
        grid: 1,
        recycle: 1
    }, re[X.WOOD_TOWER] = {
        name: "Wood Tower",
        img: k.CRAFT_WOOD_TOWER,
        grid: 1,
        recycle: 1
    }, re[X.BOTTLE_FULL] = {
        name: "Bottle full",
        img: k.CRAFT_BOTTLE_FULL,
        grid: 0,
        recycle: 0
    }, re[X.BOTTLE_EMPTY] = {
        name: "Bottle empty",
        img: k.CRAFT_BOTTLE_EMPTY,
        grid: 0,
        recycle: 0
    }, re[X.SHOVEL] = {
        name: "Stone shovel",
        img: k.CRAFT_SHOVEL,
        grid: 0,
        recycle: 1
    }, re[X.WATERING_CAN] = {
        name: "Watering can",
        img: k.CRAFT_WATERING_CAN,
        grid: 0,
        recycle: 0
    }, re[X.WHEAT_SEED] = {
        name: "Wheat",
        img: k.CRAFT_WHEAT_SEED,
        grid: 0,
        recycle: 0
    }, re[X.COOKIE] = {
        name: "Cookie",
        img: k.CRAFT_COOKIE,
        grid: 0,
        recycle: 0
    }, re[X.WINDMILL] = {
        name: "Windmill",
        img: k.CRAFT_WINDMILL,
        grid: 0,
        recycle: 1
    }, re[X.SUPER_DIVING_SUIT] = {
        name: "Super diving suit",
        img: k.CRAFT_SUPER_DIVING_SUIT,
        grid: 0,
        recycle: 1
    }, re[X.DIVING_MASK] = {
        name: "Diving mask",
        img: k.CRAFT_DIVING_MASK,
        grid: 0,
        recycle: 1
    }, re[X.WATERING_CAN_FULL] = {
        name: "Watering can full",
        img: k.CRAFT_WATERING_CAN_FULL,
        grid: 0,
        recycle: 0
    }, re[X.CAKE] = {
        name: "Cake",
        img: k.CRAFT_CAKE,
        grid: 0,
        recycle: 0
    }, re[X.FOODFISH_COOKED] = {
        name: "Foodfish cooked",
        img: k.CRAFT_FOODFISH_COOKED,
        grid: 0,
        recycle: 0
    }, re[X.PLOT] = {
        name: "Plot",
        img: k.CRAFT_PLOT,
        grid: 1,
        recycle: 1
    }, re[X.BREAD] = {
        name: "Bread",
        img: k.CRAFT_BREAD,
        grid: 0,
        recycle: 0
    }, re[X.BOTTLE_FULL_2] = {
        name: "Bottle full (with ice)",
        img: k.CRAFT_BOTTLE_FULL_2,
        grid: 0,
        recycle: 1
    }, re[X.BOTTLE_FULL_3] = {
        name: "Bottle full (with well)",
        img: k.CRAFT_BOTTLE_FULL_3,
        grid: 0,
        recycle: 1
    }, re[X.SHOVEL_GOLD] = {
        name: "Gold shovel",
        img: k.CRAFT_SHOVEL_GOLD,
        grid: 0,
        recycle: 1
    }, re[X.SHOVEL_DIAMOND] = {
        name: "Diamond shovel",
        img: k.CRAFT_SHOVEL_DIAMOND,
        grid: 0,
        recycle: 1
    }, re[X.SHOVEL_AMETHYST] = {
        name: "Amethyst shovel",
        img: k.CRAFT_SHOVEL_AMETHYST,
        grid: 0,
        recycle: 1
    }, re[X.SPANNER] = {
        name: "Spanner",
        img: k.CRAFT_SPANNER,
        grid: 0,
        recycle: 1
    }, re[X.MACHETE] = {
        name: "Machete",
        img: k.CRAFT_MACHETE,
        grid: 0,
        recycle: 1
    }, re[X.BREAD_OVEN] = {
        name: "Bread oven",
        img: k.CRAFT_BREAD_OVEN,
        grid: 0,
        recycle: 1
    }, re[X.SANDWICH] = {
        name: "Sandwich",
        img: k.CRAFT_SANDWICH,
        grid: 0,
        recycle: 0
    }, re[X.DRAGON_HELMET] = {
        name: "Dragon helmet",
        img: k.CRAFT_DRAGON_HELMET,
        grid: 0,
        recycle: 0
    }, re[X.LAVA_HELMET] = {
        name: "Dragon helmet",
        img: k.CRAFT_LAVA_HELMET,
        grid: 0,
        recycle: 0
    }, re[X.WITCH] = {
        name: "Witch",
        img: k.CRAFT_WITCH,
        grid: 0,
        recycle: 0
    }, re[X.NIMBUS] = {
        name: "Nimbus",
        img: k.CRAFT_NIMBUS,
        grid: 0,
        recycle: 0
    }, re[X.WAND1] = {
        name: "Wand1",
        img: k.CRAFT_WAND1,
        grid: 0,
        recycle: 0
    }, re[X.WAND2] = {
        name: "Wand2",
        img: k.CRAFT_WAND2,
        grid: 0,
        recycle: 0
    }, re[X.DRAGON_SWORD] = {
        name: "Dragon sword",
        img: k.CRAFT_DRAGON_SWORD,
        grid: 0,
        recycle: 0
    }, re[X.LAVA_SWORD] = {
        name: "Dragon sword",
        img: k.CRAFT_LAVA_SWORD,
        grid: 0,
        recycle: 0
    }, re[X.WOOD_SHIELD] = {
        name: "Wood shield",
        img: k.CRAFT_WOOD_SHIELD,
        grid: 0,
        recycle: 1
    }, re[X.STONE_SHIELD] = {
        name: "Stone shield",
        img: k.CRAFT_STONE_SHIELD,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_SHIELD] = {
        name: "Gold shield",
        img: k.CRAFT_GOLD_SHIELD,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_SHIELD] = {
        name: "Diamond shield",
        img: k.CRAFT_DIAMOND_SHIELD,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_SHIELD] = {
        name: "Amethyst shield",
        img: k.CRAFT_AMETHYST_SHIELD,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_SHIELD] = {
        name: "Reidite shield",
        img: k.CRAFT_REIDITE_SHIELD,
        grid: 0,
        recycle: 1
    }, re[X.WOOD_BOW] = {
        name: "Wood bow",
        img: k.CRAFT_WOOD_BOW,
        grid: 0,
        recycle: 1
    }, re[X.STONE_BOW] = {
        name: "Stone bow",
        img: k.CRAFT_STONE_BOW,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_BOW] = {
        name: "Gold bow",
        img: k.CRAFT_GOLD_BOW,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_BOW] = {
        name: "Diamond bow",
        img: k.CRAFT_DIAMOND_BOW,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_BOW] = {
        name: "Amethyst bow",
        img: k.CRAFT_AMETHYST_BOW,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_BOW] = {
        name: "Reidite bow",
        img: k.CRAFT_REIDITE_BOW,
        grid: 0,
        recycle: 1
    }, re[X.DRAGON_BOW] = {
        name: "Dragon bow",
        img: k.CRAFT_DRAGON_BOW,
        grid: 0,
        recycle: 0
    }, re[X.CROWN_GREEN] = {
        name: "Crown of life",
        img: k.CRAFT_CROWN_GREEN,
        grid: 0,
        recycle: 0
    }, re[X.GEMME_GREEN] = {
        name: "Gem of life",
        img: k.INV_GEMME_GREEN,
        grid: 0,
        recycle: 0
    }, re[X.DRAGON_ORB] = {
        name: "Orb of the dragon",
        img: k.INV_DRAGON_ORB,
        grid: 0,
        recycle: 0
    }, re[X.LAVA_ORB] = {
        name: "Orb of the dragon",
        img: k.INV_LAVA_ORB,
        grid: 0,
        recycle: 0
    }, re[X.DRAGON_CUBE] = {
        name: "Cube of the dragon",
        img: k.INV_DRAGON_CUBE,
        grid: 0,
        recycle: 0
    }, re[X.LAVA_CUBE] = {
        name: "Cube of the dragon",
        img: k.INV_LAVA_CUBE,
        grid: 0,
        recycle: 0
    }, re[X.CROWN_ORANGE] = {
        name: "Crown of luck",
        img: k.CRAFT_CROWN_ORANGE,
        grid: 0,
        recycle: 0
    }, re[X.GEMME_ORANGE] = {
        name: "Gem of luck",
        img: k.INV_GEMME_ORANGE,
        grid: 0,
        recycle: 0
    }, re[X.CROWN_BLUE] = {
        name: "Crown of the angel",
        img: k.CRAFT_CROWN_BLUE,
        grid: 0,
        recycle: 0
    }, re[X.GEMME_BLUE] = {
        name: "Gem of the angel",
        img: k.INV_GEMME_BLUE,
        grid: 0,
        recycle: 0
    }, re[X.DRAGON_HEART] = {
        name: "Dragon heart",
        img: k.INV_DRAGON_HEART,
        grid: 0,
        recycle: 0
    }, re[X.LAVA_HEART] = {
        name: "Lava heart",
        img: k.INV_LAVA_HEART,
        grid: 0,
        recycle: 0
    }, re[X.HOOD] = {
        name: "Hood",
        img: k.CRAFT_HOOD,
        grid: 0,
        recycle: 1
    }, re[X.PEASANT] = {
        name: "Peasant",
        img: k.CRAFT_PEASANT,
        grid: 0,
        recycle: 1
    }, re[X.WINTER_PEASANT] = {
        name: "Winter peasant",
        img: k.CRAFT_WINTER_PEASANT,
        grid: 0,
        recycle: 0
    }, re[X.WINTER_HOOD] = {
        name: "Winter hood",
        img: k.CRAFT_WINTER_HOOD,
        grid: 0,
        recycle: 0
    }, re[X.BUCKET_FULL] = {
        name: "Bucket full",
        img: k.CRAFT_BUCKET_FULL,
        grid: 0,
        recycle: 0
    }, re[X.BUCKET_EMPTY] = {
        name: "Bucket empty",
        img: k.CRAFT_BUCKET_EMPTY,
        grid: 0,
        recycle: 1
    }, re[X.WELL] = {
        name: "Well",
        img: k.CRAFT_WELL,
        grid: 0,
        recycle: 1
    }, re[X.SIGN] = {
        name: "Sign",
        img: k.CRAFT_SIGN,
        grid: 0,
        recycle: 1
    }, re[X.PUMPKIN_SEED] = {
        name: "Pumpkin Seed",
        img: k.CRAFT_PUMPKIN_SEED,
        grid: 0,
        recycle: 0
    }, re[X.GARLIC_SEED] = {
        name: "Garlic Seed",
        img: k.CRAFT_GARLIC_SEED,
        grid: 0,
        recycle: 0
    }, re[X.THORNBUSH_SEED] = {
        name: "Thorbushes Seed",
        img: k.CRAFT_THORNBUSH_SEED,
        grid: 0,
        recycle: 0
    }, re[X.ROOF] = {
        name: "Roof",
        img: k.CRAFT_ROOF,
        grid: 1,
        recycle: 1
    }, re[X.CROWN_CRAB] = {
        name: "Crab Crown",
        img: k.CRAFT_CROWN_CRAB,
        grid: 0,
        recycle: 1
    }, re[X.CARROT_SEED] = {
        name: "Carrot Seed",
        img: k.CRAFT_CARROT_SEED,
        grid: 0,
        recycle: 0
    }, re[X.TOMATO_SEED] = {
        name: "Tomato Seed",
        img: k.CRAFT_TOMATO_SEED,
        grid: 0,
        recycle: 0
    }, re[X.WATERMELON_SEED] = {
        name: "Watermelon Seed",
        img: k.CRAFT_WATERMELON_SEED,
        grid: 0,
        recycle: 0
    }, re[X.ALOE_VERA_SEED] = {
        name: "Aloe Vera Seed",
        img: k.CRAFT_ALOE_VERA_SEED,
        grid: 0,
        recycle: 0
    }, re[X.TURBAN1] = {
        name: "Cap",
        img: k.CRAFT_TURBAN1,
        grid: 0,
        recycle: 1
    }, re[X.TURBAN2] = {
        name: "Turban",
        img: k.CRAFT_TURBAN2,
        grid: 0,
        recycle: 1
    }, re[X.PILOT_HELMET] = {
        name: "Pilot Helmet",
        img: k.CRAFT_PILOT_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.EMERALD_MACHINE] = {
        name: "Emerald Machine",
        img: k.CRAFT_EMERALD_MACHINE,
        grid: 0,
        recycle: 0
    }, re[X.EXTRACTOR_MACHINE_STONE] = {
        name: "Emerald Machine",
        img: k.CRAFT_EXTRACTOR_MACHINE_STONE,
        grid: 0,
        recycle: 1
    }, re[X.EXTRACTOR_MACHINE_GOLD] = {
        name: "Emerald Machine",
        img: k.CRAFT_EXTRACTOR_MACHINE_GOLD,
        grid: 0,
        recycle: 1
    }, re[X.EXTRACTOR_MACHINE_DIAMOND] = {
        name: "Emerald Machine",
        img: k.CRAFT_EXTRACTOR_MACHINE_DIAMOND,
        grid: 0,
        recycle: 1
    }, re[X.EXTRACTOR_MACHINE_AMETHYST] = {
        name: "Emerald Machine",
        img: k.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
        grid: 0,
        recycle: 1
    }, re[X.EXTRACTOR_MACHINE_REIDITE] = {
        name: "Emerald Machine",
        img: k.CRAFT_EXTRACTOR_MACHINE_REIDITE,
        grid: 0,
        recycle: 1
    }, re[X.PITCHFORK] = {
        name: "Pitchfork",
        img: k.CRAFT_PITCHFORK,
        grid: 0,
        recycle: 1
    }, re[X.WOOD_DOOR_SPIKE] = {
        name: "Wood Door Spike",
        img: k.CRAFT_WOOD_DOOR_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.STONE_DOOR_SPIKE] = {
        name: "Stone Door Spike",
        img: k.CRAFT_STONE_DOOR_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.GOLD_DOOR_SPIKE] = {
        name: "Gold Door Spike",
        img: k.CRAFT_GOLD_DOOR_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_DOOR_SPIKE] = {
        name: "Diamond Door Spike",
        img: k.CRAFT_DIAMOND_DOOR_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_DOOR_SPIKE] = {
        name: "Amethyst Door Spike",
        img: k.CRAFT_AMETHYST_DOOR_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.DIAMOND_PROTECTION] = {
        name: "Diamond Fire Protection ",
        img: k.CRAFT_DIAMOND_PROTECTION,
        grid: 0,
        recycle: 1
    }, re[X.AMETHYST_PROTECTION] = {
        name: "Amethyst Fire Protection ",
        img: k.CRAFT_AMETHYST_PROTECTION,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_PROTECTION] = {
        name: "Amethyst Fire Protection ",
        img: k.CRAFT_REIDITE_PROTECTION,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_SWORD] = {
        name: "Reidite Sword",
        img: k.CRAFT_REIDITE_SWORD,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_SPEAR] = {
        name: "Reidite Spear",
        img: k.CRAFT_REIDITE_SPEAR,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_HELMET] = {
        name: "Reidite Helmet",
        img: k.CRAFT_REIDITE_HELMET,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_DOOR_SPIKE] = {
        name: "Reidite Door Spike",
        img: k.CRAFT_REIDITE_DOOR_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_DOOR] = {
        name: "Reidite Door",
        img: k.CRAFT_REIDITE_DOOR,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_SPIKE] = {
        name: "Reidite Spike",
        img: k.CRAFT_REIDITE_SPIKE,
        grid: 0,
        recycle: 1
    }, re[X.REIDITE_WALL] = {
        name: "Reidite Wall",
        img: k.CRAFT_REIDITE_WALL,
        grid: 0,
        recycle: 1
    }, re[X.PICK_REIDITE] = {
        name: "Reidite pick",
        img: k.CRAFT_PICK_REIDITE,
        grid: 0,
        recycle: 1
    }, re[X.BOAT] = {
        name: "Boat",
        img: k.CRAFT_BOAT,
        grid: 0,
        recycle: 1
    }, re[X.SLED] = {
        name: "Sled",
        img: k.CRAFT_SLED,
        grid: 0,
        recycle: 1
    }, re[X.SADDLE] = {
        name: "Saddle",
        img: k.CRAFT_SADDLE,
        grid: 0,
        recycle: 1
    }, re[X.MOUNT_BOAR] = {
        name: "Mount Boar",
        img: k.CRAFT_MOUNT_BOAR,
        grid: 0,
        recycle: 0
    }, re[X.CRAB_BOSS] = {
        name: "Mount King Crab",
        img: k.CRAFT_CRAB_BOSS,
        grid: 0,
        recycle: 0
    }, re[X.BABY_DRAGON] = {
        name: "Mount Baby Dragon",
        img: k.CRAFT_BABY_DRAGON,
        grid: 0,
        recycle: 0
    }, re[X.BABY_LAVA] = {
        name: "Mount Baby Lava",
        img: k.CRAFT_BABY_LAVA,
        grid: 0,
        recycle: 0
    }, re[X.HAWK] = {
        name: "Mount Hawk",
        img: k.CRAFT_HAWK,
        grid: 0,
        recycle: 0
    }, re[X.PLANE] = {
        name: "Plane",
        img: k.CRAFT_PLANE,
        grid: 0,
        recycle: 0
    }, re[X.PITCHFORK2] = {
        name: "Pitchfork 2",
        img: k.CRAFT_PITCHFORK2,
        grid: 0,
        recycle: 0
    }, re[X.BABY_MAMMOTH] = {
        name: "Baby Mammoth",
        img: k.CRAFT_BABY_MAMMOTH,
        grid: 0,
        recycle: 0
    };
    var ne = void 0,
        ae = [{
            r: [
                [X.WOOD, 25],
                [X.STONE, 5]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.FIRE,
            id2: X.FIRE,
            time: .2,
            t: ie
        }, {
            r: [
                [X.FIRE, 1],
                [X.WOOD, 35],
                [X.STONE, 10]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.BIG_FIRE,
            id2: X.BIG_FIRE,
            time: .2,
            t: ie
        }, {
            r: [
                [X.WOOD, 150],
                [X.STONE, 50],
                [X.GOLD, 15]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.FURNACE,
            id2: X.FURNACE,
            time: .05,
            t: ie
        }, {
            r: [
                [X.WOOD, 20],
                [X.STONE, 10]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.WORKBENCH,
            id2: X.WORKBENCH,
            time: 1 / 6,
            t: ie
        }, {
            r: [
                [X.WOOD, 10]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.PICK_WOOD,
            id2: X.PICK_WOOD,
            time: 1 / 3,
            t: q
        }, {
            r: [
                [X.PICK_WOOD, 1],
                [X.WOOD, 50],
                [X.STONE, 15]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PICK,
            id2: X.PICK,
            time: 1 / 8,
            t: q
        }, {
            r: [
                [X.WOOD, 40],
                [X.GOLD, 20],
                [X.STONE, 30],
                [X.PICK, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PICK_GOLD,
            id2: X.PICK_GOLD,
            time: 1 / 12,
            t: q
        }, {
            r: [
                [X.DIAMOND, 20],
                [X.GOLD, 50],
                [X.STONE, 80],
                [X.PICK_GOLD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PICK_DIAMOND,
            id2: X.PICK_DIAMOND,
            time: .05,
            t: q
        }, {
            r: [
                [X.DIAMOND, 40],
                [X.GOLD, 60],
                [X.AMETHYST, 30],
                [X.PICK_DIAMOND, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PICK_AMETHYST,
            id2: X.PICK_AMETHYST,
            time: 1 / 60,
            t: q
        }, {
            r: [
                [X.AMETHYST, 30],
                [X.DIAMOND, 40],
                [X.REIDITE, 30],
                [X.PICK_AMETHYST, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PICK_REIDITE,
            id2: X.PICK_REIDITE,
            time: 1 / 90,
            t: q
        }, {
            r: [
                [X.WOOD, 90],
                [X.STONE, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.HAMMER,
            id2: X.HAMMER,
            time: .1,
            t: q
        }, {
            r: [
                [X.WOOD, 160],
                [X.STONE, 120],
                [X.GOLD, 80],
                [X.HAMMER, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.HAMMER_GOLD,
            id2: X.HAMMER_GOLD,
            time: 1 / 15,
            t: q
        }, {
            r: [
                [X.DIAMOND, 80],
                [X.STONE, 200],
                [X.GOLD, 150],
                [X.HAMMER_GOLD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.HAMMER_DIAMOND,
            id2: X.HAMMER_DIAMOND,
            time: .05,
            t: q
        }, {
            r: [
                [X.DIAMOND, 160],
                [X.AMETHYST, 60],
                [X.GOLD, 250],
                [X.HAMMER_DIAMOND, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.HAMMER_AMETHYST,
            id2: X.HAMMER_AMETHYST,
            time: 1 / 60,
            t: q
        }, {
            r: [
                [X.AMETHYST, 160],
                [X.REIDITE, 60],
                [X.DIAMOND, 250],
                [X.HAMMER_AMETHYST, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.HAMMER_REIDITE,
            id2: X.HAMMER_REIDITE,
            time: 1 / 90,
            t: q
        }, {
            r: [
                [X.HAMMER_REIDITE, 1],
                [X.BOTTLE_FULL, 1],
                [X.KRAKEN_SKIN, 1],
                [X.SCALES, 10],
                [X.AMETHYST, 20]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.SUPER_HAMMER,
            id2: X.SUPER_HAMMER,
            time: 1 / 120,
            t: q
        }, {
            r: [
                [X.WOOD, 30],
                [X.STONE, 15]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SHOVEL,
            id2: X.SHOVEL,
            time: .2,
            t: q
        }, {
            r: [
                [X.SHOVEL, 1],
                [X.GOLD, 20],
                [X.STONE, 30],
                [X.WOOD, 40]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SHOVEL_GOLD,
            id2: X.SHOVEL_GOLD,
            time: .1,
            t: q
        }, {
            r: [
                [X.SHOVEL_GOLD, 1],
                [X.DIAMOND, 20],
                [X.GOLD, 50],
                [X.STONE, 80]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SHOVEL_DIAMOND,
            id2: X.SHOVEL_DIAMOND,
            time: .05,
            t: q
        }, {
            r: [
                [X.SHOVEL_DIAMOND, 1],
                [X.GOLD, 60],
                [X.AMETHYST, 30],
                [X.DIAMOND, 40]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SHOVEL_AMETHYST,
            id2: X.SHOVEL_AMETHYST,
            time: 1 / 40,
            t: q
        }, {
            r: [
                [X.WOOD, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WATERING_CAN,
            id2: X.WATERING_CAN,
            time: .2,
            t: q
        }, {
            r: [
                [X.WATERING_CAN, 1]
            ],
            w: 0,
            f: 0,
            o: 1,
            e: 0,
            id: J.WATERING_CAN_FULL,
            id2: X.WATERING_CAN_FULL,
            time: .2,
            t: q
        }, {
            r: [
                [X.WOOD, 100],
                [X.STONE, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PITCHFORK,
            id2: X.PITCHFORK,
            time: .1,
            t: q
        }, {
            r: [
                [X.PITCHFORK, 1],
                [X.PITCHFORK_PART, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PITCHFORK2,
            id2: X.PITCHFORK2,
            time: 1 / 60,
            t: q
        }, {
            r: [
                [X.PAPER, 4],
                [X.CORD, 4],
                [X.FUR_WOLF, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BOOK,
            id2: X.BOOK,
            time: 1 / 15,
            t: q
        }, {
            r: [
                [X.WOOD, 40]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_SPEAR,
            id2: X.WOOD_SPEAR,
            time: .2,
            t: Z
        }, {
            r: [
                [X.WOOD_SPEAR, 1],
                [X.WOOD, 60],
                [X.STONE, 10]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SPEAR,
            id2: X.SPEAR,
            time: .1,
            t: Z
        }, {
            r: [
                [X.WOOD, 80],
                [X.GOLD, 30],
                [X.STONE, 30],
                [X.SPEAR, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_SPEAR,
            id2: X.GOLD_SPEAR,
            t: Z,
            time: .05
        }, {
            r: [
                [X.WOOD, 200],
                [X.DIAMOND, 40],
                [X.GOLD, 60],
                [X.GOLD_SPEAR, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_SPEAR,
            id2: X.DIAMOND_SPEAR,
            time: 1 / 30,
            t: Z
        }, {
            r: [
                [X.AMETHYST, 40],
                [X.DIAMOND, 80],
                [X.GOLD, 90],
                [X.DIAMOND_SPEAR, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_SPEAR,
            id2: X.AMETHYST_SPEAR,
            time: 1 / 60,
            t: Z
        }, {
            r: [
                [X.REIDITE, 40],
                [X.AMETHYST, 80],
                [X.DIAMOND, 90],
                [X.AMETHYST_SPEAR, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_SPEAR,
            id2: X.REIDITE_SPEAR,
            time: 1 / 90,
            t: Z
        }, {
            r: [
                [X.BLUE_CORD, 20],
                [X.DRAGON_ORB, 1],
                [X.AMETHYST, 100],
                [X.DRAGON_HEART, 3]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.DRAGON_SPEAR,
            id2: X.DRAGON_SPEAR,
            time: 1 / 120,
            t: Z
        }, {
            r: [
                [X.DRAGON_SPEAR, 1],
                [X.LAVA_ORB, 1],
                [X.REIDITE, 100],
                [X.LAVA_HEART, 2]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.LAVA_SPEAR,
            id2: X.LAVA_SPEAR,
            time: .005,
            t: Z
        }, {
            r: [
                [X.WOOD_SPEAR, 1],
                [X.CRAB_LOOT, 5],
                [X.CORD, 6]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.CRAB_SPEAR,
            id2: X.CRAB_SPEAR,
            time: 1 / 30,
            t: Z
        }, {
            r: [
                [X.WOOD, 30]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.SWORD_WOOD,
            id2: X.SWORD_WOOD,
            time: .2,
            t: Z
        }, {
            r: [
                [X.WOOD, 50],
                [X.STONE, 25],
                [X.SWORD_WOOD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SWORD,
            id2: X.SWORD,
            time: .1,
            t: Z
        }, {
            r: [
                [X.WOOD, 60],
                [X.GOLD, 40],
                [X.STONE, 50],
                [X.SWORD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SWORD_GOLD,
            id2: X.SWORD_GOLD,
            time: .05,
            t: Z
        }, {
            r: [
                [X.DIAMOND, 40],
                [X.GOLD, 60],
                [X.STONE, 80],
                [X.SWORD_GOLD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SWORD_DIAMOND,
            id2: X.SWORD_DIAMOND,
            time: 1 / 30,
            t: Z
        }, {
            r: [
                [X.DIAMOND, 60],
                [X.GOLD, 100],
                [X.AMETHYST, 40],
                [X.SWORD_DIAMOND, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SWORD_AMETHYST,
            id2: X.SWORD_AMETHYST,
            time: 1 / 60,
            t: Z
        }, {
            r: [
                [X.DIAMOND, 100],
                [X.AMETHYST, 80],
                [X.REIDITE, 40],
                [X.SWORD_AMETHYST, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_SWORD,
            id2: X.REIDITE_SWORD,
            time: 1 / 90,
            t: Z
        }, {
            r: [
                [X.PLANT, 3]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.SEED,
            id2: X.SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.WILD_WHEAT, 3]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.WHEAT_SEED,
            id2: X.WHEAT_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.PUMPKIN, 8]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.PUMPKIN_SEED,
            id2: X.PUMPKIN_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.GARLIC, 8]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.GARLIC_SEED,
            id2: X.GARLIC_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.THORNBUSH, 8]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.THORNBUSH_SEED,
            id2: X.THORNBUSH_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.CARROT, 8]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.CARROT_SEED,
            id2: X.CARROT_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.TOMATO, 8]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.TOMATO_SEED,
            id2: X.TOMATO_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.WATERMELON, 16]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.WATERMELON_SEED,
            id2: X.WATERMELON_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.ALOE_VERA, 16]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.ALOE_VERA_SEED,
            id2: X.ALOE_VERA_SEED,
            time: .2,
            t: ee
        }, {
            r: [
                [X.MEAT, 1]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.COOKED_MEAT,
            id2: X.COOKED_MEAT,
            time: .2,
            t: ee
        }, {
            r: [
                [X.FOODFISH, 1]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.FOODFISH_COOKED,
            id2: X.FOODFISH_COOKED,
            time: 1 / 3,
            t: ee
        }, {
            r: [
                [X.FLOUR, 3]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.BREAD,
            id2: X.BREAD,
            time: 1 / 3,
            t: ee
        }, {
            r: [
                [X.FLOUR, 3],
                [X.PLANT, 1]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.COOKIE,
            id2: X.COOKIE,
            time: 1 / 3,
            t: ee
        }, {
            r: [
                [X.FLOUR, 5],
                [X.PLANT, 2],
                [X.ICE, 2]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.CAKE,
            id2: X.CAKE,
            time: .2,
            t: ee
        }, {
            r: [
                [X.CORD, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BANDAGE,
            id2: X.BANDAGE,
            time: .2,
            t: ie
        }, {
            r: [
                [X.WOOD, 20]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WALL,
            id2: X.WALL,
            time: .2,
            t: te
        }, {
            r: [
                [X.WALL, 1],
                [X.STONE, 17]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_WALL,
            id2: X.STONE_WALL,
            time: .2,
            t: te
        }, {
            r: [
                [X.STONE_WALL, 1],
                [X.GOLD, 14]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_WALL,
            id2: X.GOLD_WALL,
            time: .2,
            t: te
        }, {
            r: [
                [X.GOLD_WALL, 1],
                [X.DIAMOND, 11]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_WALL,
            id2: X.DIAMOND_WALL,
            time: .2,
            t: te
        }, {
            r: [
                [X.DIAMOND_WALL, 1],
                [X.AMETHYST, 8]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_WALL,
            id2: X.AMETHYST_WALL,
            time: .2,
            t: te
        }, {
            r: [
                [X.AMETHYST_WALL, 1],
                [X.REIDITE, 5]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_WALL,
            id2: X.REIDITE_WALL,
            time: .2,
            t: te
        }, {
            r: [
                [X.WOOD, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_DOOR,
            id2: X.WOOD_DOOR,
            time: 1 / 8,
            t: te
        }, {
            r: [
                [X.WOOD_DOOR, 1],
                [X.STONE, 27]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_DOOR,
            id2: X.STONE_DOOR,
            time: 1 / 8,
            t: te
        }, {
            r: [
                [X.STONE_DOOR, 1],
                [X.GOLD, 24]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_DOOR,
            id2: X.GOLD_DOOR,
            time: 1 / 8,
            t: te
        }, {
            r: [
                [X.GOLD_DOOR, 1],
                [X.DIAMOND, 21]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_DOOR,
            id2: X.DIAMOND_DOOR,
            time: 1 / 8,
            t: te
        }, {
            r: [
                [X.DIAMOND_DOOR, 1],
                [X.AMETHYST, 18]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_DOOR,
            id2: X.AMETHYST_DOOR,
            time: 1 / 8,
            t: te
        }, {
            r: [
                [X.AMETHYST_DOOR, 1],
                [X.REIDITE, 15]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_DOOR,
            id2: X.REIDITE_DOOR,
            time: 1 / 8,
            t: te
        }, {
            r: [
                [X.WALL, 1],
                [X.WOOD, 40],
                [X.STONE, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SPIKE,
            id2: X.SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.STONE_WALL, 1],
                [X.STONE, 70]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_SPIKE,
            id2: X.STONE_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.GOLD_WALL, 1],
                [X.GOLD, 40],
                [X.STONE, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_SPIKE,
            id2: X.GOLD_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.DIAMOND_WALL, 1],
                [X.DIAMOND, 40],
                [X.STONE, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_SPIKE,
            id2: X.DIAMOND_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.AMETHYST_WALL, 1],
                [X.AMETHYST, 40],
                [X.STONE, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_SPIKE,
            id2: X.AMETHYST_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.REIDITE_WALL, 1],
                [X.REIDITE, 40],
                [X.GOLD, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_SPIKE,
            id2: X.REIDITE_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.WOOD_DOOR, 1],
                [X.WOOD, 80],
                [X.STONE, 60]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_DOOR_SPIKE,
            id2: X.WOOD_DOOR_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.STONE_DOOR, 1],
                [X.STONE, 140]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_DOOR_SPIKE,
            id2: X.STONE_DOOR_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.GOLD_DOOR, 1],
                [X.GOLD, 80],
                [X.STONE, 60]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_DOOR_SPIKE,
            id2: X.GOLD_DOOR_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.DIAMOND_DOOR, 1],
                [X.DIAMOND, 80],
                [X.STONE, 60]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_DOOR_SPIKE,
            id2: X.DIAMOND_DOOR_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.AMETHYST_DOOR, 1],
                [X.AMETHYST, 80],
                [X.STONE, 60]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_DOOR_SPIKE,
            id2: X.AMETHYST_DOOR_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.REIDITE_DOOR, 1],
                [X.REIDITE, 80],
                [X.GOLD, 60]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_DOOR_SPIKE,
            id2: X.REIDITE_DOOR_SPIKE,
            time: .05,
            t: te
        }, {
            r: [
                [X.WOOD, 25],
                [X.GOLD, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.CHEST,
            id2: X.CHEST,
            time: .2,
            t: ie
        }, {
            r: [
                [X.PAPER, 1],
                [X.FUR, 1],
                [X.CORD, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EXPLORER_HAT,
            id2: X.EXPLORER_HAT,
            time: .2,
            t: Q
        }, {
            r: [
                [X.PAPER, 5],
                [X.PENGUIN_FEATHER, 20],
                [X.BLUE_CORD, 5],
                [X.FUR, 5]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PIRATE_HAT,
            id2: X.PIRATE_HAT,
            time: 1 / 30,
            t: Q
        }, {
            r: [
                [X.PILOT_GLASSES, 1],
                [X.HAWK_FEATHER, 8],
                [X.VULTURE_FEATHER, 8],
                [X.PENGUIN_FEATHER, 8],
                [X.CORD, 6]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PILOT_HELMET,
            id2: X.PILOT_HELMET,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.FUR, 1],
                [X.CORD, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EARMUFFS,
            id2: X.EARMUFFS,
            time: .2,
            t: Q
        }, {
            r: [
                [X.EARMUFFS, 1],
                [X.FUR_WOLF, 5],
                [X.CORD, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.COAT,
            id2: X.COAT,
            time: 1 / 12,
            t: Q
        }, {
            r: [
                [X.COAT, 1],
                [X.FUR_WINTER, 5],
                [X.BLUE_CORD, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.CAP_SCARF,
            id2: X.CAP_SCARF,
            time: 1 / 30,
            t: Q
        }, {
            r: [
                [X.CAP_SCARF, 1],
                [X.FUR_WINTER, 5],
                [X.FUR_MAMMOTH, 10],
                [X.BLUE_CORD, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.FUR_HAT,
            id2: X.FUR_HAT,
            time: .02,
            t: Q
        }, {
            r: [
                [X.WOOD, 50]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_HELMET,
            id2: X.WOOD_HELMET,
            time: .2,
            t: Q
        }, {
            r: [
                [X.STONE, 75],
                [X.WOOD, 75],
                [X.WOOD_HELMET, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_HELMET,
            id2: X.STONE_HELMET,
            time: .1,
            t: Q
        }, {
            r: [
                [X.STONE, 90],
                [X.WOOD, 90],
                [X.GOLD, 90],
                [X.STONE_HELMET, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_HELMET,
            id2: X.GOLD_HELMET,
            time: .05,
            t: Q
        }, {
            r: [
                [X.STONE, 100],
                [X.GOLD, 100],
                [X.DIAMOND, 100],
                [X.GOLD_HELMET, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_HELMET,
            id2: X.DIAMOND_HELMET,
            time: 1 / 30,
            t: Q
        }, {
            r: [
                [X.AMETHYST, 80],
                [X.GOLD, 150],
                [X.DIAMOND, 120],
                [X.DIAMOND_HELMET, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_HELMET,
            id2: X.AMETHYST_HELMET,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.REIDITE, 80],
                [X.DIAMOND, 150],
                [X.AMETHYST, 120],
                [X.AMETHYST_HELMET, 1]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.REIDITE_HELMET,
            id2: X.REIDITE_HELMET,
            time: 1 / 90,
            t: Q
        }, {
            r: [
                [X.SCALES, 2],
                [X.DIAMOND, 40],
                [X.CORD, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIVING_MASK,
            id2: X.DIVING_MASK,
            time: .05,
            t: Q
        }, {
            r: [
                [X.DIVING_MASK, 1],
                [X.GOLD, 80],
                [X.KRAKEN_SKIN, 1],
                [X.AMETHYST, 20]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SUPER_DIVING_SUIT,
            id2: X.SUPER_DIVING_SUIT,
            time: 1 / 90,
            t: Q
        }, {
            r: [
                [X.FLAME, 5],
                [X.DIAMOND, 50],
                [X.BLUE_CORD, 5]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.DIAMOND_PROTECTION,
            id2: X.DIAMOND_PROTECTION,
            time: .05,
            t: Q
        }, {
            r: [
                [X.DIAMOND_PROTECTION, 1],
                [X.FLAME, 10],
                [X.AMETHYST, 50]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.AMETHYST_PROTECTION,
            id2: X.AMETHYST_PROTECTION,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.AMETHYST_PROTECTION, 1],
                [X.FLAME, 15],
                [X.AMETHYST, 50],
                [X.REIDITE, 50]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.REIDITE_PROTECTION,
            id2: X.REIDITE_PROTECTION,
            time: 1 / 90,
            t: Q
        }, {
            r: [
                [X.CORD, 4],
                [X.FUR_BOAR, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.TURBAN1,
            id2: X.TURBAN1,
            time: 1 / 15,
            t: Q
        }, {
            r: [
                [X.TURBAN1, 1],
                [X.CORD, 6],
                [X.FUR_BOAR, 4],
                [X.VULTURE_FEATHER, 12],
                [X.PENGUIN_FEATHER, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.TURBAN2,
            id2: X.TURBAN2,
            time: 1 / 150,
            t: Q
        }, {
            r: [
                [X.CORD, 6],
                [X.FUR_WOLF, 5]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BAG,
            id2: X.BAG,
            time: 1 / 15,
            t: Q
        }, {
            r: [
                [X.WOOD, 20]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.PAPER,
            id2: X.PAPER,
            time: 1 / 3,
            t: ie
        }, {
            r: [
                [X.DIAMOND, 1],
                [X.CORD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BLUE_CORD,
            id2: X.BLUE_CORD,
            time: 1 / 3,
            t: ie
        }, {
            r: [
                [X.GOLD, 10]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.LOCK,
            id2: X.LOCK,
            time: .2,
            t: ie
        }, {
            r: [
                [X.GOLD, 250]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.LOCKPICK,
            id2: X.LOCKPICK,
            time: 1 / 60,
            t: ie
        }, {
            r: [
                [X.WOOD, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.TOTEM,
            id2: X.TOTEM,
            time: .1,
            t: ie
        }, {
            r: [
                [X.WOOD, 15]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BRIDGE,
            id2: X.BRIDGE,
            time: .2,
            t: ie
        }, {
            r: [
                [X.WOOD, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.ROOF,
            id2: X.ROOF,
            time: .2,
            t: ie
        }, {
            r: [
                [X.WOOD, 120]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_TOWER,
            id2: X.WOOD_TOWER,
            time: 1 / 15,
            t: ie
        }, {
            r: [
                [X.WOOD, 20],
                [X.GROUND, 15]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PLOT,
            id2: X.PLOT,
            time: .2,
            t: ie
        }, {
            r: [
                [X.SAND, 25]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.BOTTLE_EMPTY,
            id2: X.BOTTLE_EMPTY,
            time: .2,
            t: ee
        }, {
            r: [
                [X.BOTTLE_EMPTY, 1]
            ],
            w: 0,
            f: 0,
            o: 1,
            e: 0,
            id: J.BOTTLE_FULL,
            id2: X.BOTTLE_FULL,
            time: .2,
            t: ee
        }, {
            r: [
                [X.ICE, 20],
                [X.BOTTLE_EMPTY, 1]
            ],
            w: 0,
            f: 1,
            o: 0,
            e: 0,
            id: J.BOTTLE_FULL_2,
            id2: X.BOTTLE_FULL,
            time: .1,
            t: ee
        }, {
            r: [
                [X.BOTTLE_EMPTY, 1]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 1,
            id: J.BOTTLE_FULL_3,
            id2: X.BOTTLE_FULL,
            time: 1 / 3,
            t: ee
        }, {
            r: [
                [X.WOOD, 60],
                [X.STONE, 20],
                [X.CORD, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WINDMILL,
            id2: X.WINDMILL,
            time: .1,
            t: ie
        }, {
            r: [
                [X.DIAMOND, 40],
                [X.STONE, 45]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.RESURRECTION,
            id2: X.RESURRECTION,
            time: .05,
            t: ie
        }, {
            r: [
                [X.RESURRECTION, 1],
                [X.EMERALD, 40],
                [X.SANDWORM_JUICE, 1]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.EMERALD_MACHINE,
            id2: X.EMERALD_MACHINE,
            time: .005,
            t: ie
        }, {
            r: [
                [X.WOOD, 50],
                [X.STONE, 100]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EXTRACTOR_MACHINE_STONE,
            id2: X.EXTRACTOR_MACHINE_STONE,
            time: 1 / 90,
            t: ie
        }, {
            r: [
                [X.STONE, 60],
                [X.GOLD, 120]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EXTRACTOR_MACHINE_GOLD,
            id2: X.EXTRACTOR_MACHINE_GOLD,
            time: 1 / 90,
            t: ie
        }, {
            r: [
                [X.GOLD, 70],
                [X.DIAMOND, 140]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EXTRACTOR_MACHINE_DIAMOND,
            id2: X.EXTRACTOR_MACHINE_DIAMOND,
            time: 1 / 90,
            t: ie
        }, {
            r: [
                [X.DIAMOND, 80],
                [X.AMETHYST, 160]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EXTRACTOR_MACHINE_AMETHYST,
            id2: X.EXTRACTOR_MACHINE_AMETHYST,
            time: 1 / 90,
            t: ie
        }, {
            r: [
                [X.AMETHYST, 90],
                [X.REIDITE, 180]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.EXTRACTOR_MACHINE_REIDITE,
            id2: X.EXTRACTOR_MACHINE_REIDITE,
            time: 1 / 90,
            t: ie
        }, {
            r: [
                [X.STONE, 70]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SPANNER,
            id2: X.SPANNER,
            time: .1,
            t: q
        }, {
            r: [
                [X.STONE, 70],
                [X.WOOD, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.MACHETE,
            id2: X.MACHETE,
            time: .1,
            t: q
        }, {
            r: [
                [X.WOOD, 40],
                [X.STONE, 40]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BREAD_OVEN,
            id2: X.BREAD_OVEN,
            time: .1,
            t: ie
        }, {
            r: [
                [X.BREAD, 1],
                [X.COOKED_MEAT, 1]
            ],
            w: 0,
            f: 0,
            o: 0,
            e: 0,
            id: J.SANDWICH,
            id2: X.SANDWICH,
            time: 1 / 3,
            t: ee
        }, {
            r: [
                [X.BLUE_CORD, 30],
                [X.DRAGON_CUBE, 1],
                [X.AMETHYST, 150],
                [X.DRAGON_HEART, 3]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.DRAGON_HELMET,
            id2: X.DRAGON_HELMET,
            time: 1 / 120,
            t: Q
        }, {
            r: [
                [X.DRAGON_HELMET, 1],
                [X.LAVA_CUBE, 1],
                [X.REIDITE, 150],
                [X.LAVA_HEART, 2]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.LAVA_HELMET,
            id2: X.LAVA_HELMET,
            time: 1 / 180,
            t: Q
        }, {
            r: [
                [X.GOLD_HELMET, 1],
                [X.CRAB_LOOT, 10],
                [X.CRAB_STICK, 10],
                [X.CORD, 10]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.CROWN_CRAB,
            id2: X.CROWN_CRAB,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.BLUE_CORD, 20],
                [X.DRAGON_ORB, 1],
                [X.AMETHYST, 150],
                [X.DRAGON_HEART, 3]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.DRAGON_SWORD,
            id2: X.DRAGON_SWORD,
            time: 1 / 120,
            t: Z
        }, {
            r: [
                [X.DRAGON_SWORD, 1],
                [X.LAVA_ORB, 1],
                [X.REIDITE, 150],
                [X.LAVA_HEART, 2]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.LAVA_SWORD,
            id2: X.LAVA_SWORD,
            time: 1 / 180,
            t: Z
        }, {
            r: [
                [X.WOOD, 100],
                [X.CORD, 4]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_BOW,
            id2: X.WOOD_BOW,
            time: .05,
            t: Z
        }, {
            r: [
                [X.WOOD, 30]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_ARROW,
            id2: X.WOOD_ARROW,
            time: .2,
            t: Z
        }, {
            r: [
                [X.STONE, 200],
                [X.CORD, 8],
                [X.PENGUIN_FEATHER, 4],
                [X.WOOD_BOW, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_BOW,
            id2: X.STONE_BOW,
            time: .04,
            t: Z
        }, {
            r: [
                [X.STONE, 20],
                [X.HAWK_FEATHER, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_ARROW,
            id2: X.STONE_ARROW,
            time: .2,
            t: Z
        }, {
            r: [
                [X.GOLD, 200],
                [X.CORD, 12],
                [X.HAWK_FEATHER, 4],
                [X.PENGUIN_FEATHER, 4],
                [X.STONE_BOW, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_BOW,
            id2: X.GOLD_BOW,
            time: 1 / 30,
            t: Z
        }, {
            r: [
                [X.GOLD, 20],
                [X.PENGUIN_FEATHER, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_ARROW,
            id2: X.GOLD_ARROW,
            time: .1,
            t: Z
        }, {
            r: [
                [X.DIAMOND, 200],
                [X.BLUE_CORD, 10],
                [X.HAWK_FEATHER, 8],
                [X.PENGUIN_FEATHER, 8],
                [X.GOLD_BOW, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_BOW,
            id2: X.DIAMOND_BOW,
            time: 1 / 35,
            t: Z
        }, {
            r: [
                [X.DIAMOND, 10],
                [X.PENGUIN_FEATHER, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_ARROW,
            id2: X.DIAMOND_ARROW,
            time: .1,
            t: Z
        }, {
            r: [
                [X.AMETHYST, 200],
                [X.BLUE_CORD, 10],
                [X.PENGUIN_FEATHER, 8],
                [X.VULTURE_FEATHER, 8],
                [X.DIAMOND_BOW, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_BOW,
            id2: X.AMETHYST_BOW,
            time: 1 / 40,
            t: Z
        }, {
            r: [
                [X.AMETHYST, 10],
                [X.VULTURE_FEATHER, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_ARROW,
            id2: X.AMETHYST_ARROW,
            time: 1 / 15,
            t: Z
        }, {
            r: [
                [X.REIDITE, 200],
                [X.BLUE_CORD, 10],
                [X.KRAKEN_SKIN, 1],
                [X.AMETHYST_BOW, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_BOW,
            id2: X.REIDITE_BOW,
            time: 1 / 45,
            t: Z
        }, {
            r: [
                [X.REIDITE, 10],
                [X.VULTURE_FEATHER, 1],
                [X.FLAME, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_ARROW,
            id2: X.REIDITE_ARROW,
            time: 1 / 15,
            t: Z
        }, {
            r: [
                [X.EMERALD, 200],
                [X.BLUE_CORD, 10],
                [X.DRAGON_ORB, 1],
                [X.REIDITE_BOW, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DRAGON_BOW,
            id2: X.DRAGON_BOW,
            time: .02,
            t: Z
        }, {
            r: [
                [X.EMERALD, 10],
                [X.SANDWORM_JUICE, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DRAGON_ARROW,
            id2: X.DRAGON_ARROW,
            time: .05,
            t: Z
        }, {
            r: [
                [X.WOOD, 100]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WOOD_SHIELD,
            id2: X.WOOD_SHIELD,
            time: .04,
            t: Z
        }, {
            r: [
                [X.WOOD_SHIELD, 1],
                [X.STONE, 100],
                [X.WOOD, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.STONE_SHIELD,
            id2: X.STONE_SHIELD,
            time: 1 / 40,
            t: Z
        }, {
            r: [
                [X.STONE_SHIELD, 1],
                [X.GOLD, 50],
                [X.STONE, 50],
                [X.WOOD, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.GOLD_SHIELD,
            id2: X.GOLD_SHIELD,
            time: .02,
            t: Z
        }, {
            r: [
                [X.GOLD_SHIELD, 1],
                [X.DIAMOND, 50],
                [X.GOLD, 50],
                [X.STONE, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.DIAMOND_SHIELD,
            id2: X.DIAMOND_SHIELD,
            time: 1 / 70,
            t: Z
        }, {
            r: [
                [X.DIAMOND_SHIELD, 1],
                [X.AMETHYST, 50],
                [X.DIAMOND, 50],
                [X.GOLD, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.AMETHYST_SHIELD,
            id2: X.AMETHYST_SHIELD,
            time: 1 / 90,
            t: Z
        }, {
            r: [
                [X.AMETHYST_SHIELD, 1],
                [X.REIDITE, 50],
                [X.AMETHYST, 50],
                [X.DIAMOND, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.REIDITE_SHIELD,
            id2: X.REIDITE_SHIELD,
            time: 1 / 120,
            t: Z
        }, {
            r: [
                [X.GEMME_GREEN, 1],
                [X.GOLD, 200]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.CROWN_GREEN,
            id2: X.CROWN_GREEN,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.GEMME_ORANGE, 1],
                [X.GOLD, 200]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.CROWN_ORANGE,
            id2: X.CROWN_ORANGE,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.GEMME_BLUE, 1],
                [X.GOLD, 200],
                [X.DRAGON_HEART, 1]
            ],
            w: 1,
            f: 1,
            o: 1,
            e: 0,
            id: J.CROWN_BLUE,
            id2: X.CROWN_BLUE,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.FUR_WOLF, 10],
                [X.FUR, 5],
                [X.CORD, 6]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.HOOD,
            id2: X.HOOD,
            time: .1,
            t: Q
        }, {
            r: [
                [X.FUR, 3],
                [X.CORD, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PEASANT,
            id2: X.PEASANT,
            time: .1,
            t: Q
        }, {
            r: [
                [X.HOOD, 1],
                [X.SPECIAL_FUR_2, 1],
                [X.FUR_WINTER, 15],
                [X.BLUE_CORD, 5],
                [X.PENGUIN_FEATHER, 8]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WINTER_HOOD,
            id2: X.WINTER_HOOD,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.PEASANT, 1],
                [X.SPECIAL_FUR, 1],
                [X.FUR_WINTER, 10],
                [X.BLUE_CORD, 5],
                [X.PENGUIN_FEATHER, 8]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.WINTER_PEASANT,
            id2: X.WINTER_PEASANT,
            time: 1 / 60,
            t: Q
        }, {
            r: [
                [X.BUCKET_EMPTY, 1]
            ],
            w: 0,
            f: 0,
            o: 1,
            e: 0,
            id: J.BUCKET_FULL,
            id2: X.BUCKET_FULL,
            time: .2,
            t: q
        }, {
            r: [
                [X.WOOD, 20],
                [X.CORD, 1]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BUCKET_EMPTY,
            id2: X.BUCKET_EMPTY,
            time: .2,
            t: q
        }, {
            r: [
                [X.STONE, 100],
                [X.GROUND, 30]
            ],
            w: 1,
            f: 1,
            o: 0,
            e: 0,
            id: J.WELL,
            id2: X.WELL,
            time: .1,
            t: ie
        }, {
            r: [
                [X.WOOD, 20]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SIGN,
            id2: X.SIGN,
            time: .2,
            t: ie
        }, {
            r: [
                [X.WOOD, 100],
                [X.STONE, 50],
                [X.FUR, 5],
                [X.FUR_WOLF, 5],
                [X.CORD, 6]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BED,
            id2: X.BED,
            time: .05,
            t: ie
        }, {
            r: [
                [X.WOOD, 250],
                [X.BLUE_CORD, 10],
                [X.FUR_WINTER, 2],
                [X.SCALES, 2]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.BOAT,
            id2: X.BOAT,
            time: .02,
            t: ie
        }, {
            r: [
                [X.WOOD, 250],
                [X.CORD, 10],
                [X.FUR_WINTER, 2],
                [X.PENGUIN_FEATHER, 8]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SLED,
            id2: X.SLED,
            time: .02,
            t: ie
        }, {
            r: [
                [X.CORD, 10],
                [X.FUR_WOLF, 6],
                [X.FUR, 4],
                [X.SAND, 50]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.SADDLE,
            id2: X.SADDLE,
            time: .05,
            t: ie
        }, {
            r: [
                [X.WOOD, 250],
                [X.CORD, 10],
                [X.PAPER, 10],
                [X.HAWK_FEATHER, 8]
            ],
            w: 1,
            f: 0,
            o: 0,
            e: 0,
            id: J.PLANE,
            id2: X.PLANE,
            time: .02,
            t: ie
        }];
    F = 300;
    TEXT = {
        YOU_CANNOT_JOIN: F++,
        KICKED: F++,
        KEY_ALREADY: F++,
        KEY_WRONG: F++,
        OLD_VERSION: F++,
        NO_MORE_RESOURCES: F++,
        SURVIVED_1DAY: F++,
        SURVIVED: F++,
        DAYS: F++,
        DEAD_SAD: F++,
        SPAM_ME: F++,
        SPAM_ME2: F++,
        EMPTY: F++,
        INV_FULL: F++,
        DEAD: F++,
        WRONG_TOOL: F++,
        JOIN_TEAM: F++,
        YOU_DEAD: F++,
        JOINED_TEAM: F++,
        TEAM_DESTROYED: F++,
        LEFT_TEAM: F++,
        LEFT_TEAM2: F++,
        TOKEN: F++,
        CHOOSE: F++,
        PLAYERS: F++,
        TOTAL_PLAYERS: F++,
        TOTAL_MODE: F++,
        COMMING_SOON: F++,
        BACK_TO_THE_GAME: F++,
        TWITTER: F++,
        FACEBOOK: F++,
        KIT_NEXT: F++,
        POINTS: F++,
        SCORE: F++,
        KILL: F++,
        DAYS_SURVIVED: F++,
        MODE_FREE: F++,
        MODE_GRID: F++,
        NEW_VERSION: F++,
        WRONG_PASSWORD: F++,
        TEMPEST_OFF: F++,
        TEMPEST_ON: F++,
        BLIZZARD_OFF: F++,
        BLIZZARD_ON: F++
    };
    for (var oe = function () {
            Ie[X.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"], Ie[X.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"], Ie[X.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"], Ie[X.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"], Ie[X.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"], Ie[X.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"], Ie[X.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"], Ie[X.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"], Ie[X.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"], Ie[X.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"], Ie[X.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"], Ie[X.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"], Ie[X.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"], Ie[X.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"], Ie[X.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"], Ie[X.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"], Ie[X.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"], Ie[X.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"], Ie[X.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"], Ie[X.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"], Ie[X.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"], Ie[X.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"], Ie[X.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"], Ie[X.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"], Ie[X.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"], Ie[X.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"], Ie[X.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"], Ie[X.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."], Ie[X.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"], Ie[X.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."], Ie[X.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"], Ie[X.EMERALD] = ["Emerald", "How many golden breads can you get from it?"], Ie[X.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."], Ie[X.TURBAN1] = ["Turban", "Useful to survive in the desert."], Ie[X.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"], Ie[X.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."], Ie[X.PILOT_GLASSES] = ["Pilot Glasses"], Ie[X.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."], Ie[X.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."], Ie[X.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"], Ie[X.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"], Ie[X.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"], Ie[X.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"], Ie[X.SADDLE] = ["Saddle", "Hit a boar with it to tame it."], Ie[X.WITCH] = ["Witch Hat", "You're a wizard Starvy!"], Ie[X.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."], Ie[X.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"], Ie[X.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"], Ie[X.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."], Ie[X.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"], Ie[X.SLED] = ["Sled", "You are faster with it in the snow"], Ie[X.BOAT] = ["Boat", "You are faster with it in the water"], Ie[X.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"], Ie[X.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"], Ie[X.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."], Ie[X.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."], Ie[X.CACTUS] = ["Cactus", "Food : 20", "Water : 10"], Ie[X.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"], Ie[X.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"], Ie[X.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"], Ie[X.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"], Ie[X.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"], Ie[X.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"], Ie[X.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"], Ie[X.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"], Ie[X.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"], Ie[X.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"], Ie[X.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"], Ie[X.GOLD_DOOR_SPIKE] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", "Durability: 400"], Ie[X.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"], Ie[X.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"], Ie[X.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"], Ie[X.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"], Ie[X.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"], Ie[X.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"], Ie[X.PITCHFORK] = ["Pitchfork", "Perfect for gathering"], Ie[X.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."], Ie[X.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."], Ie[X.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"], Ie[X.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"], Ie[X.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"], Ie[X.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"], Ie[X.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"], Ie[X.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"], Ie[X.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"], Ie[X.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"], Ie[X.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"], Ie[X.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."], Ie[X.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"], Ie[X.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"], Ie[X.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"], Ie[X.FLAME] = ["Flame", "It's hot!"], Ie[X.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"], Ie[X.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"], Ie[X.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"], Ie[X.REIDITE] = ["Reidite", "The ultimate ore"], Ie[X.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], ue[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."], ue[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."], ue[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."], ue[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."], ue[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'], ue[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'], ue[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."], ue[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."], ue[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."], ue[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."], ue[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."], ue[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"], ue[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"], ue[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."], ue[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'], ue[38] = ["You died crushed by an angry baby mammoth."], ue[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."], ue[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.", Ie[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.", Ie[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.", Ie[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.", Ie[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", Ie[TEXT.TWITTER] = " Share on Twitter", Ie[TEXT.FACEBOOK] = " Share on Facebook", Ie[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Kill", Ie[TEXT.DAYS_SURVIVED] = "Days survived", Ie[TEXT.MODE_FREE] = "Building method: Free. Press G to change", Ie[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", Ie[X.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"], Ie[X.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
            document.getElementById("quit_chronoquest").innerHTML = " QUIT", Ie[X.HAND] = ["Hand"], Ie[X.GROUND] = ["Dirt", "Dirty!"], Ie[X.SAND] = ["Sand", "I got it in my eyes!"], Ie[X.WOOD] = ["Wood", "You can't get enough of it!"], Ie[X.STONE] = ["Stone", "Also called a rock"], Ie[X.GOLD] = ["Gold", "Be generous, give it to others"], Ie[X.DIAMOND] = ["Diamond", "What will you make with it?"], Ie[X.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"], Ie[X.FLOUR] = ["Flour", "Used in cooking"], Ie[X.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"], Ie[X.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"], Ie[X.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"], Ie[X.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"], Ie[X.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"], Ie[X.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"], Ie[X.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"], Ie[X.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"], Ie[X.CANDY] = ["Candies", "Only for children!", "Food: 20"], Ie[X.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"], Ie[X.GARLAND] = ["Garland", "Perfect decoration for roofs"], Ie[X.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"], Ie[X.PLANT] = ["Berry", "Berry tasty!", "Food: 10"], Ie[X.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"], Ie[X.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"], Ie[X.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"], Ie[X.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"], Ie[X.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"], Ie[X.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"], Ie[X.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"], Ie[X.THORNBUSH] = ["Thorn bush", "It stings!"], Ie[X.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"], Ie[X.ICE] = ["Ice", "Useful for making cakes and water"], Ie[X.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"], Ie[X.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"], Ie[X.FUR] = ["Rabbit Fur", "That rabbit was so cute..."], Ie[X.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"], Ie[X.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"], Ie[X.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."], Ie[X.SCALES] = ["Scales", "It smells like fish!"], Ie[X.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"], Ie[X.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"], Ie[X.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"], Ie[X.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"], Ie[X.CORD] = ["Cord", "Used in crafting Hats and Bag"], Ie[X.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"], Ie[X.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"], Ie[X.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"], Ie[X.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"], Ie[X.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"], Ie[X.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"], Ie[X.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"], Ie[X.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"], Ie[X.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"], Ie[X.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"], Ie[X.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"], Ie[X.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"], Ie[X.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"], Ie[X.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"], Ie[X.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"], Ie[X.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"], Ie[X.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"], Ie[X.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"], Ie[X.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"], Ie[X.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"], Ie[X.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"], Ie[X.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"], Ie[X.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"], Ie[X.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"], Ie[X.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"], Ie[X.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"], Ie[X.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"], Ie[X.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"], Ie[X.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"], Ie[X.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"], Ie[X.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"], Ie[X.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"], Ie[X.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"], Ie[X.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"], Ie[X.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"], Ie[X.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"], Ie[X.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"], Ie[X.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"], Ie[X.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"], Ie[X.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"], Ie[X.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"], Ie[X.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"], Ie[X.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"], Ie[X.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"], Ie[X.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"], Ie[X.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"], Ie[X.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"], Ie[X.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"], Ie[X.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"], Ie[X.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"], Ie[X.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"], Ie[X.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"], Ie[X.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"], Ie[X.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"], Ie[X.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"], Ie[X.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"], Ie[X.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"], Ie[X.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"], Ie[X.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"], Ie[X.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"], Ie[X.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"], Ie[X.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"], Ie[X.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"], Ie[X.BAG] = ["Bag", "More space for your items!"], Ie[X.PAPER] = ["Paper", "Used in book-crafting"], Ie[X.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"], Ie[X.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"], Ie[X.LOCK] = ["Lock", "Allow you to lock your chest"], Ie[X.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"], Ie[X.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"], Ie[X.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"], Ie[X.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"], Ie[X.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"], Ie[X.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"], Ie[X.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"], Ie[X.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"], Ie[X.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"], Ie[X.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"], Ie[X.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"], Ie[X.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"], Ie[X.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"], Ie[X.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"], Ie[X.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"], Ie[X.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"], Ie[X.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"], Ie[X.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"], Ie[X.GOLD_DOOR] = ["Gold Door", 'Are you rebuilding the "el dorado?"', "Durability: 2000"], Ie[X.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"], Ie[X.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"], Ie[X.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"], Ie[X.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"], Ie[X.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"], Ie[X.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server", Ie[TEXT.KICKED] = "Kicked: ", Ie[TEXT.KEY_ALREADY] = "Your key is already used by someone else", Ie[TEXT.KEY_WRONG] = "Your key is wrong", Ie[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache", Ie[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated", Ie[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...", Ie[TEXT.NO_MORE_RESOURCES] = "There are no more new resources", Ie[TEXT.SURVIVED_1DAY] = "You survived 1 day", Ie[TEXT.SURVIVED] = "You survived ", Ie[TEXT.DAYS] = " days", Ie[TEXT.DEAD_SAD] = "You are dead ;-;", Ie[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!", Ie[TEXT.SPAM_ME2] = "Server is full! Spam the play button!", Ie[TEXT.EMPTY] = "Resource is empty", Ie[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)", Ie[TEXT.DEAD] = " is dead", Ie[TEXT.WRONG_TOOL] = "This is not the right tool", Ie[TEXT.JOIN_TEAM] = "You joined a team", Ie[TEXT.YOU_DEAD] = "You are dead", Ie[TEXT.JOINED_TEAM] = " joined the team", Ie[TEXT.TEAM_DESTROYED] = "Your team was destroyed", Ie[TEXT.LEFT_TEAM] = "You left the team", Ie[TEXT.LEFT_TEAM2] = " left the team", Ie[TEXT.TOKEN] = "Someone stole your token :>", Ie[TEXT.CHOOSE] = "Choose a server", Ie[TEXT.PLAYERS] = "players", Ie[TEXT.TOTAL_PLAYERS] = "total players", Ie[TEXT.TOTAL_MODE] = "players on this mode", Ie[TEXT.COMMING_SOON] = "Coming soon...", document.getElementById("nickname_input").placeholder = "Nickname", ue[0] = ["You were killed for no reason"], ue[1] = ["You starved to death, as the name of the game implies"], ue[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."], ue[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."], ue[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."], ue[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."], ue[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."], ue[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"], ue[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."], ue[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."], ue[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."], ue[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."], ue[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."], ue[13] = ["You died of thirst. Better drink your own piss."], ue[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."], ue[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."], ue[16] = ["EvelTeam does not plan that you can kill the kraken", "A kraken krak-ed your skull."], ue[17] = ["Your skin's falling apart, the sun killed you."], ue[18] = ["Garlic stored in your pockets boiled your brain."], ue[19] = ["As a vampire, don't stand near the garlic cloves."], ue[20] = ["You ate garlic as a vampire, what did you expect?"], ue[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
        }, se = function () {
            Ie[X.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", Ie[TEXT.TWITTER] = " Share on Twitter", Ie[TEXT.FACEBOOK] = " Share on Facebook", Ie[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Kill", Ie[TEXT.DAYS_SURVIVED] = "Days survived", Ie[TEXT.MODE_FREE] = "Building method: Free. Press G to change", Ie[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", Ie[X.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], Ie[X.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
            document.getElementById("quit_chronoquest").innerHTML = " QUIT", Ie[X.HAND] = ["Рука"], Ie[X.GROUND] = ["Земля", "Грязно!"], Ie[X.SAND] = ["Песок", "Он в моих глазах!"], Ie[X.WOOD] = ["Дерево", "Постоянно нужно больше!"], Ie[X.STONE] = ["Камень", "Твердый"], Ie[X.GOLD] = ["Золото", "Будьте щедры, давайте его другим"], Ie[X.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"], Ie[X.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"], Ie[X.FLOUR] = ["Мука", "Используется в готовке"], Ie[X.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"], Ie[X.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"], Ie[X.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"], Ie[X.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"], Ie[X.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"], Ie[X.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"], Ie[X.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"], Ie[X.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"], Ie[X.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"], Ie[X.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"], Ie[X.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"], Ie[X.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"], Ie[X.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"], Ie[X.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"], Ie[X.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"], Ie[X.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"], Ie[X.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"], Ie[X.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"], Ie[X.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"], Ie[X.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"], Ie[X.THORNBUSH] = ["Колючий Куст", "Это больно!"], Ie[X.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"], Ie[X.ICE] = ["Лёд", "Используется для изготовления тортов и воды"], Ie[X.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"], Ie[X.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"], Ie[X.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."], Ie[X.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"], Ie[X.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."], Ie[X.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."], Ie[X.SCALES] = ["Чешуя", "Она пахнет рыбой!"], Ie[X.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"], Ie[X.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"], Ie[X.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"], Ie[X.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"], Ie[X.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"], Ie[X.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"], Ie[X.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"], Ie[X.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"], Ie[X.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"], Ie[X.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"], Ie[X.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"], Ie[X.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"], Ie[X.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"], Ie[X.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"], Ie[X.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"], Ie[X.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"], Ie[X.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"], Ie[X.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"], Ie[X.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"], Ie[X.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"], Ie[X.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"], Ie[X.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"], Ie[X.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"], Ie[X.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"], Ie[X.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"], Ie[X.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"], Ie[X.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"], Ie[X.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"], Ie[X.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"], Ie[X.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"], Ie[X.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"], Ie[X.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"], Ie[X.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"], Ie[X.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"], Ie[X.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"], Ie[X.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"], Ie[X.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"], Ie[X.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"], Ie[X.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"], Ie[X.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"], Ie[X.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."], Ie[X.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."], Ie[X.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."], Ie[X.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."], Ie[X.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."], Ie[X.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."], Ie[X.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"], Ie[X.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."], Ie[X.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."], Ie[X.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."], Ie[X.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"], Ie[X.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"], Ie[X.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"], Ie[X.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"], Ie[X.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"], Ie[X.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"], Ie[X.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"], Ie[X.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"], Ie[X.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"], Ie[X.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"], Ie[X.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"], Ie[X.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"], Ie[X.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"], Ie[X.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"], Ie[X.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"], Ie[X.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"], Ie[X.BAG] = ["Рюкзак", "Больше места для ваших предметов!"], Ie[X.PAPER] = ["Бумага", "Используется при создании книги"], Ie[X.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"], Ie[X.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"], Ie[X.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"], Ie[X.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"], Ie[X.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"], Ie[X.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"], Ie[X.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"], Ie[X.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"], Ie[X.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"], Ie[X.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"], Ie[X.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"], Ie[X.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"], Ie[X.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"], Ie[X.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"], Ie[X.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"], Ie[X.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"], Ie[X.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"], Ie[X.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"], Ie[X.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"], Ie[X.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"], Ie[X.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"], Ie[X.GOLD_DOOR] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', "Прочность: 2000"], Ie[X.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"], Ie[X.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"], Ie[X.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"], Ie[X.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"], Ie[X.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"], Ie[X.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер", Ie[TEXT.KICKED] = "Выгнаны: ", Ie[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то", Ie[TEXT.KEY_WRONG] = "Ваш ключ неправильный", Ie[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш", Ie[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет", Ie[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день", Ie[TEXT.SURVIVED] = "Вы выжили ", Ie[TEXT.DAYS] = " дней", Ie[TEXT.DEAD_SAD] = "Вы умерли ;-;", Ie[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!", Ie[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!", Ie[TEXT.EMPTY] = "Ресурсы закончились", Ie[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)", Ie[TEXT.DEAD] = " умер", Ie[TEXT.WRONG_TOOL] = "Это не тот инструмент", Ie[TEXT.JOIN_TEAM] = "Вы вошли в команду", Ie[TEXT.YOU_DEAD] = "Вы умерли", Ie[TEXT.JOINED_TEAM] = " вошёл в команду", Ie[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена", Ie[TEXT.LEFT_TEAM] = "Вы покинули команду", Ie[TEXT.LEFT_TEAM2] = " покинул команду", Ie[TEXT.TOKEN] = "Кто-то использует ваш токен :>", Ie[TEXT.CHOOSE] = "Выберите сервер", Ie[TEXT.PLAYERS] = "игроков", Ie[TEXT.TOTAL_PLAYERS] = "игроков всего", Ie[TEXT.TOTAL_MODE] = "игроков в этом режиме", Ie[TEXT.COMMING_SOON] = "Скоро...", document.getElementById("nickname_input").placeholder = "Имя", ue[0] = ["Вы были убиты без причины"], ue[1] = ["Вы умерли от голода, как название игры подразумевает это"], ue[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."], ue[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."], ue[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."], ue[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."], ue[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."], ue[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"], ue[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."], ue[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."], ue[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."], ue[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."], ue[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."], ue[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."], ue[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."], ue[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."], ue[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."], ue[17] = ["Твоя кожа разваливается, солнце убило тебя"], ue[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."], ue[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."], ue[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"], ue[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
        }, _e = function () {
            Ie[X.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", Ie[TEXT.TWITTER] = " Share on Twitter", Ie[TEXT.FACEBOOK] = " Share on Facebook", Ie[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Kill", Ie[TEXT.DAYS_SURVIVED] = "Days survived", Ie[TEXT.MODE_FREE] = "Building method: Free. Press G to change", Ie[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", Ie[X.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], Ie[X.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
            document.getElementById("quit_chronoquest").innerHTML = " QUIT", Ie[X.HAND] = ["Mano"], Ie[X.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"], Ie[X.SAND] = ["Arena", "¡Tengo arena en mis ojos!"], Ie[X.WOOD] = ["Madera", "¡Nunca hay suficiente!"], Ie[X.STONE] = ["Piedra", "También llamada roca."], Ie[X.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"], Ie[X.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"], Ie[X.AMETHYST] = ["Amatista", "Es Mauve como Lapa"], Ie[X.FLOUR] = ["Harina", "Usada para cocinar."], Ie[X.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"], Ie[X.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"], Ie[X.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"], Ie[X.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"], Ie[X.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"], Ie[X.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"], Ie[X.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"], Ie[X.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"], Ie[X.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"], Ie[X.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"], Ie[X.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"], Ie[X.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"], Ie[X.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"], Ie[X.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"], Ie[X.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"], Ie[X.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"], Ie[X.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"], Ie[X.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"], Ie[X.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"], Ie[X.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"], Ie[X.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"], Ie[X.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"], Ie[X.ICE] = ["Hielo", "Bueno para hacer tartas y agua"], Ie[X.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"], Ie[X.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"], Ie[X.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."], Ie[X.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"], Ie[X.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"], Ie[X.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."], Ie[X.SCALES] = ["Escamas", "¡Huele a pescado!"], Ie[X.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"], Ie[X.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"], Ie[X.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"], Ie[X.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"], Ie[X.CORD] = ["Hilo", "Usado para craftear ropa y mochila"], Ie[X.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"], Ie[X.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"], Ie[X.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"], Ie[X.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"], Ie[X.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"], Ie[X.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"], Ie[X.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"], Ie[X.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"], Ie[X.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"], Ie[X.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"], Ie[X.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"], Ie[X.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"], Ie[X.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"], Ie[X.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"], Ie[X.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"], Ie[X.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"], Ie[X.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"], Ie[X.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"], Ie[X.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"], Ie[X.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"], Ie[X.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"], Ie[X.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"], Ie[X.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"], Ie[X.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"], Ie[X.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"], Ie[X.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"], Ie[X.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"], Ie[X.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"], Ie[X.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"], Ie[X.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"], Ie[X.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"], Ie[X.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"], Ie[X.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"], Ie[X.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"], Ie[X.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"], Ie[X.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"], Ie[X.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"], Ie[X.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"], Ie[X.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"], Ie[X.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"], Ie[X.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"], Ie[X.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"], Ie[X.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"], Ie[X.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"], Ie[X.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"], Ie[X.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"], Ie[X.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"], Ie[X.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"], Ie[X.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"], Ie[X.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"], Ie[X.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"], Ie[X.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"], Ie[X.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"], Ie[X.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"], Ie[X.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"], Ie[X.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"], Ie[X.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"], Ie[X.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"], Ie[X.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"], Ie[X.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"], Ie[X.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"], Ie[X.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"], Ie[X.PAPER] = ["Hoja", "Usada para hacer un libro"], Ie[X.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"], Ie[X.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"], Ie[X.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"], Ie[X.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"], Ie[X.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"], Ie[X.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"], Ie[X.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"], Ie[X.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"], Ie[X.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"], Ie[X.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"], Ie[X.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"], Ie[X.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"], Ie[X.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"], Ie[X.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"], Ie[X.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"], Ie[X.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"], Ie[X.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"], Ie[X.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"], Ie[X.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"], Ie[X.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"], Ie[X.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"], Ie[X.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"], Ie[X.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"], Ie[X.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"], Ie[X.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"], Ie[X.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"], Ie[X.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"], Ie[X.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor", Ie[TEXT.KICKED] = "Expulsado: ", Ie[TEXT.KEY_ALREADY] = "Tu llave ya está usada", Ie[TEXT.KEY_WRONG] = "Tu llave está mal", Ie[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache", Ie[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos", Ie[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día", Ie[TEXT.SURVIVED] = "Has sobrevivido ", Ie[TEXT.DAYS] = " días", Ie[TEXT.DEAD_SAD] = "Estás muerto ;-;", Ie[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!", Ie[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!", Ie[TEXT.EMPTY] = "Recurso vacio", Ie[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ", Ie[TEXT.DEAD] = " está muerto", Ie[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta", Ie[TEXT.JOIN_TEAM] = "Te has unido a un equipo", Ie[TEXT.YOU_DEAD] = "Estás muerto", Ie[TEXT.JOINED_TEAM] = " se unió al equipo", Ie[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido", Ie[TEXT.LEFT_TEAM] = "Has dejado el equipo", Ie[TEXT.LEFT_TEAM2] = " dejo el equipo ", Ie[TEXT.TOKEN] = "Alguien te robó tu token :>", Ie[TEXT.CHOOSE] = "Elige un servidor", Ie[TEXT.PLAYERS] = "jugadores", Ie[TEXT.TOTAL_PLAYERS] = "total de jugadores", Ie[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego", Ie[TEXT.COMMING_SOON] = "Próximamente...", document.getElementById("nickname_input").placeholder = "Apodo", ue[0] = ["Has muerto por ninguna razón"], ue[1] = ["Has muerto de hambre, como implica el nombre del juego dice"], ue[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."], ue[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."], ue[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."], ue[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."], ue[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."], ue[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"], ue[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."], ue[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."], ue[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."], ue[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."], ue[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."], ue[13] = ["Has muerto de sed, mejor bebe tu propia orina."], ue[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."], ue[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."], ue[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."], ue[17] = ["Tu piel se cayó, el sol te quemó."], ue[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."], ue[19] = ["Eres un vampiro, no te quedes cerca del ajo."], ue[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"], ue[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
        }, Ee = function () {
            Ie[X.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", Ie[TEXT.TWITTER] = " Share on Twitter", Ie[TEXT.FACEBOOK] = " Share on Facebook", Ie[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Kill", Ie[TEXT.DAYS_SURVIVED] = "Days survived", Ie[TEXT.MODE_FREE] = "Building method: Free. Press G to change", Ie[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", Ie[X.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], Ie[X.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
            document.getElementById("quit_chronoquest").innerHTML = " QUIT", Ie[X.HAND] = ["Ręka"], Ie[X.GROUND] = ["Ziemia", "Brudna!"], Ie[X.SAND] = ["Piasek", "Mam go w oczach!"], Ie[X.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"], Ie[X.STONE] = ["Kamień", "Także nazywany skałą"], Ie[X.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"], Ie[X.DIAMOND] = ["Diament", "Co z nim zrobisz?"], Ie[X.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"], Ie[X.FLOUR] = ["Mąka", "Używana w gotowaniu"], Ie[X.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"], Ie[X.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"], Ie[X.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"], Ie[X.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"], Ie[X.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"], Ie[X.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"], Ie[X.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"], Ie[X.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"], Ie[X.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"], Ie[X.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"], Ie[X.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"], Ie[X.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"], Ie[X.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"], Ie[X.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"], Ie[X.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"], Ie[X.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"], Ie[X.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"], Ie[X.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"], Ie[X.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"], Ie[X.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"], Ie[X.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"], Ie[X.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"], Ie[X.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"], Ie[X.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"], Ie[X.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"], Ie[X.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."], Ie[X.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"], Ie[X.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"], Ie[X.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."], Ie[X.SCALES] = ["Łuski", "Pachnie jak ryba!"], Ie[X.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"], Ie[X.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"], Ie[X.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"], Ie[X.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"], Ie[X.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"], Ie[X.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"], Ie[X.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"], Ie[X.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"], Ie[X.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"], Ie[X.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"], Ie[X.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"], Ie[X.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"], Ie[X.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"], Ie[X.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"], Ie[X.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"], Ie[X.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"], Ie[X.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"], Ie[X.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"], Ie[X.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"], Ie[X.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"], Ie[X.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"], Ie[X.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"], Ie[X.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"], Ie[X.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"], Ie[X.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"], Ie[X.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"], Ie[X.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"], Ie[X.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"], Ie[X.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"], Ie[X.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"], Ie[X.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"], Ie[X.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"], Ie[X.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"], Ie[X.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"], Ie[X.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"], Ie[X.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"], Ie[X.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"], Ie[X.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"], Ie[X.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"], Ie[X.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"], Ie[X.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"], Ie[X.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"], Ie[X.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"], Ie[X.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"], Ie[X.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"], Ie[X.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"], Ie[X.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"], Ie[X.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"], Ie[X.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"], Ie[X.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"], Ie[X.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"], Ie[X.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], Ie[X.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"], Ie[X.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"], Ie[X.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"], Ie[X.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"], Ie[X.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"], Ie[X.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], Ie[X.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], Ie[X.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], Ie[X.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"], Ie[X.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"], Ie[X.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"], Ie[X.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"], Ie[X.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"], Ie[X.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"], Ie[X.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"], Ie[X.PAPER] = ["Papier", "Używany w tworzeniu książki"], Ie[X.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"], Ie[X.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"], Ie[X.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"], Ie[X.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"], Ie[X.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"], Ie[X.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"], Ie[X.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"], Ie[X.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"], Ie[X.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"], Ie[X.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"], Ie[X.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"], Ie[X.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"], Ie[X.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"], Ie[X.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"], Ie[X.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"], Ie[X.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"], Ie[X.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"], Ie[X.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"], Ie[X.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"], Ie[X.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"], Ie[X.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"], Ie[X.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"], Ie[X.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"], Ie[X.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"], Ie[X.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"], Ie[X.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"], Ie[X.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"], Ie[X.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera", Ie[TEXT.KICKED] = "Wyrzucony: ", Ie[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza", Ie[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy", Ie[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć", Ie[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia", Ie[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień", Ie[TEXT.SURVIVED] = "Przeżyłeś ", Ie[TEXT.DAYS] = " dni", Ie[TEXT.DEAD_SAD] = "Jesteś martwy ;-;", Ie[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...", Ie[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!", Ie[TEXT.EMPTY] = "Źródło jest puste", Ie[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)", Ie[TEXT.DEAD] = " jest martwy", Ie[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie", Ie[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny", Ie[TEXT.YOU_DEAD] = "Jesteś martwy", Ie[TEXT.JOINED_TEAM] = " dołączył do drużyny", Ie[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona", Ie[TEXT.LEFT_TEAM] = " Opuściłeś drużynę", Ie[TEXT.LEFT_TEAM2] = " opuścił drużynę", Ie[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>", Ie[TEXT.CHOOSE] = "Wybierz serwer", Ie[TEXT.PLAYERS] = "graczy", Ie[TEXT.TOTAL_PLAYERS] = "wszystkich graczy", Ie[TEXT.TOTAL_MODE] = "graczy w tym trybie", Ie[TEXT.COMMING_SOON] = "Już wkrótce...", document.getElementById("nickname_input").placeholder = "Przydomek", ue[0] = ["Zostałeś zabity bez powodu"], ue[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"], ue[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."], ue[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."], ue[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."], ue[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."], ue[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."], ue[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"], ue[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."], ue[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."], ue[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."], ue[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."], ue[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."], ue[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."], ue[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."], ue[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."], ue[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."], ue[17] = ["Twoja skóra odpada, słońce cię zabija."], ue[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."], ue[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."], ue[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"], ue[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
        }, Te = function () {
            Ie[X.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", Ie[TEXT.TWITTER] = " Share on Twitter", Ie[TEXT.FACEBOOK] = " Share on Facebook", Ie[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Kill", Ie[TEXT.DAYS_SURVIVED] = "Days survived", Ie[TEXT.MODE_FREE] = "Building method: Free. Press G to change", Ie[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", Ie[X.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], Ie[X.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
            document.getElementById("quit_chronoquest").innerHTML = " QUIT", Ie[X.HAND] = ["mão"], Ie[X.GROUND] = ["terra", "está sujo!"], Ie[X.SAND] = ["areia", "entrou nos meus olhos!"], Ie[X.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"], Ie[X.STONE] = ["pedra", "também chamado rocha"], Ie[X.GOLD] = ["ouro", "seja generoso, dê para outros"], Ie[X.DIAMOND] = ["diamante", "o que você irá fazer com isso?"], Ie[X.AMETHYST] = ["ametista", "é mauve como lapa"], Ie[X.FLOUR] = ["farinha", "usada na cozinha"], Ie[X.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"], Ie[X.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"], Ie[X.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"], Ie[X.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"], Ie[X.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"], Ie[X.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"], Ie[X.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"], Ie[X.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"], Ie[X.CANDY] = ["doces", "apenas para crianças!", "comida: 100"], Ie[X.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"], Ie[X.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"], Ie[X.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"], Ie[X.PLANT] = ["berry", "Berry saborosa!", "comida: 10"], Ie[X.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"], Ie[X.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"], Ie[X.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"], Ie[X.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"], Ie[X.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"], Ie[X.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"], Ie[X.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"], Ie[X.THORNBUSH] = ["mato de espinhos", "pica!"], Ie[X.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"], Ie[X.ICE] = ["gelo", "útil para fazer bolo e água"], Ie[X.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"], Ie[X.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"], Ie[X.FUR] = ["pele de coelho", "o coelho era tão fofo..."], Ie[X.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"], Ie[X.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"], Ie[X.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"], Ie[X.SCALES] = ["escala", "é pequeno como peixe!"], Ie[X.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"], Ie[X.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"], Ie[X.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"], Ie[X.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"], Ie[X.CORD] = ["linha", "usada para fazer chapéus e mochila"], Ie[X.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"], Ie[X.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"], Ie[X.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"], Ie[X.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"], Ie[X.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"], Ie[X.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"], Ie[X.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"], Ie[X.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"], Ie[X.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"], Ie[X.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"], Ie[X.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"], Ie[X.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"], Ie[X.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"], Ie[X.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"], Ie[X.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"], Ie[X.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"], Ie[X.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"], Ie[X.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"], Ie[X.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"], Ie[X.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"], Ie[X.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"], Ie[X.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"], Ie[X.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"], Ie[X.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"], Ie[X.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"], Ie[X.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"], Ie[X.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"], Ie[X.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"], Ie[X.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"], Ie[X.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"], Ie[X.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"], Ie[X.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"], Ie[X.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"], Ie[X.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"], Ie[X.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"], Ie[X.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"], Ie[X.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"], Ie[X.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"], Ie[X.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"], Ie[X.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"], Ie[X.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"], Ie[X.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"], Ie[X.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"], Ie[X.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"], Ie[X.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"], Ie[X.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"], Ie[X.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"], Ie[X.DRAGON_ORB] = ["esfera do dragão", "dado na questt"], Ie[X.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"], Ie[X.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"], Ie[X.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"], Ie[X.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"], Ie[X.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"], Ie[X.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"], Ie[X.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"], Ie[X.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"], Ie[X.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"], Ie[X.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"], Ie[X.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"], Ie[X.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"], Ie[X.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"], Ie[X.BAG] = ["mochila", "mais espaço para seus itens!"], Ie[X.PAPER] = ["papel", "usado para fazer o livro"], Ie[X.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"], Ie[X.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"], Ie[X.LOCK] = ["fechadura", "permite você trancar seu baú"], Ie[X.LOCKPICK] = ["chave", "permite destrancar um baú"], Ie[X.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"], Ie[X.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"], Ie[X.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"], Ie[X.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"], Ie[X.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"], Ie[X.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"], Ie[X.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"], Ie[X.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"], Ie[X.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"], Ie[X.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"], Ie[X.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"], Ie[X.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"], Ie[X.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"], Ie[X.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"], Ie[X.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"], Ie[X.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"], Ie[X.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"], Ie[X.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"], Ie[X.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"], Ie[X.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"], Ie[X.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"], Ie[X.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"], Ie[X.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"], Ie[X.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor", Ie[TEXT.KICKED] = "kickado: ", Ie[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa", Ie[TEXT.KEY_WRONG] = "sua chave está errada", Ie[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache", Ie[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos", Ie[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia", Ie[TEXT.SURVIVED] = "você sobreviveu ", Ie[TEXT.DAYS] = " dias", Ie[TEXT.DEAD_SAD] = "você está morto ;-;", Ie[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!", Ie[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!", Ie[TEXT.EMPTY] = "não tem recursos", Ie[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)", Ie[TEXT.DEAD] = " está morto", Ie[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa", Ie[TEXT.JOIN_TEAM] = "você entrou no time", Ie[TEXT.YOU_DEAD] = "você está morto", Ie[TEXT.JOINED_TEAM] = "entrou no time", Ie[TEXT.TEAM_DESTROYED] = "seu time foi destruido", Ie[TEXT.LEFT_TEAM] = "você saiu do time", Ie[TEXT.LEFT_TEAM2] = " saiu do time", Ie[TEXT.TOKEN] = "alguém roubou sua ficha :>", Ie[TEXT.CHOOSE] = "escolha um servidor", Ie[TEXT.PLAYERS] = "jogadores", Ie[TEXT.TOTAL_PLAYERS] = "jogadores totais", Ie[TEXT.TOTAL_MODE] = "jogadores nesse modo", Ie[TEXT.COMMING_SOON] = "Coming soon...", document.getElementById("nickname_input").placeholder = "Apelido", ue[0] = ["você morreu sem motivo"], ue[1] = ["você morreu de fome, como o jogo diz"], ue[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."], ue[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."], ue[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."], ue[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."], ue[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."], ue[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"], ue[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."], ue[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."], ue[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."], ue[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."], ue[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."], ue[13] = ["você morreu de sede. melhor beber sua própria urina."], ue[14] = ["você sabia que você morre afogado? agora você sabe."], ue[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."], ue[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."], ue[17] = ["sua pele caindo aos pedaços, o sol te matou."], ue[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."], ue[19] = ["como vampiro, não chegue perto do alho."], ue[20] = ["você comeu alho como vampiro, o que você esperava?"], ue[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
        }, Ae = function () {
            Ie[X.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", Ie[TEXT.TWITTER] = " Share on Twitter", Ie[TEXT.FACEBOOK] = " Share on Facebook", Ie[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Kill", Ie[TEXT.DAYS_SURVIVED] = "Days survived", Ie[TEXT.MODE_FREE] = "Building method: Free. Press G to change", Ie[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", Ie[X.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], Ie[X.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
            document.getElementById("quit_chronoquest").innerHTML = " QUIT", Ie[X.HAND] = ["Hand"], Ie[X.GROUND] = ["Boden", "Dreckig!"], Ie[X.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"], Ie[X.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"], Ie[X.STONE] = ["Stein", "Auch Fels gennant"], Ie[X.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "], Ie[X.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"], Ie[X.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"], Ie[X.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"], Ie[X.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"], Ie[X.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"], Ie[X.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"], Ie[X.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"], Ie[X.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"], Ie[X.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"], Ie[X.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"], Ie[X.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"], Ie[X.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"], Ie[X.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"], Ie[X.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"], Ie[X.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], Ie[X.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"], Ie[X.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], Ie[X.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"], Ie[X.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], Ie[X.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"], Ie[X.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], Ie[X.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"], Ie[X.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"], Ie[X.THORNBUSH] = ["Dornenbusch", "Es sticht!"], Ie[X.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"], Ie[X.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"], Ie[X.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"], Ie[X.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"], Ie[X.FUR] = ["Hasenfell", "Der Hase war so süß..."], Ie[X.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"], Ie[X.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"], Ie[X.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."], Ie[X.SCALES] = ["Schuppen", "Es riecht wie Fisch!"], Ie[X.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"], Ie[X.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"], Ie[X.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"], Ie[X.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"], Ie[X.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "], Ie[X.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"], Ie[X.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"], Ie[X.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"], Ie[X.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"], Ie[X.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"], Ie[X.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"], Ie[X.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"], Ie[X.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"], Ie[X.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"], Ie[X.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"], Ie[X.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"], Ie[X.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"], Ie[X.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"], Ie[X.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"], Ie[X.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"], Ie[X.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"], Ie[X.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"], Ie[X.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"], Ie[X.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"], Ie[X.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"], Ie[X.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"], Ie[X.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"], Ie[X.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"], Ie[X.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"], Ie[X.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"], Ie[X.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"], Ie[X.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"], Ie[X.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"], Ie[X.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"], Ie[X.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"], Ie[X.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"], Ie[X.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"], Ie[X.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"], Ie[X.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"], Ie[X.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"], Ie[X.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"], Ie[X.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"], Ie[X.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"], Ie[X.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], Ie[X.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"], Ie[X.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."], Ie[X.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"], Ie[X.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"], Ie[X.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"], Ie[X.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], Ie[X.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], Ie[X.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], Ie[X.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"], Ie[X.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"], Ie[X.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"], Ie[X.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"], Ie[X.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"], Ie[X.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"], Ie[X.BAG] = ["Rucksack", "Mehr Platz im Inventar!"], Ie[X.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"], Ie[X.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"], Ie[X.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"], Ie[X.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"], Ie[X.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"], Ie[X.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"], Ie[X.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"], Ie[X.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"], Ie[X.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"], Ie[X.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"], Ie[X.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"], Ie[X.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"], Ie[X.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"], Ie[X.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"], Ie[X.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"], Ie[X.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"], Ie[X.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"], Ie[X.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"], Ie[X.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"], Ie[X.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"], Ie[X.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"], Ie[X.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"], Ie[X.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"], Ie[X.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"], Ie[X.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"], Ie[X.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"], Ie[X.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"], Ie[X.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"], Ie[X.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten", Ie[TEXT.KICKED] = "Gekickt: ", Ie[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt", Ie[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch", Ie[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache", Ie[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen", Ie[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt", Ie[TEXT.SURVIVED] = "Du hast überlebt ", Ie[TEXT.DAYS] = " Tage", Ie[TEXT.DEAD_SAD] = "Du bist gestorben ;-;", Ie[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!", Ie[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!", Ie[TEXT.EMPTY] = "Ressource ist leer", Ie[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)", Ie[TEXT.DEAD] = " ist gestorben", Ie[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug", Ie[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten", Ie[TEXT.YOU_DEAD] = "Du bist gestorben", Ie[TEXT.JOINED_TEAM] = " ist dem Team beigetreten", Ie[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört", Ie[TEXT.LEFT_TEAM] = "Du hast das Team verlassen", Ie[TEXT.LEFT_TEAM2] = " hat das Team verlassen", Ie[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>", Ie[TEXT.CHOOSE] = "Suche dir ein Server aus", Ie[TEXT.PLAYERS] = "Spieler", Ie[TEXT.TOTAL_PLAYERS] = "alle Spieler", Ie[TEXT.TOTAL_MODE] = "Spieler in diesem Modus", Ie[TEXT.COMMING_SOON] = "Bald verfügbar...", document.getElementById("nickname_input").placeholder = "Spitzname", ue[0] = ["Du wurdest ohne Grund getötet"], ue[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"], ue[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."], ue[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."], ue[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."], ue[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."], ue[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."], ue[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"], ue[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."], ue[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."], ue[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."], ue[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."], ue[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."], ue[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."], ue[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."], ue[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."], ue[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."], ue[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."], ue[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "], ue[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."], ue[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"], ue[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
        }, de = function () {
            Ie[X.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], ue[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], Ie[X.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], Ie[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU", Ie[TEXT.TWITTER] = " Partage sur Twitter", Ie[TEXT.FACEBOOK] = " Partage sur Facebook", Ie[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points", Ie[TEXT.POINTS] = "points", Ie[TEXT.SCORE] = "Score", Ie[TEXT.KILL] = "Tués", Ie[TEXT.DAYS_SURVIVED] = "Jours survécus", Ie[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer", Ie[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer", Ie[X.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"], Ie[X.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"], Ie[X.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"], Ie[X.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quêtes", document.getElementById("timeremainingquest").innerHTML = "Temps Restant", document.getElementById("constraintquest").innerHTML = " Contraintes", document.getElementById("claim_rewards").innerHTML = " Résultat", document.getElementById("rewardquest").innerHTML = " Récompenses", document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave", document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste", document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie", document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor", document.getElementById("dont_hit_5").innerHTML = " Sois pacifique", document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière", document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
            for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "RÉCOMPENSE!";
            document.getElementById("quit_chronoquest").innerHTML = " QUITTER", Ie[X.HAND] = ["Main"], Ie[X.GROUND] = ["Terre", "C'est sale!"], Ie[X.SAND] = ["Sable", "J'en ai dans les yeux"], Ie[X.WOOD] = ["Bois", "Tu n'en auras jamais trop!"], Ie[X.STONE] = ["Pierre", "Aussi appelée roche"], Ie[X.GOLD] = ["Or", "Sois généreux, donne en aux autres"], Ie[X.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"], Ie[X.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"], Ie[X.FLOUR] = ["Farine", "Utile pour la cuisine"], Ie[X.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"], Ie[X.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"], Ie[X.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"], Ie[X.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"], Ie[X.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"], Ie[X.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"], Ie[X.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"], Ie[X.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"], Ie[X.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"], Ie[X.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"], Ie[X.GARLAND] = ["Guirlandes", "Utilisable sur les toits"], Ie[X.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"], Ie[X.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"], Ie[X.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"], Ie[X.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"], Ie[X.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"], Ie[X.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"], Ie[X.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"], Ie[X.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"], Ie[X.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"], Ie[X.THORNBUSH] = ["Ronces", "Ça pique!"], Ie[X.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"], Ie[X.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"], Ie[X.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"], Ie[X.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"], Ie[X.FUR] = ["Peau de lapin", "Vous êtes un monstre"], Ie[X.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"], Ie[X.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"], Ie[X.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"], Ie[X.SCALES] = ["Écailles", "Ça sent le poisson!"], Ie[X.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"], Ie[X.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"], Ie[X.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"], Ie[X.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"], Ie[X.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"], Ie[X.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"], Ie[X.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"], Ie[X.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"], Ie[X.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"], Ie[X.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"], Ie[X.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"], Ie[X.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"], Ie[X.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"], Ie[X.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"], Ie[X.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"], Ie[X.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"], Ie[X.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"], Ie[X.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"], Ie[X.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"], Ie[X.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"], Ie[X.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"], Ie[X.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"], Ie[X.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"], Ie[X.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"], Ie[X.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"], Ie[X.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"], Ie[X.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"], Ie[X.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"], Ie[X.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"], Ie[X.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"], Ie[X.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"], Ie[X.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"], Ie[X.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"], Ie[X.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"], Ie[X.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"], Ie[X.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"], Ie[X.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"], Ie[X.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"], Ie[X.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"], Ie[X.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"], Ie[X.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"], Ie[X.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"], Ie[X.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"], Ie[X.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"], Ie[X.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"], Ie[X.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"], Ie[X.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"], Ie[X.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"], Ie[X.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"], Ie[X.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"], Ie[X.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"], Ie[X.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"], Ie[X.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"], Ie[X.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"], Ie[X.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"], Ie[X.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"], Ie[X.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"], Ie[X.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"], Ie[X.BAG] = ["Sac", "Plus de place dans ton inventaire!"], Ie[X.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"], Ie[X.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"], Ie[X.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"], Ie[X.LOCK] = ["Cadenas", "Pour verrouiller un coffre"], Ie[X.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"], Ie[X.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"], Ie[X.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"], Ie[X.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"], Ie[X.ROOF] = ["Toit", "Te cache un peu et te réchauffe"], Ie[X.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"], Ie[X.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"], Ie[X.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"], Ie[X.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"], Ie[X.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"], Ie[X.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"], Ie[X.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"], Ie[X.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"], Ie[X.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"], Ie[X.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"], Ie[X.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"], Ie[X.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"], Ie[X.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"], Ie[X.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"], Ie[X.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"], Ie[X.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"], Ie[X.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"], Ie[X.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"], Ie[X.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"], Ie[X.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"], Ie[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur", Ie[TEXT.KICKED] = "Expulsé: ", Ie[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre", Ie[TEXT.KEY_WRONG] = "Ta clé est fausse", Ie[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches", Ie[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources", Ie[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour", Ie[TEXT.SURVIVED] = "Tu as survécu ", Ie[TEXT.DAYS] = " jours", Ie[TEXT.DEAD_SAD] = "Tu es mort ;-;", Ie[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!", Ie[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer", Ie[TEXT.EMPTY] = "Cette ressource est vide", Ie[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)", Ie[TEXT.DEAD] = " est mort", Ie[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil", Ie[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe", Ie[TEXT.YOU_DEAD] = "Tu es mort", Ie[TEXT.JOINED_TEAM] = " a rejoint l'équipe", Ie[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite", Ie[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe", Ie[TEXT.LEFT_TEAM2] = " a quitté l'équipe", Ie[TEXT.TOKEN] = "Quelqu'un a volé ton token :>", Ie[TEXT.CHOOSE] = "Choisis un serveur", Ie[TEXT.PLAYERS] = "joueurs", Ie[TEXT.TOTAL_PLAYERS] = "joueurs", Ie[TEXT.TOTAL_MODE] = "joueurs dans ce mode", Ie[TEXT.COMMING_SOON] = "Bientôt...", document.getElementById("nickname_input").placeholder = "Surnom", ue[0] = ["Tu as été tué sans raison particulière, juste comme ça"], ue[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"], ue[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"], ue[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"], ue[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"], ue[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."], ue[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."], ue[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"], ue[8] = ["Cet ours voulait juste un câlin."], ue[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."], ue[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"], ue[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."], ue[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."], ue[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"], ue[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"], ue[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."], ue[16] = ["Un kraken a 'kraké' tes os."], ue[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."], ue[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."], ue[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."], ue[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"], ue[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
        }, Ie = [], he = 0; he < 344; he++) Ie[he] = "";
    var ue = [];
    $(".md-languages").on("click", (function () {
        $(this).toggleClass("active")
    })), $(".md-languages ul li").on("click", (function () {
        var e = $(this).text();
        "English" === e ? oe() : "Français" === e ? de() : "Deutsch" === e ? Ae() : "Español" === e ? _e() : "Português" === e ? Te() : "Русский" === e ? se() : "Polski" === e && Ee(), INFO_BOX = [], d_.craft.label = [], $(".md-languages ul li").removeClass("active"), $(this).addClass("active"), $(".md-languages label button").text(e)
    }));
    var Oe;
    B = "EN";
    switch (navigator.language || navigator.userLanguage) {
    case "ru":
        B = "RU";
        break;
    case "en":
        B = "EN";
        break;
    case "es":
        B = "SP";
        break;
    case "fr":
        B = "FR";
        break;
    case "pl":
        B = "PL";
        break;
    case "de":
        B = "DE";
        break;
    case "pt":
        B = "PT"
    }
    for (var he in "FR" === B ? ($(".md-languages label button").text("Français"), Oe = de) : "PL" === B ? ($(".md-languages label button").text("Polski"), Oe = Ee) : "PT" === B ? ($(".md-languages label button").text("Português"), Oe = Te) : "SP" === B ? ($(".md-languages label button").text("Español"), Oe = _e) : "RU" === B ? ($(".md-languages label button").text("Русский"), Oe = se) : "DE" === B ? ($(".md-languages label button").text("Deutsch"), Oe = Ae) : ($(".md-languages label button").text("English"), Oe = oe), IMAGES = {
            LOGO: "img/logo.png",
            BIGDAY: "img/mapday.png",
            BIGNIGHT: "img/mapnight.png",
            BIGZDAY: "img/bigzday.png",
            BIGZNIGHT: "img/bigznight.png",
            MAPDAY_RIVER: "img/bigday-river1.png",
            MAPDAY_LAKE: "img/bigday-lake.png",
            MAPDAY_BERRY: "img/bigday-berry.png",
            MAPDAY_STONE1: "img/bigday-stone1.png",
            MAPDAY_STONE2: "img/bigday-stone2.png",
            MAPDAY_GOLD1: "img/bigday-gold1.png",
            MAPDAY_GOLD2: "img/bigday-gold2.png",
            MAPDAY_EMERALD1: "img/bigday-emerald1.png",
            MAPDAY_EMERALD2: "img/bigday-emerald2.png",
            MAPDAY_AMETHYST: "img/bigday-amethyst.png",
            MAPDAY_BEAR: "img/bigday-bear.png",
            MAPDAY_CAVE: "img/bigday-cave.png",
            MAPDAY_DIAMOND: "img/bigday-diamond.png",
            MAPDAY_ISLAND: "img/bigday-island.png",
            MAPDAY_REIDITE: "img/bigday-reidite.png",
            MAPDAY_SPIDER: "img/bigday-spider.png",
            MAPDAY_WOLF: "img/bigday-wolf.png",
            MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
            MAPDAY_FOX: "img/bigday-fox.png",
            MAPDAY_KRAKEN: "img/bigday-kraken.png",
            MAPDAY_PIRANHA: "img/bigday-piranha.png",
            MAPDAY_CACTUS: "img/bigday-cactus.png",
            MAPDAY_MAGMA: "img/bigday-magma.png",
            MAPNIGHT_RIVER: "img/bigday-river1.png",
            MAPNIGHT_LAKE: "img/bignight-lake.png",
            MAPNIGHT_BERRY: "img/bignight-berry.png",
            MAPNIGHT_STONE1: "img/bignight-stone1.png",
            MAPNIGHT_STONE2: "img/bignight-stone2.png",
            MAPNIGHT_GOLD1: "img/bignight-gold1.png",
            MAPNIGHT_GOLD2: "img/bignight-gold2.png",
            MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
            MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
            MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
            MAPNIGHT_BEAR: "img/bignight-bear.png",
            MAPNIGHT_CAVE: "img/bignight-cave.png",
            MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
            MAPNIGHT_ISLAND: "img/bignight-island.png",
            MAPNIGHT_REIDITE: "img/bignight-reidite.png",
            MAPNIGHT_SPIDER: "img/bignight-spider.png",
            MAPNIGHT_WOLF: "img/bignight-wolf.png",
            MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
            MAPNIGHT_FOX: "img/bignight-fox.png",
            MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
            MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
            MAPNIGHT_CACTUS: "img/bignight-cactus.png",
            MAPNIGHT_MAGMA: "img/bignight-magma.png",
            MAPDAY_DESERT: "img/bigday-desert.png",
            MAPDAY_WINTER: "img/bigday-winter.png",
            MAPDAY_LAVA: "img/bigday-lava.png",
            MAPDAY_FOREST: "img/bigday-forest.png",
            MAPNIGHT_DESERT: "img/bignight-desert.png",
            MAPNIGHT_WINTER: "img/bignight-winter.png",
            MAPNIGHT_LAVA: "img/bignight-lava.png",
            MAPNIGHT_FOREST: "img/bignight-forest.png",
            RIVER_WAVED: "img/day-river-wave.png",
            RIVER_WAVEN: "img/night-river-wave.png",
            FOG0D: "img/day-fog0.png",
            FOG1D: "img/day-fog1.png",
            FOG2D: "img/day-fog2.png",
            FOG0N: "img/night-fog0.png",
            FOG1N: "img/night-fog1.png",
            FOG2N: "img/night-fog2.png",
            FOD0D: "img/day-fogdesert0.png",
            FOD1D: "img/day-fogdesert1.png",
            FOD2D: "img/day-fogdesert2.png",
            FOD0N: "img/night-fogdesert0.png",
            FOD1N: "img/night-fogdesert1.png",
            FOD2N: "img/night-fogdesert2.png",
            MARKER0D: "img/day-cross-server.png",
            MARKER1D: "img/day-here-server.png",
            MARKER2D: "img/day-finish-server.png",
            MARKER3D: "img/day-item-server.png",
            MARKER0N: "img/night-cross-server.png",
            MARKER1N: "img/night-here-server.png",
            MARKER2N: "img/night-finish-server.png",
            MARKER3N: "img/night-item-server.png",
            REIDITE0D: "img/day-reidite0.png",
            REIDITE0N: "img/night-reidite0.png",
            REIDITE1D: "img/day-reidite1.png",
            REIDITE1N: "img/night-reidite1.png",
            REIDITE2D: "img/day-reidite2.png",
            REIDITE2N: "img/night-reidite2.png",
            MAGMA1D: "img/day-lava1.png",
            MAGMA1N: "img/night-lava1.png",
            MAGMA2D: "img/day-lava2.png",
            MAGMA2N: "img/night-lava2.png",
            MAGMA3D: "img/day-lava3.png",
            MAGMA3N: "img/night-lava3.png",
            MAGMA4D: "img/day-lava4.png",
            MAGMA4N: "img/night-lava4.png",
            MAGMA5D: "img/day-lava5.png",
            MAGMA5N: "img/night-lava5.png",
            MAGMA6D: "img/day-lava6.png",
            MAGMA6N: "img/night-lava6.png",
            LAVA_GROUND1D: "img/day-lava-ground1.png",
            LAVA_GROUND1N: "img/night-lava-ground1.png",
            LAVA_GROUND2D: "img/day-lava-ground2.png",
            LAVA_GROUND2N: "img/night-lava-ground2.png",
            LAVA_GROUND3D: "img/day-lava-ground3.png",
            LAVA_GROUND3N: "img/night-lava-ground3.png",
            LAVA_GROUND4D: "img/day-lava-ground4.png",
            LAVA_GROUND4N: "img/night-lava-ground4.png",
            LAVA_GROUND5D: "img/day-lava-ground5.png",
            LAVA_GROUND5N: "img/night-lava-ground5.png",
            LAVA_GROUND6D: "img/day-lava-ground6.png",
            LAVA_GROUND6N: "img/night-lava-ground6.png",
            FIRE_MOBD: "img/day-fire-mob.png",
            FIRE_MOBN: "img/night-fire-mob.png",
            FIRE_MOB_HURT: "img/hurt-fire-mob.png",
            DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
            DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
            HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
            HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
            INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
            INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
            INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
            AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
            AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
            HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
            HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
            INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
            INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
            INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
            REIDITE_SWORDD: "img/day-reidite-sword.png",
            REIDITE_SWORDN: "img/night-reidite-sword.png",
            INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
            INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
            INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
            INV_REIDITE_OUT: "img/inv-reidite-out.png",
            INV_REIDITE_IN: "img/inv-reidite-in.png",
            INV_REIDITE_CLICK: "img/inv-reidite-click.png",
            INV_FLAME_OUT: "img/inv-flame-out.png",
            INV_FLAME_IN: "img/inv-flame-in.png",
            INV_FLAME_CLICK: "img/inv-flame-click.png",
            LAVA_BUBLE0D: "img/day-magma-buble0.png",
            LAVA_BUBLE0N: "img/night-magma-buble0.png",
            LAVA_BUBLE1D: "img/day-magma-buble1.png",
            LAVA_BUBLE1N: "img/night-magma-buble1.png",
            LAVA_BUBLE2D: "img/day-magma-buble2.png",
            LAVA_BUBLE2N: "img/night-magma-buble2.png",
            LAVA_DRAGOND: "img/day-lava-dragon.png",
            LAVA_DRAGONN: "img/night-lava-dragon.png",
            LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
            LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
            HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
            LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
            LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
            LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
            LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
            HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
            HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
            REIDITE_SPEARD: "img/day-reidite-spear.png",
            REIDITE_SPEARN: "img/night-reidite-spear.png",
            INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
            INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
            INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
            REIDITE_HELMETD: "img/day-reidite-helmet.png",
            REIDITE_HELMETN: "img/night-reidite-helmet.png",
            INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
            INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
            INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
            HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
            HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
            REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
            REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
            INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
            INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
            INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
            LAVA_SWORDD: "img/day-lava-dragon-sword.png",
            LAVA_SWORDN: "img/night-lava-dragon-sword.png",
            INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
            INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
            INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
            LAVA_SPEARD: "img/day-lava-spear.png",
            LAVA_SPEARN: "img/night-lava-spear.png",
            INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
            INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
            INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
            LAVA_HELMETD: "img/day-lava-helmet.png",
            LAVA_HELMETN: "img/night-lava-helmet.png",
            INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
            INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
            INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
            WITCHD: "img/day-witch-hat.png",
            WITCHN: "img/night-witch-hat.png",
            INV_WITCH_OUT: "img/inv-witch-hat-out.png",
            INV_WITCH_IN: "img/inv-witch-hat-in.png",
            INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
            NIMBUSD: "img/day-nimbus2000.png",
            NIMBUSN: "img/night-nimbus2000.png",
            INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
            INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
            INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
            ACCESSORY1D: "img/day-accessory1-pacques.png",
            ACCESSORY1N: "img/night-accessory1-pacques.png",
            ACCESSORY2D: "img/day-accessory2-pacques.png",
            ACCESSORY2N: "img/night-accessory2-pacques.png",
            ACCESSORY3D: "img/day-accessory3-pacques.png",
            ACCESSORY3N: "img/night-accessory3-pacques.png",
            ACCESSORY5D: "img/day-accessory5-pacques.png",
            ACCESSORY5N: "img/night-accessory5-pacques.png",
            ACCESSORY6D: "img/day-accessory6-pacques.png",
            ACCESSORY6N: "img/night-accessory6-pacques.png",
            ACCESSORY7D: "img/day-accessory7-pacques.png",
            ACCESSORY7N: "img/night-accessory7-pacques.png",
            ACCESSORY8D: "img/day-accessory8-pacques.png",
            ACCESSORY8N: "img/night-accessory8-pacques.png",
            BAG_EASTERD: "img/day-bag-pacques.png",
            BAG_EASTERN: "img/night-bag-pacques.png",
            CARROTD: "img/day-carrot.png",
            CARROTN: "img/night-carrot.png",
            CARROT_DRIEDD: "img/day-carrot-dried.png",
            CARROT_DRIEDN: "img/night-carrot-dried.png",
            TOMATO_MINID: "img/day-tomato-herb.png",
            TOMATO_MININ: "img/night-tomato-herb.png",
            TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
            TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
            TOMATOD: "img/day-tomato.png",
            TOMATON: "img/night-tomato.png",
            INV_CARROT_OUT: "img/inv-carrot-out.png",
            INV_CARROT_IN: "img/inv-carrot-in.png",
            INV_CARROT_CLICK: "img/inv-carrot-click.png",
            INV_TOMATO_OUT: "img/inv-tomato-out.png",
            INV_TOMATO_IN: "img/inv-tomato-in.png",
            INV_TOMATO_CLICK: "img/inv-tomato-click.png",
            PLAYER0D: "img/day-player0.png",
            PLAYER0N: "img/night-player0.png",
            PLAYER1D: "img/day-player1.png",
            PLAYER1N: "img/night-player1.png",
            PLAYER2D: "img/day-player2.png",
            PLAYER2N: "img/night-player22.png",
            PLAYER3D: "img/day-player3.png",
            PLAYER3N: "img/night-player33.png",
            PLAYER4D: "img/day-player4.png",
            PLAYER4N: "img/night-player4.png",
            PLAYER5D: "img/day-player5.png",
            PLAYER5N: "img/night-player5.png",
            PLAYER6D: "img/day-player6.png",
            PLAYER6N: "img/night-player6.png",
            PLAYER7D: "img/day-player7.png",
            PLAYER7N: "img/night-player7.png",
            PLAYER8D: "img/day-player8.png",
            PLAYER8N: "img/night-player8.png",
            PLAYER9D: "img/day-player9.png",
            PLAYER9N: "img/night-player9.png",
            PLAYER10D: "img/day-player10.png",
            PLAYER10N: "img/night-player10.png",
            PLAYER11D: "img/day-player11.png",
            PLAYER11N: "img/night-player11.png",
            PLAYER12D: "img/day-player12.png",
            PLAYER12N: "img/night-player12.png",
            PLAYER13D: "img/day-player13.png",
            PLAYER13N: "img/night-player13.png",
            PLAYER14D: "img/day-player14.png",
            PLAYER14N: "img/night-player14.png",
            PLAYER15D: "img/day-player15.png",
            PLAYER15N: "img/night-player15.png",
            PLAYER16D: "img/day-player16.png",
            PLAYER16N: "img/night-player16.png",
            PLAYER17D: "img/day-player17.png",
            PLAYER17N: "img/night-player17.png",
            PLAYER18D: "img/day-player18.png",
            PLAYER18N: "img/night-player18.png",
            PLAYER19D: "img/day-player19.png",
            PLAYER19N: "img/night-player19.png",
            HAND0D: "img/day-hand-player0.png",
            HAND0N: "img/night-hand-player0.png",
            HAND1D: "img/day-hand-player1.png",
            HAND1N: "img/night-hand-player1.png",
            HAND2D: "img/day-hand-player2.png",
            HAND2N: "img/night-hand-player22.png",
            HAND3D: "img/day-hand-player3.png",
            HAND3N: "img/night-hand-player33.png",
            HAND4D: "img/day-hand-player4.png",
            HAND4N: "img/night-hand-player4.png",
            HAND5D: "img/day-hand-player5.png",
            HAND5N: "img/night-hand-player5.png",
            HAND6D: "img/day-hand-player6.png",
            HAND6N: "img/night-hand-player6.png",
            HAND7D: "img/day-hand-player7.png",
            HAND7N: "img/night-hand-player7.png",
            HAND8D: "img/day-hand-player8.png",
            HAND8N: "img/night-hand-player8.png",
            HAND9D: "img/day-hand-player9.png",
            HAND9N: "img/night-hand-player9.png",
            HAND10D: "img/day-hand-player10.png",
            HAND10N: "img/night-hand-player10.png",
            HAND11D: "img/day-hand-player11.png",
            HAND11N: "img/night-hand-player11.png",
            HAND12D: "img/day-hand-player12.png",
            HAND12N: "img/night-hand-player12.png",
            HAND13D: "img/day-hand-player13.png",
            HAND13N: "img/night-hand-player13.png",
            HAND14D: "img/day-hand-player14.png",
            HAND14N: "img/night-hand-player14.png",
            HAND15D: "img/day-hand-player15.png",
            HAND15N: "img/night-hand-player15.png",
            HAND16D: "img/day-hand-player16.png",
            HAND16N: "img/night-hand-player16.png",
            HAND17D: "img/day-hand-player17.png",
            HAND17N: "img/night-hand-player17.png",
            HAND18D: "img/day-hand-player18.png",
            HAND18N: "img/night-hand-player18.png",
            HAND19D: "img/day-hand-player19.png",
            HAND19N: "img/night-hand-player19.png",
            ACCESSORY4D: "img/day-accessory4.png",
            ACCESSORY4N: "img/night-accessory4.png",
            ACCESSORY9D: "img/day-accessory9.png",
            ACCESSORY9N: "img/night-accessory9.png",
            ACCESSORY10D: "img/day-accessory10.png",
            ACCESSORY10N: "img/night-accessory10.png",
            ACCESSORY11D: "img/day-accessory11.png",
            ACCESSORY11N: "img/night-accessory11.png",
            ACCESSORY12D: "img/day-accessory12.png",
            ACCESSORY12N: "img/night-accessory12.png",
            BAGD: "img/day-bag.png",
            BAGN: "img/night-bag.png",
            INV_BAG_OUT: "img/inv-bag-out.png",
            INV_BAG_IN: "img/inv-bag-in.png",
            INV_BAG_CLICK: "img/inv-bag-click.png",
            PITCHFORKD: "img/day-pitchfork.png",
            PITCHFORKN: "img/night-pitchfork.png",
            INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
            INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
            INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
            INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
            INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
            INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
            INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
            INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
            INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
            INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
            INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
            INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
            INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
            INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
            INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
            INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
            INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
            INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
            WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
            WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
            STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
            STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
            GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
            GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
            DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
            DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
            AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
            AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
            INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
            INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
            INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
            INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
            INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
            INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
            INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
            INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
            INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
            INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
            INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
            INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
            REIDITE_WALLD: "img/day-reidite-wall.png",
            REIDITE_WALLN: "img/night-reidite-wall.png",
            REIDITE_DOORD: "img/day-reidite-door.png",
            REIDITE_DOORN: "img/night-reidite-door.png",
            REIDITE_SPIKED: "img/day-reidite-spike.png",
            REIDITE_SPIKEN: "img/night-reidite-spike.png",
            REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
            REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
            INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
            INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
            INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
            PICK_REIDITED: "img/day-reidite-pickaxe.png",
            PICK_REIDITEN: "img/night-reidite-pickaxe.png",
            INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
            INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
            INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
            HAMMER_REIDITED: "img/day-reidite-hammer.png",
            HAMMER_REIDITEN: "img/night-reidite-hammer.png",
            WATERMELOND: "img/day-watermelon1.png",
            WATERMELONN: "img/night-watermelon1.png",
            DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
            DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
            INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
            INV_WATERMELON_IN: "img/inv-watermelon-in.png",
            INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
            BOATD: "img/day-boat.png",
            BOATN: "img/night-boat.png",
            BOAT_WAVED: "img/day-boat-wave.png",
            BOAT_WAVEN: "img/night-boat-wave.png",
            INV_BOAT_OUT: "img/inv-boat-out.png",
            INV_BOAT_IN: "img/inv-boat-in.png",
            INV_BOAT_CLICK: "img/inv-boat-click.png",
            PLANED: "img/day-plane.png",
            PLANEN: "img/night-plane.png",
            INV_PLANE_OUT: "img/inv-plane-out.png",
            INV_PLANE_IN: "img/inv-plane-in.png",
            INV_PLANE_CLICK: "img/inv-plane-click.png",
            SLEDD: "img/day-sled.png",
            SLEDN: "img/night-sled.png",
            SLED_WAVED: "img/day-sled-wave.png",
            SLED_WAVEN: "img/night-sled-wave.png",
            INV_SLED_OUT: "img/inv-sled-out.png",
            INV_SLED_IN: "img/inv-sled-in.png",
            INV_SLED_CLICK: "img/inv-sled-click.png",
            PIRATE_HATD: "img/day-pirate-hat.png",
            PIRATE_HATN: "img/night-pirate-hat.png",
            INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
            INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
            INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
            PENGUIND: "img/day-penguin.png",
            PENGUINN: "img/night-penguin.png",
            HURT_PENGUIN: "img/hurt-penguin.png",
            INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
            INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
            BOARD: "img/day-boar1.png",
            BOAR_TAMEDD: "img/day-boar1-tamed.png",
            BOAR_ANGRYD: "img/day-boar1-angry.png",
            BOARN: "img/night-boar1.png",
            BOAR_TAMEDN: "img/night-boar1-tamed.png",
            BOAR_ANGRYN: "img/night-boar1-angry.png",
            INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
            INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
            INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
            HURT_BOAR: "img/day-hurt-boar1.png",
            BOAR_STEP: "img/boar1-step.png",
            SADDLED: "img/day-saddle1.png",
            SADDLEN: "img/night-saddle1.png",
            INV_SADDLE_OUT: "img/inv-saddle-out.png",
            INV_SADDLE_IN: "img/inv-saddle-in.png",
            INV_SADDLE_CLICK: "img/inv-saddle-click.png",
            WAND1D: "img/day-magic-wand0.png",
            WAND1N: "img/night-magic-wand0.png",
            LIGHT_WAND1D: "img/day-light-wand1.png",
            LIGHT_WAND1N: "img/night-light-wand1.png",
            INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
            INV_WAND1_IN: "img/inv-magic-wand0-in.png",
            INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
            WAND2D: "img/day-magic-wand1.png",
            WAND2N: "img/night-magic-wand1.png",
            LIGHT_WAND0D: "img/day-light-wand0.png",
            LIGHT_WAND0N: "img/night-light-wand0.png",
            INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
            INV_WAND2_IN: "img/inv-magic-wand1-in.png",
            INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
            FIREFLYD: "img/day-firefly.png",
            FIREFLYN: "img/night-firefly.png",
            HURT_FIREFLY: "img/hurt-firefly.png",
            INV_FIREFLY_OUT: "img/inv-firefly-out.png",
            INV_FIREFLY_IN: "img/inv-firefly-in.png",
            INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
            BABY_DRAGOND: "img/day-baby-dragon.png",
            BABY_DRAGONN: "img/night-baby-dragon.png",
            BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
            BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
            BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
            BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
            BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
            BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
            BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
            BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
            BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
            BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
            BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
            BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
            BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
            BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
            BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
            BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
            HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
            HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
            HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
            INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
            INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
            INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
            BABY_LAVAD: "img/day-baby-lava.png",
            BABY_LAVAN: "img/night-baby-lava.png",
            BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
            BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
            BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
            BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
            BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
            BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
            BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
            BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
            BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
            BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
            BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
            BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
            BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
            BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
            BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
            BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
            HURT_BABY_LAVA: "img/hurt-baby-lava.png",
            HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
            HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
            INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
            INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
            INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
            HAWKD: "img/day-falcon.png",
            HAWKN: "img/night-falcon.png",
            HAWK_ATTACKD: "img/day-falcon-angry.png",
            HAWK_ATTACKN: "img/night-falcon-angry.png",
            HAWK_GROUNDD: "img/day-falcon-ground.png",
            HAWK_GROUNDN: "img/night-falcon-ground.png",
            HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
            HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
            HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
            HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
            HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
            HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
            HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
            HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
            HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
            HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
            HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
            HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
            HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
            HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
            HAWK_TAMEDD: "img/day-falcon-tamed.png",
            HAWK_TAMEDN: "img/night-falcon-tamed.png",
            HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
            HURT_HAWK: "img/hurt-falcon.png",
            HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
            HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
            INV_HAWK_OUT: "img/inv-falcon-out.png",
            INV_HAWK_IN: "img/inv-falcon-in.png",
            INV_HAWK_CLICK: "img/inv-falcon-click.png",
            CRAB_BOSSD: "img/day-crab-boss.png",
            CRAB_BOSSN: "img/night-crab-boss.png",
            CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
            CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
            CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
            CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
            CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
            CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
            CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
            CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
            CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
            CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
            CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
            CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
            CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
            CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
            CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
            CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
            HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
            HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
            HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
            HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
            HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
            HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
            CRAB_STEP: "img/crab-step.png",
            INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
            INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
            INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
            CACTUSD: "img/day-cactus10.png",
            CACTUSN: "img/night-cactus10.png",
            INV_CACTUS_OUT: "img/inv-cactus-out.png",
            INV_CACTUS_IN: "img/inv-cactus-in.png",
            INV_CACTUS_CLICK: "img/inv-cactus-click.png",
            SCORPIOND: "img/day-scorpion.png",
            SCORPIONN: "img/night-scorpion.png",
            SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
            SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
            SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
            SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
            HURT_SCORPION: "img/hurt-scorpion.png",
            HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
            HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
            VULTURED: "img/day-vulture.png",
            VULTUREN: "img/night-vulture.png",
            VULTURE_ATTACKD: "img/day-vulture-angry.png",
            VULTURE_ATTACKN: "img/night-vulture-angry.png",
            VULTURE_GROUNDD: "img/day-vulture-ground.png",
            VULTURE_GROUNDN: "img/night-vulture-ground.png",
            VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
            VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
            VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
            VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
            VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
            VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
            VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
            VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
            VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
            VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
            VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
            VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
            VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
            VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
            VULTURE_TAMEDD: "img/day-vulture-tamed.png",
            VULTURE_TAMEDN: "img/night-vulture-tamed.png",
            HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
            HURT_VULTURE: "img/hurt-vulture.png",
            HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
            HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
            ALOE_VERAD: "img/day-aloe-vera.png",
            ALOE_VERAN: "img/night-aloe-vera.png",
            INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
            INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
            INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
            ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
            ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
            ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
            ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
            TURBAN1D: "img/day-turban1.png",
            TURBAN1N: "img/night-turban1.png",
            TURBAN2D: "img/day-turban2.png",
            TURBAN2N: "img/night-turban2.png",
            INV_TURBAN2_OUT: "img/inv-turban2-out.png",
            INV_TURBAN2_IN: "img/inv-turban2-in.png",
            INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
            INV_TURBAN1_OUT: "img/inv-turban1-out.png",
            INV_TURBAN1_IN: "img/inv-turban1-in.png",
            INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
            PITCHFORK2D: "img/day-pitchfork2.png",
            PITCHFORK2N: "img/night-pitchfork2.png",
            INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
            INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
            INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
            INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
            INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
            PILOT_HELMETD: "img/day-pilot-helmet.png",
            PILOT_HELMETN: "img/night-pilot-helmet.png",
            INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
            INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
            INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
            SAND_WORM0D: "img/day-sandworm0.png",
            SAND_WORM1D: "img/day-sandworm1.png",
            SAND_WORM2D: "img/day-sandworm2.png",
            SAND_WORM0N: "img/night-sandworm0.png",
            SAND_WORM1N: "img/night-sandworm1.png",
            SAND_WORM2N: "img/night-sandworm2.png",
            HURT_SAND_WORM0: "img/hurt-sandworm0.png",
            HURT_SAND_WORM1: "img/hurt-sandworm1.png",
            HURT_SAND_WORM2: "img/hurt-sandworm2.png",
            INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
            EMERALD0D: "img/day-emerald0.png",
            EMERALD0N: "img/night-emerald0.png",
            EMERALD1D: "img/day-emerald1.png",
            EMERALD1N: "img/night-emerald1.png",
            EMERALD2D: "img/day-emerald2.png",
            EMERALD2N: "img/night-emerald2.png",
            INV_EMERALD: "img/inv-emerald-click.png",
            INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
            INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
            INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
            EMERALD_MACHINED: "img/day-point-machine.png",
            EMERALD_MACHINEN: "img/night-point-machine.png",
            EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
            EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
            EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
            EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
            EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
            EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
            INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
            INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
            INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
            EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
            EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
            EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
            EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
            INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
            INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
            INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png",
            EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
            EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
            EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
            EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
            INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
            INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
            INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
            EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
            EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
            EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
            EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
            INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png",
            INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
            INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png",
            EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
            EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
            EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
            EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
            INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png",
            INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png",
            INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png",
            EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
            EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
            EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
            EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
            INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png",
            INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
            INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png",
            EXTRACTOR_CASES: "img/extractor-cases.png",
            HEND: "img/day-golden-hen.png",
            HENN: "img/night-golden-hen.png",
            CHICKEND: "img/day-golden-chicken.png",
            CHICKENN: "img/night-golden-chicken.png",
            HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
            HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
            LOGO_INTERFACE: "img/logo-interface.png",
            FOREST_MODE_HOVER: "img/forest-mode-hover.png",
            NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
            VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
            ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
            MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
            MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
            ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
            ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
            ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
            VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
            VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
            VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
            NORMAL_MODE_OUT: "img/normal-mode-out.png",
            NORMAL_MODE_IN: "img/normal-mode-in.png",
            NORMAL_MODE_CLICK: "img/normal-mode-click.png",
            FOREST_MODE_OUT: "img/forest-mode-out.png",
            FOREST_MODE_IN: "img/forest-mode-in.png",
            FOREST_MODE_CLICK: "img/forest-mode-click.png",
            MODE_COMMUNITY_OUT: "img/community-mode-out.png",
            MODE_COMMUNITY_IN: "img/community-mode-in.png",
            MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
            MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
            MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
            MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
            YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
            YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
            YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
            WIKI_BUTTON_OUT: "img/wiki-button-out.png",
            WIKI_BUTTON_IN: "img/wiki-button-in.png",
            WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
            TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
            TWITTER_BUTTON_IN: "img/twitter-button-in.png",
            TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
            FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
            FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
            FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
            REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
            REDDIT_BUTTON_IN: "img/reddit-button-in.png",
            REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
            DISCORD_BUTTON_OUT: "img/discord-button-out.png",
            DISCORD_BUTTON_IN: "img/discord-button-in.png",
            DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
            TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
            TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
            TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
            RESTART_OUT: "img/restart-out.png",
            RESTART_IN: "img/restart-in.png",
            RESTART_CLICK: "img/restart-click.png",
            GUIDE_OUT: "img/guide-out.png",
            GUIDE_IN: "img/guide-in.png",
            GUIDE_CLICK: "img/guide-click.png",
            COPY_PASTE_OUT: "img/copy-paste-out.png",
            COPY_PASTE_IN: "img/copy-paste-in.png",
            COPY_PASTE_CLICK: "img/copy-paste-click.png",
            LINKS_BG: "img/link-buttons-bg.png",
            CHANGELOG_BOX: "img/changelog-box2.png",
            CHANGELOG_BUTTON_OUT: "img/changelog_29.png",
            DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
            PROFILE_BUTTON_OUT: "img/profile-button-out.png",
            PROFILE_BUTTON_IN: "img/profile-button-in.png",
            PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
            LOGIN_BUTTON_OUT: "img/login-button-out.png",
            LOGIN_BUTTON_IN: "img/login-button-in.png",
            LOGIN_BUTTON_CLICK: "img/login-button-click.png",
            LOGIN_GOOGLE_OUT: "img/login-google-out.png",
            LOGIN_GOOGLE_IN: "img/login-google-in.png",
            LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
            LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
            LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
            LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
            ACCOUNT_BOX: "img/account-box.png",
            ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
            CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
            CLOSE_BUTTON_IN: "img/close-button-account-in.png",
            CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
            PLAY_BUTTON_OUT: "img/play-button-out.png",
            PLAY_BUTTON_IN: "img/play-button-in.png",
            PLAY_BUTTON_CLICK: "img/play-button-click.png",
            MODIFY_NAME_OUT: "img/modify-name-out.png",
            MODIFY_NAME_IN: "img/modify-name-in.png",
            MODIFY_NAME_CLICK: "img/modify-name-click.png",
            YES_BUTTON_OUT: "img/yes-button-out.png",
            YES_BUTTON_IN: "img/yes-button-in.png",
            YES_BUTTON_CLICK: "img/yes-button-click.png",
            YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
            YES_300_BUTTON_IN: "img/yes-300-button-in.png",
            YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
            NO_BUTTON_OUT: "img/no-button-out.png",
            NO_BUTTON_IN: "img/no-button-in.png",
            NO_BUTTON_CLICK: "img/no-button-click.png",
            NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
            NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
            NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
            SHOP_BUTTON_OUT: "img/shop-button-out.png",
            SHOP_BUTTON_IN: "img/shop-button-in.png",
            SHOP_BUTTON_CLICK: "img/shop-button-click.png",
            LOGOUT_OUT: "img/logout-out.png",
            LOGOUT_IN: "img/logout-in.png",
            LOGOUT_CLICK: "img/logout-click.png",
            TERMS_BUTTON_OUT: "img/terms-button-out.png",
            TERMS_BUTTON_IN: "img/terms-button-in.png",
            TERMS_BUTTON_CLICK: "img/terms-button-click.png",
            TUTORIAL_ICON: "img/tutorial-icon.png",
            SKINS_ICON: "img/skins-icon.png",
            SHOP_ICON: "img/shop-icon.png",
            PAINT_ICON: "img/paint-icon.png",
            LEADERBOARD_ICON: "img/leaderboard-icon.png",
            START_ICON: "img/start-icon.png",
            PROFILE_ICON: "img/profile-icon.png",
            SERVER_ACCESS_ICON: "img/server-access-icon2.png",
            ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
            ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
            ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
            ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
            ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
            ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
            AVATAR_RESUME: "img/lvl-player.png",
            AVATAR_LVL1: "img/avatar-player.png",
            AVATAR_LVL2: "img/avatar-player1.png",
            AVATAR_LVL3: "img/avatar-player2.png",
            AVATAR_LVL4: "img/avatar-player3.png",
            AVATAR_LVL5: "img/avatar-player4.png",
            AVATAR_LVL6: "img/avatar-player5.png",
            AVATAR_LVL7: "img/avatar-player6.png",
            AVATAR_LVL8: "img/avatar-player7.png",
            AVATAR_LVL9: "img/avatar-player8.png",
            AVATAR_LVL10: "img/avatar-player9.png",
            AVATAR_LVL11: "img/avatar-player10.png",
            AVATAR_LVL12: "img/avatar-player11.png",
            AVATAR_LVL13: "img/avatar-player12.png",
            AVATAR_LVL14: "img/avatar-player13.png",
            AVATAR_LVL15: "img/avatar-player14.png",
            AVATAR_LVL16: "img/avatar-player14.png",
            AVATAR_LVL17: "img/avatar-player14.png",
            AVATAR_LVL18: "img/avatar-player14.png",
            GOLDEN_BREAD: "img/golden-bread.png",
            BUY_BREAD_OUT: "img/buy-bread-out.png",
            BUY_BREAD_IN: "img/buy-bread-in.png",
            BUY_BREAD_CLICK: "img/buy-bread-click.png",
            GAUGE: "img/gauge.png",
            SEASON_4: "img/season-4-out.png",
            SEASON_4_IN: "img/season-4-in.png",
            SEASON_4_OUT: "img/season-4-click.png",
            SEASON4_BOX: "img/season4-box.png",
            SEASON_5: "img/season-5-out.png",
            SEASON_5_IN: "img/season-5-in.png",
            SEASON_5_OUT: "img/season-5-click.png",
            SEASON5_BOX: "img/season5-box.png",
            PROFILE_BOX: "img/profile2-box.png",
            SKINS_BOX: "img/skins-box.png",
            SHOP_BOX: "img/shop-box.png",
            PRIVATE_SERVER_BOX: "img/private-server-box.png",
            SERVER_LOCATION_BOX: "img/location-box.png",
            SERVER_DURATION_BOX: "img/server-duration-box.png",
            TUTORIAL_BOX: "img/tutorial-box.png",
            LEADERBOARD_BOX: "img/leaderboard1-box.png",
            BUY_BREAD_BOX: "img/buy-breads-box.png",
            BAG_BOX: "img/bag-box.png",
            CRATE_BOX: "img/deadbox-box.png",
            BOOK_BOX: "img/book-box.png",
            ACCESSORIES_BOX: "img/accessories-box.png",
            CUSTOM_SKIN_BOX: "img/customskin-box.png",
            BAG_REMAIN_BOX: "img/bag-lasts.png",
            SERVER_REMAIN_BOX: "img/server-lasts.png",
            SERVER_ACCESS_BOX: "img/server-access-box2.png",
            LOOT_BOX: "img/lootbox-box.png",
            CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
            CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
            CHEATING_BOX: "img/cheating-box.png",
            DAILY_QUEST_BOX: "img/daily-quest-box.png",
            DAILY_5_BREAD: "img/daily-5-bread.png",
            DAILY_10_BREAD: "img/daily-10-bread.png",
            DAILY_VALID: "img/daily-valid.png",
            NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
            NORMAL_PROFILE_IN: "img/normal-profile-in.png",
            NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
            FOREST_PROFILE_OUT: "img/forest-profile-out.png",
            FOREST_PROFILE_IN: "img/forest-profile-in.png",
            FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
            ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
            ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
            ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
            VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
            VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
            VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
            TOTAL_PROFILE_OUT: "img/total-profile-out.png",
            TOTAL_PROFILE_IN: "img/total-profile-in.png",
            TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
            SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
            SEASON1_PROFILE_IN: "img/season1-profile-in.png",
            SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
            SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
            SEASON2_PROFILE_IN: "img/season2-profile-in.png",
            SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
            SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
            SEASON3_PROFILE_IN: "img/season3-profile-in.png",
            SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
            SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
            SEASON4_PROFILE_IN: "img/season4-profile-in.png",
            SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
            SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
            SEASON5_PROFILE_IN: "img/season5-profile-in.png",
            SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
            LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
            LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
            RED_LOCKED: "img/bg-red-locked.png",
            SKIN_BUTTON_OUT: "img/skin-button-out.png",
            SKIN_BUTTON_IN: "img/skin-button-in.png",
            SKIN_BUTTON_CLICK: "img/skin-button-click.png",
            ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
            ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
            ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
            BAG_BUTTON_OUT: "img/bag-button-out.png",
            BAG_BUTTON_IN: "img/bag-button-in.png",
            BAG_BUTTON_CLICK: "img/bag-button-click.png",
            BOOK_BUTTON_OUT: "img/book-button-out.png",
            BOOK_BUTTON_IN: "img/book-button-in.png",
            BOOK_BUTTON_CLICK: "img/book-button-click.png",
            CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
            CRATE_BUTTON_IN: "img/deadbox-button-in.png",
            CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
            LOOT_BUTTON_OUT: "img/loot-button-out.png",
            LOOT_BUTTON_IN: "img/loot-button-in.png",
            LOOT_BUTTON_CLICK: "img/loot-button-click.png",
            FREE_ITEM_OUT: "img/free-item-out.png",
            FREE_ITEM_IN: "img/free-item-in.png",
            FREE_ITEM_CLICK: "img/free-item-click.png",
            WOOD_ITEM_OUT: "img/wood-item-out.png",
            WOOD_ITEM_IN: "img/wood-item-in.png",
            WOOD_ITEM_CLICK: "img/wood-item-click.png",
            STONE_ITEM_OUT: "img/stone-item.png",
            STONE_ITEM_IN: "img/stone-item-in.png",
            STONE_ITEM_CLICK: "img/stone-item-click.png",
            GOLD_ITEM_OUT: "img/gold-item.png",
            GOLD_ITEM_IN: "img/gold-item-in.png",
            GOLD_ITEM_CLICK: "img/gold-item-click.png",
            DIAMOND_ITEM_OUT: "img/diamond-item.png",
            DIAMOND_ITEM_IN: "img/diamond-item-in.png",
            DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
            AMETHYST_ITEM_OUT: "img/amethyst-item.png",
            AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
            AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
            REIDITE_ITEM_OUT: "img/reidite-item.png",
            REIDITE_ITEM_IN: "img/reidite-item-in.png",
            REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
            SPECIAL_ITEM_OUT: "img/special-item-out.png",
            SPECIAL_ITEM_IN: "img/special-item-in.png",
            SPECIAL_ITEM_CLICK: "img/special-item-click.png",
            LEVEL_ITEM_OUT: "img/level-item-out.png",
            LEVEL_ITEM_IN: "img/level-item-in.png",
            LEVEL_ITEM_CLICK: "img/level-item-click.png",
            SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
            SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
            SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
            SKIN_NEXT_OUT: "img/skin-next-out.png",
            SKIN_NEXT_IN: "img/skin-next-in.png",
            SKIN_NEXT_CLICK: "img/skin-next-click.png",
            BACK_BUTTON_OUT: "img/back-button-out.png",
            BACK_BUTTON_IN: "img/back-button-in.png",
            BACK_BUTTON_CLICK: "img/back-button-click.png",
            GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
            GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
            GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
            CURRENCY1_OUT: "img/currency1-out.png",
            CURRENCY1_IN: "img/currency1-in.png",
            CURRENCY1_CLICK: "img/currency1-click.png",
            CURRENCY2_OUT: "img/currency2-out.png",
            CURRENCY2_IN: "img/currency2-in.png",
            CURRENCY2_CLICK: "img/currency2-click.png",
            CURRENCY3_OUT: "img/currency3-out.png",
            CURRENCY3_IN: "img/currency3-in.png",
            CURRENCY3_CLICK: "img/currency3-click.png",
            CURRENCY4_OUT: "img/currency4-out.png",
            CURRENCY4_IN: "img/currency4-in.png",
            CURRENCY4_CLICK: "img/currency4-click.png",
            CURRENCY5_OUT: "img/currency5-out.png",
            CURRENCY5_IN: "img/currency5-in.png",
            CURRENCY5_CLICK: "img/currency5-click.png",
            PRICE1_OUT: "img/price1-out.png",
            PRICE1_IN: "img/price1-in.png",
            PRICE1_CLICK: "img/price1-click.png",
            PRICE2_OUT: "img/price2-out.png",
            PRICE2_IN: "img/price2-in.png",
            PRICE2_CLICK: "img/price2-click.png",
            PRICE3_OUT: "img/price3-out.png",
            PRICE3_IN: "img/price3-in.png",
            PRICE3_CLICK: "img/price3-click.png",
            PRICE4_OUT: "img/price4-out.png",
            PRICE4_IN: "img/price4-in.png",
            PRICE4_CLICK: "img/price4-click.png",
            PRICE5_OUT: "img/price5-out.png",
            PRICE5_IN: "img/price5-in.png",
            PRICE5_CLICK: "img/price5-click.png",
            BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
            BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
            BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
            ATLANTA_OUT: "img/atlanta-out.png",
            ATLANTA_IN: "img/atlanta-in.png",
            ATLANTA_CLICK: "img/atlanta-click.png",
            DALLAS_OUT: "img/dallas-out.png",
            DALLAS_IN: "img/dallas-in.png",
            DALLAS_CLICK: "img/dallas-click.png",
            FREMONT_OUT: "img/fremont-out.png",
            FREMONT_IN: "img/fremont-in.png",
            FREMONT_CLICK: "img/fremont-click.png",
            NEWARK_OUT: "img/newark-out.png",
            NEWARK_IN: "img/newark-in.png",
            NEWARK_CLICK: "img/newark-click.png",
            TORONTO_OUT: "img/toronto-out.png",
            TORONTO_IN: "img/toronto-in.png",
            TORONTO_CLICK: "img/toronto-click.png",
            SINGAPORE_OUT: "img/singapore-out.png",
            SINGAPORE_IN: "img/singapore-in.png",
            SINGAPORE_CLICK: "img/singapore-click.png",
            FRANKFURT_OUT: "img/frankfurt-out.png",
            FRANKFURT_IN: "img/frankfurt-in.png",
            FRANKFURT_CLICK: "img/frankfurt-click.png",
            LONDON_OUT: "img/london-out.png",
            LONDON_IN: "img/london-in.png",
            LONDON_CLICK: "img/london-click.png",
            MUMBAI_OUT: "img/mumbai-out.png",
            MUMBAI_IN: "img/mumbai-in.png",
            MUMBAI_CLICK: "img/mumbai-click.png",
            TOKYO_OUT: "img/tokyo-out.png",
            TOKYO_IN: "img/tokyo-in.png",
            TOKYO_CLICK: "img/tokyo-click.png",
            YES_LOCATION_OUT: "img/yes-location-out.png",
            YES_LOCATION_IN: "img/yes-location-in.png",
            YES_LOCATION_CLICK: "img/yes-location-click.png",
            DAYS3_OUT: "img/3days-out.png",
            DAYS3_IN: "img/3days-in.png",
            DAYS3_CLICK: "img/3days-click.png",
            DAYS7_OUT: "img/7days-out.png",
            DAYS7_IN: "img/7days-in.png",
            DAYS7_CLICK: "img/7days-click.png",
            DAYS30_OUT: "img/30days-out.png",
            DAYS30_IN: "img/30days-in.png",
            DAYS30_CLICK: "img/30days-click.png",
            DAYS90_OUT: "img/90days-out.png",
            DAYS90_IN: "img/90days-in.png",
            DAYS90_CLICK: "img/90days-click.png",
            SPIN1: "img/spin1.png",
            SPIN2: "img/spin2.png",
            SPIN3: "img/spin3.png",
            SPIN4: "img/spin4.png",
            SPIN5: "img/spin5.png",
            SPIN6: "img/spin6.png",
            ARROW_SPIN: "img/arrow-spin.png",
            SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
            SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
            SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
            SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
            SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
            SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
            SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
            SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
            SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
            SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
            SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
            SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
            SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
            SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
            SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
            SPIN_LIGHT: "img/spin-light.png",
            TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
            TUTO_WIKI_IN: "img/tuto-wiki-in.png",
            TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
            TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
            TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
            TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
            TUTO_NEXT_OUT: "img/tuto-next-out.png",
            TUTO_NEXT_IN: "img/tuto-next-in.png",
            TUTO_NEXT_CLICK: "img/tuto-next-click.png",
            TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
            TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
            TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
            SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
            SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
            SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
            LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
            LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
            LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
            KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
            KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
            KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
            ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
            ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
            ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
            TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
            TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
            TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
            WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
            WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
            WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
            SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
            SEASON1_LEADERBOARD_IN: "img/season1-in.png",
            SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
            SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
            SEASON2_LEADERBOARD_IN: "img/season2--in.png",
            SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
            SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
            SEASON3_LEADERBOARD_IN: "img/season3-in.png",
            SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
            SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
            SEASON4_LEADERBOARD_IN: "img/season4-in.png",
            SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
            SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
            SEASON5_LEADERBOARD_IN: "img/season5-in.png",
            SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
            TOTAL_LEAD_OUT: "img/total-lead-out.png",
            TOTAL_LEAD_IN: "img/total-lead-in.png",
            TOTAL_LEAD_CLICK: "img/total-lead-click.png",
            NORMAL_LEAD_OUT: "img/normal-lead-out.png",
            NORMAL_LEAD_IN: "img/normal-lead-in.png",
            NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
            FOREST_LEAD_OUT: "img/forest-lead-out.png",
            FOREST_LEAD_IN: "img/forest-lead-in.png",
            FOREST_LEAD_CLICK: "img/forest-lead-click.png",
            VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
            VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
            VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
            ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
            ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
            ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
            LEVEL5D: "img/day-level5.png",
            LEVEL5N: "img/night-level5.png",
            LEVEL10D: "img/day-level10.png",
            LEVEL10N: "img/night-level10.png",
            LEVEL15D: "img/day-level15.png",
            LEVEL15N: "img/night-level15.png",
            LEVEL20D: "img/day-level20.png",
            LEVEL20N: "img/night-level20.png",
            LEVEL25D: "img/day-level25.png",
            LEVEL25N: "img/night-level25.png",
            LEVEL30D: "img/day-level30.png",
            LEVEL30N: "img/night-level30.png",
            LEVEL35D: "img/day-level35.png",
            LEVEL35N: "img/night-level35.png",
            LEVEL40D: "img/day-level40.png",
            LEVEL40N: "img/night-level40.png",
            LEVEL45D: "img/day-level45.png",
            LEVEL45N: "img/night-level45.png",
            LEVEL50D: "img/day-level50.png",
            LEVEL50N: "img/night-level50.png",
            LEVEL55D: "img/day-level55.png",
            LEVEL55N: "img/night-level55.png",
            LEVEL60D: "img/day-level60.png",
            LEVEL60N: "img/night-level60.png",
            SKIN_DEVASTD: "img/day-skin-devast0.png",
            SKIN_DEVASTN: "img/night-skin-devast0.png",
            HAND_DEVASTD: "img/day-hand-devaster.png",
            HAND_DEVASTN: "img/night-hand-devaster.png",
            SKIN_STARD: "img/day-skin-star0.png",
            SKIN_STARN: "img/night-skin-star0.png",
            HAND_STARD: "img/day-hand-star0.png",
            HAND_STARN: "img/night-hand-star0.png",
            SKIN_VAMPIRED: "img/day-vampire.png",
            SKIN_VAMPIREN: "img/night-vampire.png",
            HAND_VAMPIRED: "img/day-hand-vampire.png",
            HAND_VAMPIREN: "img/night-hand-vampire.png",
            SKIN_ZOMBIED: "img/day-zombie.png",
            SKIN_ZOMBIEN: "img/night-zombie.png",
            HAND_ZOMBIED: "img/day-hand-zombie.png",
            HAND_ZOMBIEN: "img/night-hand-zombie.png",
            SKIN_ROBOTD: "img/day-skin113.png",
            SKIN_ROBOTN: "img/night-skin113.png",
            HAND_ROBOTD: "img/day-hand-skin113.png",
            HAND_ROBOTN: "img/night-hand-skin113.png",
            SKIN0D: "img/day-skin0.png",
            SKIN0N: "img/night-skin0.png",
            SKIN1D: "img/day-skin1.png",
            SKIN1N: "img/night-skin1.png",
            SKIN2D: "img/day-skin2.png",
            SKIN2N: "img/night-skin2.png",
            SKIN3D: "img/day-skin3.png",
            SKIN3N: "img/night-skin3.png",
            SKIN4D: "img/day-skin4.png",
            SKIN4N: "img/night-skin4.png",
            SKIN5D: "img/day-skin5.png",
            SKIN5N: "img/night-skin5.png",
            SKIN6D: "img/day-skin6.png",
            SKIN6N: "img/night-skin6.png",
            SKIN7D: "img/day-skin7.png",
            SKIN7N: "img/night-skin7.png",
            SKIN8D: "img/day-skin8.png",
            SKIN8N: "img/night-skin8.png",
            SKIN9D: "img/day-skin9.png",
            SKIN9N: "img/night-skin9.png",
            SKIN10D: "img/day-skin10.png",
            SKIN10N: "img/night-skin10.png",
            SKIN11D: "img/day-skin11.png",
            SKIN11N: "img/night-skin11.png",
            SKIN12D: "img/day-skin12.png",
            SKIN12N: "img/night-skin12.png",
            SKIN13D: "img/day-skin13.png",
            SKIN13N: "img/night-skin13.png",
            SKIN14D: "img/day-skin14.png",
            SKIN14N: "img/night-skin14.png",
            SKIN15D: "img/day-skin15.png",
            SKIN15N: "img/night-skin15.png",
            SKIN16D: "img/day-skin16.png",
            SKIN16N: "img/night-skin16.png",
            SKIN17D: "img/day-skin17.png",
            SKIN17N: "img/night-skin17.png",
            SKIN18D: "img/day-skin18.png",
            SKIN18N: "img/night-skin18.png",
            SKIN19D: "img/day-skin19.png",
            SKIN19N: "img/night-skin19.png",
            SKIN20D: "img/day-skin20.png",
            SKIN20N: "img/night-skin20.png",
            SKIN21D: "img/day-skin21.png",
            SKIN21N: "img/night-skin21.png",
            SKIN22D: "img/day-skin22.png",
            SKIN22N: "img/night-skin22.png",
            SKIN23D: "img/day-skin23.png",
            SKIN23N: "img/night-skin23.png",
            SKIN24D: "img/day-skin24.png",
            SKIN24N: "img/night-skin24.png",
            SKIN25D: "img/day-skin25.png",
            SKIN25N: "img/night-skin25.png",
            SKIN26D: "img/day-skin26.png",
            SKIN26N: "img/night-skin26.png",
            SKIN27D: "img/day-skin27.png",
            SKIN27N: "img/night-skin27.png",
            SKIN28D: "img/day-skin28.png",
            SKIN28N: "img/night-skin28.png",
            SKIN29D: "img/day-skin29.png",
            SKIN29N: "img/night-skin29.png",
            SKIN30D: "img/day-skin30.png",
            SKIN30N: "img/night-skin30.png",
            SKIN31D: "img/day-skin31.png",
            SKIN31N: "img/night-skin31.png",
            SKIN32D: "img/day-skin32.png",
            SKIN32N: "img/night-skin32.png",
            SKIN33D: "img/day-skin33.png",
            SKIN33N: "img/night-skin33.png",
            SKIN34D: "img/day-skin34.png",
            SKIN34N: "img/night-skin34.png",
            SKIN35D: "img/day-skin35.png",
            SKIN35N: "img/night-skin35.png",
            SKIN36D: "img/day-skin36.png",
            SKIN36N: "img/night-skin36.png",
            SKIN37D: "img/day-skin37.png",
            SKIN37N: "img/night-skin37.png",
            SKIN38D: "img/day-skin38.png",
            SKIN38N: "img/night-skin38.png",
            SKIN39D: "img/day-skin39.png",
            SKIN39N: "img/night-skin39.png",
            SKIN40D: "img/day-skin40.png",
            SKIN40N: "img/night-skin40.png",
            SKIN41D: "img/day-skin41.png",
            SKIN41N: "img/night-skin41.png",
            SKIN42D: "img/day-skin42.png",
            SKIN42N: "img/night-skin42.png",
            SKIN43D: "img/day-skin43.png",
            SKIN43N: "img/night-skin43.png",
            SKIN44D: "img/day-skin44.png",
            SKIN44N: "img/night-skin44.png",
            SKIN45D: "img/day-skin45.png",
            SKIN45N: "img/night-skin45.png",
            SKIN46D: "img/day-skin46.png",
            SKIN46N: "img/night-skin46.png",
            SKIN47D: "img/day-skin47.png",
            SKIN47N: "img/night-skin47.png",
            SKIN48D: "img/day-skin48.png",
            SKIN48N: "img/night-skin48.png",
            SKIN49D: "img/day-skin49.png",
            SKIN49N: "img/night-skin49.png",
            SKIN50D: "img/day-skin50.png",
            SKIN50N: "img/night-skin50.png",
            SKIN51D: "img/day-skin51.png",
            SKIN51N: "img/night-skin51.png",
            SKIN52D: "img/day-skin52.png",
            SKIN52N: "img/night-skin52.png",
            SKIN53D: "img/day-skin53.png",
            SKIN53N: "img/night-skin53.png",
            SKIN54D: "img/day-skin54.png",
            SKIN54N: "img/night-skin54.png",
            SKIN55D: "img/day-skin55.png",
            SKIN55N: "img/night-skin55.png",
            SKIN56D: "img/day-skin56.png",
            SKIN56N: "img/night-skin56.png",
            SKIN57D: "img/day-skin57.png",
            SKIN57N: "img/night-skin57.png",
            SKIN58D: "img/day-skin58.png",
            SKIN58N: "img/night-skin58.png",
            SKIN59D: "img/day-skin59.png",
            SKIN59N: "img/night-skin59.png",
            SKIN60D: "img/day-skin60.png",
            SKIN60N: "img/night-skin60.png",
            SKIN61D: "img/day-skin61.png",
            SKIN61N: "img/night-skin61.png",
            SKIN62D: "img/day-skin62.png",
            SKIN62N: "img/night-skin62.png",
            SKIN63D: "img/day-skin63.png",
            SKIN63N: "img/night-skin63.png",
            SKIN64D: "img/day-skin64.png",
            SKIN64N: "img/night-skin64.png",
            SKIN65D: "img/day-skin65.png",
            SKIN65N: "img/night-skin65.png",
            SKIN66D: "img/day-skin66.png",
            SKIN66N: "img/night-skin66.png",
            SKIN67D: "img/day-skin67.png",
            SKIN67N: "img/night-skin67.png",
            SKIN68D: "img/day-skin68.png",
            SKIN68N: "img/night-skin68.png",
            SKIN69D: "img/day-skin69.png",
            SKIN69N: "img/night-skin69.png",
            SKIN70D: "img/day-skin70.png",
            SKIN70N: "img/night-skin70.png",
            SKIN71D: "img/day-skin71.png",
            SKIN71N: "img/night-skin71.png",
            SKIN72D: "img/day-skin72.png",
            SKIN72N: "img/night-skin72.png",
            SKIN73D: "img/day-skin73.png",
            SKIN73N: "img/night-skin73.png",
            SKIN74D: "img/day-skin74.png",
            SKIN74N: "img/night-skin74.png",
            SKIN75D: "img/day-skin75.png",
            SKIN75N: "img/night-skin75.png",
            SKIN76D: "img/day-skin76.png",
            SKIN76N: "img/night-skin76.png",
            SKIN77D: "img/day-skin77.png",
            SKIN77N: "img/night-skin77.png",
            SKIN78D: "img/day-skin78.png",
            SKIN78N: "img/night-skin78.png",
            SKIN79D: "img/day-skin79.png",
            SKIN79N: "img/night-skin79.png",
            SKIN80D: "img/day-skin80.png",
            SKIN80N: "img/night-skin80.png",
            SKIN81D: "img/day-skin81.png",
            SKIN81N: "img/night-skin81.png",
            SKIN82D: "img/day-skin82.png",
            SKIN82N: "img/night-skin82.png",
            SKIN83D: "img/day-skin83.png",
            SKIN83N: "img/night-skin83.png",
            SKIN84D: "img/day-skin84.png",
            SKIN84N: "img/night-skin84.png",
            SKIN85D: "img/day-skin85.png",
            SKIN85N: "img/night-skin85.png",
            SKIN86D: "img/day-skin86.png",
            SKIN86N: "img/night-skin86.png",
            SKIN87D: "img/day-skin87.png",
            SKIN87N: "img/night-skin87.png",
            SKIN88D: "img/day-skin88.png",
            SKIN88N: "img/night-skin88.png",
            SKIN89D: "img/day-skin89.png",
            SKIN89N: "img/night-skin89.png",
            SKIN90D: "img/day-skin90.png",
            SKIN90N: "img/night-skin90.png",
            SKIN91D: "img/day-skin91.png",
            SKIN91N: "img/night-skin91.png",
            SKIN92D: "img/day-skin92.png",
            SKIN92N: "img/night-skin92.png",
            SKIN93D: "img/day-skin93.png",
            SKIN93N: "img/night-skin93.png",
            SKIN94D: "img/day-skin94.png",
            SKIN94N: "img/night-skin94.png",
            SKIN95D: "img/day-skin95.png",
            SKIN95N: "img/night-skin95.png",
            SKIN96D: "img/day-skin96.png",
            SKIN96N: "img/night-skin96.png",
            SKIN97D: "img/day-skin97.png",
            SKIN97N: "img/night-skin97.png",
            SKIN98D: "img/day-skin98.png",
            SKIN98N: "img/night-skin98.png",
            SKIN99D: "img/day-skin99.png",
            SKIN99N: "img/night-skin99.png",
            SKIN100D: "img/day-skin100.png",
            SKIN100N: "img/night-skin100.png",
            SKIN101D: "img/day-skin101.png",
            SKIN101N: "img/night-skin101.png",
            SKIN102D: "img/day-skin102.png",
            SKIN102N: "img/night-skin102.png",
            SKIN103D: "img/day-skin103.png",
            SKIN103N: "img/night-skin103.png",
            SKIN104D: "img/day-skin104.png",
            SKIN104N: "img/night-skin104.png",
            SKIN105D: "img/day-skin105.png",
            SKIN105N: "img/night-skin105.png",
            SKIN106D: "img/day-skin106.png",
            SKIN106N: "img/night-skin106.png",
            SKIN107D: "img/day-skin107.png",
            SKIN107N: "img/night-skin107.png",
            SKIN108D: "img/day-skin108.png",
            SKIN108N: "img/night-skin108.png",
            SKIN109D: "img/day-skin109.png",
            SKIN109N: "img/night-skin109.png",
            SKIN110D: "img/day-skin110.png",
            SKIN110N: "img/night-skin110.png",
            SKIN111D: "img/day-skin111.png",
            SKIN111N: "img/night-skin111.png",
            SKIN112D: "img/day-skin112.png",
            SKIN112N: "img/night-skin112.png",
            SKIN113D: "img/day-skin113.png",
            SKIN113N: "img/night-skin113.png",
            SKIN114D: "img/day-skin114.png",
            SKIN114N: "img/night-skin114.png",
            SKIN115D: "img/day-skin115.png",
            SKIN115N: "img/night-skin115.png",
            SKIN116D: "img/day-skin116.png",
            SKIN116N: "img/night-skin116.png",
            SKIN117D: "img/day-skin117.png",
            SKIN117N: "img/night-skin117.png",
            SKIN118D: "img/day-skin118.png",
            SKIN118N: "img/night-skin118.png",
            SKIN119D: "img/day-skin119.png",
            SKIN119N: "img/night-skin119.png",
            SKIN120D: "img/day-skin120.png",
            SKIN120N: "img/night-skin120.png",
            SKIN121D: "img/day-skin121.png",
            SKIN121N: "img/night-skin121.png",
            SKIN122D: "img/day-skin122.png",
            SKIN122N: "img/night-skin122.png",
            SKIN123D: "img/day-skin123.png",
            SKIN123N: "img/night-skin123.png",
            SKIN124D: "img/day-skin124.png",
            SKIN124N: "img/night-skin124.png",
            SKIN125D: "img/day-skin125.png",
            SKIN125N: "img/night-skin125.png",
            SKIN126D: "img/day-skin126.png",
            SKIN126N: "img/night-skin126.png",
            SKIN127D: "img/day-skin127.png",
            SKIN127N: "img/night-skin127.png",
            SKIN128D: "img/day-skin128.png",
            SKIN128N: "img/night-skin128.png",
            SKIN129D: "img/day-skin129.png",
            SKIN129N: "img/night-skin129.png",
            SKIN130D: "img/day-skin130-1.png",
            SKIN130N: "img/night-skin130-1.png",
            SKIN131D: "img/day-skin131.png",
            SKIN131N: "img/night-skin131.png",
            SKIN132D: "img/day-skin132.png",
            SKIN132N: "img/night-skin132.png",
            SKIN133D: "img/day-skin133.png",
            SKIN133N: "img/night-skin133.png",
            SKIN134D: "img/day-skin134.png",
            SKIN134N: "img/night-skin134.png",
            SKIN135D: "img/day-skin135.png",
            SKIN135N: "img/night-skin135.png",
            SKIN136D: "img/day-skin136.png",
            SKIN136N: "img/night-skin136.png",
            SKIN137D: "img/day-skin137.png",
            SKIN137N: "img/night-skin137.png",
            SKIN138D: "img/day-skin138.png",
            SKIN138N: "img/night-skin138.png",
            SKIN139D: "img/day-skin139.png",
            SKIN139N: "img/night-skin139.png",
            SKIN140D: "img/day-skin140.png",
            SKIN140N: "img/night-skin140.png",
            SKIN141D: "img/day-skin141.png",
            SKIN141N: "img/night-skin141.png",
            SKIN142D: "img/day-skin142.png",
            SKIN142N: "img/night-skin142.png",
            SKIN143D: "img/day-skin143.png",
            SKIN143N: "img/night-skin143.png",
            SKIN144D: "img/day-skin144.png",
            SKIN144N: "img/night-skin144.png",
            SKIN145D: "img/day-skin145.png",
            SKIN145N: "img/night-skin145.png",
            SKIN146D: "img/day-skin146.png",
            SKIN146N: "img/night-skin146.png",
            SKIN147D: "img/day-skin147.png",
            SKIN147N: "img/night-skin147.png",
            SKIN148D: "img/day-skin148.png",
            SKIN148N: "img/night-skin148.png",
            SKIN149D: "img/day-skin149.png",
            SKIN149N: "img/night-skin149.png",
            SKIN150D: "img/day-skin150.png",
            SKIN150N: "img/night-skin150.png",
            HAND_SKIN0D: "img/day-hand-skin0.png",
            HAND_SKIN0N: "img/night-hand-skin0.png",
            HAND_SKIN1D: "img/day-hand-skin1.png",
            HAND_SKIN1N: "img/night-hand-skin1.png",
            HAND_SKIN2D: "img/day-hand-skin2.png",
            HAND_SKIN2N: "img/night-hand-skin2.png",
            HAND_SKIN3D: "img/day-hand-skin3.png",
            HAND_SKIN3N: "img/night-hand-skin3.png",
            HAND_SKIN4D: "img/day-hand-skin4.png",
            HAND_SKIN4N: "img/night-hand-skin4.png",
            HAND_SKIN5D: "img/day-hand-skin5.png",
            HAND_SKIN5N: "img/night-hand-skin5.png",
            HAND_SKIN6D: "img/day-hand-skin6.png",
            HAND_SKIN6N: "img/night-hand-skin6.png",
            HAND_SKIN7D: "img/day-hand-skin6.png",
            HAND_SKIN7N: "img/night-hand-skin6.png",
            HAND_SKIN8D: "img/day-hand-skin8.png",
            HAND_SKIN8N: "img/night-hand-skin8.png",
            HAND_SKIN9D: "img/day-hand-skin9.png",
            HAND_SKIN9N: "img/night-hand-skin9.png",
            HAND_SKIN10D: "img/day-hand-skin10.png",
            HAND_SKIN10N: "img/night-hand-skin10.png",
            HAND_SKIN11D: "img/day-hand-skin11.png",
            HAND_SKIN11N: "img/night-hand-skin11.png",
            HAND_SKIN12D: "img/day-hand-skin12.png",
            HAND_SKIN12N: "img/night-hand-skin12.png",
            HAND_SKIN13D: "img/day-hand-skin13.png",
            HAND_SKIN13N: "img/night-hand-skin13.png",
            HAND_SKIN14D: "img/day-hand-skin14.png",
            HAND_SKIN14N: "img/night-hand-skin14.png",
            HAND_SKIN15D: "img/day-hand-skin15.png",
            HAND_SKIN15N: "img/night-hand-skin15.png",
            HAND_SKIN16D: "img/day-hand-skin16.png",
            HAND_SKIN16N: "img/night-hand-skin16.png",
            HAND_SKIN17D: "img/day-hand-skin17.png",
            HAND_SKIN17N: "img/night-hand-skin17.png",
            HAND_SKIN18D: "img/day-hand-skin18.png",
            HAND_SKIN18N: "img/night-hand-skin18.png",
            HAND_SKIN19D: "img/day-hand-skin19.png",
            HAND_SKIN19N: "img/night-hand-skin19.png",
            HAND_SKIN20D: "img/day-hand-skin20.png",
            HAND_SKIN20N: "img/night-hand-skin20.png",
            HAND_SKIN21D: "img/day-hand-skin21.png",
            HAND_SKIN21N: "img/night-hand-skin21.png",
            HAND_SKIN22D: "img/day-hand-skin22.png",
            HAND_SKIN22N: "img/night-hand-skin22.png",
            HAND_SKIN23D: "img/day-hand-skin23.png",
            HAND_SKIN23N: "img/night-hand-skin23.png",
            HAND_SKIN24D: "img/day-hand-skin24.png",
            HAND_SKIN24N: "img/night-hand-skin24.png",
            HAND_SKIN25D: "img/day-hand-skin25.png",
            HAND_SKIN25N: "img/night-hand-skin25.png",
            HAND_SKIN26D: "img/day-hand-skin26.png",
            HAND_SKIN26N: "img/night-hand-skin26.png",
            HAND_SKIN27D: "img/day-hand-skin27.png",
            HAND_SKIN27N: "img/night-hand-skin27.png",
            HAND_SKIN28D: "img/day-hand-skin28.png",
            HAND_SKIN28N: "img/night-hand-skin28.png",
            HAND_SKIN29D: "img/day-hand-skin29.png",
            HAND_SKIN29N: "img/night-hand-skin29.png",
            HAND_SKIN30D: "img/day-hand-skin30.png",
            HAND_SKIN30N: "img/night-hand-skin30.png",
            HAND_SKIN31D: "img/day-hand-skin31.png",
            HAND_SKIN31N: "img/night-hand-skin31.png",
            HAND_SKIN32D: "img/day-hand-skin32.png",
            HAND_SKIN32N: "img/night-hand-skin32.png",
            HAND_SKIN33D: "img/day-hand-skin33.png",
            HAND_SKIN33N: "img/night-hand-skin33.png",
            HAND_SKIN34D: "img/day-hand-skin34.png",
            HAND_SKIN34N: "img/night-hand-skin34.png",
            HAND_SKIN35D: "img/day-hand-skin35.png",
            HAND_SKIN35N: "img/night-hand-skin35.png",
            HAND_SKIN36D: "img/day-hand-skin36.png",
            HAND_SKIN36N: "img/night-hand-skin36.png",
            HAND_SKIN37D: "img/day-hand-skin37.png",
            HAND_SKIN37N: "img/night-hand-skin37.png",
            HAND_SKIN38D: "img/day-hand-skin38.png",
            HAND_SKIN38N: "img/night-hand-skin38.png",
            HAND_SKIN39D: "img/day-hand-skin39.png",
            HAND_SKIN39N: "img/night-hand-skin39.png",
            HAND_SKIN40D: "img/day-hand-skin40.png",
            HAND_SKIN40N: "img/night-hand-skin40.png",
            HAND_SKIN41D: "img/day-hand-skin41.png",
            HAND_SKIN41N: "img/night-hand-skin41.png",
            HAND_SKIN42D: "img/day-hand-skin42.png",
            HAND_SKIN42N: "img/night-hand-skin42.png",
            HAND_SKIN43D: "img/day-hand-skin43.png",
            HAND_SKIN43N: "img/night-hand-skin43.png",
            HAND_SKIN44D: "img/day-hand-skin16.png",
            HAND_SKIN44N: "img/night-hand-skin16.png",
            HAND_SKIN45D: "img/day-hand-skin45.png",
            HAND_SKIN45N: "img/night-hand-skin45.png",
            HAND_SKIN46D: "img/day-hand-skin46.png",
            HAND_SKIN46N: "img/night-hand-skin46.png",
            HAND_SKIN47D: "img/day-hand-skin47.png",
            HAND_SKIN47N: "img/night-hand-skin47.png",
            HAND_SKIN48D: "img/day-hand-skin48.png",
            HAND_SKIN48N: "img/night-hand-skin48.png",
            HAND_SKIN49D: "img/day-hand-skin49.png",
            HAND_SKIN49N: "img/night-hand-skin49.png",
            HAND_SKIN50D: "img/day-hand-skin49.png",
            HAND_SKIN50N: "img/night-hand-skin49.png",
            HAND_SKIN51D: "img/day-hand-skin51.png",
            HAND_SKIN51N: "img/night-hand-skin51.png",
            HAND_SKIN52D: "img/day-hand-skin52.png",
            HAND_SKIN52N: "img/night-hand-skin52.png",
            HAND_SKIN53D: "img/day-hand-skin53.png",
            HAND_SKIN53N: "img/night-hand-skin53.png",
            HAND_SKIN54D: "img/day-hand-skin53.png",
            HAND_SKIN54N: "img/night-hand-skin53.png",
            HAND_SKIN55D: "img/day-hand-skin55.png",
            HAND_SKIN55N: "img/night-hand-skin55.png",
            HAND_SKIN56D: "img/day-hand-skin56.png",
            HAND_SKIN56N: "img/night-hand-skin56.png",
            HAND_SKIN57D: "img/day-hand-skin57.png",
            HAND_SKIN57N: "img/night-hand-skin57.png",
            HAND_SKIN58D: "img/day-hand-skin58.png",
            HAND_SKIN58N: "img/night-hand-skin58.png",
            HAND_SKIN59D: "img/day-hand-skin59.png",
            HAND_SKIN59N: "img/night-hand-skin59.png",
            HAND_SKIN60D: "img/day-hand-skin61.png",
            HAND_SKIN60N: "img/night-hand-skin61.png",
            HAND_SKIN61D: "img/day-hand-skin61.png",
            HAND_SKIN61N: "img/night-hand-skin61.png",
            HAND_SKIN62D: "img/day-hand-skin62.png",
            HAND_SKIN62N: "img/night-hand-skin62.png",
            HAND_SKIN63D: "img/day-hand-skin63.png",
            HAND_SKIN63N: "img/night-hand-skin63.png",
            HAND_SKIN64D: "img/day-hand-skin64.png",
            HAND_SKIN64N: "img/night-hand-skin64.png",
            HAND_SKIN65D: "img/day-hand-skin65.png",
            HAND_SKIN65N: "img/night-hand-skin65.png",
            HAND_SKIN66D: "img/day-hand-skin66.png",
            HAND_SKIN66N: "img/night-hand-skin66.png",
            HAND_SKIN67D: "img/day-hand-skin67.png",
            HAND_SKIN67N: "img/night-hand-skin67.png",
            HAND_SKIN68D: "img/day-hand-skin68.png",
            HAND_SKIN68N: "img/night-hand-skin68.png",
            HAND_SKIN69D: "img/day-hand-skin69.png",
            HAND_SKIN69N: "img/night-hand-skin69.png",
            HAND_SKIN70D: "img/day-hand-skin70.png",
            HAND_SKIN70N: "img/night-hand-skin70.png",
            HAND_SKIN71D: "img/day-hand-skin71.png",
            HAND_SKIN71N: "img/night-hand-skin71.png",
            HAND_SKIN72D: "img/day-hand-skin72.png",
            HAND_SKIN72N: "img/night-hand-skin72.png",
            HAND_SKIN73D: "img/day-hand-skin73.png",
            HAND_SKIN73N: "img/night-hand-skin73.png",
            HAND_SKIN74D: "img/day-hand-skin74.png",
            HAND_SKIN74N: "img/night-hand-skin74.png",
            HAND_SKIN75D: "img/day-hand-skin75.png",
            HAND_SKIN75N: "img/night-hand-skin75.png",
            HAND_SKIN76D: "img/day-hand-skin76.png",
            HAND_SKIN76N: "img/night-hand-skin76.png",
            HAND_SKIN77D: "img/day-hand-skin77.png",
            HAND_SKIN77N: "img/night-hand-skin77.png",
            HAND_SKIN78D: "img/day-hand-skin78.png",
            HAND_SKIN78N: "img/night-hand-skin78.png",
            HAND_SKIN79D: "img/day-hand-skin79.png",
            HAND_SKIN79N: "img/night-hand-skin79.png",
            HAND_SKIN80D: "img/day-hand-skin80.png",
            HAND_SKIN80N: "img/night-hand-skin80.png",
            HAND_SKIN81D: "img/day-hand-skin81.png",
            HAND_SKIN81N: "img/night-hand-skin81.png",
            HAND_SKIN82D: "img/day-hand-skin82.png",
            HAND_SKIN82N: "img/night-hand-skin82.png",
            HAND_SKIN83D: "img/day-hand-skin83.png",
            HAND_SKIN83N: "img/night-hand-skin83.png",
            HAND_SKIN84D: "img/day-hand-skin84.png",
            HAND_SKIN84N: "img/night-hand-skin84.png",
            HAND_SKIN85D: "img/day-hand-skin85.png",
            HAND_SKIN85N: "img/night-hand-skin85.png",
            HAND_SKIN86D: "img/day-hand-skin86.png",
            HAND_SKIN86N: "img/night-hand-skin86.png",
            HAND_SKIN87D: "img/day-hand-skin87.png",
            HAND_SKIN87N: "img/night-hand-skin87.png",
            HAND_SKIN88D: "img/day-hand-skin88.png",
            HAND_SKIN88N: "img/night-hand-skin88.png",
            HAND_SKIN89D: "img/day-hand-skin89.png",
            HAND_SKIN89N: "img/night-hand-skin89.png",
            HAND_SKIN90D: "img/day-hand-skin90.png",
            HAND_SKIN90N: "img/night-hand-skin90.png",
            HAND_SKIN91D: "img/day-hand-skin91.png",
            HAND_SKIN91N: "img/night-hand-skin91.png",
            HAND_SKIN92D: "img/day-hand-skin92.png",
            HAND_SKIN92N: "img/night-hand-skin92.png",
            HAND_SKIN93D: "img/day-hand-skin93.png",
            HAND_SKIN93N: "img/night-hand-skin93.png",
            HAND_SKIN94D: "img/day-hand-skin94.png",
            HAND_SKIN94N: "img/night-hand-skin94.png",
            HAND_SKIN95D: "img/day-hand-skin95.png",
            HAND_SKIN95N: "img/night-hand-skin95.png",
            HAND_SKIN96D: "img/day-hand-skin96.png",
            HAND_SKIN96N: "img/night-hand-skin96.png",
            HAND_SKIN97D: "img/day-hand-skin97.png",
            HAND_SKIN97N: "img/night-hand-skin97.png",
            HAND_SKIN98D: "img/day-hand-skin98.png",
            HAND_SKIN98N: "img/night-hand-skin98.png",
            HAND_SKIN99D: "img/day-hand-skin99.png",
            HAND_SKIN99N: "img/night-hand-skin99.png",
            HAND_SKIN100D: "img/day-hand-skin100.png",
            HAND_SKIN100N: "img/night-hand-skin100.png",
            HAND_SKIN101D: "img/day-hand-skin101.png",
            HAND_SKIN101N: "img/night-hand-skin101.png",
            HAND_SKIN102D: "img/day-hand-skin102.png",
            HAND_SKIN102N: "img/night-hand-skin102.png",
            HAND_SKIN103D: "img/day-hand-skin103.png",
            HAND_SKIN103N: "img/night-hand-skin103.png",
            HAND_SKIN104D: "img/day-hand-skin104.png",
            HAND_SKIN104N: "img/night-hand-skin104.png",
            HAND_SKIN105D: "img/day-hand-skin105.png",
            HAND_SKIN105N: "img/night-hand-skin105.png",
            HAND_SKIN106D: "img/day-hand-skin106.png",
            HAND_SKIN106N: "img/night-hand-skin106.png",
            HAND_SKIN107D: "img/day-hand-skin107.png",
            HAND_SKIN107N: "img/night-hand-skin107.png",
            HAND_SKIN108D: "img/day-hand-skin108.png",
            HAND_SKIN108N: "img/night-hand-skin108.png",
            HAND_SKIN109D: "img/day-hand-skin109.png",
            HAND_SKIN109N: "img/night-hand-skin109.png",
            HAND_SKIN110D: "img/day-hand-skin110.png",
            HAND_SKIN110N: "img/night-hand-skin110.png",
            HAND_SKIN111D: "img/day-hand-skin111.png",
            HAND_SKIN111N: "img/night-hand-skin111.png",
            HAND_SKIN112D: "img/day-hand-skin112.png",
            HAND_SKIN112N: "img/night-hand-skin112.png",
            HAND_SKIN113D: "img/day-hand-skin113.png",
            HAND_SKIN113N: "img/night-hand-skin113.png",
            HAND_SKIN114D: "img/day-hand-skin114.png",
            HAND_SKIN114N: "img/night-hand-skin114.png",
            HAND_SKIN115D: "img/day-hand-skin115.png",
            HAND_SKIN115N: "img/night-hand-skin115.png",
            HAND_SKIN116D: "img/day-hand-skin116.png",
            HAND_SKIN116N: "img/night-hand-skin116.png",
            HAND_SKIN117D: "img/day-hand-skin117.png",
            HAND_SKIN117N: "img/night-hand-skin117.png",
            HAND_SKIN118D: "img/day-hand-skin118.png",
            HAND_SKIN118N: "img/night-hand-skin118.png",
            HAND_SKIN119D: "img/day-hand-skin119.png",
            HAND_SKIN119N: "img/night-hand-skin119.png",
            HAND_SKIN120D: "img/day-hand-skin120.png",
            HAND_SKIN120N: "img/night-hand-skin120.png",
            HAND_SKIN121D: "img/day-hand-skin122.png",
            HAND_SKIN121N: "img/night-hand-skin122.png",
            HAND_SKIN122D: "img/day-hand-skin122.png",
            HAND_SKIN122N: "img/night-hand-skin122.png",
            HAND_SKIN123D: "img/day-hand-skin122.png",
            HAND_SKIN123N: "img/night-hand-skin122.png",
            HAND_SKIN124D: "img/day-hand-skin124.png",
            HAND_SKIN124N: "img/night-hand-skin124.png",
            HAND_SKIN125D: "img/day-hand-skin125.png",
            HAND_SKIN125N: "img/night-hand-skin125.png",
            HAND_SKIN126D: "img/day-hand-skin126.png",
            HAND_SKIN126N: "img/night-hand-skin126.png",
            HAND_SKIN127D: "img/day-hand-skin127.png",
            HAND_SKIN127N: "img/night-hand-skin127.png",
            HAND_SKIN128D: "img/day-hand-skin128.png",
            HAND_SKIN128N: "img/night-hand-skin128.png",
            HAND_SKIN129D: "img/day-hand-skin129.png",
            HAND_SKIN129N: "img/night-hand-skin129.png",
            HAND_SKIN130D: "img/day-hand-skin130.png",
            HAND_SKIN130N: "img/night-hand-skin130.png",
            HAND_SKIN131D: "img/day-hand-skin131.png",
            HAND_SKIN131N: "img/night-hand-skin131.png",
            HAND_SKIN132D: "img/day-hand-skin130.png",
            HAND_SKIN132N: "img/night-hand-skin130.png",
            HAND_SKIN133D: "img/day-hand-skin133.png",
            HAND_SKIN133N: "img/night-hand-skin133.png",
            HAND_SKIN134D: "img/day-hand-skin134.png",
            HAND_SKIN134N: "img/night-hand-skin134.png",
            HAND_SKIN135D: "img/day-hand-skin135.png",
            HAND_SKIN135N: "img/night-hand-skin135.png",
            HAND_SKIN136D: "img/day-hand-skin136.png",
            HAND_SKIN136N: "img/night-hand-skin136.png",
            HAND_SKIN137D: "img/day-hand-skin137.png",
            HAND_SKIN137N: "img/night-hand-skin137.png",
            HAND_SKIN138D: "img/day-hand-skin138.png",
            HAND_SKIN138N: "img/night-hand-skin138.png",
            HAND_SKIN139D: "img/day-hand-skin139.png",
            HAND_SKIN139N: "img/night-hand-skin139.png",
            HAND_SKIN140D: "img/day-hand-skin140.png",
            HAND_SKIN140N: "img/night-hand-skin140.png",
            HAND_SKIN141D: "img/day-hand-skin141.png",
            HAND_SKIN141N: "img/night-hand-skin141.png",
            HAND_SKIN142D: "img/day-hand-skin142.png",
            HAND_SKIN142N: "img/night-hand-skin142.png",
            HAND_SKIN143D: "img/day-hand-skin143.png",
            HAND_SKIN143N: "img/night-hand-skin143.png",
            HAND_SKIN144D: "img/day-hand-skin144.png",
            HAND_SKIN144N: "img/night-hand-skin144.png",
            HAND_SKIN145D: "img/day-hand-skin145.png",
            HAND_SKIN145N: "img/night-hand-skin145.png",
            HAND_SKIN146D: "img/day-hand-skin146.png",
            HAND_SKIN146N: "img/night-hand-skin146.png",
            HAND_SKIN147D: "img/day-hand-skin147.png",
            HAND_SKIN147N: "img/night-hand-skin147.png",
            HAND_SKIN148D: "img/day-hand-skin148.png",
            HAND_SKIN148N: "img/night-hand-skin148.png",
            HAND_SKIN149D: "img/day-hand-skin149.png",
            HAND_SKIN149N: "img/night-hand-skin149.png",
            HAND_SKIN150D: "img/day-hand-skin150.png",
            HAND_SKIN150N: "img/night-hand-skin150.png",
            BAG_STARD: "img/day-bag-star0.png",
            BAG_STARN: "img/night-bag-star0.png",
            BAG0D: "img/day-bag0.png",
            BAG0N: "img/night-bag0.png",
            BAG1D: "img/day-bag1.png",
            BAG1N: "img/night-bag1.png",
            BAG2D: "img/day-bag2.png",
            BAG2N: "img/night-bag2.png",
            BAG3D: "img/day-bag3.png",
            BAG3N: "img/night-bag3.png",
            BAG4D: "img/day-bag4.png",
            BAG4N: "img/night-bag4.png",
            BAG5D: "img/day-bag5.png",
            BAG5N: "img/night-bag5.png",
            BAG6D: "img/day-bag6.png",
            BAG6N: "img/night-bag6.png",
            BAG7D: "img/day-bag7.png",
            BAG7N: "img/night-bag7.png",
            BAG8D: "img/day-bag8.png",
            BAG8N: "img/night-bag8.png",
            BAG9D: "img/day-bag9.png",
            BAG9N: "img/night-bag9.png",
            BAG10D: "img/day-bag10.png",
            BAG10N: "img/night-bag10.png",
            BAG11D: "img/day-bag11.png",
            BAG11N: "img/night-bag11.png",
            BAG13D: "img/day-bag13.png",
            BAG13N: "img/night-bag13.png",
            BAG14D: "img/day-bag14.png",
            BAG14N: "img/night-bag14.png",
            BAG16D: "img/day-bag16.png",
            BAG16N: "img/night-bag16.png",
            BAG17D: "img/day-bag17.png",
            BAG17N: "img/night-bag17.png",
            BAG18D: "img/day-bag18.png",
            BAG18N: "img/night-bag18.png",
            BAG19D: "img/day-bag19.png",
            BAG19N: "img/night-bag19.png",
            BAG20D: "img/day-bag20.png",
            BAG20N: "img/night-bag20.png",
            BAG21D: "img/day-bag21.png",
            BAG21N: "img/night-bag21.png",
            BAG22D: "img/day-bag22.png",
            BAG22N: "img/night-bag22.png",
            BAG23D: "img/day-bag23.png",
            BAG23N: "img/night-bag23.png",
            BAG24D: "img/day-bag24.png",
            BAG24N: "img/night-bag24.png",
            BAG25D: "img/day-bag25.png",
            BAG25N: "img/night-bag25.png",
            BAG26D: "img/day-bag26.png",
            BAG26N: "img/night-bag26.png",
            BAG27D: "img/day-bag27.png",
            BAG27N: "img/night-bag27.png",
            BAG28D: "img/day-bag28.png",
            BAG28N: "img/night-bag28.png",
            BAG29D: "img/day-bag29.png",
            BAG29N: "img/night-bag29.png",
            BAG30D: "img/day-bag30.png",
            BAG30N: "img/night-bag30.png",
            BAG31D: "img/day-bag31.png",
            BAG31N: "img/night-bag31.png",
            BAG32D: "img/day-bag32.png",
            BAG32N: "img/night-bag32.png",
            BAG33D: "img/day-bag33.png",
            BAG33N: "img/night-bag33.png",
            BAG34D: "img/day-bag34.png",
            BAG34N: "img/night-bag34.png",
            BAG35D: "img/day-bag35.png",
            BAG35N: "img/night-bag35.png",
            BAG36D: "img/day-bag36.png",
            BAG36N: "img/night-bag36.png",
            BAG37D: "img/day-bag37.png",
            BAG37N: "img/night-bag37.png",
            BAG38D: "img/day-bag38.png",
            BAG38N: "img/night-bag38.png",
            BAG39D: "img/day-bag39.png",
            BAG39N: "img/night-bag39.png",
            BAG40D: "img/day-bag40.png",
            BAG40N: "img/night-bag40.png",
            BAG41D: "img/day-bag41.png",
            BAG41N: "img/night-bag41.png",
            BAG42D: "img/day-bag42.png",
            BAG42N: "img/night-bag42.png",
            BAG43D: "img/day-bag43.png",
            BAG43N: "img/night-bag43.png",
            BAG44D: "img/day-bag44.png",
            BAG44N: "img/night-bag44.png",
            BAG45D: "img/day-bag45.png",
            BAG45N: "img/night-bag45.png",
            BAG46D: "img/day-bag46.png",
            BAG46N: "img/night-bag46.png",
            BAG47D: "img/day-bag47.png",
            BAG47N: "img/night-bag47.png",
            BAG48D: "img/day-bag48.png",
            BAG48N: "img/night-bag48.png",
            BAG49D: "img/day-bag49.png",
            BAG49N: "img/night-bag49.png",
            BAG50D: "img/day-bag50.png",
            BAG50N: "img/night-bag50.png",
            BAG51D: "img/day-bag51.png",
            BAG51N: "img/night-bag51.png",
            BAG52D: "img/day-bag52.png",
            BAG52N: "img/night-bag52.png",
            BAG53D: "img/day-bag53.png",
            BAG53N: "img/night-bag53.png",
            BAG54D: "img/day-bag54.png",
            BAG54N: "img/night-bag54.png",
            BAG55D: "img/day-bag55.png",
            BAG55N: "img/night-bag55.png",
            BAG56D: "img/day-bag56.png",
            BAG56N: "img/night-bag56.png",
            BAG57D: "img/day-bag57.png",
            BAG57N: "img/night-bag57.png",
            BAG58D: "img/day-bag58.png",
            BAG58N: "img/night-bag58.png",
            BAG59D: "img/day-bag59.png",
            BAG59N: "img/night-bag59.png",
            BAG60D: "img/day-bag60.png",
            BAG60N: "img/night-bag60.png",
            BAG61D: "img/day-bag61.png",
            BAG61N: "img/night-bag61.png",
            BAG62D: "img/day-bag62.png",
            BAG62N: "img/night-bag62.png",
            BAG63D: "img/day-bag63.png",
            BAG63N: "img/night-bag63.png",
            BAG64D: "img/day-bag64.png",
            BAG64N: "img/night-bag64.png",
            BAG65D: "img/day-bag65.png",
            BAG65N: "img/night-bag65.png",
            BAG66D: "img/day-bag66.png",
            BAG66N: "img/night-bag66.png",
            BAG67D: "img/day-bag67.png",
            BAG67N: "img/night-bag67.png",
            BAG68D: "img/day-bag68.png",
            BAG68N: "img/night-bag68.png",
            ACCESSORY0D: "img/day-accessory0.png",
            ACCESSORY17D: "img/day-accessory0-pacques.png",
            ACCESSORY17N: "img/night-accessory0-pacques.png",
            ACCESSORY13D: "img/day-accessory13.png",
            ACCESSORY13N: "img/night-accessory13.png",
            ACCESSORY14D: "img/day-accessory14.png",
            ACCESSORY14N: "img/night-accessory14.png",
            ACCESSORY15D: "img/day-accessory15.png",
            ACCESSORY15N: "img/night-accessory15.png",
            ACCESSORY16D: "img/day-accessory16.png",
            ACCESSORY16N: "img/night-accessory16.png",
            ACCESSORY18D: "img/day-accessory17.png",
            ACCESSORY18N: "img/day-accessory17.png",
            ACCESSORY19D: "img/day-accessory19.png",
            ACCESSORY19N: "img/night-accessory19.png",
            ACCESSORY20D: "img/day-accessory20.png",
            ACCESSORY20N: "img/night-accessory20.png",
            ACCESSORY21D: "img/day-accessory21.png",
            ACCESSORY21N: "img/night-accessory21.png",
            ACCESSORY22D: "img/day-accessory22.png",
            ACCESSORY22N: "img/night-accessory22.png",
            ACCESSORY23D: "img/day-accessory23.png",
            ACCESSORY23N: "img/night-accessory23.png",
            ACCESSORY24D: "img/day-accessory24.png",
            ACCESSORY24N: "img/night-accessory24.png",
            ACCESSORY25D: "img/day-accessory25.png",
            ACCESSORY25N: "img/night-accessory25.png",
            ACCESSORY26D: "img/day-accessory26.png",
            ACCESSORY26N: "img/night-accessory26.png",
            ACCESSORY27D: "img/day-accessory27.png",
            ACCESSORY27N: "img/night-accessory27.png",
            ACCESSORY28D: "img/day-accessory18.png",
            ACCESSORY28N: "img/night-accessory18.png",
            ACCESSORY29D: "img/day-accessory29.png",
            ACCESSORY29N: "img/night-accessory29.png",
            ACCESSORY30D: "img/day-accessory30.png",
            ACCESSORY30N: "img/night-accessory30.png",
            ACCESSORY31D: "img/day-accessory31.png",
            ACCESSORY31N: "img/night-accessory31.png",
            ACCESSORY32D: "img/day-accessory32.png",
            ACCESSORY32N: "img/night-accessory32.png",
            ACCESSORY33D: "img/day-accessory33.png",
            ACCESSORY33N: "img/night-accessory33.png",
            ACCESSORY34D: "img/day-accessory34.png",
            ACCESSORY34N: "img/night-accessory34.png",
            ACCESSORY35D: "img/day-accessory35.png",
            ACCESSORY35N: "img/night-accessory35.png",
            ACCESSORY36D: "img/day-accessory28.png",
            ACCESSORY36N: "img/night-accessory28.png",
            ACCESSORY37D: "img/day-accessory36.png",
            ACCESSORY37N: "img/night-accessory36.png",
            ACCESSORY38D: "img/day-accessory37.png",
            ACCESSORY38N: "img/night-accessory37.png",
            ACCESSORY39D: "img/day-accessory39.png",
            ACCESSORY39N: "img/night-accessory39.png",
            ACCESSORY40D: "img/day-accessory40.png",
            ACCESSORY40N: "img/night-accessory40.png",
            ACCESSORY41D: "img/day-accessory41.png",
            ACCESSORY41N: "img/night-accessory41.png",
            ACCESSORY42D: "img/day-accessory42.png",
            ACCESSORY42N: "img/night-accessory42.png",
            ACCESSORY43D: "img/day-accessory43.png",
            ACCESSORY43N: "img/night-accessory43.png",
            ACCESSORY44D: "img/day-accessory44.png",
            ACCESSORY44N: "img/night-accessory44.png",
            ACCESSORY45D: "img/day-accessory38.png",
            ACCESSORY45N: "img/night-accessory38.png",
            ACCESSORY46D: "img/day-accessory46.png",
            ACCESSORY46N: "img/night-accessory46.png",
            ACCESSORY47D: "img/day-accessory47.png",
            ACCESSORY47N: "img/night-accessory47.png",
            ACCESSORY48D: "img/day-accessory48.png",
            ACCESSORY48N: "img/night-accessory48.png",
            ACCESSORY49D: "img/day-accessory49.png",
            ACCESSORY49N: "img/night-accessory49.png",
            ACCESSORY50D: "img/day-accessory45.png",
            ACCESSORY50N: "img/night-accessory45.png",
            ACCESSORY51D: "img/day-accessory50.png",
            ACCESSORY51N: "img/night-accessory50.png",
            ACCESSORY52D: "img/day-accessory51.png",
            ACCESSORY52N: "img/night-accessory51.png",
            ACCESSORY53D: "img/day-accessory52.png",
            ACCESSORY53N: "img/night-accessory52.png",
            ACCESSORY54D: "img/day-accessory53.png",
            ACCESSORY54N: "img/night-accessory53.png",
            ACCESSORY55D: "img/day-accessory54.png",
            ACCESSORY55N: "img/night-accessory54.png",
            ACCESSORY56D: "img/day-accessory55.png",
            ACCESSORY56N: "img/night-accessory55.png",
            ACCESSORY57D: "img/day-accessory56.png",
            ACCESSORY57N: "img/night-accessory56.png",
            ACCESSORY58D: "img/day-accessory57.png",
            ACCESSORY58N: "img/night-accessory57.png",
            ACCESSORY59D: "img/day-accessory58.png",
            ACCESSORY59N: "img/night-accessory58.png",
            ACCESSORY60D: "img/day-accessory59.png",
            ACCESSORY60N: "img/night-accessory59.png",
            ACCESSORY61D: "img/day-accessory60.png",
            ACCESSORY61N: "img/night-accessory60.png",
            ACCESSORY62D: "img/day-accessory61.png",
            ACCESSORY62N: "img/night-accessory61.png",
            ACCESSORY63D: "img/day-accessory62.png",
            ACCESSORY63N: "img/night-accessory62.png",
            ACCESSORY64D: "img/day-accessory63.png",
            ACCESSORY64N: "img/night-accessory63.png",
            ACCESSORY65D: "img/day-accessory64.png",
            ACCESSORY65N: "img/night-accessory64.png",
            ACCESSORY66D: "img/day-accessory65.png",
            ACCESSORY66N: "img/night-accessory65.png",
            ACCESSORY67D: "img/day-accessory66.png",
            ACCESSORY67N: "img/night-accessory66.png",
            ACCESSORY68D: "img/day-accessory67.png",
            ACCESSORY68N: "img/night-accessory67.png",
            ACCESSORY69D: "img/day-accessory68.png",
            ACCESSORY69N: "img/night-accessory68.png",
            ACCESSORY70D: "img/day-accessory69.png",
            ACCESSORY70N: "img/night-accessory69.png",
            ACCESSORY71D: "img/day-accessory70.png",
            ACCESSORY71N: "img/night-accessory70.png",
            ACCESSORY72D: "img/day-accessory71.png",
            ACCESSORY72N: "img/night-accessory71.png",
            ACCESSORY73D: "img/day-accessory72.png",
            ACCESSORY73N: "img/night-accessory72.png",
            ACCESSORY74D: "img/day-accessory73.png",
            ACCESSORY74N: "img/night-accessory73.png",
            ACCESSORY75D: "img/day-accessory74.png",
            ACCESSORY75N: "img/night-accessory74.png",
            ACCESSORY76D: "img/day-accessory75.png",
            ACCESSORY76N: "img/night-accessory75.png",
            ACCESSORY77D: "img/day-accessory76.png",
            ACCESSORY77N: "img/night-accessory76.png",
            ACCESSORY78D: "img/day-accessory77.png",
            ACCESSORY78N: "img/night-accessory77.png",
            ACCESSORY79D: "img/day-accessory78.png",
            ACCESSORY79N: "img/night-accessory78.png",
            ACCESSORY80D: "img/day-accessory79.png",
            ACCESSORY80N: "img/night-accessory79.png",
            ACCESSORY81D: "img/day-accessory80.png",
            ACCESSORY81N: "img/night-accessory80.png",
            ACCESSORY82D: "img/day-accessory81.png",
            ACCESSORY82N: "img/night-accessory81.png",
            BOOK0D: "img/day-book0.png",
            BOOK0N: "img/night-book0.png",
            BOOK1D: "img/day-book1.png",
            BOOK1N: "img/night-book1.png",
            BOOK2D: "img/day-book2.png",
            BOOK2N: "img/night-book2.png",
            BOOK3D: "img/day-book3.png",
            BOOK3N: "img/night-book3.png",
            BOOK4D: "img/day-book4.png",
            BOOK4N: "img/night-book4.png",
            BOOK5D: "img/day-book5.png",
            BOOK5N: "img/night-book5.png",
            BOOK6D: "img/day-book6.png",
            BOOK6N: "img/night-book6.png",
            BOOK7D: "img/day-book7.png",
            BOOK7N: "img/night-book7.png",
            BOOK8D: "img/day-book8.png",
            BOOK8N: "img/night-book8.png",
            BOOK9D: "img/day-book9.png",
            BOOK9N: "img/night-book9.png",
            BOOK10D: "img/day-book10.png",
            BOOK10N: "img/night-book10.png",
            BOOK11D: "img/day-book11.png",
            BOOK11N: "img/night-book11.png",
            BOOK12D: "img/day-book12.png",
            BOOK12N: "img/night-book12.png",
            BOOK13D: "img/day-book13.png",
            BOOK13N: "img/night-book13.png",
            BOOK14D: "img/day-book14.png",
            BOOK14N: "img/night-book14.png",
            BOOK15D: "img/day-book15.png",
            BOOK15N: "img/night-book15.png",
            BOOK16D: "img/day-book16.png",
            BOOK16N: "img/night-book16.png",
            BOOK17D: "img/day-book17.png",
            BOOK17N: "img/night-book17.png",
            BOOK18D: "img/day-book18.png",
            BOOK18N: "img/night-book18.png",
            BOOK19D: "img/day-book19.png",
            BOOK19N: "img/night-book19.png",
            BOOK20D: "img/day-book20.png",
            BOOK20N: "img/night-book20.png",
            BOOK21D: "img/day-book21.png",
            BOOK21N: "img/night-book21.png",
            BOOK22D: "img/day-book22.png",
            BOOK22N: "img/night-book22.png",
            BOOK23D: "img/day-book23.png",
            BOOK23N: "img/night-book23.png",
            BOOK24D: "img/day-book24.png",
            BOOK24N: "img/night-book24.png",
            BOOK25D: "img/day-book25.png",
            BOOK25N: "img/night-book25.png",
            BOOK26D: "img/day-book26.png",
            BOOK26N: "img/night-book26.png",
            BOOK27D: "img/day-book27.png",
            BOOK27N: "img/night-book27.png",
            BOOK28D: "img/day-book28.png",
            BOOK28N: "img/night-book28.png",
            BOOK29D: "img/day-book29.png",
            BOOK29N: "img/night-book29.png",
            BOOK30D: "img/day-book30.png",
            BOOK30N: "img/night-book30.png",
            BOOK31D: "img/day-book31.png",
            BOOK31N: "img/night-book31.png",
            BOOK32D: "img/day-book32.png",
            BOOK32N: "img/night-book32.png",
            BOOK33D: "img/day-book33.png",
            BOOK33N: "img/night-book33.png",
            BOOK34D: "img/day-book34.png",
            BOOK34N: "img/night-book34.png",
            BOOK35D: "img/day-book35.png",
            BOOK35N: "img/night-book35.png",
            BOOK36D: "img/day-book36.png",
            BOOK36N: "img/night-book36.png",
            BOOK37D: "img/day-book37.png",
            BOOK37N: "img/night-book37.png",
            BOOK38D: "img/day-book38.png",
            BOOK38N: "img/night-book38.png",
            BOOK39D: "img/day-book39.png",
            BOOK39N: "img/night-book39.png",
            BOOK40D: "img/day-book40.png",
            BOOK40N: "img/night-book40.png",
            BOOK41D: "img/day-book41.png",
            BOOK41N: "img/night-book41.png",
            BOOK42D: "img/day-book42.png",
            BOOK42N: "img/night-book42.png",
            BOOK43D: "img/day-book43.png",
            BOOK43N: "img/night-book43.png",
            BOOK44D: "img/day-book44.png",
            BOOK44N: "img/night-book44.png",
            BOOK45D: "img/day-book45.png",
            BOOK45N: "img/night-book45.png",
            CRATE1D: "img/day-crate1.png",
            CRATE1N: "img/night-crate1.png",
            CRATE2D: "img/day-crate2.png",
            CRATE2N: "img/night-crate2.png",
            CRATE3D: "img/day-crate3.png",
            CRATE3N: "img/night-crate3.png",
            CRATE4D: "img/day-crate4.png",
            CRATE4N: "img/night-crate4.png",
            CRATE5D: "img/day-crate5.png",
            CRATE5N: "img/night-crate5.png",
            CRATE6D: "img/day-crate6.png",
            CRATE6N: "img/night-crate6.png",
            CRATE7D: "img/day-crate7.png",
            CRATE7N: "img/night-crate7.png",
            CRATE8D: "img/day-crate8.png",
            CRATE8N: "img/night-crate8.png",
            CRATE9D: "img/day-crate9.png",
            CRATE9N: "img/night-crate9.png",
            CRATE10D: "img/day-crate10.png",
            CRATE10N: "img/night-crate10.png",
            CRATE11D: "img/day-crate11.png",
            CRATE11N: "img/night-crate11.png",
            CRATE12D: "img/day-crate12.png",
            CRATE12N: "img/night-crate12.png",
            CRATE13D: "img/day-crate13.png",
            CRATE13N: "img/night-crate13.png",
            CRATE14D: "img/day-crate14.png",
            CRATE14N: "img/night-crate14.png",
            CRATE15D: "img/day-crate15.png",
            CRATE15N: "img/night-crate15.png",
            CRATE16D: "img/day-crate16.png",
            CRATE16N: "img/night-crate16.png",
            CRATE17D: "img/day-crate17.png",
            CRATE17N: "img/night-crate17.png",
            CRATE18D: "img/day-crate18.png",
            CRATE18N: "img/night-crate18.png",
            CRATE19D: "img/day-crate19.png",
            CRATE19N: "img/night-crate19.png",
            CRATE20D: "img/day-crate20.png",
            CRATE20N: "img/night-crate20.png",
            CRATE21D: "img/day-crate21.png",
            CRATE21N: "img/night-crate21.png",
            CRATE22D: "img/day-crate22.png",
            CRATE22N: "img/night-crate22.png",
            CRATE23D: "img/day-crate23.png",
            CRATE23N: "img/night-crate23.png",
            CRATE24D: "img/day-crate24.png",
            CRATE24N: "img/night-crate24.png",
            CRATE25D: "img/day-crate25.png",
            CRATE25N: "img/night-crate25.png",
            CRATE26D: "img/day-crate26.png",
            CRATE26N: "img/night-crate26.png",
            CRATE27D: "img/day-crate27.png",
            CRATE27N: "img/night-crate27.png",
            CRATE28D: "img/day-crate28.png",
            CRATE28N: "img/night-crate28.png",
            CRATE29D: "img/day-crate29.png",
            CRATE29N: "img/night-crate29.png",
            CRATE30D: "img/day-crate30.png",
            CRATE30N: "img/night-crate30.png",
            CRATE31D: "img/day-crate31.png",
            CRATE31N: "img/night-crate31.png",
            CRATE32D: "img/day-crate32.png",
            CRATE32N: "img/night-crate32.png",
            CRATE33D: "img/day-crate33.png",
            CRATE33N: "img/night-crate33.png",
            CRATE34D: "img/day-crate34.png",
            CRATE34N: "img/night-crate34.png",
            CRATE35D: "img/day-crate35.png",
            CRATE35N: "img/night-crate35.png",
            CRATE36D: "img/day-crate36.png",
            CRATE36N: "img/night-crate36.png",
            CRATE37D: "img/day-crate37.png",
            CRATE37N: "img/night-crate37.png",
            CRATE38D: "img/day-crate38.png",
            CRATE38N: "img/night-crate38.png",
            CRATE39D: "img/day-crate39.png",
            CRATE39N: "img/night-crate39.png",
            CRATE40D: "img/day-crate40.png",
            CRATE40N: "img/night-crate40.png",
            CRATE41D: "img/day-crate41.png",
            CRATE41N: "img/night-crate41.png",
            CRATE42D: "img/day-crate42.png",
            CRATE42N: "img/night-crate42.png",
            CRATE43D: "img/day-crate43.png",
            CRATE43N: "img/night-crate43.png",
            CRATE44D: "img/day-crate44.png",
            CRATE44N: "img/night-crate44.png",
            CRATE45D: "img/day-crate45.png",
            CRATE45N: "img/night-crate45.png",
            CRATE46D: "img/day-crate46.png",
            CRATE46N: "img/night-crate46.png",
            CRATE47D: "img/day-crate47.png",
            CRATE47N: "img/night-crate47.png",
            CRATE48D: "img/day-crate48.png",
            CRATE48N: "img/night-crate48.png",
            CRATE49D: "img/day-crate49.png",
            CRATE49N: "img/night-crate49.png",
            CRATE50D: "img/day-crate50.png",
            CRATE50N: "img/night-crate50.png",
            CRATE51D: "img/day-crate51.png",
            CRATE51N: "img/night-crate51.png",
            CRATE52D: "img/day-crate52.png",
            CRATE52N: "img/night-crate52.png",
            CRATE53D: "img/day-crate53.png",
            CRATE53N: "img/night-crate53.png",
            CRATE54D: "img/day-crate54.png",
            CRATE54N: "img/night-crate54.png",
            CRATE55D: "img/day-crate55.png",
            CRATE55N: "img/night-crate55.png",
            CRATE56D: "img/day-crate56.png",
            CRATE56N: "img/night-crate56.png",
            CRATE57D: "img/day-crate57.png",
            CRATE57N: "img/night-crate57.png",
            CRATE58D: "img/day-crate58.png",
            CRATE58N: "img/night-crate58.png",
            CRATE59D: "img/day-crate59.png",
            CRATE59N: "img/night-crate59.png",
            CRATE60D: "img/day-crate60.png",
            CRATE60N: "img/night-crate60.png",
            CRATE61D: "img/day-crate61.png",
            CRATE61N: "img/night-crate61.png",
            CRATE62D: "img/day-crate62.png",
            CRATE62N: "img/night-crate62.png",
            CRATE63D: "img/day-crate63.png",
            CRATE63N: "img/night-crate63.png",
            CRATE64D: "img/day-crate64.png",
            CRATE64N: "img/night-crate64.png",
            CRATE65D: "img/day-crate65.png",
            CRATE65N: "img/night-crate65.png",
            CRATE66D: "img/day-crate66.png",
            CRATE66N: "img/night-crate66.png",
            CRATE67D: "img/day-crate67.png",
            CRATE67N: "img/night-crate67.png",
            CRATE68D: "img/day-crate68.png",
            CRATE68N: "img/night-crate68.png",
            CRATE69D: "img/day-crate69.png",
            CRATE69N: "img/night-crate69.png",
            CRATE70D: "img/day-crate70.png",
            CRATE70N: "img/night-crate70.png",
            CRATE71D: "img/day-crate71.png",
            CRATE71N: "img/night-crate71.png",
            CRATE72D: "img/day-crate72.png",
            CRATE72N: "img/night-crate72.png",
            DECORATION_0D: "img/day-herb0.png",
            DECORATION_1D: "img/day-herb1.png",
            DECORATION_2D: "img/day-herb2.png",
            DECORATION_3D: "img/day-herb3.png",
            DECORATION_4D: "img/day-herb4.png",
            DECORATION_5D: "img/day-herb5.png",
            DECORATION_6D: "img/day-herb6.png",
            DECORATION_7D: "img/day-herb7.png",
            DECORATION_8D: "img/day-herb8.png",
            DECORATION_9D: "img/day-herb9.png",
            DECORATION_10D: "img/day-herb10.png",
            DECORATION_11D: "img/day-herb11.png",
            DECORATION_12D: "img/day-herb12.png",
            DECORATION_13D: "img/day-herb13.png",
            DECORATION_14D: "img/day-herb14.png",
            DECORATION_15D: "img/day-herb15.png",
            DECORATION_16D: "img/day-shell0.png",
            DECORATION_17D: "img/day-shell1.png",
            DECORATION_18D: "img/day-shell2.png",
            DECORATION_19D: "img/day-leaf1.png",
            DECORATION_20D: "img/day-leaf2.png",
            DECORATION_21D: "img/day-leaf3.png",
            DECORATION_22D: "img/day-leaf4.png",
            DECORATION_23D: "img/day-leaf5.png",
            DECORATION_24D: "img/day-leaf6.png",
            DECORATION_25D: "img/day-leaf7.png",
            DECORATION_26D: "img/day-leaf8.png",
            DECORATION_27D: "img/day-rock0.png",
            DECORATION_28D: "img/day-rock1.png",
            DECORATION_29D: "img/day-rock2.png",
            DECORATION_30D: "img/day-rock3.png",
            DECORATION_31D: "img/day-rock4.png",
            DECORATION_32D: "img/day-rock5.png",
            DECORATION_33D: "img/day-rock6.png",
            DECORATION_34D: "img/day-rock7.png",
            DECORATION_35D: "img/day-rock8.png",
            DECORATION_36D: "img/day-rock9.png",
            DECORATION_37D: "img/day-rock10.png",
            DECORATION_38D: "img/day-rock11.png",
            DECORATION_39D: "img/day-rock12.png",
            DECORATION_40D: "img/day-rock13.png",
            DECORATION_41D: "img/day-flower1.png",
            DECORATION_42D: "img/day-flower2.png",
            DECORATION_43D: "img/day-flower3.png",
            DECORATION_44D: "img/day-flower4.png",
            DECORATION_45D: "img/day-flower5.png",
            DECORATION_46D: "img/day-flower6.png",
            DECORATION_47D: "img/day-flower7.png",
            DECORATION_48D: "img/day-flower8.png",
            DECORATION_49D: "img/day-flower9.png",
            DECORATION_50D: "img/day-herb16.png",
            DECORATION_51D: "img/day-herb17.png",
            DECORATION_52D: "img/day-herb18.png",
            DECORATION_53D: "img/day-herb19.png",
            DECORATION_54D: "img/day-herb20.png",
            DECORATION_55D: "img/day-herb21.png",
            DECORATION_0N: "img/night-herb0.png",
            DECORATION_1N: "img/night-herb1.png",
            DECORATION_2N: "img/night-herb2.png",
            DECORATION_3N: "img/night-herb3.png",
            DECORATION_4N: "img/night-herb4.png",
            DECORATION_5N: "img/night-herb5.png",
            DECORATION_6N: "img/night-herb6.png",
            DECORATION_7N: "img/night-herb7.png",
            DECORATION_8N: "img/night-herb8.png",
            DECORATION_9N: "img/night-herb9.png",
            DECORATION_10N: "img/night-herb10.png",
            DECORATION_11N: "img/night-herb11.png",
            DECORATION_12N: "img/night-herb12.png",
            DECORATION_13N: "img/night-herb13.png",
            DECORATION_14N: "img/night-herb14.png",
            DECORATION_15N: "img/night-herb15.png",
            DECORATION_16N: "img/night-shell0.png",
            DECORATION_17N: "img/night-shell1.png",
            DECORATION_18N: "img/night-shell2.png",
            DECORATION_19N: "img/night-leaf1.png",
            DECORATION_20N: "img/night-leaf2.png",
            DECORATION_21N: "img/night-leaf3.png",
            DECORATION_22N: "img/night-leaf4.png",
            DECORATION_23N: "img/night-leaf5.png",
            DECORATION_24N: "img/night-leaf6.png",
            DECORATION_25N: "img/night-leaf7.png",
            DECORATION_26N: "img/night-leaf8.png",
            DECORATION_27N: "img/night-rock0.png",
            DECORATION_28N: "img/night-rock1.png",
            DECORATION_29N: "img/night-rock2.png",
            DECORATION_30N: "img/night-rock3.png",
            DECORATION_31N: "img/night-rock4.png",
            DECORATION_32N: "img/night-rock5.png",
            DECORATION_33N: "img/night-rock6.png",
            DECORATION_34N: "img/night-rock7.png",
            DECORATION_35N: "img/night-rock8.png",
            DECORATION_36N: "img/night-rock9.png",
            DECORATION_37N: "img/night-rock10.png",
            DECORATION_38N: "img/night-rock11.png",
            DECORATION_39N: "img/night-rock12.png",
            DECORATION_40N: "img/night-rock13.png",
            DECORATION_41N: "img/night-flower1.png",
            DECORATION_42N: "img/night-flower2.png",
            DECORATION_43N: "img/night-flower3.png",
            DECORATION_44N: "img/night-flower4.png",
            DECORATION_45N: "img/night-flower5.png",
            DECORATION_46N: "img/night-flower6.png",
            DECORATION_47N: "img/night-flower7.png",
            DECORATION_48N: "img/night-flower8.png",
            DECORATION_49N: "img/night-flower9.png",
            DECORATION_50N: "img/night-herb16.png",
            DECORATION_51N: "img/night-herb17.png",
            DECORATION_52N: "img/night-herb18.png",
            DECORATION_53N: "img/night-herb19.png",
            DECORATION_54N: "img/night-herb20.png",
            DECORATION_55N: "img/night-herb21.png",
            DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
            DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
            DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
            DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
            DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
            DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
            DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
            DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
            DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
            DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
            DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
            DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
            DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
            DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
            DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
            DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
            DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
            DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
            DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
            DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
            DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
            DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
            DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
            DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
            DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
            DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
            DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
            DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
            DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
            DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
            DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
            DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
            DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
            DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
            DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
            DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
            DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
            DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
            DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
            DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
            DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
            DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
            DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
            DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
            DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
            DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
            DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
            DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
            NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
            NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
            NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
            NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
            NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
            NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
            NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
            NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
            NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
            NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
            NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
            NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
            NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
            NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
            NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
            NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
            NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
            NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
            NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
            NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
            NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
            NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
            NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
            NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
            NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
            NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
            NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
            NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
            NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
            NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
            NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
            NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
            NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
            NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
            NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
            NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
            NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
            NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
            NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
            NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
            NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
            NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
            NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
            NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
            NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
            NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
            NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
            NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
            DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
            DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
            DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
            DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
            DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
            DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
            DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
            DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
            DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
            DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
            DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
            DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
            DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
            DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
            DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
            DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
            DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
            DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
            DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
            DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
            DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
            DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
            DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
            DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
            DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
            DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
            DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
            DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
            NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
            NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
            NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
            NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
            NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
            NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
            NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
            NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
            NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
            NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
            NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
            NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
            NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
            NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
            NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
            NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
            NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
            NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
            NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
            NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
            NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
            NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
            NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
            NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
            NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
            NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
            NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
            NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
            BABY_MAMMOTHD: "img/day-baby-mammoth.png",
            BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
            BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
            BABY_MAMMOTHN: "img/night-baby-mammoth.png",
            BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
            BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
            INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
            INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
            INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
            HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
            BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
            FLOWER_HATD: "img/day-flower-hat.png",
            FLOWER_HATN: "img/night-flower-hat.png",
            INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
            INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
            INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
            FUR_HATD: "img/day-fur-hat.png",
            FUR_HATN: "img/night-fur-hat.png",
            INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
            INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
            INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
            MAMMOTHD: "img/day-mammoth.png",
            MAMMOTHN: "img/night-mammoth.png",
            HURT_MAMMOTH: "img/hurt-mammoth.png",
            INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
            INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
            INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
            INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
            INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
            INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
            INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
            INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
            INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
            WOOD_BOWD: "img/day-wood-bow2.png",
            WOOD_BOWN: "img/night-wood-bow2.png",
            WOOD_ARROWD: "img/day-wood-arrow.png",
            WOOD_ARROWN: "img/night-wood-arrow.png",
            INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
            INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
            INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
            INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
            INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
            INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
            STONE_BOWD: "img/day-stone-bow.png",
            STONE_BOWN: "img/night-stone-bow.png",
            STONE_ARROWD: "img/day-stone-arrow.png",
            STONE_ARROWN: "img/night-stone-arrow.png",
            INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
            INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
            INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
            INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
            INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
            INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
            GOLD_BOWD: "img/day-gold-bow.png",
            GOLD_BOWN: "img/night-gold-bow.png",
            GOLD_ARROWD: "img/day-gold-arrow.png",
            GOLD_ARROWN: "img/night-gold-arrow.png",
            INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
            INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
            INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
            INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
            INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
            INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
            DIAMOND_BOWD: "img/day-diamond-bow.png",
            DIAMOND_BOWN: "img/night-diamond-bow.png",
            DIAMOND_ARROWD: "img/day-diamond-arrow.png",
            DIAMOND_ARROWN: "img/night-diamond-arrow.png",
            INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
            INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
            INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
            INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
            INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
            INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
            AMETHYST_BOWD: "img/day-amethyst-bow.png",
            AMETHYST_BOWN: "img/night-amethyst-bow.png",
            AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
            AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
            INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
            INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
            INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
            INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
            INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
            INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
            DRAGON_BOWD: "img/day-dragon-bow.png",
            DRAGON_BOWN: "img/night-dragon-bow.png",
            DRAGON_ARROWD: "img/day-dragon-arrow.png",
            DRAGON_ARROWN: "img/night-dragon-arrow.png",
            INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
            INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
            INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
            INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
            INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
            INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
            REIDITE_BOWD: "img/day-reidite-bow.png",
            REIDITE_BOWN: "img/night-reidite-bow.png",
            REIDITE_ARROWD: "img/day-reidite-arrow.png",
            REIDITE_ARROWN: "img/night-reidite-arrow.png",
            BANDAGE_ACTIVATED: "img/bandage-activated.png",
            AUTO_FEED: "img/auto-feed.png",
            STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
            STOP_REGENERATION: "img/stop-regeneration2.png",
            WOOD_TOWERD: "img/day-wood-platform.png",
            WOOD_TOWERN: "img/night-wood-platform.png",
            INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
            INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
            INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
            WOOD_SHIELDD: "img/day-wood-shield.png",
            WOOD_SHIELDN: "img/night-wood-shield.png",
            STONE_SHIELDD: "img/day-stone-shield.png",
            STONE_SHIELDN: "img/night-stone-shield.png",
            GOLD_SHIELDD: "img/day-gold-shield.png",
            GOLD_SHIELDN: "img/night-gold-shield.png",
            DIAMOND_SHIELDD: "img/day-diamond-shield.png",
            DIAMOND_SHIELDN: "img/night-diamond-shield.png",
            AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
            AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
            REIDITE_SHIELDD: "img/day-reidite-shield.png",
            REIDITE_SHIELDN: "img/night-reidite-shield.png",
            INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
            INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
            INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
            INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
            INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
            INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
            INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
            INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
            INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
            INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
            INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
            INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
            INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
            INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
            INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
            INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
            INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
            INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
            MACHETED: "img/day-machete.png",
            MACHETEN: "img/night-machete.png",
            INV_MACHETE_IN: "img/inv-machete-in.png",
            INV_MACHETE_OUT: "img/inv-machete-out.png",
            INV_MACHETE_CLICK: "img/inv-machete-click.png"
        }, WINDOW12 = [{}], WINDOW12[0].stringify = function (e) {
            for (var i = new Uint8Array(new ArrayBuffer(e.length)), t = 0; t < e.length; t++) i[t] = e[t];
            return i
        }, DUMP_IMAGES = {}, PREPROC_IMAGES = {}, IMAGES) DUMP_IMAGES[he] = IMAGES[he];
    sprite = [];
    let ReiditeSpikeAlly = new Image;
    ReiditeSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-ally.png"
    let AmethystSpikeAlly = new Image;
    AmethystSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-ally.png"
    let DiamondSpikeAlly = new Image;
    DiamondSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-ally.png"
    let GoldSpikeAlly = new Image;
    GoldSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-ally.png"
    let StoneSpikeAlly = new Image;
    StoneSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-ally.png"
    let WoodSpikeAlly = new Image;
    WoodSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-ally.png"

    let ReiditeSpikeEnemy = new Image;
    ReiditeSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-enemy.png"
    let AmethystSpikeEnemy = new Image;
    AmethystSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-enemy.png"
    let DiamondSpikeEnemy = new Image;
    DiamondSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-enemy.png"
    let GoldSpikeEnemy = new Image;
    GoldSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-enemy.png"
    let StoneSpikeEnemy = new Image;
    StoneSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-enemy.png"
    let WoodSpikeEnemy = new Image;
    WoodSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-enemy.png"

    let ReiditeSpikeDoorAlly = new Image;
    ReiditeSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-door-ally.png"
    let AmethystSpikeDoorAlly = new Image;
    AmethystSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-door-ally.png"
    let DiamondSpikeDoorAlly = new Image;
    DiamondSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-door-ally.png"
    let GoldSpikeDoorAlly = new Image;
    GoldSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-door-ally.png"
    let StoneSpikeDoorAlly = new Image;
    StoneSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-door-ally.png"
    let WoodSpikeDoorAlly = new Image;
    WoodSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-door-ally.png"

    let ReiditeSpikeDoorEnemy = new Image;
    ReiditeSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-door-enemy.png"
    let AmethystSpikeDoorEnemy = new Image;
    AmethystSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-door-enemy.png"
    let DiamondSpikeDoorEnemy = new Image;
    DiamondSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-door-enemy.png"
    let GoldSpikeDoorEnemy = new Image;
    GoldSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-door-enemy.png"
    let StoneSpikeDoorEnemy = new Image;
    StoneSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-door-enemy.png"
    let WoodSpikeDoorEnemy = new Image;
    WoodSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-door-enemy.png"

    let ReiditeDoorAlly = new Image;
    ReiditeDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_reidite2.png"
    let AmethystDoorAlly = new Image;
    AmethystDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_amethyst1.png"
    let DiamondDoorAlly = new Image;
    DiamondDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_diamond2.png"
    let GoldDoorAlly = new Image;
    GoldDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_gold2.png"
    let StoneDoorAlly = new Image;
    StoneDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_stone1.png"
    let WoodDoorAlly = new Image;
    WoodDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_wood2.png"

    let ReiditeDoorEnemy= new Image;
    ReiditeDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_reidite1.png"
    let AmethystDoorEnemy = new Image;
    AmethystDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_amethyst2.png"
    let DiamondDoorEnemy = new Image;
    DiamondDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_diamond1.png"
    let GoldDoorEnemy = new Image;
    GoldDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_gold1.png"
    let StoneDoorEnemy = new Image;
    StoneDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_stone2.png"
    let WoodDoorEnemy = new Image;
    WoodDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_wood1.png"

    sprite[10000] = [WoodSpikeAlly, WoodSpikeAlly];
    sprite[10001] = [WoodSpikeEnemy, WoodSpikeEnemy];

    sprite[10002] = [StoneSpikeAlly, StoneSpikeAlly];
    sprite[10003] = [StoneSpikeEnemy, StoneSpikeEnemy];

    sprite[10004] = [GoldSpikeAlly, GoldSpikeAlly];
    sprite[10005] = [GoldSpikeEnemy, GoldSpikeEnemy];

    sprite[10006] = [DiamondSpikeAlly, DiamondSpikeAlly];
    sprite[10007] = [DiamondSpikeEnemy, DiamondSpikeEnemy];

    sprite[10008] = [AmethystSpikeAlly, AmethystSpikeAlly];
    sprite[10009] = [AmethystSpikeEnemy, AmethystSpikeEnemy];

    sprite[10010] = [ReiditeSpikeAlly, ReiditeSpikeAlly];
    sprite[10011] = [ReiditeSpikeEnemy, ReiditeSpikeEnemy];


    sprite[10012] = [WoodSpikeDoorAlly, WoodSpikeDoorAlly];
    sprite[10013] = [WoodSpikeDoorEnemy, WoodSpikeDoorEnemy];

    sprite[10014] = [StoneSpikeDoorAlly, StoneSpikeDoorAlly];
    sprite[10015] = [StoneSpikeDoorEnemy, StoneSpikeDoorEnemy];

    sprite[10016] = [GoldSpikeDoorAlly, GoldSpikeDoorAlly];
    sprite[10017] = [GoldSpikeDoorEnemy, GoldSpikeDoorEnemy];

    sprite[10018] = [DiamondSpikeDoorAlly, DiamondSpikeDoorAlly];
    sprite[10019] = [DiamondSpikeDoorEnemy, DiamondSpikeDoorEnemy];

    sprite[10020] = [AmethystSpikeDoorAlly, AmethystSpikeDoorAlly];
    sprite[10021] = [AmethystSpikeDoorEnemy, AmethystSpikeDoorEnemy];

    sprite[10022] = [ReiditeSpikeDoorAlly, ReiditeSpikeDoorAlly];
    sprite[10023] = [ReiditeSpikeDoorEnemy, ReiditeSpikeDoorEnemy];

    sprite[10024] = [WoodDoorAlly, WoodDoorAlly];
    sprite[10025] = [WoodDoorEnemy, WoodDoorEnemy];

    sprite[10026] = [StoneDoorAlly, StoneDoorAlly];
    sprite[10027] = [StoneDoorEnemy, StoneDoorEnemy];

    sprite[10028] = [GoldDoorAlly, GoldDoorAlly];
    sprite[10029] = [GoldDoorEnemy, GoldDoorEnemy];

    sprite[10030] = [DiamondDoorAlly, DiamondDoorAlly];
    sprite[10031] = [DiamondDoorEnemy, DiamondDoorEnemy];

    sprite[10032] = [AmethystDoorAlly, AmethystDoorAlly];
    sprite[10033] = [AmethystDoorEnemy, AmethystDoorEnemy];

    sprite[10034] = [ReiditeDoorAlly, ReiditeDoorAlly];
    sprite[10035] = [ReiditeDoorEnemy, ReiditeDoorEnemy];
    RARITY = {}, RARITY.FREE = 0, RARITY.WOOD = 1, RARITY.STONE = 2, RARITY.GOLD = 3, RARITY.DIAMOND = 4, RARITY.AMETHYST = 5, RARITY.REIDITE = 6, RARITY.SPECIAL = 7, RARITY.LEVEL = 8, COSMETICS = {}, MINIMAP_UTILS = [], find_cosmetics_per_id = function (e, i) {
        for (var t = 0; t < e.length; t++)
            if (e[t].id === i) return t;
        return -1
    };
    var le = [];

    function Re(e, i) {
        for (var t = 0; t < le.length; t += i) {
            var r = le[t];
            r[0] === e && ce(r[0], r[1], r[2], r[3])
        }
    }

    function ce(e, i, t, r) {
        var n = MINIMAP_UTILS[e];
        if (void 0 !== n)
            for (var a = 0; a < 2; a++) {
                var o = n[i][a],
                    s = 193 * r / A_.nw,
                    _ = 193 * t / A_.nh,
                    E = o.width / 3.5,
                    T = o.height / 3.5;
                sprite[k.MINIMAP_CTX][a].drawImage(o, s - E / 2, _ - T / 2, E, T), s = 600 * r / A_.nw, _ = 600 * t / A_.nh, E = o.width / 1.5, T = o.height / 1.5, sprite[k.BIGMAP_CTX][a].drawImage(o, s - E / 2, _ - T / 2, E, T)
            }
    }

    function Ce(e, i, t, r) {
        i && (e.fillStyle = i, e.fill()), t && (e.lineWidth = r, e.strokeStyle = t, e.stroke())
    }

    function ge(e, i, t, r, n, a) {
        r < 2 * a && (a = r / 2), n < 2 * a && (a = n / 2), 0 > a && (a = 0), e.beginPath(), e.moveTo(i + a, t), e.arcTo(i + r, t, i + r, t + n, a), e.arcTo(i + r, t + n, i, t + n, a), e.arcTo(i, t + n, i, t, a), e.arcTo(i, t, i + r, t, a), e.closePath()
    }

    function Ne(e, i, t, r) {
        e.beginPath(), e.arc(i, t, r, 0, 2 * Math.PI)
    }

    function De(e, i, t, r, n) {
        e.beginPath(), e.lineCap = "round", e.arc(i, t, r, 0, 2 * Math.PI * n)
    }

    function be(e, i, t, r) {
        var n = 2 * Math.PI / i;
        e.beginPath();
        for (var a = [{
                x: t,
                y: 0
            }], o = [], s = 1; s < i; s++) {
            a.push({
                x: Math.cos(s * n) * t,
                y: Math.sin(s * n) * t
            });
            var E = a.length;
            o.push(_.middle_point(a[E - 2], a[E - 1]))
        }
        o.push(_.middle_point(a[a.length - 1], a[0]));
        var T = o[o.length - 1];
        e.moveTo(T.x, T.y);
        for (s = 0; s < i; s++) e.arcTo(a[s].x, a[s].y, o[s].x, o[s].y, r);
        e.closePath()
    }

    function Se(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = Math.sqrt(i.width * i.width + i.height * i.height);
        return d2 = n / 2, t.width = n, t.height = n, r.translate(d2, d2), r.rotate(e), r.drawImage(i, -i.width / 2, -i.height / 2), t
    }

    function pe(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = Math.floor(28 * e),
            a = Math.floor(20 * e);
        r.font = a + "px Baloo Paaji";
        var o = 8 * e,
            s = r.measureText(i).width + 2 * o;
        return t.width = s, t.height = n, ge(r, 0, 0, s, n, 10 * e), r.globalAlpha = .5, Ce(r, "#000"), r.globalAlpha = 1, r.textBaseline = "middle", r.font = a + "px Baloo Paaji", r.beginPath(), r.fillStyle = "#FFF", r.fillText(i, o, n / 2), t
    }

    function me(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 120 * e,
            a = 110 * e,
            o = n / 2,
            s = a / 2,
            _ = 20 * e,
            E = 112 * e,
            T = 82 * e,
            A = E / 2,
            d = T / 2,
            I = 4 * e;
        return t.width = n, t.height = a, r.globalAlpha = 1, r.translate(o, s), ge(r, -A, -d, E, T, _), Ce(r, i, i, I), t
    }

    function ve(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 264 * e, r.height = 246 * e, n.translate(0, 10 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(75 * e, 54 * e), n.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e), n.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e), n.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e), n.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e), n.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e), n.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e), n.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e), n.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e), n.closePath(), Ce(n, t[0]), n.translate(0, -10 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(75 * e, 54 * e), n.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e), n.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e), n.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e), n.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e), n.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e), n.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e), n.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e), n.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(121 * e, 102 * e), n.bezierCurveTo(111 * e, 80 * e, 110 * e, 66 * e, 108 * e, 51 * e), n.bezierCurveTo(119 * e, 65 * e, 129 * e, 85 * e, 135 * e, 99 * e), n.bezierCurveTo(142 * e, 67 * e, 146 * e, 60 * e, 152 * e, 50 * e), n.bezierCurveTo(154 * e, 71 * e, 152 * e, 85 * e, 149 * e, 104 * e), n.bezierCurveTo(166 * e, 88 * e, 175 * e, 83 * e, 188 * e, 78 * e), n.bezierCurveTo(179 * e, 91 * e, 170 * e, 103 * e, 160 * e, 112 * e), n.bezierCurveTo(186 * e, 107 * e, 191 * e, 107 * e, 204 * e, 108 * e), n.bezierCurveTo(195 * e, 114 * e, 179 * e, 120 * e, 163 * e, 123 * e), n.bezierCurveTo(183 * e, 130 * e, 186 * e, 135 * e, 192 * e, 140 * e), n.bezierCurveTo(179 * e, 141 * e, 164 * e, 139 * e, 153 * e, 135 * e), n.bezierCurveTo(158 * e, 145 * e, 163 * e, 159 * e, 165 * e, 177 * e), n.bezierCurveTo(154 * e, 166 * e, 145 * e, 153 * e, 138 * e, 139 * e), n.bezierCurveTo(133 * e, 155 * e, 125 * e, 170 * e, 117 * e, 182 * e), n.bezierCurveTo(116 * e, 160 * e, 119 * e, 151 * e, 124 * e, 138 * e), n.bezierCurveTo(107 * e, 150 * e, 95 * e, 156 * e, 82 * e, 159 * e), n.bezierCurveTo(94 * e, 140 * e, 101 * e, 136 * e, 113 * e, 128 * e), n.bezierCurveTo(78 * e, 123 * e, 75 * e, 121 * e, 67 * e, 118 * e), n.bezierCurveTo(85 * e, 112 * e, 94 * e, 112 * e, 111 * e, 113 * e), n.bezierCurveTo(89 * e, 97 * e, 85 * e, 93 * e, 78 * e, 82 * e), n.bezierCurveTo(92 * e, 85 * e, 101 * e, 90 * e, 121 * e, 102 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(128 * e, 103 * e), n.bezierCurveTo(111 * e, 112 * e, 117 * e, 136 * e, 140 * e, 130 * e), n.bezierCurveTo(151 * e, 126 * e, 156 * e, 115 * e, 155 * e, 107 * e), n.bezierCurveTo(155 * e, 96 * e, 154 * e, 94 * e, 148 * e, 94 * e), n.bezierCurveTo(141 * e, 94 * e, 146 * e, 104 * e, 136 * e, 104 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), r
    }

    function Me(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 70 * e, r.height = 70 * e, n.globalAlpha = .5, Ne(n, 26 * e, 26 * e, 9 * e), Ce(n, t[0]), Ne(n, 56 * e, 36 * e, 9 * e), Ce(n, t[1]), Ne(n, 40 * e, 50 * e, 9 * e), Ce(n, t[2]), n.globalAlpha = 1, Ne(n, 26 * e, 26 * e, 5 * e), Ce(n, t[0]), Ne(n, 56 * e, 36 * e, 5 * e), Ce(n, t[1]), Ne(n, 40 * e, 50 * e, 5 * e), Ce(n, t[2]), r
    }

    function Ge(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 22 * e, r.height = 22 * e, n.globalAlpha = .4, Ne(n, 11 * e, 11 * e, 10 * e), Ce(n, t[0]), n.globalAlpha = .7, Ne(n, 11 * e, 11 * e, 7 * e), Ce(n, t[0]), n.globalAlpha = 1, Ne(n, 11 * e, 11 * e, 4 * e), Ce(n, t[0]), r
    }

    function Le(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 248 * e, r.height = 247 * e, n.save(), n.translate(69.5 * e, 145 * e), ge(n, -8.5 * e, -63 * e, 17 * e, 127 * e, 1 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(183 * e, 145 * e), ge(n, -8 * e, -63 * e, 16 * e, 126 * e, 1 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(123.5 * e, 62.5 * e), n.rotate(6.28), ge(n, -84.5 * e, -25.5 * e, 169 * e, 51 * e, 5 * e), n.restore(), Ce(n, t[2], t[1], 6 * e), n.save(), n.translate(123.5 * e, 118 * e), n.rotate(6.24), ge(n, -85.5 * e, -24 * e, 169 * e, 48 * e, 5 * e), n.restore(), Ce(n, t[3], t[1], 6 * e), n.save(), n.translate(122 * e, 177.5 * e), n.rotate(6.32), ge(n, -84 * e, -23.5 * e, 169 * e, 47 * e, 5 * e), n.restore(), Ce(n, t[2], t[1], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(37 * e, 157 * e), n.bezierCurveTo(49 * e, 160 * e, 49 * e, 160 * e, 61 * e, 163 * e), n.bezierCurveTo(49.5 * e, 165.5 * e, 49.5 * e, 165.5 * e, 38 * e, 168 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(205 * e, 175 * e), n.bezierCurveTo(192.5 * e, 180 * e, 192.5 * e, 180 * e, 180 * e, 185 * e), n.bezierCurveTo(193 * e, 188 * e, 193 * e, 188 * e, 206 * e, 191 * e), n.closePath(), Ce(n, t[1]), r
    }

    function fe(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 248 * e, r.height = 247 * e, n.save(), n.translate(182 * e, 120 * e), ge(n, -8 * e, -67 * e, 16 * e, 134 * e, 1 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(68.5 * e, 127.5 * e), ge(n, -8.5 * e, -70.5 * e, 17 * e, 141 * e, 1 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(123.5 * e, 68 * e), ge(n, -82.5 * e, -24 * e, 165 * e, 48 * e, 4 * e), n.restore(), Ce(n, t[2], t[1], 6 * e), n.save(), n.translate(123 * e, 179.5 * e), ge(n, -83 * e, -24.5 * e, 166 * e, 49 * e, 4 * e), n.restore(), Ce(n, t[2], t[1], 6 * e), n.save(), n.translate(123.5 * e, 123.5 * e), n.rotate(6.24), ge(n, -82.5 * e, -24.5 * e, 165 * e, 49 * e, 4 * e), n.restore(), Ce(n, t[3], t[1], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(204 * e, 112 * e), n.bezierCurveTo(149 * e, 121.5 * e, 96 * e, 130 * e, 94 * e, 131 * e), n.bezierCurveTo(149.5 * e, 127.5 * e, 149.5 * e, 127.5 * e, 205 * e, 124 * e), n.closePath(), Ce(n, t[1]), r
    }

    function He(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 248 * e, r.height = 247 * e, n.save(), n.translate(183 * e, 107 * e), ge(n, -8 * e, -70.5 * e, 16 * e, 141 * e, 1 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(69.5 * e, 110 * e), ge(n, -8.5 * e, -71 * e, 17 * e, 143 * e, 1 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(123.5 * e, 181 * e), ge(n, -84.5 * e, -26 * e, 169 * e, 52 * e, 5 * e), n.restore(), Ce(n, t[2], t[1], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 95 * e), n.bezierCurveTo(105 * e, 96 * e, 113 * e, 99 * e, 134 * e, 102 * e), n.bezierCurveTo(147 * e, 106 * e, 173 * e, 100 * e, 207 * e, 105 * e), n.bezierCurveTo(210 * e, 105 * e, 207 * e, 140 * e, 207 * e, 154 * e), n.bezierCurveTo(123.5 * e, 151.5 * e, 123.5 * e, 151.5 * e, 40 * e, 149 * e), n.bezierCurveTo(37 * e, 145 * e, 39 * e, 95 * e, 41 * e, 96 * e), n.closePath(), Ce(n, t[2], t[1], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(68 * e, 75 * e), n.bezierCurveTo(54 * e, 72.5 * e, 54 * e, 72.5 * e, 40 * e, 70 * e), n.bezierCurveTo(38 * e, 46 * e, 40 * e, 46 * e, 53 * e, 46 * e), n.bezierCurveTo(201 * e, 41 * e, 201 * e, 41 * e, 201 * e, 42 * e), n.bezierCurveTo(211 * e, 40 * e, 208 * e, 53 * e, 208 * e, 72 * e), n.bezierCurveTo(209 * e, 91 * e, 210 * e, 96 * e, 194 * e, 94 * e), n.bezierCurveTo(119 * e, 97 * e, 119 * e, 97 * e, 44 * e, 100 * e), n.bezierCurveTo(39 * e, 99 * e, 40 * e, 96 * e, 40 * e, 80 * e), n.bezierCurveTo(54 * e, 77.5 * e, 54 * e, 77.5 * e, 68 * e, 75 * e), n.closePath(), Ce(n, t[3], t[1], 6 * e), r
    }

    function Pe(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 191 * e, r.height = 153 * e, n.globalAlpha = .5, n.translate(0, 10 * e), n.save(), n.translate(97.49996948242188 * e, 95.12844848632812 * e), ge(n, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e), n.restore(), Ce(n, t[0], t[0], 4 * e), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(97.49996948242188 * e, 95.12844848632812 * e), ge(n, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.globalCompositeOperation = "destination-out", n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(26.999969482421875 * e, 50.850677490234375 * e), n.bezierCurveTo(46.499969482421875 * e, 64.85067749023438 * e, 46.499969482421875 * e, 64.85067749023438 * e, 65.99996948242188 * e, 78.85067749023438 * e), n.bezierCurveTo(80.99996948242188 * e, 87.85067749023438 * e, 105.99996948242188 * e, 82.85067749023438 * e, 114.99996948242188 * e, 80.85067749023438 * e), n.bezierCurveTo(130.99996948242188 * e, 69.85067749023438 * e, 152.99996948242188 * e, 70.85067749023438 * e, 166.99996948242188 * e, 67.85067749023438 * e), n.bezierCurveTo(156.99996948242188 * e, 52.850677490234375 * e, 156.99996948242188 * e, 52.850677490234375 * e, 146.99996948242188 * e, 37.850677490234375 * e), n.bezierCurveTo(101.49996948242188 * e, 37.350677490234375 * e, 101.49996948242188 * e, 37.350677490234375 * e, 55.999969482421875 * e, 36.850677490234375 * e), n.closePath(), Ce(n, t[2], t[3], 4 * e), n.globalCompositeOperation = "source-over", n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(40.999969482421875 * e, 59.850677490234375 * e), n.bezierCurveTo(41.999969482421875 * e, 50.850677490234375 * e, 47.999969482421875 * e, 47.850677490234375 * e, 56.999969482421875 * e, 49.850677490234375 * e), n.bezierCurveTo(65.99996948242188 * e, 41.850677490234375 * e, 76.99996948242188 * e, 42.850677490234375 * e, 90.99996948242188 * e, 47.850677490234375 * e), n.bezierCurveTo(94.99996948242188 * e, 42.850677490234375 * e, 104.99996948242188 * e, 42.850677490234375 * e, 114.99996948242188 * e, 47.850677490234375 * e), n.bezierCurveTo(131.99996948242188 * e, 42.850677490234375 * e, 142.99996948242188 * e, 48.850677490234375 * e, 145.99996948242188 * e, 56.850677490234375 * e), n.bezierCurveTo(160.99996948242188 * e, 63.850677490234375 * e, 154.99996948242188 * e, 69.85067749023438 * e, 155.99996948242188 * e, 70.85067749023438 * e), n.bezierCurveTo(141.99996948242188 * e, 71.85067749023438 * e, 141.99996948242188 * e, 71.85067749023438 * e, 127.99996948242188 * e, 72.85067749023438 * e), n.bezierCurveTo(110.99996948242188 * e, 83.85067749023438 * e, 107.99996948242188 * e, 82.85067749023438 * e, 90.99996948242188 * e, 85.85067749023438 * e), n.bezierCurveTo(70.99996948242188 * e, 83.85067749023438 * e, 64.99996948242188 * e, 79.85067749023438 * e, 53.999969482421875 * e, 70.85067749023438 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(33.999969482421875 * e, 65.85067749023438 * e), n.bezierCurveTo(36.999969482421875 * e, 59.850677490234375 * e, 34.999969482421875 * e, 60.850677490234375 * e, 39.999969482421875 * e, 59.850677490234375 * e), n.bezierCurveTo(47.999969482421875 * e, 61.850677490234375 * e, 62.999969482421875 * e, 76.85067749023438 * e, 74.99996948242188 * e, 79.85067749023438 * e), n.bezierCurveTo(93.99996948242188 * e, 85.85067749023438 * e, 111.99996948242188 * e, 83.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e), n.bezierCurveTo(129.99996948242188 * e, 67.85067749023438 * e, 145.99996948242188 * e, 65.85067749023438 * e, 159.99996948242188 * e, 67.85067749023438 * e), n.bezierCurveTo(159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 75.85067749023438 * e), n.bezierCurveTo(146.99996948242188 * e, 72.85067749023438 * e, 144.99996948242188 * e, 75.85067749023438 * e, 143.99996948242188 * e, 82.85067749023438 * e), n.bezierCurveTo(144.99996948242188 * e, 86.85067749023438 * e, 140.99996948242188 * e, 90.85067749023438 * e, 137.99996948242188 * e, 86.85067749023438 * e), n.bezierCurveTo(139.99996948242188 * e, 72.85067749023438 * e, 135.99996948242188 * e, 72.85067749023438 * e, 133.99996948242188 * e, 82.85067749023438 * e), n.bezierCurveTo(127.99996948242188 * e, 88.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e, 116.99996948242188 * e, 86.85067749023438 * e), n.bezierCurveTo(110.99996948242188 * e, 91.85067749023438 * e, 96.99996948242188 * e, 81.85067749023438 * e, 89.99996948242188 * e, 90.85067749023438 * e), n.bezierCurveTo(85.99996948242188 * e, 92.85067749023438 * e, 81.99996948242188 * e, 95.85067749023438 * e, 76.99996948242188 * e, 86.85067749023438 * e), n.bezierCurveTo(67.99996948242188 * e, 93.85067749023438 * e, 67.99996948242188 * e, 91.85067749023438 * e, 60.999969482421875 * e, 79.85067749023438 * e), n.bezierCurveTo(53.999969482421875 * e, 71.85067749023438 * e, 52.999969482421875 * e, 72.85067749023438 * e, 46.999969482421875 * e, 77.85067749023438 * e), n.bezierCurveTo(41.999969482421875 * e, 78.85067749023438 * e, 42.999969482421875 * e, 69.85067749023438 * e, 33.999969482421875 * e, 65.85067749023438 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), Ne(n, 68 * e, 111.29513549804688 * e, 15 * e), Ce(n, t[7], t[8], 4 * e), Ne(n, 123 * e, 111.29510498046875 * e, 15 * e), Ce(n, t[7], t[8], 4 * e), Ne(n, 63 * e, 106 * e, 5 * e), Ce(n, t[9]), Ne(n, 118 * e, 106 * e, 5 * e), Ce(n, t[9]), r
    }

    function ye(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 191 * e, r.height = 153 * e, n.globalAlpha = .5, n.translate(0, 10 * e), n.save(), n.translate(96.49996948242188 * e, 66.79510498046875 * e), n.rotate(0), ge(n, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e), n.restore(), Ce(n, t[0], t[0], 4 * e), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(96.49996948242188 * e, 66.79510498046875 * e), n.rotate(0), ge(n, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.translate(2 * e, 0), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(119 * e, 28 * e), n.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e), n.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e), n.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e), n.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e), n.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e), n.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e), n.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e), n.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e), n.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e), n.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e), n.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e), n.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e), n.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e), n.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e), n.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e), n.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e), n.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e), n.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e), n.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e), n.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e), n.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), r
    }

    function ze(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 191 * e, t.height = 153 * e, r.save(), r.translate(96.49996948242188 * e, 66.79510498046875 * e), ge(r, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e), r.restore(), Ce(r, i[0], i[0], 4 * e), r.translate(2 * e, 0), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(119 * e, 28 * e), r.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e), r.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e), r.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e), r.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e), r.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e), r.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e), r.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e), r.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e), r.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e), r.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e), r.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e), r.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e), r.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e), r.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e), r.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e), r.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e), r.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e), r.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e), r.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e), r.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e), r.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e), r.closePath(), Ce(r, i[0], i[0], 4 * e), r.save(), r.translate(97.49996948242188 * e, 95.12844848632812 * e), ge(r, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e), r.restore(), Ce(r, i[0], i[0], 4 * e), t
    }

    function Be(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 40 * e,
            o = 40 * e;
        r.width = a, r.height = o;
        var s = e * a / 2,
            _ = e * o / 2,
            E = 15 * e;
        n.save(), n.translate(s, _), n.globalAlpha = 1, Ne(n, 0, 0, E), Ce(n, t[0]);
        E = 5 * e, s = 2 * e, _ = 1 * e;
        return n.translate(s, _), n.globalAlpha = 1, Ne(n, 0, 0, E), Ce(n, t[1]), n.restore(), r
    }

    function We(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        return n.width = 185 * e, n.height = 240 * e, a.globalAlpha = .5, a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 137 * e), a.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e), a.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 181 * e), a.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e), a.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(63 * e, 208 * e), a.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e), a.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130 * e, 170 * e), a.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e), a.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 140 * e), a.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e), a.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e), a.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e), a.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e), a.closePath(), Ce(a, t[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 137 * e), a.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e), a.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 181 * e), a.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e), a.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(63 * e, 208 * e), a.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e), a.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130 * e, 170 * e), a.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e), a.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 140 * e), a.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e), a.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e), a.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e), a.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59 * e, 99 * e), a.bezierCurveTo(71 * e, 68 * e, 81 * e, 68 * e, 94 * e, 67 * e), a.bezierCurveTo(105 * e, 66 * e, 119 * e, 75 * e, 123 * e, 96 * e), a.bezierCurveTo(104 * e, 91 * e, 101 * e, 94 * e, 94 * e, 97 * e), a.bezierCurveTo(76 * e, 92 * e, 73 * e, 93 * e, 60 * e, 99 * e), a.closePath(), Ce(a, t[3], t[2], 4 * e), 0 === r ? (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(47 * e, 149 * e), a.bezierCurveTo(43 * e, 140 * e, 48 * e, 130 * e, 59 * e, 127 * e), a.bezierCurveTo(77 * e, 126 * e, 90 * e, 131 * e, 131 * e, 127 * e), a.bezierCurveTo(143 * e, 130 * e, 144 * e, 143 * e, 132 * e, 154 * e), a.bezierCurveTo(90 * e, 152 * e, 90 * e, 152 * e, 48 * e, 150 * e), a.closePath(), Ce(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(40 * e, 139 * e), a.bezierCurveTo(48 * e, 113 * e, 76 * e, 119 * e, 91 * e, 126 * e), a.bezierCurveTo(117 * e, 113 * e, 135 * e, 117 * e, 144 * e, 134 * e), a.bezierCurveTo(144 * e, 138 * e, 144 * e, 138 * e, 144 * e, 142 * e), a.bezierCurveTo(128 * e, 124 * e, 108 * e, 124 * e, 91 * e, 136 * e), a.bezierCurveTo(59 * e, 124 * e, 50 * e, 137 * e, 42 * e, 148 * e), a.closePath(), Ce(a, t[3], t[2], 4 * e)) : (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 139 * e), a.bezierCurveTo(53 * e, 117 * e, 69 * e, 118 * e, 92 * e, 127 * e), a.bezierCurveTo(124 * e, 111 * e, 136 * e, 121 * e, 143 * e, 136 * e), a.bezierCurveTo(142 * e, 144 * e, 142 * e, 144 * e, 141 * e, 152 * e), a.bezierCurveTo(128 * e, 131 * e, 113 * e, 138 * e, 92 * e, 145 * e), a.bezierCurveTo(57 * e, 133 * e, 57 * e, 147 * e, 44 * e, 154 * e), a.closePath(), Ce(a, t[3], t[2], 4 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 95 * e), a.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e), a.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e), a.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e), a.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 86 * e), a.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e), a.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e), a.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e), a.closePath(), Ce(a, t[1], t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(92 * e, 117 * e), a.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e), a.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e), a.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e), a.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e), a.closePath(), Ce(a, t[1], t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(92 * e, 175 * e), a.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e), a.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e), a.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e), a.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e), a.closePath(), Ce(a, t[1], t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(48 * e, 169 * e), a.bezierCurveTo(42 * e, 187 * e, 50 * e, 193 * e, 59 * e, 198 * e), a.closePath(), Ce(a, void 0, t[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(136 * e, 171 * e), a.bezierCurveTo(139 * e, 186 * e, 138 * e, 191 * e, 124 * e, 199 * e), a.closePath(), Ce(a, void 0, t[2], 4 * e), Ne(a, 63 * e, 180 * e, 15.231546211727817 * e), Ce(a, t[4]), Ne(a, 121 * e, 181 * e, 15.652475842498529 * e), Ce(a, t[4]), Ne(a, 58 * e, 175 * e, 5.656854249492381 * e), Ce(a, t[2]), Ne(a, 116 * e, 175 * e, 5.656854249492381 * e), Ce(a, t[2]), n
    }

    function Ve(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 185 * e, t.height = 240 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44 * e, 137 * e), r.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e), r.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(53 * e, 181 * e), r.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e), r.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(63 * e, 208 * e), r.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e), r.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130 * e, 170 * e), r.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e), r.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(39 * e, 140 * e), r.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e), r.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e), r.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e), r.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(90 * e, 95 * e), r.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e), r.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e), r.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e), r.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(90 * e, 86 * e), r.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e), r.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e), r.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(92 * e, 117 * e), r.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e), r.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e), r.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e), r.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(92 * e, 175 * e), r.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e), r.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e), r.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e), r.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Ke(e) {
        var i = document.createElement("canvas"),
            t = i.getContext("2d"),
            r = 200 * e,
            n = 200 * e;
        i.width = r, i.height = n;
        var a = wi(.35, !1, ["#0e3022", "#0b8052", "#077b49"]);
        t.drawImage(a, 10, 10);
        a = Ui(.9, !1, ["#3d2a6e", "#8255b5"]);
        t.drawImage(a, 21, 20);
        a = Ui(.9, !1, ["#3d2a6e", "#8255b5"]);
        t.drawImage(a, 38, 28);
        a = Ui(.9, !1, ["#3d2a6e", "#8255b5"]);
        t.drawImage(a, 15, 37);
        a = Ui(.9, !1, ["#3d2a6e", "#8255b5"]);
        return t.drawImage(a, 32, 45), i
    }

    function we(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 100 * e,
            a = 100 * e,
            o = n / 2,
            s = a / 2;
        t.width = n, t.height = a;
        var _ = 5 * e,
            E = 28 * e,
            T = _ / 2,
            A = E / 2;
        r.translate(o, s);
        for (var d = 0; d < 4; d++) ge(r, -T, -A, _, E, 2 * e), r.rotate(Math.PI / 4), Ce(r, i);
        return r.arc(0, 0, 10 * e, 0, 2 * Math.PI), Ce(r, i), r.globalCompositeOperation = "destination-out", Ne(r, 0, 0, 4 * e), r.fill(), t
    }

    function Ue(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 32 * e,
            o = 32 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o;
        var E = 5 * e,
            T = 28 * e,
            A = E / 2,
            d = T / 2;
        if (n.translate(0 * e, 0 * e), n.translate(s, _), 1 == t) {
            Ne(n, 0, 0, 10 * e), Ce(n, i[2], i[2], 3 * e);
            for (var I = 0; I < 4; I++) ge(n, -A, -d, E, T, 2 * e), n.rotate(Math.PI / 4), Ce(n, i[2], i[2], 4 * e)
        }
        Ne(n, 0, 0, 10 * e), Ce(n, i[0], i[1], 1.5 * e);
        for (I = 0; I < 4; I++) ge(n, -A, -d, E, T, 2 * e), n.rotate(Math.PI / 4), Ce(n, i[0], i[1], 1.5 * e);
        return Ne(n, 0, 0, 10 * e), Ce(n, i[0]), Ne(n, 0, 0, 4 * e), Ce(n, i[2], i[1], 1.5 * e), n.globalCompositeOperation = "destination-out", Ne(n, 0, 0, 4 * e), Ce(n, i[0], i[1], 2 * e), n.globalCompositeOperation = "source-over", Ne(n, 0, 0, 4 * e), Ce(n, void 0, i[1], 2 * e), r
    }

    function Ye(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = (h = 125 * e) / 2,
            o = (u = 95 * e) / 2,
            s = 10 * e,
            _ = 8 * e,
            E = 112 * e,
            T = 82 * e,
            A = E / 2,
            d = T / 2,
            I = 4 * e;
        r.width = h, r.height = u, n.translate(a - 4 * e, o + 4 * e), n.globalAlpha = i ? .5 : 1, ge(n, -A, -d, E, T, s), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -_), ge(n, -A, -d, E, T, s), Ce(n, t[1], t[2], I);
        var h = 55 * e,
            u = 45 * e;
        s = 5;
        n.translate(-40 * e, -30 * e), ge(n, 0, 0, h, u, s), Ce(n, t[3]);
        var O = we(.7 * e, t[3]);
        n.drawImage(O, 45 * e, -25 * e);
        O = we(.7 * e, t[3]);
        n.drawImage(O, 45 * e, 15 * e);
        O = we(1.2 * e, t[3]);
        n.drawImage(O, 28 * e, -30 * e);
        h = 15 * e, u = 70 * e, s = 5 * e;
        n.translate(78 * e, -5 * e), ge(n, 0, 0, h, u, s), Ce(n, t[4]);
        h = 9 * e, u = 50 * e, s = 3 * e;
        return n.translate(-20 * e, 20 * e), n.rotate(Math.PI / 5), n.globalAlpha = .6, ge(n, 0, 0, h, u, s), Ce(n, t[5]), n.translate(-20 * e, 29 * e), n.rotate(Math.PI / 5), n.globalAlpha = .6, n.beginPath(), n.lineJoin = "round", n.moveTo(0, 0), n.lineTo(0, 30 * e), n.lineTo(30 * e, 30 * e), n.closePath(), Ce(n, null, t[5], 8 * e), r
    }

    function Fe(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 85 * e,
            a = 115 * e,
            o = 6 * e;
        t.width = n, t.height = a, r.translate(-130 * e, -60 * e + o), r.globalAlpha = .5, r.beginPath(), r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e), r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e), r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e), r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e), r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e), r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e), r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e), r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e), r.closePath(), Ce(r, i[0]), r.translate(0, -o), r.globalAlpha = 1, r.beginPath(), r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e), r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e), r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e), r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e), r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e), r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e), r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e), r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e), r.closePath(), Ce(r, i[1], i[2], 4);
        var s = 155 * e,
            _ = 133 * e,
            E = 10 * e,
            T = 3 * e,
            A = s + -3 * e,
            d = _ + -5 * e;
        return r.save(), r.translate(s, _), r.globalAlpha = 1, Ne(r, 0, 0, E), Ce(r, i[3]), r.restore(), r.save(), r.translate(A, d), r.globalAlpha = 1, Ne(r, 0, 0, T), Ce(r, i[4]), r.restore(), r.save(), r.translate(s + 27 * e, _), r.globalAlpha = 1, Ne(r, 0, 0, E), Ce(r, i[3]), r.restore(), r.save(), r.translate(27 * e + A, d), r.globalAlpha = 1, Ne(r, 0, 0, T), Ce(r, i[4]), t
    }

    function ke(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 188 * e, t.height = 190 * e, r.globalAlpha = .5, r.translate(0, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), Ce(r, i[0], i[0], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(60.00567626953125 * e, 99.35227966308594 * e), r.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e), r.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e), r.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e), r.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e), r.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e), r.closePath(), Ce(r, i[0], i[0], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(51.00567626953125 * e, 72.53409576416016 * e), r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e), r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e), r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e), r.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e), r.closePath(), Ce(r, i[0], i[0], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.00567626953125 * e, 50.53410339355469 * e), r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e), r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e), r.closePath(), Ce(r, i[0], i[0], 2 * e), r.globalAlpha = 1, r.translate(0, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), Ce(r, i[1], i[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(60.00567626953125 * e, 99.35227966308594 * e), r.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e), r.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e), r.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e), r.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e), r.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), Ce(r, void 0, i[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(51.00567626953125 * e, 72.53409576416016 * e), r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e), r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e), r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e), Ce(r, i[1], i[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.00567626953125 * e, 50.53410339355469 * e), r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e), r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e), Ce(r, i[1], i[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(57.00567626953125 * e, 68.53410339355469 * e), r.bezierCurveTo(63.00567626953125 * e, 69.53410339355469 * e, 69.00567626953125 * e, 66.53410339355469 * e, 73.00567626953125 * e, 60.53410339355469 * e), r.bezierCurveTo(66.00567626953125 * e, 47.53410339355469 * e, 61.00567626953125 * e, 42.53410339355469 * e, 58.00567626953125 * e, 49.53410339355469 * e), r.bezierCurveTo(56.00567626953125 * e, 59.53410339355469 * e, 56.00567626953125 * e, 64.53410339355469 * e, 57.00567626953125 * e, 67.53410339355469 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115.00567626953125 * e, 59.715911865234375 * e), r.bezierCurveTo(119.00567626953125 * e, 48.715911865234375 * e, 126.00567626953125 * e, 41.715911865234375 * e, 129.00567626953125 * e, 48.715911865234375 * e), r.bezierCurveTo(131.00567626953125 * e, 56.715911865234375 * e, 133.00567626953125 * e, 71.71591186523438 * e, 127.00567626953125 * e, 68.71591186523438 * e), r.bezierCurveTo(120.00567626953125 * e, 67.71591186523438 * e, 114.00567626953125 * e, 59.715911865234375 * e, 116.00567626953125 * e, 58.715911865234375 * e), r.closePath(), Ce(r, i[3]), Ne(r, 77 * e, 107 * e, 6 * e), Ce(r, i[2]), Ne(r, 110 * e, 107 * e, 6 * e), Ce(r, i[2]), Ne(r, 75 * e, 105 * e, 3 * e), Ce(r, i[4]), Ne(r, 108 * e, 105 * e, 3 * e), Ce(r, i[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(88.00567626953125 * e, 141.4431915283203 * e), r.bezierCurveTo(93.00567626953125 * e, 137.4431915283203 * e, 96.00567626953125 * e, 138.4431915283203 * e, 100.00567626953125 * e, 141.4431915283203 * e), r.bezierCurveTo(103.00567626953125 * e, 143.4431915283203 * e, 101.00567626953125 * e, 149.4431915283203 * e, 95.00567626953125 * e, 148.4431915283203 * e), r.bezierCurveTo(85.00567626953125 * e, 148.4431915283203 * e, 86.00567626953125 * e, 145.4431915283203 * e, 88.00567626953125 * e, 142.4431915283203 * e), r.closePath(), Ce(r, i[1]), t
    }

    function xe(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 55 * e,
            o = 55 * e,
            s = 8 * e;
        return r.width = a, r.height = o, n.translate(-65 * e, -55 * e + s), n.globalAlpha = 1, n.beginPath(), n.moveTo(95 * e, 60 * e), n.bezierCurveTo(107 * e, 62 * e, 110 * e, 73 * e, 107 * e, 79 * e), n.bezierCurveTo(104 * e, 85 * e, 85 * e, 93 * e, 81 * e, 88 * e), n.bezierCurveTo(74 * e, 80 * e, 85 * e, 60 * e, 95 * e, 60 * e), n.closePath(), Ce(n, t[0], t[1], 3), n.globalAlpha = 1, n.beginPath(), n.moveTo(91 * e, 70 * e), n.bezierCurveTo(91 * e, 75 * e, 100 * e, 76 * e, 100 * e, 73 * e), n.bezierCurveTo(100 * e, 69 * e, 89 * e, 65 * e, 91 * e, 70 * e), n.closePath(), Ce(n, t[2], t[3], 3), r
    }

    function Je(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 238 * e, t.height = 230 * e, r.translate(-93 * e, -110 * e + 5 * e), r.globalAlpha = .3, Ne(r, 213.5 * e, 256.75 * e, 75 * e), Ce(r, i[5]), Ne(r, 213.5 * e, 175.75 * e, 25 * e), Ce(r, i[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[5], r.stroke(), r.translate(0, -5), r.globalAlpha = 1, Ne(r, 213.5 * e, 256.75 * e, 75 * e), Ce(r, i[3]), Ne(r, 213.5 * e, 175.75 * e, 25 * e), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(219.5 * e, 158.75 * e), r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.5 * e, 160.75 * e), r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(219.5 * e, 158.75 * e), r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e), r.closePath(), r.fillStyle = i[0], r.fill(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.5 * e, 160.75 * e), r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e), r.closePath(), r.fillStyle = i[0], r.fill(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 8 * e, r.strokeStyle = i[0], r.stroke(), Ne(r, 213.5 * e, 256.75 * e, 70 * e), Ce(r, i[0]), Ne(r, 213.5 * e, 175.75 * e, 20 * e), Ce(r, i[0]), Ne(r, 222 * e, 166 * e, 5 * e), r.fillStyle = i[2], r.fill(), Ne(r, 205 * e, 166 * e, 5 * e), r.fillStyle = i[2], r.fill(), Ne(r, 206.2 * e, 167 * e, 2.5 * e), r.fillStyle = i[4], r.fill(), Ne(r, 223.2 * e, 167 * e, 2.5 * e), r.fillStyle = i[4], r.fill(), r.save(), r.translate(213.5 * e, 293.75 * e), r.rotate(.76), ge(r, -22 * e, -21 * e, 44 * e, 42 * e, 6 * e), r.restore(), r.fillStyle = i[1], r.fill(), r.save(), r.translate(212.5 * e, 258.25 * e), r.rotate(.8), ge(r, -15 * e, -14.5 * e, 30 * e, 29 * e, 6 * e), r.restore(), r.fillStyle = i[1], r.fill(), t
    }

    function Xe(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.save(), n.translate(202.5 * e, 147.5 * e), ge(n, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e), n.restore(), Ce(n, i[0], i[1], 12 * e), n.save(), n.translate(202.5 * e, 190.5 * e), ge(n, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e), n.restore(), Ce(n, i[2], i[1], 12 * e), n.save(), n.save(), n.translate(202.5 * e, 233.5 * e), ge(n, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e), n.restore(), Ce(n, i[3], i[1], 12 * e), n.save(), n.translate(202.5 * e, 275 * e), ge(n, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e), n.restore(), Ce(n, i[0], i[1], 12 * e), n.save(), n.translate(201 * e, 212 * e), n.rotate(8.64), ge(n, -116 * e, -22 * e, 232 * e, 44 * e, 10 * e), n.restore(), Ce(n, i[3], i[1], 12 * e), n.save(), n.translate(203.5 * e, 121.5 * e), ge(n, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e), n.restore(), Ce(n, i[3], i[1], 12 * e), n.save(), n.translate(203.5 * e, 299 * e), ge(n, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e), n.restore(), Ce(n, i[3], i[1], 12 * e), n.save(), n.translate(298.5 * e, 210 * e), ge(n, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), n.restore(), Ce(n, i[3], i[1], 12 * e), n.save(), n.translate(108.5 * e, 210 * e), ge(n, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), n.restore(), Ce(n, i[3], i[1], 12 * e), n.save(), n.translate(204 * e, 121.5 * e), ge(n, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e), n.restore(), Ce(n, i[3], i[3], 10 * e), n.save(), n.translate(197 * e, 299 * e), ge(n, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e), n.restore(), Ce(n, i[3], i[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(94 * e, 317 * e), n.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e), n.closePath(), Ce(n, void 0, i[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(279 * e, 142 * e), n.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e), n.closePath(), Ce(n, void 0, i[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 106 * e), n.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e), n.closePath(), Ce(n, void 0, i[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(281 * e, 282 * e), n.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e), n.closePath(), Ce(n, void 0, i[1], 12 * e), 0 == t ? (n.scale(2, 2), n.translate(-7 * e, 55 * e), n.rotate(-.5), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60 * e, 47 * e), n.bezierCurveTo(81 * e, 46 * e, 85 * e, 47 * e, 83 * e, 63 * e), n.bezierCurveTo(83 * e, 72 * e, 83 * e, 75 * e, 72 * e, 73 * e), n.bezierCurveTo(68 * e, 80 * e, 69 * e, 82 * e, 66 * e, 73 * e), n.bezierCurveTo(62 * e, 81 * e, 61 * e, 82 * e, 59 * e, 73 * e), n.bezierCurveTo(54 * e, 81 * e, 55 * e, 81 * e, 52 * e, 74 * e), n.bezierCurveTo(38 * e, 76 * e, 41 * e, 74 * e, 40 * e, 66 * e), n.bezierCurveTo(38 * e, 45 * e, 39 * e, 49 * e, 59 * e, 47 * e), n.closePath(), Ce(n, i[4], i[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(68 * e, 54 * e), n.bezierCurveTo(75 * e, 54 * e, 77 * e, 62 * e, 71 * e, 64 * e), n.bezierCurveTo(62 * e, 65 * e, 63 * e, 54 * e, 68 * e, 54 * e), n.closePath(), Ce(n, i[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(50 * e, 55 * e), n.bezierCurveTo(57 * e, 55 * e, 58 * e, 65 * e, 52 * e, 65 * e), n.bezierCurveTo(44 * e, 66 * e, 44 * e, 54 * e, 50 * e, 55 * e), n.closePath(), Ce(n, i[3])) : 1 == t && (n.scale(.6, .6), n.translate(185 * e, 165 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(108 * e, 56 * e), n.bezierCurveTo(136 * e, 58 * e, 203 * e, 69 * e, 234 * e, 75 * e), n.bezierCurveTo(246 * e, 77 * e, 247 * e, 78 * e, 245 * e, 90 * e), n.bezierCurveTo(238 * e, 143 * e, 228 * e, 197 * e, 214 * e, 259 * e), n.bezierCurveTo(212 * e, 267 * e, 209 * e, 270 * e, 189 * e, 268 * e), n.bezierCurveTo(142 * e, 264 * e, 106 * e, 260 * e, 75 * e, 253 * e), n.bezierCurveTo(60 * e, 250 * e, 64 * e, 250 * e, 66 * e, 221 * e), n.bezierCurveTo(71 * e, 168 * e, 87 * e, 95 * e, 98 * e, 67 * e), n.bezierCurveTo(101 * e, 57 * e, 103 * e, 56 * e, 106 * e, 56 * e), n.closePath(), Ce(n, i[4], i[4], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(112 * e, 72 * e), n.bezierCurveTo(132 * e, 73 * e, 227 * e, 85 * e, 226 * e, 91 * e), n.bezierCurveTo(231 * e, 89 * e, 217 * e, 196 * e, 200 * e, 250 * e), n.bezierCurveTo(196 * e, 254 * e, 175 * e, 249 * e, 166 * e, 249 * e), n.bezierCurveTo(91 * e, 241 * e, 82 * e, 236 * e, 83 * e, 232 * e), n.bezierCurveTo(90 * e, 144 * e, 108 * e, 71 * e, 111 * e, 72 * e), n.closePath(), Ce(n, void 0, i[0], 13 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(132 * e, 117 * e), n.bezierCurveTo(171 * e, 86 * e, 191 * e, 101 * e, 188 * e, 134 * e), n.bezierCurveTo(185 * e, 154 * e, 170 * e, 158 * e, 153 * e, 158 * e), n.bezierCurveTo(143 * e, 172 * e, 146 * e, 180 * e, 147 * e, 193 * e), Ce(n, void 0, i[0], 20 * e), Ne(n, 142 * e, 221 * e, 16.1245154965971 * e), Ce(n, i[0])), r
    }

    function qe(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(101 * e, 255 * e), n.bezierCurveTo(113 * e, 243 * e, 179 * e, 210 * e, 219 * e, 196 * e), n.bezierCurveTo(252 * e, 203 * e, 288 * e, 215 * e, 318 * e, 233 * e), n.bezierCurveTo(304 * e, 254 * e, 258 * e, 273 * e, 215 * e, 296 * e), n.bezierCurveTo(161 * e, 287 * e, 119 * e, 270 * e, 102 * e, 257 * e), n.closePath(), Ce(n, t[0], t[1], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(99 * e, 258 * e), n.bezierCurveTo(99 * e, 272.5 * e, 99 * e, 272.5 * e, 99 * e, 287 * e), n.bezierCurveTo(166 * e, 319 * e, 193 * e, 320 * e, 212 * e, 324 * e), n.bezierCurveTo(292 * e, 286 * e, 312 * e, 271 * e, 319 * e, 263 * e), n.bezierCurveTo(320 * e, 249 * e, 320 * e, 241 * e, 318 * e, 234 * e), n.bezierCurveTo(300 * e, 254 * e, 254 * e, 277 * e, 216 * e, 294 * e), n.bezierCurveTo(190 * e, 296 * e, 135 * e, 276 * e, 102 * e, 258 * e), n.closePath(), Ce(n, t[2], t[1], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(212 * e, 323 * e), n.bezierCurveTo(211.5 * e, 310.5 * e, 211.5 * e, 310.5 * e, 211 * e, 298 * e), n.closePath(), Ce(n, void 0, t[1], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(212 * e, 210 * e), n.bezierCurveTo(286 * e, 210 * e, 331 * e, 254 * e, 212 * e, 276 * e), n.bezierCurveTo(108 * e, 276 * e, 112 * e, 222 * e, 213 * e, 208 * e), n.closePath(), Ce(n, t[3], t[4], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98 * e, 200 * e), n.bezierCurveTo(126 * e, 216 * e, 177 * e, 232 * e, 213 * e, 237 * e), n.bezierCurveTo(266 * e, 218 * e, 288 * e, 209 * e, 318 * e, 190 * e), n.bezierCurveTo(269 * e, 164 * e, 239 * e, 158 * e, 214 * e, 153 * e), n.bezierCurveTo(148 * e, 172 * e, 131 * e, 182 * e, 98 * e, 200 * e), n.closePath(), Ce(n, t[0], t[1], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(97 * e, 204 * e), n.bezierCurveTo(97 * e, 215.5 * e, 97 * e, 215.5 * e, 97 * e, 227 * e), n.bezierCurveTo(148 * e, 250 * e, 179 * e, 256 * e, 212 * e, 262 * e), n.bezierCurveTo(268 * e, 244 * e, 281 * e, 233 * e, 318 * e, 214 * e), n.bezierCurveTo(318 * e, 203 * e, 318 * e, 203 * e, 318 * e, 192 * e), n.bezierCurveTo(250 * e, 225 * e, 236 * e, 231 * e, 214 * e, 239 * e), n.bezierCurveTo(158 * e, 228 * e, 126 * e, 215 * e, 99 * e, 201 * e), n.closePath(), Ce(n, t[2], t[1], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(212 * e, 260 * e), n.bezierCurveTo(212 * e, 251.5 * e, 212 * e, 251.5 * e, 212 * e, 243 * e), n.closePath(), Ce(n, void 0, t[1], 14 * e), Ne(n, 161 * e, 201 * e, 13 * e), Ce(n, t[5]), Ne(n, 216 * e, 205 * e, 8.06225774829855 * e), Ce(n, t[5]), Ne(n, 216 * e, 175 * e, 6.708203932499369 * e), Ce(n, t[5]), Ne(n, 271 * e, 191 * e, 5.0990195135927845 * e), Ce(n, t[5]), Ne(n, 206 * e, 180 * e, 11.180339887498949 * e), Ce(n, t[5]), r
    }

    function je(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.save(), n.translate(85 * e, 237 * e), n.rotate(1.5707963267948966), be(n, 6, 54.585977194239184 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(178 * e, 238 * e), n.rotate(1.5707963267948966), be(n, 6, 52.53573932334064 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(270 * e, 239 * e), n.rotate(1.5707963267948966), be(n, 6, 53.58058329516393 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(222 * e, 312 * e), n.rotate(1.5707963267948966), be(n, 6, 52.53573932334064 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(317 * e, 159 * e), n.rotate(1.5707963267948966), be(n, 6, 57.63465889766331 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(223.5 * e, 139.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 51.66236541235796 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(132.5 * e, 137.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 52.009614495783374 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(178.5 * e, 58.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 53.16013544000805 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(177.5 * e, 216.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 50 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(84.5 * e, 215.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 54 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(319.5 * e, 138.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 55.08175741568164 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(269.5 * e, 216.0625 * e), n.rotate(1.5707963267948966), be(n, 6, 54.589376255824725 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.save(), n.translate(221.5 * e, 293.0625 * e), n.rotate(.5235987755982988), be(n, 6, 49.49747468305833 * e, 1 * e), n.restore(), Ce(n, t[1], t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(221.5 * e, 342.0625 * e), n.bezierCurveTo(221.5 * e, 350.5625 * e, 221.5 * e, 350.5625 * e, 221.5 * e, 359.0625 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84.5 * e, 270.0625 * e), n.bezierCurveTo(84.5 * e, 277.0625 * e, 84.5 * e, 277.0625 * e, 84.5 * e, 284.0625 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.save(), n.translate(84.5 * e, 215.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(177.5 * e, 215.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(222.5 * e, 294.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(270.5 * e, 216.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(320.5 * e, 134.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(224.5 * e, 138.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(133.5 * e, 137.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), n.save(), n.translate(178.5 * e, 56.0625 * e), n.rotate(.5235987755982988), be(n, 6, 30 * e, 15 * e), n.restore(), Ce(n, t[3]), r
    }

    function Ze(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 52 * e, r.height = 65 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(9.833328247070312 * e, 12.078125 * e), n.bezierCurveTo(15.333328247070312 * e, 28.078125 * e, 15.333328247070312 * e, 28.078125 * e, 20.833328247070312 * e, 44.078125 * e), n.closePath(), Ce(n, void 0, t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(7.8333282470703125 * e, 20.078125 * e), n.bezierCurveTo(16.833328247070312 * e, 32.578125 * e, 16.833328247070312 * e, 32.578125 * e, 25.833328247070312 * e, 45.078125 * e), n.closePath(), Ce(n, void 0, t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(23.833328247070312 * e, 26.078125 * e), n.bezierCurveTo(25.833328247070312 * e, 11.078125 * e, 16.833328247070312 * e, 8.078125 * e, 14.833328247070312 * e, 7.078125 * e), n.bezierCurveTo(11.833328247070312 * e, 17.078125 * e, 13.833328247070312 * e, 22.078125 * e, 23.833328247070312 * e, 27.078125 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35.83332824707031 * e, 8.078125 * e), n.bezierCurveTo(34.83332824707031 * e, 27.078125 * e, 28.833328247070312 * e, 27.078125 * e, 23.833328247070312 * e, 28.078125 * e), n.bezierCurveTo(21.833328247070312 * e, 14.078125 * e, 26.833328247070312 * e, 11.078125 * e, 35.83332824707031 * e, 8.078125 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(25.833328247070312 * e, 39.078125 * e), n.bezierCurveTo(20.833328247070312 * e, 29.078125 * e, 14.833328247070312 * e, 27.078125 * e, 5.8333282470703125 * e, 29.078125 * e), n.bezierCurveTo(9.833328247070312 * e, 39.078125 * e, 16.833328247070312 * e, 42.078125 * e, 25.833328247070312 * e, 40.078125 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.83332824707031 * e, 23.078125 * e), n.bezierCurveTo(35.83332824707031 * e, 35.078125 * e, 31.833328247070312 * e, 37.078125 * e, 25.833328247070312 * e, 36.078125 * e), n.bezierCurveTo(25.833328247070312 * e, 24.078125 * e, 33.83332824707031 * e, 21.078125 * e, 42.83332824707031 * e, 23.078125 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(23.833328247070312 * e, 24.078125 * e), n.bezierCurveTo(20.833328247070312 * e, 34.078125 * e, 23.833328247070312 * e, 40.078125 * e, 27.833328247070312 * e, 43.078125 * e), n.bezierCurveTo(37.33332824707031 * e, 28.078125 * e, 37.33332824707031 * e, 28.078125 * e, 46.83332824707031 * e, 13.078125 * e), Ce(n, void 0, t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(38.83332824707031 * e, 14.078125 * e), n.bezierCurveTo(34.83332824707031 * e, 24.078125 * e, 34.83332824707031 * e, 24.078125 * e, 30.833328247070312 * e, 34.078125 * e), Ce(n, void 0, t[1], 2 * e), r
    }

    function Qe(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 170 * e, r.height = 173 * e, n.translate(5 * e, 5 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(86.25 * e, 84.953125 * e), n.rotate(.32), be(n, 7, 42.15447781671598 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(86.25 * e, 84.953125 * e), n.rotate(.32), be(n, 7, 42.15447781671598 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(86.25 * e, 84.953125 * e), n.rotate(.28), be(n, 7, 30.463092423455635 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(86.25 * e, 84.953125 * e), n.rotate(.28), be(n, 7, 30.463092423455635 * e, 10 * e), n.restore(), Ce(n, t[3], t[4], 4 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), Ne(n, 86.25 * e, 84.953125 * e, 18.867962264113206 * e), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), Ne(n, 86.25 * e, 84.953125 * e, 18.867962264113206 * e), Ce(n, t[5], t[6], 4 * e), r
    }

    function $e(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 170 * e, r.height = 173 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(85.25 * e, 82.953125 * e), n.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e), n.closePath(), Ce(n, void 0, t[0], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111.25 * e, 8.953125 * e), n.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e), n.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e), n.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111.25 * e, 8.953125 * e), n.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e), n.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e), n.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(85.25 * e, 82.953125 * e), n.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e), n.closePath(), Ce(n, void 0, t[6], 4 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.25 * e, 84.953125 * e), n.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e), n.closePath(), Ce(n, void 0, t[0], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(160.25 * e, 114.953125 * e), n.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e), n.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e), n.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(160.25 * e, 114.953125 * e), n.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e), n.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e), n.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.25 * e, 84.953125 * e), n.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e), n.closePath(), Ce(n, void 0, t[6], 4 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(83.25 * e, 83.953125 * e), n.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e), n.closePath(), Ce(n, void 0, t[0], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(13.25 * e, 53.953125 * e), n.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e), n.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e), n.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(13.25 * e, 53.953125 * e), n.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e), n.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e), n.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(83.25 * e, 83.953125 * e), n.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e), n.closePath(), Ce(n, void 0, t[6], 4 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84.25 * e, 86.953125 * e), n.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e), n.closePath(), Ce(n, void 0, t[0], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56.25 * e, 159.953125 * e), n.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e), n.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e), n.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56.25 * e, 159.953125 * e), n.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e), n.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e), n.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84.25 * e, 86.953125 * e), n.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e), n.closePath(), Ce(n, void 0, t[6], 4 * e), r
    }

    function ei(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 170 * e, r.height = 173 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(86.25 * e, 84.953125 * e), be(n, 7, 9.848857801796104 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(86.25 * e, 84.953125 * e), be(n, 7, 9.848857801796104 * e, 5 * e), n.restore(), Ce(n, t[8], t[9], 4 * e), r
    }

    function ii(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 75 * e,
            o = 55 * e;
        return r.width = a, r.height = o, n.translate(-30 * e, -40 * e), n.globalAlpha = 1, n.beginPath(), n.bezierCurveTo(67 * e, 56 * e, 72 * e, 71 * e, 72 * e, 71 * e), n.bezierCurveTo(72 * e, 71 * e, 84 * e, 70 * e, 75 * e, 82 * e), n.bezierCurveTo(70 * e, 88 * e, 61 * e, 89 * e, 58 * e, 89 * e), n.bezierCurveTo(55 * e, 89 * e, 40 * e, 89 * e, 46 * e, 77 * e), n.bezierCurveTo(46 * e, 77 * e, 43 * e, 63 * e, 43 * e, 63 * e), n.bezierCurveTo(35 * e, 61 * e, 35 * e, 53 * e, 42 * e, 47 * e), n.bezierCurveTo(48 * e, 42 * e, 62 * e, 41 * e, 66 * e, 43 * e), n.bezierCurveTo(70 * e, 45 * e, 72 * e, 48 * e, 67 * e, 56 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.bezierCurveTo(68 * e, 61 * e, 72 * e, 76 * e, 72 * e, 76 * e), n.bezierCurveTo(65 * e, 85 * e, 61 * e, 85 * e, 49 * e, 83 * e), n.bezierCurveTo(49 * e, 83 * e, 44 * e, 63 * e, 44 * e, 63 * e), n.bezierCurveTo(54 * e, 63 * e, 60 * e, 63 * e, 67 * e, 55 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.moveTo(69 * e, 65 * e), n.bezierCurveTo(70 * e, 61 * e, 81 * e, 66 * e, 86 * e, 66 * e), n.bezierCurveTo(90 * e, 66 * e, 97 * e, 63 * e, 97 * e, 56 * e), n.bezierCurveTo(97 * e, 50 * e, 93 * e, 47 * e, 88 * e, 44 * e), Ce(n, !1, t[1], 2), n.beginPath(), n.moveTo(50 * e, 48 * e), n.bezierCurveTo(43 * e, 52 * e, 50 * e, 54 * e, 51 * e, 54 * e), n.bezierCurveTo(54 * e, 54 * e, 59 * e, 52 * e, 59 * e, 49 * e), n.bezierCurveTo(59 * e, 48 * e, 55 * e, 46 * e, 50 * e, 48 * e), Ce(n, t[2]), r
    }

    function ti(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 195 * e,
            o = 190 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o;
        var E = 10 * e,
            T = 35 * e,
            A = 150 * e,
            d = T / 2,
            I = A / 2,
            h = 4 * e;
        return n.translate(s - 5 * e, _ - 5 * e), n.rotate(-Math.PI / 1.25), n.globalAlpha = 1, ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), n.translate(0, 0), n.rotate(Math.PI / 3), n.globalAlpha = 1, ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), n.translate(0, 5), ge(n, -d / 2, -I / 2, T / 2, A / 3, E - 2), Ce(n, t[1]), r
    }

    function ri(e, i, t, r, n) {
        var a = document.createElement("canvas"),
            o = a.getContext("2d"),
            s = 70 * e,
            _ = 70 * e,
            E = 10 * e,
            T = 5 * e;
        a.width = s, a.height = _ + T;
        for (var A = 0; A < i.length; A++) {
            var d = i[A];
            o.globalAlpha = d.a;
            var I = d.f(t, !1, d.c);
            o.save(), o.translate(s / 2 + d.x * e, _ / 2 + d.y * e), o.rotate(d.r), o.drawImage(I, -I.width / 2, -I.height / 2), o.restore()
        }
        var h = [];
        for (A = 0; A < r.length; A++) {
            var u = document.createElement("canvas"),
                O = u.getContext("2d");
            u.width = s, u.height = _ + T, O.globalAlpha = n / 2, 2 == A ? ge(O, 0, T, s, _, E) : ge(O, 0, 0, s, _ + T, E), Ce(O, "#081a19"), O.globalAlpha = n, ge(O, 0, 2 == A ? T : 0, s, _, E), Ce(O, r[A]), O.globalAlpha = 1, 2 == A ? O.drawImage(a, 0, T) : O.drawImage(a, 0, 0), h.push(L(u))
        }
        return h
    }

    function ni(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 193 * e,
            o = 198 * e,
            s = 140 * e,
            _ = 90 * e;
        r.width = a, r.height = o;
        var E = 10 * e,
            T = 25 * e,
            A = 180 * e,
            d = T / 2,
            I = A / 2,
            h = 4 * e;
        return n.translate(-25 * e, 1 * e), n.translate(s, _), n.rotate(-Math.PI / 5), ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), n.translate(-30 * e, -25 * e), n.rotate(Math.PI / 3), ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), n.translate(35 * e, 30 * e), n.rotate(Math.PI / 3), ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), r
    }

    function ai(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 145 * e,
            o = 145 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o;
        var E = 70 * e;
        n.translate(s, _), n.globalAlpha = .4, Ne(n, 0, 0, E), Ce(n, t[0]);
        E = 50 * e;
        n.translate(0, 0), n.globalAlpha = .8, Ne(n, 0, 0, E), Ce(n, t[0]);
        E = 35 * e;
        n.translate(0, 0), n.globalAlpha = .8, Ne(n, 0, 0, E), Ce(n, t[1]);
        E = 20 * e;
        return n.translate(0, 0), n.globalAlpha = .8, Ne(n, 0, 0, E), Ce(n, t[2]), r
    }

    function oi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 135 * e,
            o = 190 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o;
        var E = 10 * e,
            T = 25 * e,
            A = 180 * e,
            d = T / 2,
            I = A / 2,
            h = 4 * e;
        return n.translate(s, _), n.rotate(-Math.PI / 5), n.globalAlpha = 1, ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), n.translate(0, 0), n.rotate(Math.PI / 5), n.globalAlpha = 1, ge(n, -d, -I, T, A, E), Ce(n, t[0], t[1], h), r
    }

    function si(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 205 * e,
            o = 205 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o;
        var E = 100 * e;
        return n.translate(s, _), n.globalAlpha = 1, Ne(n, 0, 0, E), Ce(n, t[0]), r
    }

    function _i(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 370 * e,
            o = 370 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o;
        var E = 180 * e;
        return n.globalAlpha = .2, Ne(n, s, _, E), Ce(n, t[0]), r
    }

    function Ei(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 155 * e, r.height = 127 * e, n.globalAlpha = .5, n.translate(0, 8 * e), n.translate(-7 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 68 * e), n.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e), n.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e), n.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e), n.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e), n.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -8 * e), n.translate(7 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(24 * e, 28 * e), n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 41 * e), n.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e), n.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e), n.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e), n.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e), n.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e), n.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e), n.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(24 * e, 28 * e), n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), n.closePath(), Ce(n, void 0, t[2], 4 * e), Ne(n, 18 * e, 38 * e, 14.866068747318506 * e), Ce(n, t[4], t[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 30 * e), n.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e), n.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e), Ce(n, t[1], t[2], 4 * e), n.translate(-7 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27 * e, 74 * e), n.bezierCurveTo(38 * e, 77.5 * e, 38 * e, 77.5 * e, 49 * e, 81 * e), n.bezierCurveTo(54.5 * e, 75.5 * e, 54.5 * e, 75.5 * e, 60 * e, 70 * e), n.bezierCurveTo(64 * e, 72 * e, 64 * e, 72 * e, 68 * e, 74 * e), n.bezierCurveTo(80.5 * e, 67.5 * e, 80.5 * e, 67.5 * e, 93 * e, 61 * e), n.bezierCurveTo(104.5 * e, 68 * e, 104.5 * e, 68 * e, 116 * e, 75 * e), n.bezierCurveTo(120.5 * e, 72.5 * e, 120.5 * e, 72.5 * e, 125 * e, 70 * e), n.bezierCurveTo(129 * e, 75 * e, 129 * e, 75 * e, 133 * e, 80 * e), n.bezierCurveTo(145.5 * e, 76.5 * e, 145.5 * e, 76.5 * e, 158 * e, 73 * e), n.bezierCurveTo(158 * e, 87 * e, 158 * e, 93 * e, 155 * e, 95 * e), n.bezierCurveTo(152.5 * e, 96 * e, 152.5 * e, 96 * e, 150 * e, 97 * e), n.bezierCurveTo(121 * e, 85 * e, 108 * e, 86 * e, 93 * e, 85 * e), n.bezierCurveTo(64 * e, 85 * e, 52 * e, 95 * e, 38 * e, 99 * e), n.bezierCurveTo(36 * e, 98.5 * e, 36 * e, 98.5 * e, 34 * e, 98 * e), n.bezierCurveTo(25 * e, 98 * e, 27 * e, 91 * e, 27 * e, 76 * e), n.closePath(), Ce(n, t[6], t[7], 6 * e), r
    }

    function Ti(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 155 * e, r.height = 127 * e, n.globalAlpha = .5, n.translate(0, 8 * e), n.translate(-7 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 68 * e), n.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e), n.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e), n.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e), n.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e), n.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -8 * e), n.translate(7 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(24 * e, 28 * e), n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 41 * e), n.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e), n.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e), n.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e), n.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e), n.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e), n.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e), n.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(24 * e, 28 * e), n.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), n.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), n.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), n.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), n.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), n.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), n.closePath(), Ce(n, void 0, t[2], 4 * e), Ne(n, 18 * e, 38 * e, 14.866068747318506 * e), Ce(n, t[4], t[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 30 * e), n.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e), n.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e), Ce(n, t[1], t[2], 4 * e), n.translate(-7 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 68 * e), n.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e), n.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e), n.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e), n.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e), n.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), r
    }

    function Ai(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 220 * e,
            a = 220 * e,
            o = 32 * e,
            s = 4 * e;
        return t.width = n, t.height = a, r.translate(n / 2, a / 2 + 10 * e), r.globalAlpha = .5, Ne(r, 0, 0, o), Ce(r, i[0], i[0]), r.translate(0, -8 * e), r.globalAlpha = 1, Ne(r, 0, 0, o), Ce(r, i[1], i[2], s), t
    }

    function di(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 40 * e,
            a = 40 * e,
            o = 16 * e,
            s = 4 * e;
        return t.width = n, t.height = a, r.translate(n / 2, a / 2), r.globalAlpha = 1, Ne(r, 0, 0, o), Ce(r, i[0], i[1], s), t
    }

    function Ii(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 220 * e,
            a = 220 * e,
            o = 16 * e;
        return t.width = n, t.height = a, r.translate(n / 2, a / 2), r.globalAlpha = .5, Ne(r, 0, 0, o), Ce(r, i[0]), r.globalAlpha = 1, t
    }

    function hi(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d"),
            o = 210 * e,
            s = 205 * e,
            _ = 30 * e,
            E = 20 * e,
            T = 200 * e,
            A = 180 * e,
            d = T / 2,
            I = A / 2;
        return n.width = o, n.height = s, n.width = 419 * e, n.height = 412 * e, 1 == r ? (a.save(), a.translate(10 * e, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(117.99996948242188 * e, 216.40621948242188 * e), a.bezierCurveTo(86.99996948242188 * e, 221.40621948242188 * e, 74.99996948242188 * e, 217.40621948242188 * e, 60.999969482421875 * e, 205.40621948242188 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(114.99996948242188 * e, 227.40621948242188 * e), a.bezierCurveTo(90.99996948242188 * e, 233.40621948242188 * e, 66.99996948242188 * e, 228.40621948242188 * e, 43.999969482421875 * e, 225.40621948242188 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110.99996948242188 * e, 236.40621948242188 * e), a.bezierCurveTo(94.99996948242188 * e, 244.40621948242188 * e, 79.99996948242188 * e, 249.40621948242188 * e, 60.999969482421875 * e, 249.40621948242188 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111.99996948242188 * e, 206.29513549804688 * e), a.bezierCurveTo(91.99996948242188 * e, 206.29513549804688 * e, 87.99996948242188 * e, 201.29513549804688 * e, 79.99996948242188 * e, 192.29513549804688 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(109.99996948242188 * e, 249.18402099609375 * e), a.bezierCurveTo(97.99996948242188 * e, 263.18402099609375 * e, 85.99996948242188 * e, 271.18402099609375 * e, 65.99996948242188 * e, 277.18402099609375 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.99996948242188 * e, 192.18402099609375 * e), a.bezierCurveTo(99.49996948242188 * e, 197.68402099609375 * e, 99.49996948242188 * e, 197.68402099609375 * e, 92.99996948242188 * e, 203.18402099609375 * e), a.bezierCurveTo(95.99996948242188 * e, 213.18402099609375 * e, 95.99996948242188 * e, 215.18402099609375 * e, 89.99996948242188 * e, 219.18402099609375 * e), a.bezierCurveTo(91.99996948242188 * e, 223.18402099609375 * e, 91.99996948242188 * e, 226.18402099609375 * e, 87.99996948242188 * e, 230.18402099609375 * e), a.bezierCurveTo(89.99996948242188 * e, 234.18402099609375 * e, 91.99996948242188 * e, 237.18402099609375 * e, 90.99996948242188 * e, 244.18402099609375 * e), a.bezierCurveTo(96.99996948242188 * e, 252.18402099609375 * e, 96.99996948242188 * e, 256.18402099609375 * e, 95.99996948242188 * e, 262.18402099609375 * e), a.bezierCurveTo(106.49996948242188 * e, 264.18402099609375 * e, 106.49996948242188 * e, 264.18402099609375 * e, 116.99996948242188 * e, 266.18402099609375 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(104.99996948242188 * e, 183.29513549804688 * e), a.bezierCurveTo(99.99996948242188 * e, 193.29513549804688 * e, 93.99996948242188 * e, 195.29513549804688 * e, 89.99996948242188 * e, 201.29513549804688 * e), a.bezierCurveTo(86.99996948242188 * e, 212.29513549804688 * e, 85.99996948242188 * e, 214.29513549804688 * e, 81.99996948242188 * e, 215.29513549804688 * e), a.bezierCurveTo(83.99996948242188 * e, 223.29513549804688 * e, 83.99996948242188 * e, 227.29513549804688 * e, 79.99996948242188 * e, 230.29513549804688 * e), a.bezierCurveTo(83.99996948242188 * e, 235.29513549804688 * e, 84.99996948242188 * e, 240.29513549804688 * e, 79.99996948242188 * e, 246.29513549804688 * e), a.bezierCurveTo(86.99996948242188 * e, 251.29513549804688 * e, 91.99996948242188 * e, 256.2951354980469 * e, 89.99996948242188 * e, 266.2951354980469 * e), a.bezierCurveTo(102.99996948242188 * e, 269.2951354980469 * e, 102.99996948242188 * e, 269.2951354980469 * e, 115.99996948242188 * e, 272.2951354980469 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(107.99996948242188 * e, 177.85067749023438 * e), a.bezierCurveTo(95.99996948242188 * e, 187.35067749023438 * e, 95.99996948242188 * e, 187.35067749023438 * e, 83.99996948242188 * e, 196.85067749023438 * e), a.bezierCurveTo(82.99996948242188 * e, 203.85067749023438 * e, 80.99996948242188 * e, 209.85067749023438 * e, 72.99996948242188 * e, 210.85067749023438 * e), a.bezierCurveTo(73.99996948242188 * e, 220.85067749023438 * e, 73.99996948242188 * e, 221.85067749023438 * e, 66.99996948242188 * e, 227.85067749023438 * e), a.bezierCurveTo(71.99996948242188 * e, 235.85067749023438 * e, 73.99996948242188 * e, 239.85067749023438 * e, 71.99996948242188 * e, 247.85067749023438 * e), a.bezierCurveTo(80.99996948242188 * e, 257.8506774902344 * e, 81.99996948242188 * e, 263.8506774902344 * e, 77.99996948242188 * e, 271.8506774902344 * e), a.bezierCurveTo(95.49996948242188 * e, 272.8506774902344 * e, 95.49996948242188 * e, 272.8506774902344 * e, 112.99996948242188 * e, 273.8506774902344 * e), Ce(a, void 0, i[4], 3 * e), a.restore()) : 2 == r && (a.save(), a.translate(130 * e, 35 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(170.99996948242188 * e, 133.85067749023438 * e), a.bezierCurveTo(195.99996948242188 * e, 129.85067749023438 * e, 196.99996948242188 * e, 111.85067749023438 * e, 200.99996948242188 * e, 88.85067749023438 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(169.99996948242188 * e, 143.85067749023438 * e), a.bezierCurveTo(189.99996948242188 * e, 145.85067749023438 * e, 207.99996948242188 * e, 126.85067749023438 * e, 222.99996948242188 * e, 100.85067749023438 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(170.99996948242188 * e, 157.85067749023438 * e), a.bezierCurveTo(193.99996948242188 * e, 160.85067749023438 * e, 210.99996948242188 * e, 151.85067749023438 * e, 232.99996948242188 * e, 139.85067749023438 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(169.99996948242188 * e, 168.85067749023438 * e), a.bezierCurveTo(192.99996948242188 * e, 175.85067749023438 * e, 203.99996948242188 * e, 177.85067749023438 * e, 245.99996948242188 * e, 168.85067749023438 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(167.99996948242188 * e, 168.85067749023438 * e), a.bezierCurveTo(183.99996948242188 * e, 189.85067749023438 * e, 191.99996948242188 * e, 193.85067749023438 * e, 220.99996948242188 * e, 196.85067749023438 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(176.99996948242188 * e, 117.85067749023438 * e), a.bezierCurveTo(181.99996948242188 * e, 120.85067749023438 * e, 181.99996948242188 * e, 120.85067749023438 * e, 186.99996948242188 * e, 123.85067749023438 * e), a.bezierCurveTo(183.99996948242188 * e, 137.85067749023438 * e, 185.99996948242188 * e, 136.85067749023438 * e, 190.99996948242188 * e, 136.85067749023438 * e), a.bezierCurveTo(186.99996948242188 * e, 147.85067749023438 * e, 189.99996948242188 * e, 152.85067749023438 * e, 193.99996948242188 * e, 155.85067749023438 * e), a.bezierCurveTo(187.99996948242188 * e, 165.85067749023438 * e, 190.99996948242188 * e, 169.85067749023438 * e, 190.99996948242188 * e, 172.85067749023438 * e), a.bezierCurveTo(186.99996948242188 * e, 183.85067749023438 * e, 186.99996948242188 * e, 185.85067749023438 * e, 189.99996948242188 * e, 188.85067749023438 * e), a.bezierCurveTo(182.49996948242188 * e, 195.35067749023438 * e, 182.49996948242188 * e, 195.35067749023438 * e, 174.99996948242188 * e, 201.85067749023438 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(176.99996948242188 * e, 112.18402099609375 * e), a.bezierCurveTo(183.99996948242188 * e, 119.18402099609375 * e, 186.99996948242188 * e, 117.18402099609375 * e, 192.99996948242188 * e, 116.18402099609375 * e), a.bezierCurveTo(191.99996948242188 * e, 126.18402099609375 * e, 193.99996948242188 * e, 130.18402099609375 * e, 199.99996948242188 * e, 130.18402099609375 * e), a.bezierCurveTo(194.99996948242188 * e, 145.18402099609375 * e, 197.99996948242188 * e, 147.18402099609375 * e, 201.99996948242188 * e, 153.18402099609375 * e), a.bezierCurveTo(196.99996948242188 * e, 164.18402099609375 * e, 197.99996948242188 * e, 169.18402099609375 * e, 201.99996948242188 * e, 174.18402099609375 * e), a.bezierCurveTo(194.99996948242188 * e, 184.18402099609375 * e, 196.99996948242188 * e, 187.18402099609375 * e, 200.99996948242188 * e, 193.18402099609375 * e), a.bezierCurveTo(185.99996948242188 * e, 195.18402099609375 * e, 181.99996948242188 * e, 201.18402099609375 * e, 174.99996948242188 * e, 210.18402099609375 * e), Ce(a, void 0, i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(176.99996948242188 * e, 101.29513549804688 * e), a.bezierCurveTo(181.99996948242188 * e, 108.29513549804688 * e, 189.99996948242188 * e, 110.29513549804688 * e, 195.99996948242188 * e, 107.29513549804688 * e), a.bezierCurveTo(197.99996948242188 * e, 121.29513549804688 * e, 200.99996948242188 * e, 122.29513549804688 * e, 206.99996948242188 * e, 122.29513549804688 * e), a.bezierCurveTo(201.99996948242188 * e, 138.29513549804688 * e, 204.99996948242188 * e, 142.29513549804688 * e, 211.99996948242188 * e, 148.29513549804688 * e), a.bezierCurveTo(201.99996948242188 * e, 156.29513549804688 * e, 205.99996948242188 * e, 167.29513549804688 * e, 213.99996948242188 * e, 173.29513549804688 * e), a.bezierCurveTo(204.99996948242188 * e, 181.29513549804688 * e, 204.99996948242188 * e, 187.29513549804688 * e, 205.99996948242188 * e, 193.29513549804688 * e), a.bezierCurveTo(190.99996948242188 * e, 198.29513549804688 * e, 181.99996948242188 * e, 205.29513549804688 * e, 174.99996948242188 * e, 214.29513549804688 * e), Ce(a, void 0, i[4], 3 * e), a.restore()), a.translate(n.width / 2, n.height / 2), r || (a.globalAlpha = .5, ge(a, -d, -I, T, A + E, _), Ce(a, i[0]), t && a.rotate(Math.PI), a.globalAlpha = 1, ge(a, -d, -I, T, A, _), Ce(a, i[1], i[2], 4), a.globalAlpha = 1, ge(a, 35 * e - d, 20 * e - I, T - 50 * e, A - 50 * e, _ - 10 * e), Ce(a, i[3])), 3 == r ? (a.translate(-n.width / 2, -n.height / 2), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(121 * e, 190 * e), a.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e), a.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e), a.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e), a.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e), a.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e), a.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e), a.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e), a.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e), a.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(219 * e, 144 * e), a.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e), a.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e), a.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e), a.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e), a.closePath(), Ce(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123 * e, 214 * e), a.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e), a.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e), a.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e), a.closePath(), Ce(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(257 * e, 199 * e), a.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e), a.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e), a.closePath(), Ce(a, i[5]), a.translate(-5 * e, 55 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(186 * e, 123 * e), a.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e), a.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e), a.closePath(), Ce(a, i[5]), a.translate(5 * e, -55 * e), a.translate(-5 * e, 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(171 * e, 241 * e), a.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e), a.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e), a.closePath(), Ce(a, i[5])) : 4 == r && (a.translate(-n.width / 2, -n.height / 2), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 167 * e), a.bezierCurveTo(47 * e, 144 * e, 64 * e, 140 * e, 80 * e, 147 * e), a.bezierCurveTo(95 * e, 154 * e, 95 * e, 159 * e, 100 * e, 179 * e), a.bezierCurveTo(105 * e, 202 * e, 95 * e, 218 * e, 69 * e, 218 * e), a.bezierCurveTo(48 * e, 236 * e, 26 * e, 223 * e, 28 * e, 213 * e), a.bezierCurveTo(28 * e, 205 * e, 29 * e, 199 * e, 32 * e, 195 * e), a.bezierCurveTo(21 * e, 183 * e, 27 * e, 173 * e, 30 * e, 167 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(26 * e, 145 * e), a.bezierCurveTo(32 * e, 138 * e, 37 * e, 137 * e, 40 * e, 139 * e), a.bezierCurveTo(43 * e, 140 * e, 41 * e, 150 * e, 31 * e, 159 * e), a.bezierCurveTo(23 * e, 166 * e, 17 * e, 158 * e, 26 * e, 145 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(13 * e, 193 * e), a.bezierCurveTo(21 * e, 187 * e, 30 * e, 190 * e, 20 * e, 202 * e), a.bezierCurveTo(13 * e, 208 * e, 7 * e, 202 * e, 13 * e, 193 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(121 * e, 190 * e), a.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e), a.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e), a.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e), a.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e), a.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e), a.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e), a.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e), a.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e), a.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(335 * e, 196 * e), a.bezierCurveTo(312 * e, 208 * e, 300 * e, 185 * e, 309 * e, 167 * e), a.bezierCurveTo(314 * e, 141 * e, 339 * e, 127 * e, 359 * e, 144 * e), a.bezierCurveTo(363 * e, 148 * e, 364 * e, 150 * e, 364 * e, 150 * e), a.bezierCurveTo(392 * e, 143 * e, 396 * e, 183 * e, 378 * e, 204 * e), a.bezierCurveTo(367 * e, 215 * e, 339 * e, 208 * e, 335 * e, 196 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(349 * e, 212 * e), a.bezierCurveTo(339 * e, 216 * e, 334 * e, 208 * e, 341 * e, 203 * e), a.bezierCurveTo(353 * e, 198 * e, 361 * e, 205 * e, 349 * e, 212 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46 * e, 165 * e), a.bezierCurveTo(55 * e, 148 * e, 85 * e, 157 * e, 83 * e, 175 * e), a.bezierCurveTo(99 * e, 185 * e, 89 * e, 212 * e, 66 * e, 204 * e), a.bezierCurveTo(55 * e, 212 * e, 43 * e, 212 * e, 41 * e, 202 * e), a.bezierCurveTo(39 * e, 194 * e, 42 * e, 187 * e, 49 * e, 185 * e), a.bezierCurveTo(44 * e, 175 * e, 45 * e, 172 * e, 46 * e, 165 * e), a.closePath(), Ce(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(219 * e, 144 * e), a.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e), a.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e), a.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e), a.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e), a.closePath(), Ce(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123 * e, 214 * e), a.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e), a.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e), a.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e), a.closePath(), Ce(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(257 * e, 199 * e), a.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e), a.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e), a.closePath(), Ce(a, i[5]), a.translate(-5 * e, 55 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(186 * e, 123 * e), a.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e), a.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e), a.closePath(), Ce(a, i[5]), a.translate(5 * e, -55 * e), a.translate(-5 * e, 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(171 * e, 241 * e), a.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e), a.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e), a.closePath(), Ce(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(367 * e, 164 * e), a.bezierCurveTo(380 * e, 160 * e, 391 * e, 185 * e, 371 * e, 189 * e), a.bezierCurveTo(362 * e, 192 * e, 354 * e, 191 * e, 350 * e, 185 * e), a.bezierCurveTo(326 * e, 205 * e, 314 * e, 182 * e, 316 * e, 171 * e), a.bezierCurveTo(317 * e, 150 * e, 332 * e, 143 * e, 347 * e, 147 * e), a.bezierCurveTo(361 * e, 151 * e, 366 * e, 158 * e, 367 * e, 164 * e), a.closePath(), Ce(a, i[4])), n
    }

    function ui(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        return n.width = 121 * e, n.height = 130 * e, a.translate(0, 20 * e), 1 == t && (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(6 * e, 23 * e), a.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e), a.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e), a.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e), a.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e), a.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e), a.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e), a.closePath(), Ce(a, void 0, i[3], 13 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(6 * e, 23 * e), a.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e), a.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e), a.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e), a.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e), a.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e), a.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e), a.closePath(), Ce(a, i[1], i[2], 4 * e), 1 == r ? (a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(67 * e, 30 * e), a.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e), Ce(a, void 0, i[0], 10 * e), a.translate(3, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70 * e, 17 * e), a.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e), Ce(a, void 0, i[0], 10 * e), a.translate(3, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(76 * e, 8 * e), a.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e), Ce(a, void 0, i[0], 10 * e), 1 == t ? (a.translate(-6 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(67 * e, 30 * e), a.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e), Ce(a, void 0, i[3], 18 * e), a.translate(3, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70 * e, 17 * e), a.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e), Ce(a, void 0, i[3], 18 * e), a.translate(3, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(76 * e, 8 * e), a.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e), Ce(a, void 0, i[3], 18 * e), a.translate(-6, 0 * e)) : a.translate(-6 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(67 * e, 30 * e), a.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e), Ce(a, void 0, i[2], 10 * e), a.translate(3, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70 * e, 17 * e), a.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e), Ce(a, void 0, i[2], 10 * e), a.translate(3, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(76 * e, 8 * e), a.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e), Ce(a, void 0, i[2], 10 * e)) : (1 == t ? (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(108 * e, 27 * e), a.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e), a.closePath(), Ce(a, void 0, i[3], 18 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 30 * e), a.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e), a.closePath(), Ce(a, void 0, i[3], 18 * e)) : (a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(108 * e, 27 * e), a.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e), a.closePath(), Ce(a, void 0, i[0], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 30 * e), a.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e), a.closePath(), Ce(a, void 0, i[0], 7 * e), a.translate(0, 5 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(108 * e, 27 * e), a.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e), a.closePath(), Ce(a, void 0, i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 30 * e), a.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e), a.closePath(), Ce(a, void 0, i[2], 7 * e)), n
    }

    function Oi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = (d = 450 * e) / 2,
            o = (I = 145 * e) / 2,
            s = 10 * e,
            _ = 300 * e,
            E = 30 * e,
            T = _ / 2,
            A = E / 2;
        if (t) {
            var d = 145 * e,
                I = 450 * e;
            r.width = d, r.height = I, n.rotate(Math.PI / 2), n.save(), n.globalAlpha = .5, ge(n, 100 * e, -110 * e, _, E, s), Ce(n, i[0]), n.translate(178 * e, -98 * e), ge(n, -T, -A - 6 * e, 100 * e, 100 * e, s), Ce(n, i[0]), n.translate(-50 * e, 5 * e), ge(n, 220 * e, -15 * e, 90 * e, 90 * e, s), Ce(n, i[0]), n.restore(), n.save(), n.globalAlpha = 1, n.translate(250 * e, -63 * e), ge(n, -T - 20 * e, -A, _, E, s), Ce(n, i[1], i[2], 4), n.translate(-70 * e, -40 * e), ge(n, -T - 20 * e, -A, 100 * e, 100 * e, s), Ce(n, i[3], i[4], 4), n.translate(-70 * e, 15 * e), ge(n, 220 * e, -22 * e, 90 * e, 90 * e, s), Ce(n, i[3], i[4], 4), ge(n, 230 * e, -12 * e, 55 * e, 55 * e, s), Ce(n, i[5]), n.translate(-70 * e, 0), ge(n, -15 * e, -2 * e, 60 * e, 60 * e, s), Ce(n, i[5]), n.restore()
        } else r.width = d, r.height = I, n.save(), n.globalAlpha = .5, n.translate(a, o + 10 * e), ge(n, -T, -A, _, E, s), Ce(n, i[0]), n.translate(-65 * e, -25 * e), ge(n, -T, -A - 6 * e, 100 * e, 100 * e, 15 * e), Ce(n, i[0]), n.translate(-35 * e, -5 * e), ge(n, 220 * e, -15 * e, 90 * e, 90 * e, 15 * e), Ce(n, i[0]), n.restore(), n.save(), n.globalAlpha = 1, n.translate(240 * e, 70 * e), ge(n, -T, -A, _, E, s), Ce(n, i[1], i[2], 4), n.translate(-60 * e, -40 * e), ge(n, -T - 20 * e, -A, 100 * e, 100 * e, 15 * e), Ce(n, i[3], i[4], 4), n.translate(-55 * e, 10 * e), ge(n, 220 * e, -22 * e, 90 * e, 90 * e, 15 * e), Ce(n, i[3], i[4], 4), ge(n, 240 * e, -12 * e, 55 * e, 55 * e, 12 * e), Ce(n, i[5]), n.translate(45 * e, 0 * e), ge(n, -145 * e, -2 * e, 60 * e, 60 * e, 12 * e), Ce(n, i[5]), n.restore();
        return r
    }

    function li(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = Math.max(i.width, e.width),
            a = Math.max(i.height, e.height);
        return t.width = n, t.height = a, r.drawImage(e, (n - e.width) / 2, (a - e.height) / 2), r.drawImage(i, (n - i.width) / 2, (a - i.height) / 2), t
    }

    function Ri(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 105 * e,
            o = 125 * e,
            s = 4 * e,
            _ = 10 * e,
            E = 5 * e,
            T = 10 * e,
            A = 110 * e,
            d = T / 2,
            I = A / 2;
        return r.width = a, r.height = o, n.save(), n.globalAlpha = i ? .5 : 1, n.translate(a / 2 + 8 * e, o / 2 + E), ge(n, -d, -I, T, A, _), Ce(n, i ? t[0] : t[1]), n.translate(-130 * e + E, -128 * e + E), n.beginPath(), n.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e), n.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e), n.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e), n.closePath(), Ce(n, t[2]), n.restore(), n.translate(a / 2 + 8, o / 2), n.globalAlpha = 1, ge(n, -d, -I, T, A, _), Ce(n, t[3], t[4], s), n.translate(-130 * e, -125 * e), n.beginPath(), n.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e), n.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e), n.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e), n.closePath(), Ce(n, t[5], t[6], s), r
    }

    function ci(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 170 * e, r.height = 469 * e, n.globalAlpha = i ? .5 : 1, n.translate(20 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(88 * e, 30 * e), n.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e), n.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e), n.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e), n.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e), n.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e), n.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e), n.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 31 * e), n.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e), n.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e), n.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e), n.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 328 * e), n.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e), n.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e), n.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(74 * e, 302 * e), n.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e), n.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e), n.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e), n.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e), n.closePath(), Ce(n, t[0]), n.save(), n.translate(51.5 * e, 440.5 * e), n.rotate(.2), ge(n, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(73 * e, 316 * e), n.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e), n.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-20 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(88 * e, 30 * e), n.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e), n.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e), n.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e), n.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e), n.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e), n.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e), n.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e), n.closePath(), Ce(n, t[1], t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 31 * e), n.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e), n.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e), n.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e), n.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(88 * e, 30 * e), n.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e), n.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e), n.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e), n.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e), n.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e), n.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e), n.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e), n.closePath(), Ce(n, void 0, t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 328 * e), n.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e), n.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e), n.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e), n.closePath(), Ce(n, t[4], t[5], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(74 * e, 302 * e), n.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e), n.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e), n.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e), n.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e), n.closePath(), Ce(n, t[4], t[5], 7 * e), n.save(), n.translate(51.5 * e, 440.5 * e), n.rotate(.2), ge(n, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e), n.restore(), Ce(n, t[4], t[5], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(73 * e, 316 * e), n.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e), n.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e), n.closePath(), Ce(n, t[6]), r
    }

    function Ci(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 424 * e, r.height = 788 * e, n.translate(25 * e, 25 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(193.5 * e, 602.5 * e), n.rotate(-.12), ge(n, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(137 * e, 519 * e), n.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e), n.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e), n.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e), n.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(175 * e, 119 * e), n.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e), n.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e), n.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e), n.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110 * e, 518 * e), n.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e), n.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e), n.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e), n.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e), n.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e), n.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e), n.closePath(), Ce(n, t[0]), Ne(n, 204 * e, 693 * e, 36.013886210738214 * e), Ce(n, t[0]), Ne(n, 105 * e, 518 * e, 30 * e), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(171 * e, 535 * e), n.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e), n.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e), n.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(244 * e, 669 * e), n.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e), n.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e), n.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e), n.closePath(), Ce(n, t[0]), n.translate(-25 * e, -25 * e), n.globalAlpha = 1, n.save(), n.translate(193.5 * e, 602.5 * e), n.rotate(-.12), ge(n, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e), n.restore(), Ce(n, t[1], t[2], 16 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(137 * e, 519 * e), n.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e), n.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e), n.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e), n.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e), n.closePath(), Ce(n, t[3], t[4], 16 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(175 * e, 119 * e), n.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e), n.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e), n.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e), n.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110 * e, 518 * e), n.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e), n.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e), n.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e), n.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e), n.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e), n.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e), n.closePath(), Ce(n, t[6], t[4], 16 * e), Ne(n, 204 * e, 693 * e, 36.013886210738214 * e), Ce(n, t[6], t[4], 16 * e), Ne(n, 105 * e, 518 * e, 30 * e), Ce(n, t[6], t[4], 16 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(171 * e, 535 * e), n.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e), n.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e), n.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e), n.closePath(), Ce(n, t[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(244 * e, 669 * e), n.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e), n.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e), n.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e), n.closePath(), Ce(n, t[6]), Ne(n, 204 * e, 693 * e, 17.029386365926403 * e), Ce(n, t[7]), Ne(n, 106 * e, 518 * e, 12 * e), Ce(n, t[7]), r
    }

    function gi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 100 * e, r.height = 250 * e, n.translate(-135 * e, -75 * e), n.globalAlpha = i ? .8 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(178.5 * e, 238.03125 * e), n.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e), n.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e), n.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e), n.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(155.5 * e, 239.03125 * e), n.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e), n.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e), n.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e), n.closePath(), Ce(n, t[0]), Ne(n, 160.5 * e, 243.03125 * e, 7 * e), Ce(n, t[0]), Ne(n, 227.5 * e, 242.03125 * e, 7 * e), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(185.5 * e, 253.03125 * e), n.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e), n.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e), n.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e), n.closePath(), Ce(n, t[0], t[0], 5 * e), Ne(n, 194 * e, 298 * e, 9 * e), Ce(n, t[0], t[0], 5 * e), n.globalAlpha = 1, n.translate(-10 * e, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(178.5 * e, 238.03125 * e), n.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e), n.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e), n.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e), n.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(155.5 * e, 239.03125 * e), n.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e), n.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e), n.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e), n.closePath(), Ce(n, t[1], t[2], 5 * e), Ne(n, 160.5 * e, 243.03125 * e, 7 * e), Ce(n, t[1], t[2], 5 * e), Ne(n, 227.5 * e, 242.03125 * e, 7 * e), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(185.5 * e, 253.03125 * e), n.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e), n.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e), n.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e), n.closePath(), Ce(n, t[1], t[2], 7 * e), Ne(n, 194 * e, 298 * e, 9 * e), Ce(n, t[1], t[2], 7 * e), r
    }

    function Ni(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 290 * e, r.height = 525 * e, n.globalAlpha = i ? .5 : 1, n.translate(20 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111 * e, 351 * e), n.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e), n.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e), n.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e), n.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e), n.closePath(), Ce(n, t[0]), n.save(), n.translate(131 * e, 425.5 * e), n.rotate(.16), ge(n, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e), n.restore(), Ce(n, t[0]), Ne(n, 122 * e, 480 * e, 18.439088914585774 * e), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 371 * e), n.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e), n.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e), n.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-20 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111 * e, 351 * e), n.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e), n.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e), n.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e), n.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.save(), n.translate(131 * e, 425.5 * e), n.rotate(.16), ge(n, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e), n.restore(), Ce(n, t[4], t[5], 12.5 * e), Ne(n, 122 * e, 480 * e, 18.439088914585774 * e), Ce(n, t[4], t[5], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 371 * e), n.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e), n.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e), n.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e), n.closePath(), Ce(n, t[4], t[5], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(128 * e, 345 * e), n.bezierCurveTo(142 * e, 345 * e, 147 * e, 346 * e, 158 * e, 349 * e), n.bezierCurveTo(177.5 * e, 224.5 * e, 177.5 * e, 224.5 * e, 197 * e, 100 * e), n.bezierCurveTo(190.5 * e, 84.5 * e, 190.5 * e, 84.5 * e, 184 * e, 69 * e), n.bezierCurveTo(173.5 * e, 82 * e, 173.5 * e, 82 * e, 163 * e, 95 * e), n.closePath(), Ce(n, t[3]), r
    }

    function Di(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        return n.width = 283 * e, n.height = 224 * e, a.translate(0, 15 * e), a.globalAlpha = .5, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93 * e, 55 * e), a.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e), a.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e), a.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e), a.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 33 * e), a.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(181 * e, 32 * e), a.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(225 * e, 52 * e), a.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34 * e, 134 * e), a.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(249 * e, 135 * e), a.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 50 * e), a.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), Ce(a, t[0]), a.translate(0, -15 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 33 * e), a.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), Ce(a, void 0, t[2], 40 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(181 * e, 32 * e), a.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), Ce(a, void 0, t[2], 40 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(225 * e, 52 * e), a.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), Ce(a, void 0, t[2], 40 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34 * e, 134 * e), a.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), Ce(a, void 0, t[2], 40 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(249 * e, 135 * e), a.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), Ce(a, void 0, t[2], 40 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 50 * e), a.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), Ce(a, void 0, t[2], 40 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93 * e, 55 * e), a.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e), a.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e), a.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e), a.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e), a.closePath(), Ce(a, t[1], t[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 33 * e), a.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), Ce(a, void 0, t[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(181 * e, 32 * e), a.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), Ce(a, void 0, t[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(225 * e, 52 * e), a.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), Ce(a, void 0, t[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34 * e, 134 * e), a.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), Ce(a, void 0, t[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(249 * e, 135 * e), a.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), Ce(a, void 0, t[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 50 * e), a.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), Ce(a, void 0, t[1], 20 * e), Ne(a, 101 * e, 155 * e, 20.591260281974 * e), Ce(a, t[3]), Ne(a, 180 * e, 155 * e, 20.591260281974 * e), Ce(a, t[3]), Ne(a, 95 * e, 148 * e, 7.211102550927978 * e), Ce(a, t[4]), Ne(a, 173 * e, 148 * e, 7.211102550927978 * e), Ce(a, t[4]), 1 === r && (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(191 * e, 107 * e), a.bezierCurveTo(180 * e, 104 * e, 175 * e, 101 * e, 180 * e, 95 * e), a.bezierCurveTo(180 * e, 95 * e, 181 * e, 99 * e, 188 * e, 103 * e), a.bezierCurveTo(191 * e, 101 * e, 191 * e, 95 * e, 190 * e, 91 * e), a.bezierCurveTo(190 * e, 91 * e, 196 * e, 89 * e, 195 * e, 99 * e), a.closePath(), Ce(a, t[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(206 * e, 98 * e), a.bezierCurveTo(203 * e, 95 * e, 200 * e, 93 * e, 198 * e, 101 * e), a.bezierCurveTo(194 * e, 109 * e, 193 * e, 109 * e, 196 * e, 110 * e), a.bezierCurveTo(206 * e, 115 * e, 209 * e, 114 * e, 211 * e, 111 * e), a.bezierCurveTo(211 * e, 106 * e, 208 * e, 108 * e, 203 * e, 108 * e), a.bezierCurveTo(193 * e, 107 * e, 204 * e, 101 * e, 206 * e, 99 * e), a.closePath(), Ce(a, t[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(172 * e, 111 * e), a.bezierCurveTo(172 * e, 106 * e, 174 * e, 105 * e, 185 * e, 109 * e), a.bezierCurveTo(190 * e, 109 * e, 189 * e, 114 * e, 185 * e, 120 * e), a.bezierCurveTo(181 * e, 125 * e, 180 * e, 126 * e, 176 * e, 122 * e), a.bezierCurveTo(182 * e, 119 * e, 187 * e, 110 * e, 182 * e, 112 * e), a.closePath(), Ce(a, t[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(202 * e, 125 * e), a.bezierCurveTo(197 * e, 117 * e, 193 * e, 116 * e, 193 * e, 120 * e), a.bezierCurveTo(192.5 * e, 124.5 * e, 192.5 * e, 124.5 * e, 192 * e, 129 * e), a.bezierCurveTo(188 * e, 129 * e, 187 * e, 124 * e, 189 * e, 120 * e), a.bezierCurveTo(191 * e, 110 * e, 192 * e, 110 * e, 200 * e, 116 * e), a.bezierCurveTo(208 * e, 120 * e, 207 * e, 123 * e, 202 * e, 125 * e), a.closePath(), Ce(a, t[2])), n
    }

    function bi(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 283 * e, t.height = 224 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(100 * e, 33 * e), r.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), Ce(r, void 0, i[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(181 * e, 32 * e), r.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), Ce(r, void 0, i[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(225 * e, 52 * e), r.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), Ce(r, void 0, i[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(34 * e, 134 * e), r.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), Ce(r, void 0, i[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(249 * e, 135 * e), r.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), Ce(r, void 0, i[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(56 * e, 50 * e), r.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), Ce(r, void 0, i[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 55 * e), r.bezierCurveTo(124 * e, 29 * e, 179 * e, 44 * e, 188 * e, 52 * e), r.bezierCurveTo(207 * e, 64 * e, 226 * e, 94 * e, 231 * e, 118 * e), r.bezierCurveTo(236 * e, 145 * e, 222 * e, 184 * e, 193 * e, 192 * e), r.bezierCurveTo(147 * e, 201 * e, 116 * e, 200 * e, 93 * e, 193 * e), r.bezierCurveTo(61 * e, 180 * e, 48 * e, 147 * e, 50 * e, 123 * e), r.bezierCurveTo(50 * e, 93 * e, 76 * e, 66 * e, 92 * e, 56 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Si(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 131 * e, r.height = 121 * e, n.translate(0, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110 * e, 59 * e), n.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e), n.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e), n.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e), n.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e), n.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e), n.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110 * e, 59 * e), n.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e), n.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e), n.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e), n.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e), n.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e), n.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), r
    }

    function pi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 104 * e, r.height = 112 * e, n.translate(0, 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(16 * e, 44 * e), n.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e), n.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e), n.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e), n.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e), n.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e), n.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(16 * e, 44 * e), n.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e), n.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e), n.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e), n.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e), n.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e), n.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), r
    }

    function mi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 321 * e, r.height = 284 * e, n.translate(100 * e, 30 * e), n.translate(5 * e, 10 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 33 * e), n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 33 * e), n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(167 * e, 120 * e), n.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e), n.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e), n.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(25 * e, 64 * e), n.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e), n.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e), n.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e), n.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 141 * e), n.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e), n.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e), n.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e), n.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e), n.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e), n.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e), Ce(n, void 0, t[4], 4 * e), n.translate(-100 * e, -30 * e), n.translate(10 * e, 70 * e), n.translate(5 * e, 10 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 33 * e), n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 33 * e), n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(167 * e, 120 * e), n.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e), n.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e), n.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(25 * e, 64 * e), n.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e), n.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e), n.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e), n.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 141 * e), n.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e), n.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e), n.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e), n.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e), n.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e), n.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e), Ce(n, void 0, t[4], 4 * e), n.translate(20 * e, -80 * e), n.translate(5 * e, 10 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 33 * e), n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 33 * e), n.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), n.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), n.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), n.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), n.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), n.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(167 * e, 120 * e), n.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e), n.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e), n.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(25 * e, 64 * e), n.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e), n.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e), n.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e), n.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 141 * e), n.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e), n.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e), n.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e), n.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e), n.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e), n.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e), Ce(n, void 0, t[4], 4 * e), r
    }

    function vi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 290 * e, r.height = 525 * e, n.globalAlpha = i ? .5 : 1, n.translate(20 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111 * e, 351 * e), n.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e), n.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e), n.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e), n.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e), n.closePath(), Ce(n, t[0]), n.save(), n.translate(129.5 * e, 424 * e), n.rotate(.16), ge(n, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e), n.restore(), Ce(n, t[0]), Ne(n, 121 * e, 480 * e, 20.396078054371138 * e), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 311 * e), n.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e), n.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e), n.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e), n.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e), n.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-20 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111 * e, 351 * e), n.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e), n.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e), n.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e), n.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.save(), n.translate(129.5 * e, 424 * e), n.rotate(.16), ge(n, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e), n.restore(), Ce(n, t[4], t[5], 12.5 * e), Ne(n, 121 * e, 480 * e, 20.396078054371138 * e), Ce(n, t[4], t[5], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 311 * e), n.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e), n.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e), n.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e), n.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e), n.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), r
    }

    function Mi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 290 * e, r.height = 525 * e, n.globalAlpha = i ? .5 : 1, n.translate(20 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(112 * e, 356 * e), n.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e), n.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e), n.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e), n.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e), n.closePath(), Ce(n, t[0]), n.save(), n.translate(131 * e, 423 * e), n.rotate(.16), ge(n, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(122 * e, 480 * e), n.rotate(1.72), be(n, 4, 26.476404589747453 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(210 * e, 387 * e), n.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e), n.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e), n.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e), n.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e), n.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e), n.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(129 * e, 338 * e), n.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e), n.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e), n.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e), n.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e), n.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-20 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(112 * e, 356 * e), n.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e), n.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e), n.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e), n.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.save(), n.translate(131 * e, 423 * e), n.rotate(.16), ge(n, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e), n.restore(), Ce(n, t[4], t[5], 12.5 * e), n.save(), n.translate(122 * e, 480 * e), n.rotate(1.72), be(n, 4, 26.476404589747453 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(210 * e, 387 * e), n.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e), n.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e), n.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e), n.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e), n.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e), n.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(129 * e, 338 * e), n.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e), n.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e), n.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e), n.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e), n.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e), n.closePath(), Ce(n, t[3]), r
    }

    function Gi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 290 * e, r.height = 525 * e, n.globalAlpha = i ? .5 : 1, n.translate(20 * e, 20 * e), n.translate(-20 * e, -20 * e), n.save(), n.translate(132 * e, 423 * e), n.rotate(.16), ge(n, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 344 * e), n.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e), n.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e), n.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e), n.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e), n.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(75 * e, 328 * e), n.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e), n.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e), n.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e), n.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e), n.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e), n.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e), n.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(121 * e, 332 * e), n.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e), n.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e), n.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e), n.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e), n.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105 * e, 463 * e), n.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e), n.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e), n.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e), n.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-20 * e, -20 * e), n.save(), n.translate(132 * e, 423 * e), n.rotate(.16), ge(n, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e), n.restore(), Ce(n, t[4], t[5], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 344 * e), n.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e), n.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e), n.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e), n.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e), n.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(75 * e, 328 * e), n.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e), n.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e), n.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e), n.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e), n.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e), n.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e), n.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(121 * e, 332 * e), n.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e), n.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e), n.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e), n.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e), n.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105 * e, 463 * e), n.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e), n.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e), n.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e), n.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e), n.closePath(), Ce(n, t[1], t[2], 12.5 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(143 * e, 346 * e), n.bezierCurveTo(125 * e, 352 * e, 125 * e, 352 * e, 107 * e, 358 * e), n.bezierCurveTo(124 * e, 363 * e, 140 * e, 368 * e, 141 * e, 368 * e), n.bezierCurveTo(156.5 * e, 367 * e, 156.5 * e, 367 * e, 172 * e, 366 * e), n.closePath(), Ce(n, t[3]), r
    }

    function Li(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 154 * e, r.height = 261 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(125 * e, 69 * e), n.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e), n.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e), n.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e), n.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e), n.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e), n.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e), n.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e), n.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e), n.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(125 * e, 69 * e), n.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e), n.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e), n.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e), n.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e), n.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e), n.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e), n.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e), n.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e), n.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 43 * e), n.bezierCurveTo(31 * e, 61 * e, 43 * e, 70 * e, 51 * e, 75 * e), n.bezierCurveTo(48 * e, 84 * e, 41 * e, 89 * e, 33 * e, 86 * e), n.bezierCurveTo(23 * e, 88 * e, 20 * e, 76 * e, 23 * e, 62 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(45 * e, 29 * e), n.bezierCurveTo(49 * e, 45 * e, 61 * e, 54 * e, 64 * e, 55 * e), n.bezierCurveTo(67.5 * e, 53 * e, 67.5 * e, 53 * e, 71 * e, 51 * e), n.bezierCurveTo(80 * e, 44 * e, 83 * e, 33 * e, 82 * e, 20 * e), n.bezierCurveTo(59 * e, 17 * e, 51 * e, 23 * e, 45 * e, 30 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(86 * e, 56 * e), n.bezierCurveTo(90 * e, 33 * e, 103 * e, 25 * e, 105 * e, 27 * e), n.bezierCurveTo(116 * e, 31 * e, 121 * e, 45 * e, 122 * e, 50 * e), n.bezierCurveTo(112 * e, 62 * e, 103 * e, 63 * e, 91 * e, 62 * e), n.bezierCurveTo(89 * e, 59.5 * e, 89 * e, 59.5 * e, 87 * e, 57 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 81 * e), n.bezierCurveTo(109 * e, 82 * e, 123 * e, 70 * e, 124 * e, 63 * e), n.bezierCurveTo(124 * e, 75.5 * e, 124 * e, 75.5 * e, 124 * e, 88 * e), n.bezierCurveTo(119 * e, 99 * e, 103 * e, 103 * e, 94 * e, 103 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 124 * e), n.bezierCurveTo(108 * e, 125 * e, 122 * e, 113 * e, 124 * e, 106 * e), n.bezierCurveTo(124 * e, 119 * e, 124 * e, 129 * e, 124 * e, 132 * e), n.bezierCurveTo(110 * e, 147 * e, 94 * e, 148 * e, 90 * e, 147 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 170 * e), n.bezierCurveTo(104 * e, 166 * e, 122 * e, 158 * e, 122 * e, 151 * e), n.bezierCurveTo(122 * e, 162.5 * e, 122 * e, 162.5 * e, 122 * e, 174 * e), n.bezierCurveTo(111 * e, 191 * e, 97 * e, 191 * e, 89 * e, 191 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(88 * e, 208 * e), n.bezierCurveTo(100 * e, 209 * e, 115 * e, 205 * e, 122 * e, 193 * e), n.bezierCurveTo(122 * e, 205.5 * e, 122 * e, 205.5 * e, 122 * e, 218 * e), n.bezierCurveTo(115 * e, 229 * e, 103 * e, 235 * e, 90 * e, 228 * e), n.bezierCurveTo(88 * e, 224 * e, 88 * e, 217 * e, 88 * e, 211 * e), n.closePath(), Ce(n, t[3]), n.globalAlpha = .4, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(22 * e, 81 * e), n.bezierCurveTo(32 * e, 84 * e, 41 * e, 81 * e, 45 * e, 68 * e), n.bezierCurveTo(50 * e, 50 * e, 62 * e, 40 * e, 79 * e, 43 * e), n.bezierCurveTo(95 * e, 45 * e, 102 * e, 58 * e, 101 * e, 81 * e), n.bezierCurveTo(99.5 * e, 120.5 * e, 99.5 * e, 120.5 * e, 98 * e, 160 * e), n.bezierCurveTo(96.5 * e, 191.5 * e, 96.5 * e, 191.5 * e, 95 * e, 223 * e), n.bezierCurveTo(93 * e, 232 * e, 101 * e, 235 * e, 108 * e, 238 * e), n.bezierCurveTo(100 * e, 240 * e, 90 * e, 233 * e, 90 * e, 224 * e), n.bezierCurveTo(92 * e, 157 * e, 92 * e, 157 * e, 94 * e, 90 * e), n.bezierCurveTo(94 * e, 56 * e, 89 * e, 53 * e, 77 * e, 51 * e), n.bezierCurveTo(58 * e, 50 * e, 54 * e, 59 * e, 49 * e, 75 * e), n.bezierCurveTo(44 * e, 91 * e, 28 * e, 90 * e, 23 * e, 81 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(82 * e, 123 * e), n.bezierCurveTo(88 * e, 130 * e, 88 * e, 127 * e, 94 * e, 128 * e), n.bezierCurveTo(91 * e, 136 * e, 94 * e, 137 * e, 99 * e, 142 * e), n.bezierCurveTo(97 * e, 149 * e, 99 * e, 152 * e, 105 * e, 155 * e), n.bezierCurveTo(107 * e, 159 * e, 113 * e, 159 * e, 120 * e, 158 * e), n.bezierCurveTo(121 * e, 160 * e, 125 * e, 163 * e, 132 * e, 163 * e), n.bezierCurveTo(133 * e, 166 * e, 136 * e, 169 * e, 138 * e, 170 * e), n.bezierCurveTo(133 * e, 171 * e, 132 * e, 172 * e, 129 * e, 174 * e), n.bezierCurveTo(122 * e, 170 * e, 120 * e, 170 * e, 116 * e, 174 * e), n.bezierCurveTo(108 * e, 170.5 * e, 108 * e, 170.5 * e, 100 * e, 167 * e), n.bezierCurveTo(95 * e, 172 * e, 94 * e, 179 * e, 95 * e, 184 * e), n.bezierCurveTo(87 * e, 185 * e, 87 * e, 189 * e, 88 * e, 194 * e), n.bezierCurveTo(82 * e, 194 * e, 81 * e, 195 * e, 79 * e, 197 * e), n.bezierCurveTo(78 * e, 192 * e, 78 * e, 191 * e, 77 * e, 189 * e), n.bezierCurveTo(81 * e, 185 * e, 82 * e, 183 * e, 80 * e, 176 * e), n.bezierCurveTo(89 * e, 170 * e, 92 * e, 168 * e, 95 * e, 163 * e), n.bezierCurveTo(91 * e, 151 * e, 88 * e, 151 * e, 82 * e, 147 * e), n.bezierCurveTo(85 * e, 142 * e, 85 * e, 137 * e, 81 * e, 133 * e), n.bezierCurveTo(84 * e, 127 * e, 84 * e, 125 * e, 82 * e, 124 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), Ne(n, 107 * e, 152 * e, 9 * e), Ce(n, t[6]), Ne(n, 105 * e, 173 * e, 9 * e), Ce(n, t[6]), Ne(n, 87 * e, 161 * e, 9 * e), Ce(n, t[6]), Ne(n, 106 * e, 147 * e, 4 * e), Ce(n, t[7]), Ne(n, 104 * e, 167 * e, 4 * e), Ce(n, t[7]), Ne(n, 86 * e, 154 * e, 4 * e), Ce(n, t[7]), r
    }

    function fi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 350 * e, r.height = 140 * e, n.translate(-50 * e, -150 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(184.5 * e, 222.0625 * e), n.bezierCurveTo(185.5 * e, 184.0625 * e, 302.5 * e, 171.0625 * e, 313.5 * e, 222.0625 * e), n.bezierCurveTo(330.5 * e, 263.0625 * e, 181.5 * e, 274.0625 * e, 184.5 * e, 223.0625 * e), n.closePath(), Ce(n, t[0], t[1], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131.5 * e, 241.0625 * e), n.bezierCurveTo(144.5 * e, 278.0625 * e, 270.5 * e, 209.0625 * e, 228.5 * e, 174.0625 * e), n.bezierCurveTo(196.5 * e, 147.0625 * e, 117.5 * e, 196.0625 * e, 131.5 * e, 240.0625 * e), n.closePath(), Ce(n, t[0], t[1], 8 * e), Ne(n, 270.5 * e, 225.0625 * e, 15.811388300841896 * e), Ce(n, t[2]), Ne(n, 243.5 * e, 225.0625 * e, 6.082762530298219 * e), Ce(n, t[2]), Ne(n, 255.5 * e, 210.0625 * e, 10.816653826391969 * e), Ce(n, t[2]), Ne(n, 167.5 * e, 215.0625 * e, 15.297058540778355 * e), Ce(n, t[2]), Ne(n, 176.5 * e, 204.0625 * e, 7.280109889280518 * e), Ce(n, t[2]), Ne(n, 206.5 * e, 189.0625 * e, 7.280109889280518 * e), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(151.5 * e, 212.0625 * e), n.bezierCurveTo(161.5 * e, 204.0625 * e, 173.5 * e, 214.0625 * e, 158.5 * e, 221.0625 * e), n.bezierCurveTo(145.5 * e, 228.0625 * e, 144.5 * e, 216.0625 * e, 151.5 * e, 212.0625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(194.5 * e, 209.0625 * e), n.bezierCurveTo(205.5 * e, 202.0625 * e, 215.5 * e, 207.0625 * e, 199.5 * e, 217.0625 * e), n.bezierCurveTo(187.5 * e, 224.0625 * e, 182.5 * e, 217.0625 * e, 194.5 * e, 209.0625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(188.5 * e, 183.0625 * e), n.bezierCurveTo(201.5 * e, 176.0625 * e, 213.5 * e, 187.0625 * e, 193.5 * e, 193.0625 * e), n.bezierCurveTo(185.5 * e, 194.0625 * e, 175.5 * e, 189.0625 * e, 188.5 * e, 183.0625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(261.5 * e, 202.0625 * e), n.bezierCurveTo(274.5 * e, 201.0625 * e, 282.5 * e, 214.0625 * e, 261.5 * e, 215.0625 * e), n.bezierCurveTo(246.5 * e, 214.0625 * e, 248.5 * e, 203.0625 * e, 261.5 * e, 202.0625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(240.5 * e, 231.0625 * e), n.bezierCurveTo(255.5 * e, 231.0625 * e, 254.5 * e, 243.0625 * e, 240.5 * e, 242.0625 * e), n.bezierCurveTo(225.5 * e, 239.0625 * e, 225.5 * e, 232.0625 * e, 240.5 * e, 231.0625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), r
    }

    function Hi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 217 * e, r.height = 215 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 113 * e), n.bezierCurveTo(135 * e, 98 * e, 136 * e, 96 * e, 142 * e, 97 * e), n.bezierCurveTo(167 * e, 106 * e, 167 * e, 106 * e, 171 * e, 109 * e), n.bezierCurveTo(173 * e, 120 * e, 173 * e, 134 * e, 169 * e, 141 * e), n.bezierCurveTo(140 * e, 149.5 * e, 140 * e, 149.5 * e, 111 * e, 158 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(154 * e, 103 * e), n.bezierCurveTo(167 * e, 91 * e, 175 * e, 87 * e, 176 * e, 94 * e), n.bezierCurveTo(175 * e, 102 * e, 176 * e, 102 * e, 186 * e, 103 * e), n.bezierCurveTo(191 * e, 104 * e, 192 * e, 105 * e, 185 * e, 116 * e), n.bezierCurveTo(183 * e, 120 * e, 191 * e, 124 * e, 189 * e, 129 * e), n.bezierCurveTo(185 * e, 139 * e, 178 * e, 134 * e, 166 * e, 131 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60 * e, 46 * e), n.bezierCurveTo(60 * e, 34 * e, 60 * e, 29 * e, 56 * e, 19 * e), n.bezierCurveTo(52 * e, 12 * e, 52 * e, 16 * e, 49 * e, 24 * e), n.bezierCurveTo(48 * e, 27 * e, 46 * e, 28 * e, 39 * e, 27 * e), n.bezierCurveTo(33 * e, 26 * e, 34 * e, 31 * e, 35 * e, 37 * e), n.bezierCurveTo(36 * e, 41 * e, 27 * e, 46 * e, 29 * e, 52 * e), n.bezierCurveTo(36 * e, 55 * e, 35 * e, 56 * e, 31 * e, 59 * e), n.bezierCurveTo(27 * e, 65 * e, 32 * e, 64 * e, 35 * e, 62 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46 * e, 50 * e), n.bezierCurveTo(51 * e, 35 * e, 70 * e, 32 * e, 78 * e, 29 * e), n.bezierCurveTo(84 * e, 27 * e, 113 * e, 36 * e, 127 * e, 41 * e), n.bezierCurveTo(140 * e, 47 * e, 147 * e, 69 * e, 137 * e, 73 * e), n.bezierCurveTo(124 * e, 92 * e, 117 * e, 92 * e, 109 * e, 94 * e), n.bezierCurveTo(101 * e, 96 * e, 89 * e, 92 * e, 65 * e, 83 * e), n.bezierCurveTo(54 * e, 80 * e, 46 * e, 58 * e, 46 * e, 51 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(51 * e, 40 * e), n.bezierCurveTo(49 * e, 34 * e, 49 * e, 34 * e, 47 * e, 28 * e), n.bezierCurveTo(38 * e, 28 * e, 34 * e, 27 * e, 37 * e, 37 * e), n.bezierCurveTo(43 * e, 40.5 * e, 43 * e, 40.5 * e, 49 * e, 44 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(29 * e, 48 * e), n.bezierCurveTo(38 * e, 49 * e, 38 * e, 49 * e, 47 * e, 50 * e), n.bezierCurveTo(46.5 * e, 51.5 * e, 46.5 * e, 51.5 * e, 46 * e, 53 * e), n.bezierCurveTo(40 * e, 53.5 * e, 40 * e, 53.5 * e, 34 * e, 54 * e), n.bezierCurveTo(29 * e, 51 * e, 32 * e, 51.5 * e, 30 * e, 49 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(89 * e, 61 * e), n.bezierCurveTo(101 * e, 70 * e, 109 * e, 90 * e, 102 * e, 90 * e), n.bezierCurveTo(97 * e, 91 * e, 87 * e, 91 * e, 60 * e, 80 * e), n.bezierCurveTo(48 * e, 65 * e, 46 * e, 56 * e, 48 * e, 53 * e), n.bezierCurveTo(50 * e, 52 * e, 66 * e, 56 * e, 89 * e, 61 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(99 * e, 59 * e), n.bezierCurveTo(115 * e, 45 * e, 125 * e, 42 * e, 129 * e, 47 * e), n.bezierCurveTo(138 * e, 56 * e, 140 * e, 63 * e, 138 * e, 67 * e), n.bezierCurveTo(131 * e, 80 * e, 122 * e, 87 * e, 114 * e, 90 * e), n.bezierCurveTo(105 * e, 80 * e, 95 * e, 62 * e, 98 * e, 61 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 62 * e), n.bezierCurveTo(139 * e, 45 * e, 153 * e, 40 * e, 150 * e, 48 * e), n.bezierCurveTo(145 * e, 57 * e, 157 * e, 63 * e, 157 * e, 70 * e), n.bezierCurveTo(157 * e, 74 * e, 142 * e, 77 * e, 142 * e, 85 * e), n.bezierCurveTo(143 * e, 91 * e, 141 * e, 92 * e, 135 * e, 90 * e), n.bezierCurveTo(132 * e, 90 * e, 132 * e, 96 * e, 124 * e, 99 * e), n.bezierCurveTo(118 * e, 93 * e, 116 * e, 77 * e, 116 * e, 64 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 130 * e), n.bezierCurveTo(157 * e, 115 * e, 165 * e, 111 * e, 167 * e, 115 * e), n.bezierCurveTo(170 * e, 117 * e, 171 * e, 135 * e, 167 * e, 141 * e), n.bezierCurveTo(135.5 * e, 149.5 * e, 135.5 * e, 149.5 * e, 104 * e, 158 * e), n.closePath(), Ce(n, t[8]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 119 * e), n.bezierCurveTo(46 * e, 120 * e, 40 * e, 118 * e, 34 * e, 116 * e), n.bezierCurveTo(28 * e, 111 * e, 41 * e, 112 * e, 39 * e, 108 * e), n.bezierCurveTo(36 * e, 100 * e, 49 * e, 102 * e, 53 * e, 95 * e), n.bezierCurveTo(57 * e, 84 * e, 58 * e, 85 * e, 63 * e, 93 * e), n.bezierCurveTo(68 * e, 96 * e, 72 * e, 94 * e, 80 * e, 88 * e), n.bezierCurveTo(80 * e, 96 * e, 78 * e, 107 * e, 66 * e, 115 * e), n.closePath(), Ce(n, t[9], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 64 * e), n.bezierCurveTo(133.5 * e, 57 * e, 133.5 * e, 57 * e, 149 * e, 50 * e), n.bezierCurveTo(145 * e, 54 * e, 154 * e, 65 * e, 157 * e, 68 * e), n.bezierCurveTo(138.5 * e, 66.5 * e, 138.5 * e, 66.5 * e, 120 * e, 65 * e), n.closePath(), Ce(n, t[8]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 65 * e), n.bezierCurveTo(129 * e, 77 * e, 129 * e, 77 * e, 140 * e, 89 * e), n.bezierCurveTo(131 * e, 89 * e, 130 * e, 92 * e, 128 * e, 96 * e), n.bezierCurveTo(123.5 * e, 82 * e, 123.5 * e, 82 * e, 119 * e, 68 * e), n.closePath(), Ce(n, t[8]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(51 * e, 112 * e), n.bezierCurveTo(63 * e, 108 * e, 78 * e, 111 * e, 88 * e, 112 * e), n.bezierCurveTo(98 * e, 122 * e, 117 * e, 136 * e, 125 * e, 157 * e), n.bezierCurveTo(123 * e, 180 * e, 123 * e, 185 * e, 118 * e, 186 * e), n.bezierCurveTo(101 * e, 190 * e, 89 * e, 191 * e, 79 * e, 187 * e), n.bezierCurveTo(53 * e, 165 * e, 50 * e, 153 * e, 47 * e, 144 * e), n.bezierCurveTo(46 * e, 128 * e, 46 * e, 124 * e, 50 * e, 112 * e), n.closePath(), Ce(n, t[9], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(50 * e, 114 * e), n.bezierCurveTo(81 * e, 149 * e, 80 * e, 147 * e, 80 * e, 149 * e), n.bezierCurveTo(82 * e, 155 * e, 80 * e, 182 * e, 74 * e, 182 * e), n.bezierCurveTo(60 * e, 172 * e, 52 * e, 157 * e, 47 * e, 144 * e), n.closePath(), Ce(n, t[11], t[11], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(85 * e, 152 * e), n.bezierCurveTo(99 * e, 150 * e, 109 * e, 152 * e, 119 * e, 156 * e), n.bezierCurveTo(122 * e, 163 * e, 122 * e, 174 * e, 117 * e, 182 * e), n.closePath(), n.bezierCurveTo(93 * e, 188 * e, 82 * e, 187 * e, 83 * e, 179 * e), Ce(n, t[11], t[11], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(104 * e, 166 * e), n.bezierCurveTo(133 * e, 165 * e, 142 * e, 168 * e, 137 * e, 173 * e), n.bezierCurveTo(127 * e, 177 * e, 137 * e, 195 * e, 126 * e, 196 * e), n.bezierCurveTo(112 * e, 195 * e, 112 * e, 194 * e, 109 * e, 199 * e), n.bezierCurveTo(105 * e, 205 * e, 102 * e, 195 * e, 96 * e, 197 * e), n.bezierCurveTo(84 * e, 201 * e, 88 * e, 198 * e, 90 * e, 187 * e), n.bezierCurveTo(96 * e, 171 * e, 97 * e, 170 * e, 103 * e, 167 * e), n.closePath(), Ce(n, t[9], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105 * e, 168 * e), n.bezierCurveTo(118 * e, 172.5 * e, 118 * e, 172.5 * e, 131 * e, 177 * e), n.bezierCurveTo(133 * e, 190 * e, 132 * e, 199 * e, 116 * e, 194 * e), n.bezierCurveTo(110 * e, 182 * e, 110 * e, 182 * e, 104 * e, 170 * e), n.closePath(), Ce(n, t[10]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 169 * e), n.bezierCurveTo(100.5 * e, 182 * e, 100.5 * e, 182 * e, 99 * e, 195 * e), n.bezierCurveTo(93.5 * e, 196.5 * e, 93.5 * e, 196.5 * e, 88 * e, 198 * e), n.bezierCurveTo(94 * e, 176 * e, 96 * e, 174 * e, 101 * e, 168 * e), n.closePath(), Ce(n, t[9], t[9], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(64 * e, 107 * e), n.bezierCurveTo(64 * e, 101 * e, 64 * e, 101 * e, 64 * e, 95 * e), n.bezierCurveTo(57 * e, 86 * e, 57 * e, 84 * e, 53 * e, 97 * e), n.bezierCurveTo(55 * e, 103.5 * e, 55 * e, 103.5 * e, 57 * e, 110 * e), n.closePath(), Ce(n, t[11], t[11], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(40 * e, 108 * e), n.bezierCurveTo(46.5 * e, 111 * e, 46.5 * e, 111 * e, 53 * e, 114 * e), n.bezierCurveTo(50.5 * e, 117 * e, 50.5 * e, 117 * e, 48 * e, 120 * e), n.bezierCurveTo(40.5 * e, 117.5 * e, 40.5 * e, 117.5 * e, 33 * e, 115 * e), n.bezierCurveTo(36 * e, 112 * e, 36 * e, 112 * e, 39 * e, 109 * e), n.closePath(), Ce(n, t[11], t[11], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(189 * e, 106 * e), n.bezierCurveTo(178.5 * e, 110.5 * e, 178.5 * e, 110.5 * e, 168 * e, 115 * e), n.bezierCurveTo(168.5 * e, 119 * e, 168.5 * e, 119 * e, 169 * e, 123 * e), n.bezierCurveTo(179 * e, 124.5 * e, 179 * e, 124.5 * e, 189 * e, 126 * e), n.bezierCurveTo(182 * e, 118 * e, 183 * e, 115 * e, 188 * e, 106 * e), n.closePath(), Ce(n, t[8]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(69 * e, 178 * e), n.bezierCurveTo(69 * e, 141 * e, 70 * e, 136 * e, 77 * e, 137 * e), n.bezierCurveTo(88 * e, 133 * e, 101 * e, 134 * e, 108 * e, 137 * e), Ce(n, void 0, t[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 161 * e), n.bezierCurveTo(54 * e, 124 * e, 55 * e, 119 * e, 62 * e, 119 * e), n.bezierCurveTo(74 * e, 117 * e, 85 * e, 117 * e, 93 * e, 119 * e), Ce(n, void 0, t[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(91 * e, 29 * e), n.bezierCurveTo(74 * e, 33 * e, 62 * e, 46 * e, 57 * e, 54 * e), n.bezierCurveTo(57 * e, 63 * e, 68 * e, 76 * e, 77 * e, 87 * e), Ce(n, void 0, t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(107 * e, 33 * e), n.bezierCurveTo(82 * e, 51 * e, 80 * e, 52 * e, 79 * e, 59 * e), n.bezierCurveTo(78 * e, 65 * e, 93 * e, 86 * e, 101 * e, 93 * e), Ce(n, void 0, t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130 * e, 98 * e), n.bezierCurveTo(126.5 * e, 103 * e, 126.5 * e, 103 * e, 123 * e, 108 * e), n.bezierCurveTo(133.5 * e, 107 * e, 133.5 * e, 107 * e, 144 * e, 106 * e), n.bezierCurveTo(138.5 * e, 110 * e, 138.5 * e, 110 * e, 133 * e, 114 * e), n.bezierCurveTo(142 * e, 114 * e, 142 * e, 114 * e, 151 * e, 114 * e), n.bezierCurveTo(146.5 * e, 119.5 * e, 146.5 * e, 119.5 * e, 142 * e, 125 * e), n.bezierCurveTo(146.5 * e, 127 * e, 146.5 * e, 127 * e, 151 * e, 129 * e), n.bezierCurveTo(147.5 * e, 132 * e, 147.5 * e, 132 * e, 144 * e, 135 * e), n.bezierCurveTo(148 * e, 137 * e, 148 * e, 137 * e, 152 * e, 139 * e), n.bezierCurveTo(149 * e, 142.5 * e, 149 * e, 142.5 * e, 146 * e, 146 * e), Ce(n, void 0, t[3], 4 * e), r
    }

    function Pi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 118 * e, r.height = 114 * e, n.translate(0, 10 * e), Ne(n, 42 * e, 43 * e, 24.758836806279895 * e), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65 * e, 90 * e), n.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e), n.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87 * e, 45 * e), n.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e), n.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e), n.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e), n.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e), n.closePath(), Ce(n, t[0]), n.translate(0, -10 * e), Ne(n, 42 * e, 43 * e, 24.758836806279895 * e), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65 * e, 90 * e), n.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e), n.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e), n.closePath(), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87 * e, 45 * e), n.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e), n.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e), n.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e), n.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e), n.closePath(), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 16 * e), n.bezierCurveTo(55 * e, 19 * e, 54 * e, 20 * e, 55 * e, 22 * e), n.bezierCurveTo(52 * e, 24.5 * e, 52 * e, 24.5 * e, 49 * e, 27 * e), n.bezierCurveTo(45 * e, 25 * e, 45 * e, 25 * e, 41 * e, 23 * e), n.bezierCurveTo(45 * e, 19 * e, 48 * e, 16 * e, 52 * e, 16 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(62 * e, 30 * e), n.bezierCurveTo(66 * e, 29 * e, 64 * e, 30 * e, 66 * e, 30 * e), n.bezierCurveTo(67 * e, 31 * e, 67 * e, 31 * e, 68 * e, 32 * e), n.bezierCurveTo(66.5 * e, 33.5 * e, 66.5 * e, 33.5 * e, 65 * e, 35 * e), n.bezierCurveTo(63.5 * e, 32.5 * e, 63.5 * e, 32.5 * e, 62 * e, 30 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(29 * e, 21 * e), n.bezierCurveTo(31 * e, 22 * e, 31 * e, 26 * e, 29 * e, 29 * e), n.bezierCurveTo(26 * e, 28.5 * e, 26 * e, 28.5 * e, 23 * e, 28 * e), n.bezierCurveTo(23 * e, 26.5 * e, 23 * e, 26.5 * e, 23 * e, 25 * e), n.bezierCurveTo(25 * e, 23 * e, 25 * e, 23 * e, 27 * e, 21 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(18 * e, 36 * e), n.bezierCurveTo(23 * e, 36 * e, 24 * e, 42 * e, 19 * e, 46 * e), n.bezierCurveTo(12 * e, 39 * e, 15 * e, 38 * e, 18 * e, 37 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 34 * e), n.bezierCurveTo(35 * e, 36 * e, 36 * e, 39 * e, 32 * e, 45 * e), n.bezierCurveTo(25 * e, 46 * e, 25 * e, 44 * e, 30 * e, 34 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59 * e, 35 * e), n.bezierCurveTo(58 * e, 27 * e, 57 * e, 27 * e, 52 * e, 31 * e), n.bezierCurveTo(50 * e, 36 * e, 53 * e, 38 * e, 58 * e, 36 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(63 * e, 46 * e), n.bezierCurveTo(64.5 * e, 46.5 * e, 64.5 * e, 46.5 * e, 66 * e, 47 * e), n.bezierCurveTo(70 * e, 50 * e, 70 * e, 53 * e, 61 * e, 55 * e), n.bezierCurveTo(62 * e, 50.5 * e, 62 * e, 50.5 * e, 63 * e, 46 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 42 * e), n.bezierCurveTo(47 * e, 41 * e, 53 * e, 47 * e, 46 * e, 51 * e), n.bezierCurveTo(38 * e, 49 * e, 39 * e, 46 * e, 41 * e, 43 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 57 * e), n.bezierCurveTo(54 * e, 57 * e, 54 * e, 58 * e, 55 * e, 61 * e), n.bezierCurveTo(54 * e, 63 * e, 52 * e, 64 * e, 48 * e, 65 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(20 * e, 52 * e), n.bezierCurveTo(25 * e, 51 * e, 27 * e, 50 * e, 28 * e, 54 * e), n.bezierCurveTo(27 * e, 58 * e, 24 * e, 58 * e, 22 * e, 58 * e), n.bezierCurveTo(21 * e, 55.5 * e, 21 * e, 55.5 * e, 20 * e, 53 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 61 * e), n.bezierCurveTo(37 * e, 61 * e, 39 * e, 63 * e, 39 * e, 68 * e), n.bezierCurveTo(36 * e, 68.5 * e, 36 * e, 68.5 * e, 33 * e, 69 * e), n.bezierCurveTo(30.5 * e, 67.5 * e, 30.5 * e, 67.5 * e, 28 * e, 66 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(88 * e, 45 * e), n.bezierCurveTo(90 * e, 46.5 * e, 90 * e, 46.5 * e, 92 * e, 48 * e), n.bezierCurveTo(92 * e, 50 * e, 92 * e, 50 * e, 92 * e, 52 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(96 * e, 53 * e), n.bezierCurveTo(97.5 * e, 55 * e, 97.5 * e, 55 * e, 99 * e, 57 * e), n.bezierCurveTo(97.5 * e, 59.5 * e, 97.5 * e, 59.5 * e, 96 * e, 62 * e), n.bezierCurveTo(93.5 * e, 60.5 * e, 93.5 * e, 60.5 * e, 91 * e, 59 * e), n.bezierCurveTo(91.5 * e, 57 * e, 91.5 * e, 57 * e, 92 * e, 55 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(92 * e, 71 * e), n.bezierCurveTo(94.5 * e, 70.5 * e, 94.5 * e, 70.5 * e, 97 * e, 70 * e), n.bezierCurveTo(98.5 * e, 72.5 * e, 98.5 * e, 72.5 * e, 100 * e, 75 * e), n.bezierCurveTo(97 * e, 76.5 * e, 97 * e, 76.5 * e, 94 * e, 78 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(95 * e, 82 * e), n.bezierCurveTo(96 * e, 83 * e, 96 * e, 83 * e, 97 * e, 84 * e), n.bezierCurveTo(97 * e, 85.5 * e, 97 * e, 85.5 * e, 97 * e, 87 * e), n.bezierCurveTo(93.5 * e, 87.5 * e, 93.5 * e, 87.5 * e, 90 * e, 88 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(86 * e, 72 * e), n.bezierCurveTo(89 * e, 76 * e, 88 * e, 81 * e, 85 * e, 82 * e), n.bezierCurveTo(80 * e, 80 * e, 82 * e, 78 * e, 85 * e, 72 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80 * e, 86 * e), n.bezierCurveTo(84 * e, 88 * e, 86 * e, 88 * e, 85 * e, 93 * e), n.bezierCurveTo(80 * e, 96 * e, 79 * e, 96 * e, 76 * e, 91 * e), n.closePath(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84 * e, 46 * e), n.bezierCurveTo(93 * e, 51 * e, 91 * e, 62 * e, 80 * e, 78 * e), n.bezierCurveTo(74 * e, 86 * e, 66 * e, 90 * e, 60 * e, 86 * e), n.bezierCurveTo(55 * e, 79 * e, 57 * e, 73 * e, 67 * e, 57 * e), n.bezierCurveTo(71 * e, 51 * e, 79 * e, 44 * e, 84 * e, 46 * e), n.closePath(), Ce(n, t[5], t[6], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(76 * e, 60 * e), n.bezierCurveTo(80 * e, 66 * e, 75 * e, 74 * e, 68 * e, 74 * e), n.bezierCurveTo(60 * e, 64 * e, 68 * e, 59 * e, 76 * e, 59 * e), n.closePath(), Ce(n, t[7], t[8], 5 * e), r
    }

    function yi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 70 * e,
            o = 90 * e,
            s = 4 * e,
            _ = 5 * e;
        return r.width = a, r.height = o, n.save(), n.translate(-80 * e, -70 * e + _), n.globalAlpha = .5, n.beginPath(), n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), n.closePath(), Ce(n, "#0d1b1c"), n.restore(), n.save(), n.translate(-80 * e, -70 * e + _), n.globalAlpha = .5, n.beginPath(), n.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e), n.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e), n.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e), n.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e), n.closePath(), Ce(n, "#0d1b1c"), n.restore(), n.save(), n.translate(-80 * e, -70 * e + _), n.globalAlpha = .5, n.beginPath(), n.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e), n.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e), n.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e), n.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e), n.closePath(), Ce(n, "#0d1b1c"), n.restore(), n.save(), n.translate(3 * e, -93 * e + _), n.rotate(Math.PI / 5), n.globalAlpha = .5, n.beginPath(), n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), n.closePath(), Ce(n, "#0d1b1c"), n.restore(), n.save(), n.translate(-80 * e, -70 * e), n.globalAlpha = 1, n.beginPath(), n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), n.closePath(), Ce(n, t[0], t[1], s), n.restore(), n.save(), n.translate(-80 * e, -70 * e), n.globalAlpha = 1, n.beginPath(), n.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e), n.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e), n.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e), n.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e), n.closePath(), Ce(n, t[0], t[1], s), n.restore(), n.save(), n.translate(-80 * e, -70 * e), n.globalAlpha = 1, n.beginPath(), n.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e), n.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e), n.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e), n.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e), n.closePath(), Ce(n, t[0], t[1], s), n.restore(), n.save(), n.translate(3 * e, -93 * e), n.rotate(Math.PI / 5), n.globalAlpha = 1, n.beginPath(), n.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), n.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), n.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), n.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), n.closePath(), Ce(n, t[0], t[1], s), n.restore(), r
    }

    function zi(e, i, t, r, n, a, o, s, _, E, T) {
        void 0 === T && (T = 0);
        var A = document.createElement("canvas"),
            d = A.getContext("2d");
        a = a ? a * e : 0;
        var I = Math.floor(e * t);
        d.font = I + "px Baloo Paaji", d.lineJoin = "round", s *= e;
        var h = o ? 2 * s : 0;
        if (_) var u = Math.min(d.measureText(i).width + 2 * e + h, _);
        else u = d.measureText(i).width + 2 * e + h + T * e * 2;
        I = (I + a + T) * e + h;
        return A.width = u, A.height = I, o && (d.fillStyle = o, ge(d, 0, 0, u, I, 2 * s), d.fill(), d.translate(s, s)), d.textBaseline = "middle", d.font = t + "px Baloo Paaji", d.lineJoin = "round", n && (d.beginPath(), d.fillStyle = n, d.fillText(i, 0, I / 2 + a - h / 2, u)), d.beginPath(), E && (d.strokeStyle = E, d.lineWidth = T, d.strokeText(i, T, (I - h) / 2, u)), d.fillStyle = r, d.fillText(i, T, (I - h) / 2, u), A
    }

    function Bi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 220 * e,
            o = 230 * e,
            s = 100 * e,
            _ = s / 4,
            E = 20 * e;
        return r.width = a, r.height = o, n.translate(a / 2, o / 2 + E), n.globalAlpha = .5, be(n, 7, s, _), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -E), be(n, 7, s, _), Ce(n, t[1]), be(n, 6, .65 * s, .65 * _), Ce(n, t[2]), r
    }

    function Wi(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d"),
            o = 220 * e,
            s = 220 * e,
            _ = 100 * e,
            E = _ / 4;
        return n.width = o, n.height = s, a.translate(o / 2, s / 2), a.globalAlpha = i ? .5 : 1, i || a.translate(0 * e, -8 * e), be(a, 7, _, E), Ce(a, i ? t[0] : t[1]), a.globalAlpha = 1, 0 == r ? (be(a, 6, .65 * _, .65 * E), Ce(a, t[2])) : 1 == r && (a.translate(20 * e, 20 * e), be(a, 6, .45 * _, .4 * E), Ce(a, t[2])), n
    }

    function Vi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 120 * e,
            o = 150 * e,
            s = 60 * e,
            _ = s / 4,
            E = 15 * e;
        return r.width = a, r.height = o, n.save(), n.translate(a / 2 + 0 * e, o / 2 + 0 * e + E), n.rotate(Math.PI / 3), n.globalAlpha = .5, be(n, 8, s, _), Ce(n, t[0]), n.restore(), n.save(), n.translate(a / 2 - 11 * e, o / 2 + 12 * e), n.globalAlpha = 1, n.rotate(Math.PI / 3), n.translate(0, -E), be(n, 8, s, _), Ce(n, t[1]), n.restore(), n.save(), n.translate(a / 2 - 9 * e, o / 2 - 12 * e), n.rotate(Math.PI / 2.8), be(n, 5, .5 * s, .4 * _), Ce(n, t[2]), n.restore(), n.save(), n.translate(a / 2 + 19 * e, o / 2 + 5 * e), n.rotate(Math.PI / 1), be(n, 5, .5 * s, .4 * _), Ce(n, t[2]), n.restore(), n.save(), n.translate(a / 2 - 8 * e, o / 2 + 20 * e), n.rotate(Math.PI / 2.25), be(n, 5, .5 * s, .4 * _), Ce(n, t[2]), n.restore(), r
    }

    function Ki(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 180 * e,
            o = 210 * e,
            s = (E = 60 * e) / 4,
            _ = 20 * e;
        r.width = a, r.height = o, n.save(), n.translate(a / 2 - 0 * e, o / 2 - 35 * e + _), n.rotate(Math.PI / -1.8), n.globalAlpha = .5, n.translate(0 * e, -20 * e), be(n, 5, E, s), Ce(n, t[0]), n.restore(), n.save(), n.translate(a / 2 + 10 * e, o / 2 + 15 * e + _), n.rotate(Math.PI / 2), n.globalAlpha = .5, n.translate(0 * e, -20 * e), be(n, 5, E, s), Ce(n, t[0]), n.restore(), n.save(), n.translate(a / 2 - 50 * e, o / 2 + 40 * e + _), n.rotate(Math.PI / 3), n.globalAlpha = .5, n.translate(0, -20 * e), be(n, 5, E, s), Ce(n, t[0]), n.restore(), n.save(), n.translate(a / 2 - 0 * e, o / 2 - 35 * e), n.rotate(Math.PI / -1.8), n.globalAlpha = 1, n.translate(0 * e, -20 * e), be(n, 5, E, s), Ce(n, t[1]), n.restore(), n.save(), n.translate(a / 2 + 10 * e, o / 2 + 15 * e), n.rotate(Math.PI / 2), n.globalAlpha = 1, n.translate(0, -20 * e), be(n, 5, E, s), Ce(n, t[1]), n.restore(), n.save(), n.translate(a / 2 - 50 * e, o / 2 + 40 * e), n.rotate(Math.PI / 3), n.globalAlpha = 1, n.translate(0, -20 * e), be(n, 5, E, s), Ce(n, t[1]), n.restore();
        var E;
        s = (E = 30 * e) / 4;
        return n.save(), n.translate(a / 2 + 5 * e, o / 2 - 20 * e), n.rotate(Math.PI / -1.8), n.globalAlpha = 1, n.translate(0, -20 * e), be(n, 5, E, s), Ce(n, t[2]), n.restore(), n.save(), n.translate(a / 2 + 0 * e, o / 2 + 10 * e), n.rotate(Math.PI / 2), n.globalAlpha = 1, n.translate(0, -20 * e), be(n, 5, E, s), Ce(n, t[2]), n.restore(), n.save(), n.translate(a / 2 - 45 * e, o / 2 + 35 * e), n.rotate(Math.PI / 3), n.globalAlpha = 1, n.translate(0, -20 * e), be(n, 5, E, s), Ce(n, t[2]), n.restore(), Ne(n, a / 2 - 7 * e, o / 2 + 7 * e, 5), Ce(n, t[2]), r
    }

    function wi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 140 * e,
            o = 150 * e,
            s = 10 * e,
            _ = 4 * e;
        return r.width = a, r.height = o, n.translate(-50 * e, -38 * e + s), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e), n.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e), n.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e), n.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e), n.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e), n.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e), n.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e), n.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e), n.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e), n.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e), n.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e), n.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e), n.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e), n.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e), n.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e), n.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e), n.closePath(), Ce(n, t[0]), n.translate(0, 0 - s), n.globalAlpha = 1, n.beginPath(), n.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e), n.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e), n.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e), n.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e), n.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e), n.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e), n.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e), n.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e), n.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e), n.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e), n.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e), n.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e), n.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e), n.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e), n.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e), n.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e), n.closePath(), Ce(n, t[1], t[2], _), r
    }

    function Ui(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 18 * e,
            o = 18 * e;
        r.width = a, r.height = o;
        var s = 9 * e,
            _ = 9 * e,
            E = 8 * e;
        n.save(), n.translate(s, _), n.globalAlpha = 1, Ne(n, 0, 0, E), Ce(n, t[0]);
        E = 3 * e, s = 0, _ = -3 * e;
        return n.translate(s, _), n.globalAlpha = 1, Ne(n, 0, 0, E), Ce(n, t[1]), n.restore(), r
    }

    function Yi(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 80 * e, t.height = 100 * e, r.scale(.5, .5), r.translate(10, 15), r.globalAlpha = .5, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(47 * e, 5 * e), r.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e), r.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e), r.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e), r.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(17 * e, 70 * e), r.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e), Ce(r, void 0, i[0], 10 * e), r.translate(0, -10), r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(47 * e, 5 * e), r.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e), r.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e), r.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e), r.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e), r.closePath(), Ce(r, i[1], i[2], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(17 * e, 70 * e), r.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e), Ce(r, void 0, i[2], 8 * e), r.globalAlpha = .5, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(17 * e, 70 * e), r.bezierCurveTo(33 * e, 52 * e, 39 * e, 33 * e, 48 * e, 7 * e), Ce(r, void 0, i[2], 8 * e), t
    }

    function Yi(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 234 * e, t.height = 183 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 25 * e), r.bezierCurveTo(150 * e, 3 * e, 181 * e, 22 * e, 203 * e, 41 * e), r.bezierCurveTo(225 * e, 63 * e, 225 * e, 105 * e, 198 * e, 133 * e), r.bezierCurveTo(179 * e, 157 * e, 134 * e, 178 * e, 81 * e, 164 * e), r.bezierCurveTo(19 * e, 148 * e, 6 * e, 95 * e, 21 * e, 66 * e), r.bezierCurveTo(34 * e, 39 * e, 52 * e, 33 * e, 75 * e, 25 * e), r.closePath(), Ce(r, i[0], i[0], 4 * e), t
    }

    function Fi(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        if (0 == r) {
            var o = 270 * e,
                s = 250 * e;
            n.width = o, n.height = s, a.beginPath(), a.moveTo(140 * e, 3 * e), a.translate(-25 * e, -20 * e), a.bezierCurveTo(218 * e, 31 * e, 251 * e, 61 * e, 265 * e, 85 * e), a.bezierCurveTo(278 * e, 108 * e, 295 * e, 160 * e, 285 * e, 195 * e), a.bezierCurveTo(271 * e, 242 * e, 213 * e, 268 * e, 188 * e, 266 * e), a.bezierCurveTo(139 * e, 262 * e, 70 * e, 244 * e, 47 * e, 204 * e), a.bezierCurveTo(20 * e, 158 * e, 35 * e, 78 * e, 59 * e, 56 * e), a.bezierCurveTo(90 * e, 28 * e, 124 * e, 23 * e, 140 * e, 23 * e), a.closePath(), Ce(a, t[0])
        } else if (1 == r) {
            o = 430 * e, s = 350 * e;
            n.width = o, n.height = s, a.beginPath(), a.moveTo(180 * e, 5 * e), a.translate(-30 * e, -60 * e), a.bezierCurveTo(283 * e, 60 * e, 265 * e, 163 * e, 335 * e, 206 * e), a.bezierCurveTo(376 * e, 231 * e, 492 * e, 299 * e, 434 * e, 357 * e), a.bezierCurveTo(371 * e, 421 * e, 289 * e, 394 * e, 255 * e, 386 * e), a.bezierCurveTo(218 * e, 377 * e, 91 * e, 359 * e, 50 * e, 272 * e), a.bezierCurveTo(12 * e, 192 * e, 107 * e, 75 * e, 178 * e, 69 * e), a.closePath(), Ce(a, t[0])
        } else if (2 == r) {
            o = 400 * e, s = 300 * e;
            n.width = o, n.height = s, a.beginPath(), a.moveTo(80 * e, 52 * e), a.translate(-40 * e, -30 * e), a.bezierCurveTo(124 * e, 77 * e, 241 * e, 22 * e, 311 * e, 65 * e), a.bezierCurveTo(352 * e, 90 * e, 404 * e, 176 * e, 346 * e, 234 * e), a.bezierCurveTo(283 * e, 298 * e, 179 * e, 299 * e, 145 * e, 291 * e), a.bezierCurveTo(108 * e, 282 * e, 100 * e, 239 * e, 63 * e, 205 * e), a.bezierCurveTo(37 * e, 181 * e, 45 * e, 131 * e, 80 * e, 107 * e), a.closePath(), Ce(a, t[0])
        }
        return n
    }

    function ki(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = e * i * 2,
            o = e * i * 2,
            s = a / 2,
            _ = o / 2;
        return r.width = a, r.height = o, n.translate(s, _), Ne(n, 0, 0, i * e), Ce(n, t), r
    }

    function xi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 373 * e, r.height = 314 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(184.048583984375 * e, 69.1805419921875 * e), ge(n, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(185.048583984375 * e, 61.6805419921875 * e), n.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e), n.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e), n.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e), n.closePath(), Ce(n, t[0], t[0], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(224.048583984375 * e, 56.6805419921875 * e), n.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e), n.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e), n.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e), n.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e), n.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e), n.closePath(), Ce(n, t[0], t[0], 6 * e), n.save(), n.translate(183.548583984375 * e, 119.6805419921875 * e), ge(n, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e), n.restore(), Ce(n, t[0], t[0], 6 * e), n.save(), n.translate(183.048583984375 * e, 155.6805419921875 * e), ge(n, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e), n.restore(), Ce(n, t[0], t[0], 6 * e), n.save(), n.translate(183.048583984375 * e, 205.1805419921875 * e), ge(n, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e), n.restore(), Ce(n, t[0], t[0], 6 * e), n.save(), n.translate(185.048583984375 * e, 204.1805419921875 * e), ge(n, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e), n.restore(), Ce(n, t[0], t[0], 6 * e), Ne(n, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e), Ce(n, t[0], t[0], 6 * e), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(224.048583984375 * e, 56.6805419921875 * e), n.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e), n.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e), n.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e), n.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e), n.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.save(), n.translate(184.048583984375 * e, 69.1805419921875 * e), ge(n, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(185.048583984375 * e, 61.6805419921875 * e), n.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e), n.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e), n.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e), n.closePath(), Ce(n, t[1], t[2], 6 * e), n.save(), n.translate(183.548583984375 * e, 119.6805419921875 * e), ge(n, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e), n.restore(), Ce(n, t[5], t[4], 6 * e), n.save(), n.translate(183.048583984375 * e, 155.6805419921875 * e), ge(n, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e), n.restore(), Ce(n, t[3], t[4], 6 * e), n.save(), n.translate(183.048583984375 * e, 205.1805419921875 * e), ge(n, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e), n.restore(), Ce(n, t[6], t[4], 6 * e), n.globalCompositeOperation = "destination-out", n.save(), n.translate(185.048583984375 * e, 204.1805419921875 * e), ge(n, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e), n.restore(), Ce(n, t[7], t[8], 6 * e), n.globalCompositeOperation = "source-over", n.globalAlpha = .5, n.save(), n.translate(185.048583984375 * e, 204.1805419921875 * e), ge(n, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e), n.restore(), Ce(n, t[7], t[8], 6 * e), n.globalAlpha = 1, n.save(), Ne(n, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e), Ce(n, t[3], t[4], 6 * e), n.restore(), r
    }

    function Ji(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 220 * e, r.height = 180 * e, n.globalAlpha = i ? .5 : 1, n.translate(-90 * e, -150 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(104 * e, 237.8000030517578 * e), n.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e), n.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e), n.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e), n.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e), n.closePath(), Ce(n, t[5], t[5], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 211.20000457763672 * e), n.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e), n.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e), n.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e), n.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e), n.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e), n.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e), n.closePath(), Ce(n, t[5], t[5], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(120 * e, 207 * e), n.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e), n.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e), n.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e), n.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e), n.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(284 * e, 238 * e), n.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e), n.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e), n.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(283 * e, 211 * e), n.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e), n.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e), n.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e), n.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e), n.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(280 * e, 206 * e), n.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e), n.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e), n.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e), n.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e), n.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(138 * e, 298.40000915527344 * e), n.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e), n.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e), n.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e), n.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e), n.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e), n.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 177.5999984741211 * e), n.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e), n.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e), n.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e), n.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e), n.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e), n.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e), n.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e), n.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e), n.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e), n.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e), n.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e), n.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e), n.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e), n.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e), n.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e), n.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e), n.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 175.5999984741211 * e), n.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e), n.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e), n.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e), n.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e), n.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e), n.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e), n.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e), n.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e), n.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e), n.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e), n.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e), n.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(198 * e, 161.4000015258789 * e), n.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e), n.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e), n.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 194 * e), n.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e), n.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e), n.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157 * e, 188.80000019073486 * e), n.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e), n.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e), n.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e), n.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e), n.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(156 * e, 188 * e), n.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e), n.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e), n.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e), n.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 189 * e), n.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e), n.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e), n.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e), n.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131 * e, 262 * e), n.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e), n.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e), n.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e), n.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e), n.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e), n.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e), n.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e), n.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e), n.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e), n.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e), n.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e), n.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e), n.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e), n.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e), n.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e), n.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e), n.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e), n.closePath(), Ce(n, t[4], t[4], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130 * e, 264 * e), n.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e), n.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e), n.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e), n.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e), n.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e), n.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(140 * e, 265.33333587646484 * e), n.bezierCurveTo(141 * e, 250.33333587646484 * e, 148 * e, 244.33333587646484 * e, 160 * e, 241.33333587646484 * e), n.bezierCurveTo(200 * e, 241.33333587646484 * e, 200 * e, 241.33333587646484 * e, 240 * e, 241.33333587646484 * e), n.bezierCurveTo(256 * e, 243.33333587646484 * e, 260 * e, 255.33333587646484 * e, 260 * e, 265.33333587646484 * e), n.bezierCurveTo(261 * e, 281.33333587646484 * e, 247 * e, 289.33333587646484 * e, 240 * e, 289.33333587646484 * e), n.bezierCurveTo(161 * e, 289.33333587646484 * e, 200.5 * e, 289.33333587646484 * e, 161 * e, 289.33333587646484 * e), n.bezierCurveTo(149 * e, 288.33333587646484 * e, 142 * e, 278.33333587646484 * e, 140 * e, 266.33333587646484 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.globalAlpha = .5, n.scale(1, 1), n.translate(105 * e, 155 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59.27557373046875 * e, 20.406280517578125 * e), n.bezierCurveTo(74.27557373046875 * e, 5.406280517578125 * e, 90.27557373046875 * e, 6.406280517578125 * e, 99.27557373046875 * e, 5.406280517578125 * e), n.bezierCurveTo(120.27557373046875 * e, 5.406280517578125 * e, 126.27557373046875 * e, 10.406280517578125 * e, 136.27557373046875 * e, 20.406280517578125 * e), n.bezierCurveTo(157.77557373046875 * e, 37.906280517578125 * e, 157.77557373046875 * e, 37.906280517578125 * e, 179.27557373046875 * e, 55.406280517578125 * e), n.bezierCurveTo(190.27557373046875 * e, 63.406280517578125 * e, 192.27557373046875 * e, 77.40628051757812 * e, 189.27557373046875 * e, 91.40628051757812 * e), n.bezierCurveTo(183.27557373046875 * e, 108.40628051757812 * e, 176.27557373046875 * e, 110.40628051757812 * e, 169.27557373046875 * e, 118.40628051757812 * e), n.bezierCurveTo(152.27557373046875 * e, 133.40628051757812 * e, 152.27557373046875 * e, 133.40628051757812 * e, 135.27557373046875 * e, 148.40628051757812 * e), n.bezierCurveTo(87.27557373046875 * e, 143.40628051757812 * e, 87.27557373046875 * e, 143.40628051757812 * e, 39.27557373046875 * e, 138.40628051757812 * e), n.bezierCurveTo(26.77557373046875 * e, 123.40628051757812 * e, 26.77557373046875 * e, 123.40628051757812 * e, 14.27557373046875 * e, 108.40628051757812 * e), n.bezierCurveTo(2.27557373046875 * e, 95.40628051757812 * e, 2.27557373046875 * e, 92.40628051757812 * e, 3.27557373046875 * e, 83.40628051757812 * e), n.bezierCurveTo(4.27557373046875 * e, 63.406280517578125 * e, 12.27557373046875 * e, 60.406280517578125 * e, 24.27557373046875 * e, 40.406280517578125 * e), n.closePath(), Ce(n, t[5], t[5], 4 * e), n.globalAlpha = 1, n.translate(-110 * e, -155 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(104 * e, 237.8000030517578 * e), n.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e), n.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e), n.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e), n.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 211.20000457763672 * e), n.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e), n.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e), n.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e), n.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e), n.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e), n.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(120 * e, 207 * e), n.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e), n.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e), n.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e), n.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e), n.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(284 * e, 238 * e), n.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e), n.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e), n.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(283 * e, 211 * e), n.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e), n.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e), n.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e), n.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e), n.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(280 * e, 206 * e), n.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e), n.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e), n.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e), n.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e), n.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(138 * e, 298.40000915527344 * e), n.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e), n.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e), n.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e), n.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e), n.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e), n.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 177.5999984741211 * e), n.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e), n.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e), n.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e), n.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e), n.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e), n.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e), n.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e), n.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e), n.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e), n.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e), n.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e), n.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e), n.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e), n.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e), n.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e), n.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e), n.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e), n.closePath(), Ce(n, t[2], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 175.5999984741211 * e), n.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e), n.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e), n.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e), n.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e), n.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e), n.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e), n.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e), n.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e), n.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e), n.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e), n.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e), n.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e), n.closePath(), Ce(n, void 0, t[3], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(198 * e, 161.4000015258789 * e), n.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e), n.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e), n.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(161 * e, 194 * e), n.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e), n.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e), n.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157 * e, 188.80000019073486 * e), n.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e), n.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e), n.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e), n.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e), n.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e), n.closePath(), Ce(n, t[0], t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(156 * e, 188 * e), n.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e), n.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e), n.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e), n.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e), n.closePath(), Ce(n, void 0, t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 189 * e), n.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e), n.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e), n.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e), n.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e), n.closePath(), Ce(n, void 0, t[1], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131 * e, 262 * e), n.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e), n.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e), n.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e), n.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e), n.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e), n.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e), n.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e), n.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e), n.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e), n.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e), n.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e), n.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e), n.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e), n.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e), n.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e), n.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e), n.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e), n.closePath(), Ce(n, t[0], t[0], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130 * e, 264 * e), n.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e), n.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e), n.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e), n.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e), n.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e), n.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e), n.closePath(), Ce(n, void 0, t[1], 2 * e), r
    }

    function Xi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(96.5 * e, 277.34375 * e), n.bezierCurveTo(197.5 * e, 259.84375 * e, 197.5 * e, 259.84375 * e, 298.5 * e, 242.34375 * e), n.bezierCurveTo(311.5 * e, 231.34375 * e, 307.5 * e, 168.34375 * e, 298.5 * e, 150.34375 * e), n.bezierCurveTo(198 * e, 170.34375 * e, 198 * e, 170.34375 * e, 97.5 * e, 190.34375 * e), n.closePath(), Ce(n, t[1], t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98.5 * e, 214.34375 * e), n.bezierCurveTo(199 * e, 196.34375 * e, 199 * e, 196.34375 * e, 299.5 * e, 178.34375 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98.5 * e, 247.34375 * e), n.bezierCurveTo(201.5 * e, 229.34375 * e, 201.5 * e, 229.34375 * e, 304.5 * e, 211.34375 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(97.5 * e, 189.34375 * e), n.bezierCurveTo(97 * e, 199.84375 * e, 97 * e, 199.84375 * e, 96.5 * e, 210.34375 * e), n.bezierCurveTo(110.5 * e, 204.34375 * e, 110.5 * e, 204.34375 * e, 124.5 * e, 198.34375 * e), n.bezierCurveTo(137.5 * e, 203.84375 * e, 137.5 * e, 203.84375 * e, 150.5 * e, 209.34375 * e), n.bezierCurveTo(172 * e, 197.84375 * e, 172 * e, 197.84375 * e, 193.5 * e, 186.34375 * e), n.bezierCurveTo(211.5 * e, 189.84375 * e, 211.5 * e, 189.84375 * e, 229.5 * e, 193.34375 * e), n.bezierCurveTo(240.5 * e, 193.34375 * e, 240.5 * e, 193.34375 * e, 251.5 * e, 193.34375 * e), n.bezierCurveTo(261 * e, 182.84375 * e, 261 * e, 182.84375 * e, 270.5 * e, 172.34375 * e), n.bezierCurveTo(287.5 * e, 169.34375 * e, 287.5 * e, 169.34375 * e, 304.5 * e, 166.34375 * e), n.bezierCurveTo(304.5 * e, 156.34375 * e, 300.5 * e, 145.34375 * e, 298.5 * e, 147.34375 * e), n.closePath(), Ce(n, t[3], t[4], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(300.5 * e, 147.34375 * e), n.bezierCurveTo(293.5 * e, 121.34375 * e, 278.5 * e, 106.34375 * e, 256.5 * e, 101.34375 * e), n.bezierCurveTo(176.5 * e, 145.34375 * e, 176.5 * e, 145.34375 * e, 96.5 * e, 189.34375 * e), n.closePath(), Ce(n, t[5], t[6], 12 * e), Ne(n, 252.5 * e, 129.34375 * e, 18.027756377319946 * e), Ce(n, t[7]), Ne(n, 248.5 * e, 121.34375 * e, 8.246211251235321 * e), Ce(n, t[8]), r
    }

    function qi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.globalAlpha = i ? .5 : 1, n.translate(10 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100.5 * e, 126.34375 * e), n.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e), n.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(106.5 * e, 131.34375 * e), n.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e), n.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157.5 * e, 137.34375 * e), n.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e), n.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e), n.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e), n.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(196.5 * e, 151.34375 * e), n.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e), n.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e), n.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(154.5 * e, 222.34375 * e), n.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e), n.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e), n.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(279.5 * e, 294.34375 * e), n.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e), n.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e), n.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(-10 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100.5 * e, 126.34375 * e), n.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e), n.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e), n.closePath(), Ce(n, t[1], t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(106.5 * e, 131.34375 * e), n.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e), n.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157.5 * e, 137.34375 * e), n.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e), n.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e), n.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e), n.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e), n.closePath(), Ce(n, t[4]), Ne(n, 125.5 * e, 140.34375 * e, 11.180339887498949 * e), Ce(n, t[5]), Ne(n, 122.5 * e, 135.34375 * e, 5.0990195135927845 * e), Ce(n, t[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(196.5 * e, 151.34375 * e), n.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e), n.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e), n.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e), n.closePath(), Ce(n, t[7], t[8], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(154.5 * e, 222.34375 * e), n.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e), n.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e), n.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e), n.closePath(), Ce(n, t[7], t[8], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(279.5 * e, 294.34375 * e), n.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e), n.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e), n.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e), n.closePath(), Ce(n, t[7], t[8], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(296.5 * e, 287.34375 * e), n.bezierCurveTo(311.5 * e, 291.34375 * e, 311.5 * e, 291.34375 * e, 326.5 * e, 295.34375 * e), n.closePath(), Ce(n, void 0, t[9], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(294.5 * e, 289.34375 * e), n.bezierCurveTo(308.5 * e, 297.34375 * e, 308.5 * e, 297.34375 * e, 322.5 * e, 305.34375 * e), n.closePath(), Ce(n, void 0, t[9], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(294.5 * e, 291.34375 * e), n.bezierCurveTo(304 * e, 303.34375 * e, 304 * e, 303.34375 * e, 313.5 * e, 315.34375 * e), n.closePath(), Ce(n, void 0, t[9], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(226.5 * e, 161.34375 * e), n.bezierCurveTo(230.5 * e, 160.34375 * e, 236.5 * e, 158.34375 * e, 238.5 * e, 161.34375 * e), n.bezierCurveTo(238.5 * e, 157.34375 * e, 228.5 * e, 159.34375 * e, 227.5 * e, 161.34375 * e), n.closePath(), Ce(n, void 0, t[9], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(167.5 * e, 248.34375 * e), n.bezierCurveTo(165.5 * e, 251.34375 * e, 168.5 * e, 256.34375 * e, 168.5 * e, 253.34375 * e), n.bezierCurveTo(166.5 * e, 252.34375 * e, 168.5 * e, 246.34375 * e, 166.5 * e, 247.34375 * e), n.closePath(), Ce(n, void 0, t[9], 3 * e), r
    }

    function ji(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 309 * e, r.height = 287 * e, n.globalAlpha = i ? .5 : 1, n.translate(10 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34.5 * e, 38.53125 * e), n.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e), n.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e), n.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e), n.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e), n.closePath(), Ce(n, t[0], t[0], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(143.5 * e, 74.53125 * e), n.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e), n.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e), n.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e), n.closePath(), Ce(n, t[0], t[0], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.5 * e, 142.53125 * e), n.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e), n.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e), n.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e), n.closePath(), Ce(n, t[0], t[0], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(236.5 * e, 189.53125 * e), n.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e), n.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e), n.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e), n.closePath(), Ce(n, t[0], t[0], 10 * e), n.globalAlpha = 1, n.translate(-10 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34.5 * e, 38.53125 * e), n.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e), n.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e), n.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e), n.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(143.5 * e, 74.53125 * e), n.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e), n.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e), n.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.5 * e, 142.53125 * e), n.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e), n.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e), n.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(236.5 * e, 189.53125 * e), n.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e), n.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e), n.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(109.5 * e, 51.53125 * e), n.bezierCurveTo(107.5 * e, 92.53125 * e, 91.5 * e, 95.53125 * e, 59.5 * e, 101.53125 * e), Ce(n, t[1], t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 51.53125 * e), n.bezierCurveTo(71 * e, 64.53125 * e, 69.5 * e, 76.53125 * e, 69.5 * e, 77.53125 * e), n.closePath(), Ce(n, t[1], t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84.5 * e, 63.53125 * e), n.bezierCurveTo(70.5 * e, 65.03125 * e, 70.5 * e, 65.03125 * e, 56.5 * e, 66.53125 * e), n.closePath(), Ce(n, t[1], t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(125.5 * e, 84.53125 * e), n.bezierCurveTo(125.5 * e, 110.03125 * e, 125.5 * e, 110.03125 * e, 125.5 * e, 135.53125 * e), n.closePath(), Ce(n, t[1], t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(149.5 * e, 108.53125 * e), n.bezierCurveTo(150 * e, 137.03125 * e, 150 * e, 137.03125 * e, 150.5 * e, 165.53125 * e), n.closePath(), Ce(n, t[1], t[2], 7 * e), r
    }

    function Zi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 130 * e,
            o = 142 * e,
            s = a / 2,
            _ = o / 2;
        return r.width = a, r.height = o, n.translate(s, _ + 7 * e), n.globalAlpha = i ? .5 : 1, Ne(n, 0, 0, 60 * e), Ce(n, t[0]), n.translate(0, -7 * e), n.globalAlpha = 1, Ne(n, 0, 0, 60 * e), Ce(n, t[1], t[2], 4 * e), Ne(n, 0, 0, 40 * e), Ce(n, t[3]), Ne(n, 0, 0, 25 * e), Ce(n, t[4], t[5], 8 * e), r
    }

    function Qi(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 130 * e, r.height = 142 * e, n.globalAlpha = i ? .5 : 1, n.save(), n.translate(65 * e, 80 * e), n.rotate(.2), be(n, 9, 60 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.save(), n.translate(65 * e, 71 * e), n.rotate(.2), be(n, 9, 60 * e, 10 * e), Ce(n, t[1], t[2], 4), n.rotate(-.32), be(n, 9, 38 * e, 10 * e), Ce(n, t[3], t[4], 4), n.rotate(.68), be(n, 9, 20 * e, 8 * e), Ce(n, t[5], t[6], 6), n.restore(), r
    }

    function $i(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 372 * e, t.height = 375 * e, r.globalAlpha = .5, r.translate(15 * e, 15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(313.0000305175781 * e, 76.58523559570312 * e), r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e), r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e), r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e), r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e), r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e), r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e), r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e), r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e), r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e), r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e), r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e), r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e), r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e), r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e), r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e), r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e), r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e), r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e), r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e), r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e), r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e), r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e), r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e), r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e), r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e), r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e), r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e), r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e), r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e), r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e), r.closePath(), Ce(r, i[0]), r.globalAlpha = 1, r.translate(-15 * e, -15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(313.0000305175781 * e, 76.58523559570312 * e), r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e), r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e), r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e), r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e), r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e), r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e), r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e), r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e), r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e), r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e), r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e), r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e), r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e), r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e), r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e), r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e), r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e), r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e), r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e), r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e), r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e), r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e), r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e), r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e), r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e), r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e), r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e), r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e), r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e), r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e), r.closePath(), Ce(r, i[1], i[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(186.00003051757812 * e, 192.94886779785156 * e), r.bezierCurveTo(185.00003051757812 * e, 66.94886779785156 * e, 184.50003051757812 * e, 104.94886779785156 * e, 183.00003051757812 * e, 16.948867797851562 * e), r.bezierCurveTo(216.00003051757812 * e, 47.94886779785156 * e, 219.00003051757812 * e, 80.94886779785156 * e, 218.00003051757812 * e, 113.94886779785156 * e), r.bezierCurveTo(209.00003051757812 * e, 165.94886779785156 * e, 200.00003051757812 * e, 176.94886779785156 * e, 189.00003051757812 * e, 192.94886779785156 * e), r.closePath(), Ce(r, i[3], i[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(190.00003051757812 * e, 191.94886779785156 * e), r.bezierCurveTo(207.00003051757812 * e, 348.94886779785156 * e, 205.00003051757812 * e, 323.94886779785156 * e, 209.00003051757812 * e, 358.94886779785156 * e), r.bezierCurveTo(171.00003051757812 * e, 334.94886779785156 * e, 167.00003051757812 * e, 302.94886779785156 * e, 161.00003051757812 * e, 268.94886779785156 * e), r.bezierCurveTo(160.00003051757812 * e, 218.94886779785156 * e, 181.00003051757812 * e, 191.94886779785156 * e, 189.00003051757812 * e, 186.94886779785156 * e), r.closePath(), Ce(r, i[3], i[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(194.00003051757812 * e, 195.94886779785156 * e), r.bezierCurveTo(116.00003051757812 * e, 150.94886779785156 * e, 116.00003051757812 * e, 150.94886779785156 * e, 38.000030517578125 * e, 105.94886779785156 * e), r.bezierCurveTo(67.00003051757812 * e, 90.94886779785156 * e, 96.00003051757812 * e, 99.94886779785156 * e, 123.00003051757812 * e, 111.94886779785156 * e), r.bezierCurveTo(183.00003051757812 * e, 152.94886779785156 * e, 179.00003051757812 * e, 180.94886779785156 * e, 193.00003051757812 * e, 194.94886779785156 * e), r.closePath(), Ce(r, i[3], i[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(189.00003051757812 * e, 190.94886779785156 * e), r.bezierCurveTo(250.00003051757812 * e, 133.94886779785156 * e, 311.0000305175781 * e, 78.94886779785156 * e, 311.0000305175781 * e, 76.94886779785156 * e), r.bezierCurveTo(306.0000305175781 * e, 127.94886779785156 * e, 283.0000305175781 * e, 148.94886779785156 * e, 261.0000305175781 * e, 166.94886779785156 * e), r.bezierCurveTo(220.00003051757812 * e, 197.94886779785156 * e, 191.00003051757812 * e, 194.94886779785156 * e, 189.00003051757812 * e, 195.94886779785156 * e), r.closePath(), Ce(r, i[3], i[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(189.00003051757812 * e, 194.94886779785156 * e), r.bezierCurveTo(268.5000305175781 * e, 211.94886779785156 * e, 268.5000305175781 * e, 211.94886779785156 * e, 348.0000305175781 * e, 228.94886779785156 * e), r.bezierCurveTo(316.0000305175781 * e, 247.94886779785156 * e, 298.0000305175781 * e, 256.94886779785156 * e, 250.00003051757812 * e, 246.94886779785156 * e), r.bezierCurveTo(197.00003051757812 * e, 229.94886779785156 * e, 189.00003051757812 * e, 202.94886779785156 * e, 188.00003051757812 * e, 199.94886779785156 * e), r.closePath(), Ce(r, i[3], i[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(192.00003051757812 * e, 191.94886779785156 * e), r.bezierCurveTo(116.50003051757812 * e, 238.44886779785156 * e, 116.50003051757812 * e, 238.44886779785156 * e, 41.000030517578125 * e, 284.94886779785156 * e), r.bezierCurveTo(49.000030517578125 * e, 252.94886779785156 * e, 56.000030517578125 * e, 242.94886779785156 * e, 80.00003051757812 * e, 215.94886779785156 * e), r.bezierCurveTo(125.00003051757812 * e, 181.94886779785156 * e, 174.00003051757812 * e, 183.94886779785156 * e, 192.00003051757812 * e, 191.94886779785156 * e), r.closePath(), Ce(r, i[3], i[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(313.0000305175781 * e, 76.58523559570312 * e), r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e), r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e), r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e), r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e), r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e), r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e), r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e), r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e), r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e), r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e), r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e), r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e), r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e), r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e), r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e), r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e), r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e), r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e), r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e), r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e), r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e), r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e), r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e), r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e), r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e), r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e), r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e), r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e), r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e), r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e), r.closePath(), Ce(r, void 0, i[2], 4 * e), t
    }

    function et(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 248 * e, r.height = 128 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(137 * e, 7 * e), n.bezierCurveTo(169 * e, 14 * e, 212 * e, 9 * e, 241 * e, 5 * e), n.bezierCurveTo(211 * e, 63 * e, 158 * e, 92 * e, 103 * e, 109 * e), n.bezierCurveTo(73 * e, 126 * e, 54 * e, 124 * e, 6 * e, 99 * e), n.bezierCurveTo(82 * e, 63 * e, 113 * e, 35 * e, 137 * e, 8 * e), n.closePath(), Ce(n, t[0], t[1], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(73 * e, 124 * e), n.bezierCurveTo(111 * e, 126 * e, 162 * e, 97 * e, 203 * e, 61 * e), n.bezierCurveTo(156 * e, 98 * e, 131 * e, 106 * e, 105 * e, 109 * e), n.bezierCurveTo(99 * e, 121 * e, 87 * e, 124 * e, 72 * e, 124 * e), n.closePath(), Ce(n, t[2], t[3], 1 * e), r
    }

    function it(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 130 * e, r.height = 148 * e, n.globalAlpha = i ? .5 : 1, n.save(), n.translate(65 * e, 85 * e), n.rotate(1.4), be(n, 7, 60 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.save(), n.translate(65 * e, 74 * e), n.rotate(1.4), be(n, 7, 60 * e, 10 * e), Ce(n, t[1], t[2], 4), n.rotate(.64), be(n, 7, 40 * e, 10 * e), Ce(n, t[3], t[4], 4), n.rotate(.12), be(n, 7, 23 * e, 5 * e), n.restore(), Ce(n, t[5]), r
    }

    function tt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 125 * e, r.height = 139 * e, n.globalAlpha = i ? .5 : 1, n.save(), n.translate(63 * e, 79 * e), n.rotate(1), be(n, 8, 60 * e, 10 * e), Ce(n, t[0]), n.restore(), n.globalAlpha = 1, n.save(), n.translate(63 * e, 69 * e), n.rotate(1), be(n, 8, 60 * e, 10 * e), Ce(n, t[1], t[2], 4), n.rotate(.56), be(n, 8, 40 * e, 10 * e), Ce(n, t[3], t[4], 4), n.rotate(.28), be(n, 8, 28 * e, 8 * e), Ce(n, t[5]), n.restore(), r
    }

    function rt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 90 * e, r.height = 101 * e, n.translate(0 * e, 5 * e), 0 === he && (n.globalAlpha = i ? .5 : 1, Ne(n, 44 * e, 55 * e, 41 * e), Ce(n, t[0])), n.globalAlpha = 1, Ne(n, 44 * e, 45 * e, 41 * e), Ce(n, t[1], t[2], 4 * e), Ne(n, 44 * e, 45 * e, 31 * e), Ce(n, t[3]), n.save(), n.translate(45 * e, 45 * e), ge(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), ge(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), Ne(n, 45 * e, 29 * e, 7 * e), Ce(n, t[5]), Ne(n, 45 * e, 61 * e, 7 * e), Ce(n, t[5]), Ne(n, 28 * e, 45 * e, 7 * e), Ce(n, t[5]), Ne(n, 62 * e, 45 * e, 7 * e), Ce(n, t[5]), r
    }

    function nt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 90 * e, r.height = 98 * e, n.translate(0, 4 * e), 0 === he && (n.globalAlpha = i ? .5 : 1, n.save(), n.translate(44 * e, 50 * e), n.rotate(1.4), be(n, 7, 41 * e, 10 * e), n.restore(), Ce(n, t[0])), n.globalAlpha = 1, n.save(), n.translate(44 * e, 44 * e), n.rotate(1.4), be(n, 7, 41 * e, 10 * e), Ce(n, t[1], t[2], 4 * e), be(n, 7, 35 * e, 10 * e), Ce(n, t[3], t[4], 4 * e), be(n, 7, 23 * e, 5 * e), n.restore(), Ce(n, t[5]), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), ge(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), ge(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), Ne(n, 45 * e, 29 * e, 7 * e), Ce(n, t[5]), Ne(n, 45 * e, 61 * e, 7 * e), Ce(n, t[5]), Ne(n, 28 * e, 45 * e, 7 * e), Ce(n, t[5]), Ne(n, 62 * e, 45 * e, 7 * e), Ce(n, t[5]), r
    }

    function at(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 90 * e, r.height = 98 * e, n.translate(0, 4 * e), 0 === he && (n.globalAlpha = i ? .5 : 1, n.save(), n.translate(44 * e, 50 * e), n.rotate(1), be(n, 8, 41 * e, 10 * e), Ce(n, t[0]), n.restore()), n.globalAlpha = 1, n.save(), n.translate(44 * e, 44 * e), n.rotate(1), be(n, 8, 41 * e, 10 * e), Ce(n, t[1], t[2], 4 * e), n.rotate(.56), be(n, 8, 33 * e, 10 * e), Ce(n, t[3], t[4], 4 * e), n.rotate(.28), be(n, 8, 24 * e, 8 * e), Ce(n, t[5]), n.restore(), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), ge(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), ge(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), Ne(n, 45 * e, 29 * e, 7 * e), Ce(n, t[5]), Ne(n, 45 * e, 61 * e, 7 * e), Ce(n, t[5]), Ne(n, 28 * e, 45 * e, 7 * e), Ce(n, t[5]), Ne(n, 62 * e, 45 * e, 7 * e), Ce(n, t[5]), r
    }

    function ot(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 300 * e, r.height = 300 * e, n.globalAlpha = i ? .5 : 1, n.save(), n.translate(150 * e, 160 * e), n.rotate(6.28), be(n, 6, 146 * e, 30 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.save(), n.translate(150 * e, 150 * e), n.rotate(6.28), be(n, 6, 146 * e, 30 * e), n.restore(), Ce(n, t[1], t[2], 8 * e), n.save(), n.translate(150 * e, 150 * e), n.rotate(0), be(n, 6, 105 * e, 30 * e), n.restore(), Ce(n, t[3], t[3], 8 * e), n.save(), n.translate(150 * e, 150 * e), n.rotate(0), be(n, 6, 66 * e, 30 * e), n.restore(), Ce(n, t[4], t[2], 8 * e), n.save(), n.translate(150 * e, 150 * e), n.rotate(0), be(n, 6, 31 * e, 30 * e), n.restore(), Ce(n, t[5], t[6], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(150 * e, 207 * e), n.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 100 * e), n.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(183 * e, 100 * e), n.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), r
    }

    function st(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 300 * e, r.height = 300 * e, n.globalAlpha = i ? .5 : 1, n.save(), n.translate(150 * e, 160 * e), n.rotate(6.28), be(n, 6, 146 * e, 30 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.save(), n.translate(150 * e, 150 * e), n.rotate(6.28), be(n, 6, 146 * e, 30 * e), n.restore(), Ce(n, t[1], t[2], 8 * e), n.save(), n.translate(150 * e, 150 * e), n.rotate(0), be(n, 6, 105 * e, 30 * e), n.restore(), Ce(n, t[3], t[3], 8 * e), n.save(), n.translate(150 * e, 150 * e), n.rotate(0), be(n, 6, 66 * e, 30 * e), n.restore(), Ce(n, t[4], t[2], 8 * e), n.save(), n.translate(131 * e, 116 * e), be(n, 7, 17 * e, 8 * e), n.restore(), Ce(n, t[6]), n.save(), n.translate(163 * e, 168 * e), be(n, 7, 25 * e, 8 * e), n.restore(), Ce(n, t[6]), n.save(), n.translate(117 * e, 151 * e), be(n, 7, 11 * e, 8 * e), n.restore(), Ce(n, t[6]), n.save(), n.translate(167 * e, 122 * e), be(n, 7, 12 * e, 8 * e), n.restore(), Ce(n, t[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(150 * e, 207 * e), n.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 100 * e), n.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(183 * e, 100 * e), n.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), r
    }

    function _t(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 90 * e, r.height = 98 * e, n.translate(0, 4 * e), 0 === he && (n.globalAlpha = i ? .5 : 1, n.save(), n.translate(44 * e, 50 * e), n.rotate(.2), be(n, 9, 41 * e, 10 * e), n.restore(), Ce(n, t[0])), n.globalAlpha = 1, n.save(), n.translate(44 * e, 44 * e), n.rotate(.2), be(n, 9, 41 * e, 10 * e), Ce(n, t[1], t[2], 4 * e), n.rotate(-.32), be(n, 9, 32 * e, 10 * e), Ce(n, t[3], t[4], 4 * e), n.rotate(.68), be(n, 9, 23 * e, 8 * e), Ce(n, t[5], t[6], 6 * e), n.restore(), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), ge(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), ge(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), Ce(n, t[4], t[4], 2 * e), Ne(n, 45 * e, 29 * e, 7 * e), Ce(n, t[5]), Ne(n, 45 * e, 61 * e, 7 * e), Ce(n, t[5]), Ne(n, 28 * e, 45 * e, 7 * e), Ce(n, t[5]), Ne(n, 62 * e, 45 * e, 7 * e), Ce(n, t[5]), r
    }

    function Et(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 135 * e, r.height = 120 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(3.5 * e, 55.25 * e), n.bezierCurveTo(3.5 * e, 114.25 * e, 2.5 * e, 109.25 * e, 3.5 * e, 112.25 * e), n.bezierCurveTo(5.5 * e, 119.25 * e, 8.5 * e, 119.25 * e, 11.5 * e, 119.25 * e), n.bezierCurveTo(15.5 * e, 114.25 * e, 13.5 * e, 95.25 * e, 14.5 * e, 82.25 * e), n.closePath(), Ce(n, t[0], t[1], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(6.5 * e, 43.25 * e), n.bezierCurveTo(3.5 * e, 27.25 * e, 7.5 * e, 20.25 * e, 25.5 * e, 11.25 * e), n.bezierCurveTo(45.5 * e, -.75 * e, 73.5 * e, 1.25 * e, 107.5 * e, 10.25 * e), n.bezierCurveTo(131.5 * e, 21.25 * e, 125.5 * e, 34.25 * e, 125.5 * e, 36.25 * e), n.closePath(), Ce(n, t[0], t[1], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(120.5 * e, 62.25 * e), n.bezierCurveTo(121.5 * e, 95.25 * e, 120.5 * e, 80.25 * e, 120.5 * e, 100.25 * e), n.bezierCurveTo(118.5 * e, 119.25 * e, 123.5 * e, 118.25 * e, 129.5 * e, 113.25 * e), n.bezierCurveTo(133.5 * e, 107.25 * e, 130.5 * e, 97.25 * e, 130.5 * e, 87.25 * e), n.bezierCurveTo(129.5 * e, 56.25 * e, 130 * e, 70.75 * e, 129.5 * e, 54.25 * e), n.closePath(), Ce(n, t[0], t[1], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(17.5 * e, 27 * e), n.bezierCurveTo(48.5 * e, 5 * e, 93.5 * e, 14 * e, 118.5 * e, 26 * e), n.bezierCurveTo(132.5 * e, 35 * e, 133.5 * e, 52 * e, 132.5 * e, 68 * e), n.bezierCurveTo(125.5 * e, 87 * e, 116.5 * e, 84 * e, 96.5 * e, 75 * e), n.bezierCurveTo(60.5 * e, 66 * e, 52.5 * e, 74 * e, 37.5 * e, 78 * e), n.bezierCurveTo(2.5 * e, 86 * e, 3.5 * e, 78 * e, 1.5 * e, 61 * e), n.bezierCurveTo(1.5 * e, 37 * e, 9.5 * e, 32 * e, 15.5 * e, 28 * e), n.closePath(), Ce(n, t[2], t[3], 7 * e), r
    }

    function Tt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 501 * e, r.height = 309 * e, n.translate(0, 6 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(126 * e, 184 * e), n.bezierCurveTo(169 * e, 196 * e, 194 * e, 198 * e, 227 * e, 198 * e), n.bezierCurveTo(235 * e, 222 * e, 236 * e, 223 * e, 241 * e, 226 * e), n.bezierCurveTo(245 * e, 228 * e, 257 * e, 228 * e, 263 * e, 226 * e), n.bezierCurveTo(267 * e, 225 * e, 270 * e, 211 * e, 275 * e, 198 * e), n.bezierCurveTo(332 * e, 194 * e, 347 * e, 192 * e, 372 * e, 188 * e), n.bezierCurveTo(366 * e, 174.5 * e, 366 * e, 174.5 * e, 360 * e, 161 * e), n.bezierCurveTo(253.5 * e, 162 * e, 253.5 * e, 162 * e, 147 * e, 163 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 116 * e), n.bezierCurveTo(90 * e, 101 * e, 96 * e, 89 * e, 106 * e, 83 * e), n.bezierCurveTo(86 * e, 79 * e, 86 * e, 52 * e, 93 * e, 38 * e), n.bezierCurveTo(99 * e, 51 * e, 107 * e, 57 * e, 122 * e, 63 * e), n.bezierCurveTo(130 * e, 53 * e, 141 * e, 46 * e, 161 * e, 46 * e), n.bezierCurveTo(157 * e, 31 * e, 158 * e, 20 * e, 169 * e, 6 * e), n.bezierCurveTo(171 * e, 24 * e, 186 * e, 33 * e, 198 * e, 45 * e), n.bezierCurveTo(252 * e, 45 * e, 252 * e, 45 * e, 306 * e, 45 * e), n.bezierCurveTo(323 * e, 33 * e, 332 * e, 21 * e, 335 * e, 7 * e), n.bezierCurveTo(349 * e, 21 * e, 347 * e, 36 * e, 345 * e, 46 * e), n.bezierCurveTo(364 * e, 46 * e, 369 * e, 48 * e, 377 * e, 63 * e), n.bezierCurveTo(398 * e, 58 * e, 403 * e, 49 * e, 409 * e, 40 * e), n.bezierCurveTo(419 * e, 57 * e, 411 * e, 79 * e, 398 * e, 85 * e), n.bezierCurveTo(405 * e, 100 * e, 405 * e, 106 * e, 401 * e, 118 * e), n.bezierCurveTo(332.5 * e, 128.5 * e, 332.5 * e, 128.5 * e, 264 * e, 139 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(122 * e, 191 * e), n.bezierCurveTo(123 * e, 237 * e, 135 * e, 245 * e, 153 * e, 259 * e), n.bezierCurveTo(167 * e, 269 * e, 158 * e, 281 * e, 118 * e, 276 * e), n.bezierCurveTo(104 * e, 273 * e, 98 * e, 268 * e, 93 * e, 242 * e), n.bezierCurveTo(89 * e, 220 * e, 92 * e, 201 * e, 102 * e, 179 * e), n.closePath(), Ce(n, t[3], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(403 * e, 182 * e), n.bezierCurveTo(414 * e, 215 * e, 412 * e, 232 * e, 403 * e, 260 * e), n.bezierCurveTo(395 * e, 274 * e, 375 * e, 272 * e, 356 * e, 270 * e), n.bezierCurveTo(345 * e, 268 * e, 339 * e, 262 * e, 354 * e, 252 * e), n.bezierCurveTo(370 * e, 242 * e, 380 * e, 225 * e, 384 * e, 184 * e), n.closePath(), Ce(n, t[3], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(155 * e, 157 * e), n.bezierCurveTo(146 * e, 189 * e, 137 * e, 198 * e, 114 * e, 219 * e), n.bezierCurveTo(104 * e, 212 * e, 98 * e, 203 * e, 89 * e, 189 * e), n.bezierCurveTo(82 * e, 178 * e, 91 * e, 164 * e, 93 * e, 136 * e), n.closePath(), Ce(n, t[4], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(347 * e, 162 * e), n.bezierCurveTo(357 * e, 195 * e, 376 * e, 209 * e, 387 * e, 217 * e), n.bezierCurveTo(409 * e, 201 * e, 420 * e, 181 * e, 416 * e, 166 * e), n.bezierCurveTo(410 * e, 150 * e, 412 * e, 149 * e, 408 * e, 130 * e), n.closePath(), Ce(n, t[4], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(86 * e, 134 * e), n.bezierCurveTo(79 * e, 102 * e, 92 * e, 84 * e, 108 * e, 92 * e), n.bezierCurveTo(149 * e, 108 * e, 184 * e, 111 * e, 242 * e, 111 * e), n.bezierCurveTo(294 * e, 108 * e, 341 * e, 105 * e, 386 * e, 98 * e), n.bezierCurveTo(412 * e, 91 * e, 417 * e, 86 * e, 415 * e, 133 * e), n.bezierCurveTo(413 * e, 160 * e, 413 * e, 160 * e, 368 * e, 174 * e), n.bezierCurveTo(308 * e, 184 * e, 291 * e, 185 * e, 270 * e, 186 * e), n.bezierCurveTo(264 * e, 206 * e, 262 * e, 215 * e, 253 * e, 215 * e), n.bezierCurveTo(239 * e, 217 * e, 239 * e, 211 * e, 231 * e, 186 * e), n.bezierCurveTo(178 * e, 184 * e, 156 * e, 179 * e, 112 * e, 162 * e), n.bezierCurveTo(87 * e, 151 * e, 90 * e, 144 * e, 87 * e, 137 * e), n.closePath(), Ce(n, t[4], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(63 * e, 98 * e), n.bezierCurveTo(84 * e, 121 * e, 109 * e, 102 * e, 124 * e, 117 * e), n.bezierCurveTo(138 * e, 136 * e, 123 * e, 165 * e, 94 * e, 150 * e), n.bezierCurveTo(66 * e, 131 * e, 64 * e, 115 * e, 63 * e, 99 * e), n.closePath(), Ce(n, t[3], t[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(449 * e, 97 * e), n.bezierCurveTo(446 * e, 143 * e, 415 * e, 151 * e, 402 * e, 155 * e), n.bezierCurveTo(386 * e, 157 * e, 373 * e, 133 * e, 391 * e, 116 * e), n.bezierCurveTo(402 * e, 106 * e, 432 * e, 124 * e, 449 * e, 97 * e), n.closePath(), Ce(n, t[3], t[2], 10 * e), r
    }

    function At(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 304 * e, r.height = 278 * e, n.translate(10 * e, 25 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(128 * e, 137 * e), n.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e), n.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e), n.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(284 * e, 52 * e), n.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e), n.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e), n.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e), n.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e), n.closePath(), Ce(n, t[0]), n.translate(-10 * e, -25 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(128 * e, 137 * e), n.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e), n.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e), n.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e), n.closePath(), Ce(n, t[1], t[2], 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(284 * e, 52 * e), n.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e), n.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e), n.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e), n.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e), n.closePath(), Ce(n, t[3], t[4], 15 * e), r
    }

    function dt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 175 * e, r.height = 169 * e, n.globalAlpha = .5, n.translate(0, 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(19 * e, 139 * e), n.bezierCurveTo(18 * e, 163 * e, 22 * e, 156 * e, 53 * e, 157 * e), n.bezierCurveTo(97.5 * e, 157 * e, 97.5 * e, 157 * e, 142 * e, 157 * e), n.bezierCurveTo(150 * e, 157 * e, 153 * e, 156 * e, 154 * e, 142 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -3 * e), n.save(), n.translate(86.5 * e, 81.5 * e), ge(n, -66.5 * e, -65.5 * e, 133 * e, 131 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), n.save(), n.translate(84.5 * e, 79 * e), ge(n, -50.5 * e, -49 * e, 101 * e, 98 * e, 10 * e), n.restore(), Ce(n, t[3], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42 * e, 54 * e), n.bezierCurveTo(37 * e, 48 * e, 39 * e, 44 * e, 38 * e, 41 * e), n.bezierCurveTo(42 * e, 40 * e, 45 * e, 40 * e, 50 * e, 41 * e), n.bezierCurveTo(85 * e, 36 * e, 98 * e, 37 * e, 116 * e, 42 * e), n.bezierCurveTo(132 * e, 39 * e, 132 * e, 39 * e, 133 * e, 56 * e), n.bezierCurveTo(136 * e, 73 * e, 136 * e, 84 * e, 132 * e, 106 * e), n.bezierCurveTo(47 * e, 113 * e, 85.5 * e, 106 * e, 39 * e, 106 * e), n.bezierCurveTo(32 * e, 81 * e, 38 * e, 60 * e, 42 * e, 55 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.save(), n.translate(28 * e, 24 * e), n.rotate(0), ge(n, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), n.save(), n.translate(143 * e, 23 * e), n.rotate(0), ge(n, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 80 * e), n.bezierCurveTo(73 * e, 78 * e, 84 * e, 74 * e, 100 * e, 64 * e), n.bezierCurveTo(111 * e, 57 * e, 125 * e, 67 * e, 108 * e, 84 * e), n.bezierCurveTo(96 * e, 95 * e, 86 * e, 96 * e, 70 * e, 88 * e), n.bezierCurveTo(62.5 * e, 84 * e, 62.5 * e, 84 * e, 55 * e, 80 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(17 * e, 112 * e), n.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e), n.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e), n.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e), n.closePath(), Ce(n, t[8], t[9], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(127 * e, 111 * e), n.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e), n.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e), n.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e), n.closePath(), Ce(n, t[9]), n.globalAlpha = .5, n.translate(0, 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(15 * e, 117 * e), n.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e), n.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e), n.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e), n.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(14 * e, 127 * e), n.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e), n.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e), n.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e), n.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e), n.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e), n.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e), n.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.save(), n.translate(27.5 * e, 138.5 * e), ge(n, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), n.save(), n.translate(143.5 * e, 137 * e), ge(n, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), r
    }

    function It(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 175 * e, r.height = 169 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(17 * e, 112 * e), n.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e), n.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e), n.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e), n.closePath(), Ce(n, t[8], t[9], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(127 * e, 111 * e), n.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e), n.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e), n.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e), n.closePath(), Ce(n, t[9]), n.globalAlpha = .5, n.translate(0, 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(15 * e, 117 * e), n.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e), n.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e), n.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e), n.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(14 * e, 127 * e), n.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e), n.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e), n.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e), n.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e), n.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e), n.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e), n.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.save(), n.translate(27.5 * e, 138.5 * e), ge(n, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), n.save(), n.translate(143.5 * e, 137 * e), ge(n, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), r
    }

    function ht(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 115 * e, r.height = 585 * e, n.scale(-1, 1), n.translate(-110 * e, 0), n.translate(10 * e, 10 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(51.5 * e, 342 * e), ge(n, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(54 * e, 83 * e), n.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e), n.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e), n.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(95 * e, 97 * e), n.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e), n.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e), n.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e), n.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 176 * e), n.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e), n.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(50 * e, 176 * e), n.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e), n.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 403 * e), n.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e), n.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e), n.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59 * e, 67 * e), n.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e), n.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e), n.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 125 * e), n.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e), n.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e), n.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e), n.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 171 * e), n.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e), n.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e), n.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60 * e, 68 * e), n.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e), n.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e), n.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e), n.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e), n.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(71 * e, 172 * e), n.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e), n.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e), n.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 151 * e), n.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e), n.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e), n.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e), n.closePath(), Ce(n, t[0]), n.translate(-10 * e, -10 * e), n.globalAlpha = 1, n.save(), n.translate(51.5 * e, 342 * e), ge(n, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e), n.restore(), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(54 * e, 83 * e), n.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e), n.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e), n.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(95 * e, 97 * e), n.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e), n.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e), n.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e), n.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e), n.closePath(), Ce(n, t[5], t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 403 * e), n.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e), n.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e), n.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(37 * e, 427 * e), n.bezierCurveTo(47 * e, 435 * e, 55 * e, 435 * e, 67 * e, 427 * e), Ce(n, void 0, t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 448 * e), n.bezierCurveTo(46 * e, 454 * e, 54 * e, 457 * e, 65 * e, 449 * e), Ce(n, void 0, t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 176 * e), n.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e), n.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(50 * e, 176 * e), n.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e), n.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59 * e, 67 * e), n.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e), n.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e), n.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 125 * e), n.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e), n.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e), n.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e), n.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 171 * e), n.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e), n.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e), n.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60 * e, 68 * e), n.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e), n.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e), n.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e), n.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e), n.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(71 * e, 172 * e), n.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e), n.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e), n.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 151 * e), n.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e), n.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e), n.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e), n.closePath(), Ce(n, t[7], t[8], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 113 * e), n.bezierCurveTo(65 * e, 140 * e, 75 * e, 166 * e, 52 * e, 169 * e), n.bezierCurveTo(29 * e, 168 * e, 41 * e, 143 * e, 53 * e, 112 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), r
    }

    function ut(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 81 * e, r.height = 626 * e, n.translate(20 * e, 20 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 565 * e), n.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e), n.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e), n.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e), n.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e), n.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e), n.closePath(), Ce(n, t[0]), n.translate(-20 * e, -20 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 565 * e), n.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e), n.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e), n.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e), n.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e), n.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27 * e, 129 * e), n.bezierCurveTo(32 * e, 135 * e, 48 * e, 136 * e, 53 * e, 129 * e), n.bezierCurveTo(56 * e, 97 * e, 53 * e, 82 * e, 52 * e, 64 * e), n.bezierCurveTo(49 * e, 33 * e, 44 * e, 27 * e, 41 * e, 21 * e), n.bezierCurveTo(31 * e, 40 * e, 28 * e, 84 * e, 27 * e, 127 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55 * e, 565 * e), n.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e), n.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e), n.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e), n.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e), n.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e), n.closePath(), Ce(n, void 0, t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 475 * e), n.bezierCurveTo(38 * e, 482 * e, 48 * e, 480 * e, 54 * e, 474 * e), n.bezierCurveTo(54 * e, 509.5 * e, 54 * e, 509.5 * e, 54 * e, 545 * e), n.bezierCurveTo(46 * e, 554 * e, 36 * e, 552 * e, 28 * e, 545 * e), n.closePath(), Ce(n, t[4], t[5], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 496 * e), n.bezierCurveTo(39 * e, 506 * e, 49 * e, 503 * e, 54 * e, 496 * e), Ce(n, void 0, t[5], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 521 * e), n.bezierCurveTo(41 * e, 529 * e, 49 * e, 524 * e, 54 * e, 520 * e), Ce(n, void 0, t[5], 8 * e), r
    }

    function Ot(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 100 * e, r.height = 648 * e, n.translate(20 * e, 20 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(50.5 * e, 349.5 * e), ge(n, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 538 * e), n.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e), n.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e), n.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e), n.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 554 * e), n.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 569 * e), n.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e), n.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e), n.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e), n.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 581 * e), n.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e), n.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e), n.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e), n.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 106 * e), n.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e), n.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e), n.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e), n.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(49 * e, 27 * e), n.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e), n.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e), n.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(49 * e, 43 * e), n.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 73 * e, 97 * e), n.bezierCurveTo(66 * e, 116 * e, 43 * e, 122 * e, 26 * e, 99 * e), n.closePath(), Ce(n, t[0]), n.translate(-20 * e, -20 * e), n.globalAlpha = 1, n.save(), n.translate(50.5 * e, 349.5 * e), ge(n, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 538 * e), n.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e), n.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e), n.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e), n.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 554 * e), n.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e), n.closePath(), Ce(n, void 0, t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 569 * e), n.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e), n.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e), n.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e), n.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e), n.closePath(), Ce(n, t[5], t[6], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 581 * e), n.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e), n.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e), n.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e), n.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e), n.closePath(), Ce(n, t[7]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 106 * e), n.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e), n.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e), n.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e), n.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e), n.closePath(), Ce(n, t[5], t[6], 8 * e), n.save(), n.translate(-46 * e, -50 * e), n.scale(2, 2), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(51 * e, 80 * e), n.bezierCurveTo(51 * e, 89.5 * e, 51 * e, 89.5 * e, 51 * e, 99 * e), n.bezierCurveTo(49 * e, 103 * e, 46 * e, 105 * e, 44 * e, 99 * e), n.bezierCurveTo(44 * e, 88.5 * e, 44 * e, 88.5 * e, 44 * e, 78 * e), n.closePath(), Ce(n, t[8]), n.restore(), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(49 * e, 27 * e), n.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e), n.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e), n.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e), n.closePath(), Ce(n, t[8], t[9], 8 * e), n.scale(2, 2), n.translate(-23 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(57 * e, 69 * e), n.bezierCurveTo(50 * e, 76 * e, 43 * e, 75 * e, 38 * e, 69 * e), n.bezierCurveTo(43 * e, 57 * e, 43 * e, 57 * e, 48 * e, 45 * e), n.closePath(), Ce(n, t[10]), r
    }

    function lt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 88 * e, r.height = 647 * e, n.translate(20 * e, 20 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(45 * e, 384.5 * e), ge(n, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27 * e, 572 * e), n.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e), n.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e), n.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e), n.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 587 * e), n.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e), n.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e), n.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 113 * e), n.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e), n.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e), n.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e), n.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 139 * e), n.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e), n.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e), n.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 29 * e), n.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e), n.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e), n.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e), n.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 54 * e), n.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e), n.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e), n.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e), n.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e), n.closePath(), Ce(n, t[0]), n.translate(-20 * e, -20 * e), n.globalAlpha = 1, n.save(), n.translate(45 * e, 384.5 * e), ge(n, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27 * e, 572 * e), n.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e), n.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e), n.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e), n.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 587 * e), n.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e), n.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e), n.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 113 * e), n.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e), n.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e), n.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e), n.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 139 * e), n.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e), n.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e), n.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 29 * e), n.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e), n.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e), n.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e), n.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e), n.closePath(), Ce(n, t[6], t[7], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 54 * e), n.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e), n.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e), n.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e), n.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e), n.closePath(), Ce(n, t[8]), r
    }

    function Rt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 106 * e, r.height = 681 * e, n.translate(20 * e, 20 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(52.5 * e, 395 * e), n.rotate(0), ge(n, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 588 * e), n.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e), n.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e), n.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 135 * e), n.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e), n.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e), n.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e), n.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e), n.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(64 * e, 150 * e), n.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e), n.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e), n.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e), n.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e), n.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 39 * e), n.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e), n.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e), n.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 64 * e), n.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e), n.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e), n.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e), n.closePath(), Ce(n, t[0]), n.translate(-20 * e, -20 * e), n.globalAlpha = 1, n.save(), n.translate(52.5 * e, 395 * e), n.rotate(0), ge(n, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 588 * e), n.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e), n.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e), n.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 135 * e), n.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e), n.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e), n.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e), n.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e), n.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(64 * e, 150 * e), n.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e), n.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e), n.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e), n.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e), n.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 39 * e), n.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e), n.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e), n.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e), n.closePath(), Ce(n, t[6], t[7], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 64 * e), n.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e), n.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e), n.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e), n.closePath(), Ce(n, t[8]), r
    }

    function ct(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 108 * e, r.height = 669 * e, n.translate(20 * e, 20 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(54 * e, 389.5 * e), ge(n, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 579 * e), n.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e), n.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e), n.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e), n.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 141 * e), n.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e), n.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e), n.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e), n.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e), n.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42 * e, 152 * e), n.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e), n.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e), n.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 28 * e), n.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e), n.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e), n.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e), n.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 53 * e), n.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e), n.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e), n.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e), n.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e), n.closePath(), Ce(n, t[0]), n.translate(-20 * e, -20 * e), n.globalAlpha = 1, n.save(), n.translate(54 * e, 389.5 * e), n.rotate(0), ge(n, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 579 * e), n.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e), n.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e), n.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e), n.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 141 * e), n.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e), n.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e), n.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e), n.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e), n.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42 * e, 152 * e), n.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e), n.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e), n.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 28 * e), n.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e), n.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e), n.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e), n.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e), n.closePath(), Ce(n, t[6], t[7], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 53 * e), n.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e), n.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e), n.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e), n.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e), n.closePath(), Ce(n, t[8]), r
    }

    function Ct(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 43 * e, r.height = 209 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.translate(5 * e, 5 * e), n.save(), n.translate(21 * e, 102.5 * e), ge(n, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e), n.restore(), Ce(n, t[0]), n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(20 * e, 10 * e), n.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e), n.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e), n.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(21 * e, 1 * e), n.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e), n.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e), n.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(14 * e, 146 * e), n.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e), n.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e), n.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e), n.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e), n.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e), n.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e), n.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e), n.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(21 * e, 6 * e), n.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e), n.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e), n.closePath(), Ce(n, t[0]), n.translate(0, -20 * e), n.globalAlpha = 1, n.translate(0, 10 * e), n.translate(-5 * e, -5 * e), n.save(), n.translate(21 * e, 102.5 * e), ge(n, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(20 * e, 10 * e), n.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e), n.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e), n.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(21 * e, 1 * e), n.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e), n.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e), n.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.translate(0, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(14 * e, 146 * e), n.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e), n.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e), n.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e), n.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e), n.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e), n.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e), n.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e), n.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(21 * e, 6 * e), n.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e), n.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e), n.closePath(), Ce(n, t[8]), r
    }

    function gt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 200 * e, r.height = 200 * e, n.save(), n.translate(112 * e, 158 * e), ge(n, -86.5 * e, -86 * e, 150 * e, 35 * e, 20 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(170 * e, 100 * e), ge(n, -86.5 * e, -86 * e, 35 * e, 150 * e, 20 * e), n.restore(), Ce(n, t[0]), r
    }

    function Nt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 165 * e, r.height = 123 * e, n.save(), n.translate(81 * e, 65 * e), ge(n, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(81 * e, 58 * e), ge(n, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e), n.restore(), Ce(n, t[1], t[2], 4), n.save(), n.translate(81 * e, 58 * e), ge(n, -69 * e, -47 * e, 138 * e, 93 * e, 15 * e), n.restore(), Ce(n, t[3], t[4], 4), n.save(), n.translate(79 * e, 54 * e), ge(n, -34 * e, -40 * e, 68 * e, 88 * e, 13 * e), n.restore(), Ce(n, void 0, t[5], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 13 * e), n.bezierCurveTo(43.5 * e, 55 * e, 43.5 * e, 55 * e, 43 * e, 101 * e), n.closePath(), Ce(n, void 0, t[6], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 13 * e), n.bezierCurveTo(115 * e, 56 * e, 115 * e, 56 * e, 115 * e, 101 * e), n.closePath(), Ce(n, void 0, t[6], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 6 * e), n.bezierCurveTo(35 * e, 56 * e, 36 * e, 109 * e, 35 * e, 110 * e), n.closePath(), Ce(n, void 0, t[7], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123 * e, 6 * e), n.bezierCurveTo(123 * e, 56 * e, 123 * e, 56 * e, 123 * e, 110 * e), n.closePath(), Ce(n, void 0, t[7], 4), n.save(), n.translate(79 * e, 113 * e), ge(n, -18 * e, -2 * e, 36 * e, 4 * e, 20 * e), n.restore(), Ce(n, void 0, t[8], 4), n.save(), n.translate(75 * e, 118 * e), ge(n, -6 * e, -2.5 * e, 20 * e, 5 * e, 20 * e), n.restore(), Ce(n, t[8]), r
    }

    function Dt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 92 * e, r.height = 108 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 10 * e), n.bezierCurveTo(37 * e, 2 * e, 49 * e, 0 * e, 61 * e, 15 * e), n.bezierCurveTo(81 * e, 31 * e, 78 * e, 25 * e, 79 * e, 37 * e), n.bezierCurveTo(76 * e, 44 * e, 81 * e, 56 * e, 85 * e, 63 * e), n.bezierCurveTo(91 * e, 71 * e, 90 * e, 78 * e, 83 * e, 84 * e), n.bezierCurveTo(60 * e, 98 * e, 67 * e, 95 * e, 57 * e, 102 * e), n.bezierCurveTo(47 * e, 106 * e, 43 * e, 106 * e, 31 * e, 98 * e), n.bezierCurveTo(22 * e, 91 * e, 17 * e, 89 * e, 7 * e, 84 * e), n.bezierCurveTo(1 * e, 77 * e, 4 * e, 73 * e, 7 * e, 60 * e), n.bezierCurveTo(11 * e, 50 * e, 5 * e, 32 * e, 15 * e, 27 * e), n.bezierCurveTo(26 * e, 18 * e, 26 * e, 24 * e, 31 * e, 10 * e), n.closePath(), Ce(n, t[0], t[1], 4), r
    }

    function bt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 151 * e, r.height = 80 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(133 * e, 54 * e), n.bezierCurveTo(136 * e, 18 * e, 129 * e, 18 * e, 114 * e, 13 * e), n.bezierCurveTo(51 * e, 0 * e, 36 * e, 16 * e, 34 * e, 16 * e), n.bezierCurveTo(8 * e, 28 * e, 22 * e, 56 * e, 21 * e, 57 * e), n.closePath(), Ce(n, t[2], t[3], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130 * e, 40 * e), n.bezierCurveTo(132 * e, 35 * e, 132 * e, 30 * e, 132 * e, 29 * e), n.bezierCurveTo(145 * e, 38 * e, 144 * e, 43 * e, 137 * e, 54 * e), n.closePath(), Ce(n, t[0], t[1], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(20 * e, 33 * e), n.bezierCurveTo(24 * e, 44 * e, 215 * e, 39 * e, 23 * e, 44 * e), n.bezierCurveTo(19 * e, 49 * e, 19 * e, 49 * e, 15 * e, 54 * e), n.bezierCurveTo(4 * e, 43 * e, 10 * e, 35 * e, 20 * e, 32 * e), n.closePath(), Ce(n, t[0], t[1], 4), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(18 * e, 52 * e), n.bezierCurveTo(24 * e, 31 * e, 34 * e, 25 * e, 75 * e, 23 * e), n.bezierCurveTo(130 * e, 24 * e, 129 * e, 32 * e, 134 * e, 51 * e), n.bezierCurveTo(138 * e, 70 * e, 126 * e, 72 * e, 90 * e, 73 * e), n.bezierCurveTo(18 * e, 72 * e, 15 * e, 68 * e, 18 * e, 54 * e), n.closePath(), Ce(n, t[0], t[1], 4), r
    }

    function St(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 138 * e, r.height = 133 * e, n.globalAlpha = i ? .3 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(26 * e, 79.640625 * e), n.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e), n.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e), n.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e), n.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e), n.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e), n.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(8 * e, 82.640625 * e), n.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e), n.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e), n.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e), n.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e), n.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(8 * e, 73.640625 * e), n.bezierCurveTo(7 * e, 23.640625 * e, 33 * e, 19.640625 * e, 71 * e, 17.640625 * e), n.bezierCurveTo(129 * e, 19.640625 * e, 130 * e, 45.640625 * e, 130 * e, 76.640625 * e), n.bezierCurveTo(90 * e, 63.640625 * e, 85 * e, 63.640625 * e, 73 * e, 63.640625 * e), n.bezierCurveTo(38 * e, 63.640625 * e, 33 * e, 66.640625 * e, 8 * e, 73.640625 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72 * e, 28.640625 * e), n.bezierCurveTo(51 * e, 25.640625 * e, 56 * e, 7.640625 * e, 70 * e, 5.640625 * e), n.bezierCurveTo(94 * e, 7.640625 * e, 87 * e, 29.640625 * e, 72 * e, 28.640625 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(51 * e, 26.640625 * e), n.bezierCurveTo(42 * e, 29.640625 * e, 43 * e, 31.640625 * e, 42 * e, 37.640625 * e), Ce(n, void 0, t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 26.640625 * e), n.bezierCurveTo(100 * e, 28.640625 * e, 98 * e, 34.640625 * e, 99 * e, 38.640625 * e), Ce(n, void 0, t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(26 * e, 79.640625 * e), n.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e), n.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e), n.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e), n.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e), n.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e), n.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(8 * e, 82.640625 * e), n.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e), n.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e), n.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e), n.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e), n.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), r
    }

    function pt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d"),
            a = 170 * e,
            o = 172 * e,
            s = a / 2,
            _ = o / 2;
        r.width = a, r.height = o, n.translate(s, _ + 7 * e), n.globalAlpha = i ? .5 : 0, Ne(n, 0, 0, 60 * e), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -7 * e), n.save();
        for (var E = 0; E < 10; E++) n.rotate(Math.PI / 5), n.save(), n.translate(65 * e, 0), be(n, 3, 20 * e, 4 * e), Ce(n, t[1], t[2], 4 * e), n.restore();
        return n.restore(), Ne(n, 0, 0, 60 * e), Ce(n, t[3], t[4], 4 * e), Ne(n, 0, 0, 40 * e), Ce(n, t[5]), Ne(n, 0, 0, 25 * e), Ce(n, t[6], t[7], 8 * e), r
    }

    function mt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        r.width = 170 * e, r.height = 170 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.save(), n.translate(85 * e, 88 * e), n.rotate(1.4), be(n, 7, 60 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(85 * e, 80 * e);
        for (var a = 0; a < 10; a++) n.rotate(Math.PI / 5), n.save(), n.translate(65 * e, 0), be(n, 3, 21 * e, 4 * e), Ce(n, t[1], t[2], 4 * e), n.restore();
        return n.save(), n.translate(0 * e, 0 * e), n.rotate(1.4), be(n, 7, 60 * e, 10 * e), Ce(n, t[3], t[4], 4 * e), n.rotate(.64), be(n, 7, 40 * e, 10 * e), Ce(n, t[5], t[6], 4 * e), n.rotate(.12), be(n, 7, 23 * e, 5 * e), n.restore(), Ce(n, t[7]), r
    }

    function vt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        r.width = 170 * e, r.height = 170 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 3 * e), n.save(), n.translate(85 * e, 95 * e), n.rotate(1.4), be(n, 7, 60 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(85 * e, 82 * e);
        for (var a = 0; a < 10; a++) n.rotate(Math.PI / 5), n.save(), n.translate(65 * e, 0), be(n, 3, 21 * e, 4 * e), Ce(n, t[1], t[2], 4 * e), n.restore();
        return n.save(), n.translate(0 * e, 0 * e), n.rotate(1), be(n, 8, 60 * e, 10 * e), Ce(n, t[3], t[4], 4 * e), n.rotate(.56), be(n, 8, 40 * e, 10 * e), Ce(n, t[5], t[6], 4 * e), n.rotate(.28), be(n, 8, 28 * e, 8 * e), Ce(n, t[7]), n.restore(), r
    }

    function Mt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        r.width = 170 * e, r.height = 170 * e, n.translate(0, 3 * e), n.globalAlpha = i ? .5 : 1, n.save(), n.translate(85 * e, 95 * e), n.rotate(1.4), be(n, 7, 60 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(85 * e, 82 * e);
        for (var a = 0; a < 10; a++) n.rotate(Math.PI / 5), n.save(), n.translate(65 * e, 0), be(n, 3, 21 * e, 4 * e), Ce(n, t[1], t[2], 4 * e), n.restore();
        return n.save(), n.translate(0 * e, 0 * e), n.rotate(.2), be(n, 9, 60 * e, 10 * e), Ce(n, t[3], t[4], 4 * e), n.rotate(-.32), be(n, 9, 38 * e, 10 * e), Ce(n, t[5], t[6], 4 * e), n.rotate(.68), be(n, 9, 20 * e, 8 * e), Ce(n, t[7], t[8], 6 * e), n.restore(), r
    }

    function Gt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 69 * e, r.height = 120 * e, n.globalAlpha = i ? .5 : 1, n.save(), n.translate(30 * e, 84 * e), ge(n, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(30 * e, 45 * e), ge(n, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(30 * e, 17 * e), ge(n, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(30 * e, 31 * e), ge(n, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.save(), n.translate(36 * e, 79.140625 * e), ge(n, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 3 * e), n.save(), n.translate(35 * e, 40.140625 * e), ge(n, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e), n.restore(), Ce(n, t[3], t[4], 3 * e), n.save(), n.translate(35 * e, 12.140625 * e), ge(n, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e), n.restore(), Ce(n, t[3], t[4], 3 * e), n.save(), n.translate(34.5 * e, 26.140625 * e), ge(n, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e), n.restore(), Ce(n, t[3], t[4], 3 * e), r
    }

    function Lt(e, i, t) {
        var r = (n = document.createElement("canvas")).getContext("2d");
        if (0 == t) n.width = 566 * e, n.height = 429 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(312.625 * e, 39.046875 * e), r.bezierCurveTo(456.625 * e, 60.046875 * e, 521.625 * e, 134.046875 * e, 528.625 * e, 199.046875 * e), r.bezierCurveTo(540.625 * e, 298.046875 * e, 491.625 * e, 364.046875 * e, 405.625 * e, 394.046875 * e), r.bezierCurveTo(270.625 * e, 429.046875 * e, 182.625 * e, 395.046875 * e, 100.625 * e, 344.046875 * e), r.bezierCurveTo(15.625 * e, 283.046875 * e, 20.625 * e, 195.046875 * e, 33.625 * e, 158.046875 * e), r.bezierCurveTo(56.625 * e, 80.046875 * e, 102.625 * e, 46.046875 * e, 183.625 * e, 33.046875 * e), r.bezierCurveTo(225.625 * e, 25.046875 * e, 270.625 * e, 30.046875 * e, 312.625 * e, 39.046875 * e), r.closePath(), Ce(r, i[0]);
        else if (1 == t) {
            r = (n = document.createElement("canvas")).getContext("2d");
            n.width = 511 * e, n.height = 408 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(141.625 * e, 49.296875 * e), r.bezierCurveTo(225.625 * e, 10.296875 * e, 320.625 * e, 16.296875 * e, 390.625 * e, 39.296875 * e), r.bezierCurveTo(476.625 * e, 71.296875 * e, 483.625 * e, 142.296875 * e, 486.625 * e, 197.296875 * e), r.bezierCurveTo(491.625 * e, 289.296875 * e, 462.625 * e, 317.296875 * e, 417.625 * e, 351.296875 * e), r.bezierCurveTo(367.625 * e, 385.296875 * e, 313.625 * e, 404.296875 * e, 218.625 * e, 395.296875 * e), r.bezierCurveTo(108.625 * e, 381.296875 * e, 81.625 * e, 350.296875 * e, 52.625 * e, 305.296875 * e), r.bezierCurveTo(16.625 * e, 244.296875 * e, 23.625 * e, 171.296875 * e, 37.625 * e, 145.296875 * e), r.bezierCurveTo(65.625 * e, 84.296875 * e, 97.625 * e, 74.296875 * e, 141.625 * e, 49.296875 * e), r.closePath(), Ce(r, i[0])
        } else if (2 == t) {
            var n;
            r = (n = document.createElement("canvas")).getContext("2d");
            n.width = 504 * e, n.height = 408 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(153.625 * e, 46.296875 * e), r.bezierCurveTo(271.625 * e, 17.296875 * e, 345.625 * e, 35.296875 * e, 410.625 * e, 71.296875 * e), r.bezierCurveTo(473.625 * e, 109.296875 * e, 478.625 * e, 167.296875 * e, 473.625 * e, 205.296875 * e), r.bezierCurveTo(462.625 * e, 295.296875 * e, 438.625 * e, 316.296875 * e, 388.625 * e, 345.296875 * e), r.bezierCurveTo(331.625 * e, 374.296875 * e, 273.625 * e, 392.296875 * e, 180.625 * e, 387.296875 * e), r.bezierCurveTo(111.625 * e, 380.296875 * e, 86.625 * e, 360.296875 * e, 51.625 * e, 309.296875 * e), r.bezierCurveTo(23.625 * e, 267.296875 * e, 25.625 * e, 226.296875 * e, 27.625 * e, 175.296875 * e), r.bezierCurveTo(37.625 * e, 99.296875 * e, 88.625 * e, 57.296875 * e, 153.625 * e, 46.296875 * e), r.closePath(), Ce(r, i[0])
        }
        return n
    }

    function ft(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 450 * e, r.height = 260 * e, n.translate(10 * e, 10 * e), n.globalAlpha = i ? .5 : 1, n.translate(20 * e, 20 * e), ge(n, 0, 0, 400 * e, 220 * e, 30 * e), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-20 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(9 * e, 5 * e), n.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e), n.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e), n.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e), n.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e), n.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e), n.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e), n.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e), n.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e), n.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e), n.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e), n.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e), n.closePath(), Ce(n, t[2], t[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(5 * e, 70 * e), n.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e), n.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e), n.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e), n.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e), n.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e), n.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e), n.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e), n.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e), n.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e), n.closePath(), Ce(n, t[3], t[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(19 * e, 158 * e), n.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e), n.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e), n.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e), n.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e), n.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e), n.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e), n.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e), n.closePath(), Ce(n, t[2], t[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 183 * e), n.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e), n.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e), n.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e), n.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e), n.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e), n.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e), n.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e), n.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e), n.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e), n.closePath(), Ce(n, t[3], t[1], 12 * e), Ne(n, 41 * e, 30 * e, 14.7648230602334 * e), Ce(n, t[3], t[1], 12 * e), Ne(n, 369 * e, 30 * e, 15.556349186104045 * e), Ce(n, t[3], t[1], 12 * e), Ne(n, 364 * e, 190 * e, 15.620499351813308 * e), Ce(n, t[3], t[1], 12 * e), Ne(n, 41 * e, 186 * e, 15.556349186104045 * e), Ce(n, t[3], t[1], 12 * e), r
    }

    function Ht(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 450 * e, r.height = 260 * e, n.translate(10 * e, 10 * e), (1 == t || 2 == t) && (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(9 * e, 5 * e), n.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e), n.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e), n.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e), n.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e), n.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e), n.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e), n.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e), n.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e), n.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e), n.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e), n.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e), n.closePath(), Ce(n, i[3], i[3], 32 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(5 * e, 70 * e), n.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e), n.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e), n.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e), n.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e), n.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e), n.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e), n.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e), n.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e), n.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e), n.closePath(), Ce(n, i[3], i[3], 32 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(19 * e, 158 * e), n.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e), n.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e), n.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e), n.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e), n.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e), n.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e), n.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e), n.closePath(), Ce(n, i[3], i[3], 32 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 183 * e), n.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e), n.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e), n.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e), n.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e), n.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e), n.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e), n.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e), n.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e), n.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e), n.closePath(), Ce(n, i[3], i[3], 32 * e), Ne(n, 41 * e, 30 * e, 14.7648230602334 * e), Ce(n, i[3], i[3], 32 * e), Ne(n, 369 * e, 30 * e, 15.556349186104045 * e), Ce(n, i[3], i[3], 32 * e), Ne(n, 364 * e, 190 * e, 15.620499351813308 * e), Ce(n, i[3], i[3], 32 * e), Ne(n, 41 * e, 186 * e, 15.556349186104045 * e), Ce(n, i[3], i[3], 32 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(9 * e, 5 * e), n.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e), n.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e), n.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e), n.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e), n.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e), n.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e), n.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e), n.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e), n.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e), n.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e), n.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e), n.closePath(), Ce(n, i[1], i[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(5 * e, 70 * e), n.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e), n.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e), n.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e), n.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e), n.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e), n.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e), n.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e), n.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e), n.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e), n.closePath(), Ce(n, i[2], i[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(19 * e, 158 * e), n.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e), n.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e), n.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e), n.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e), n.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e), n.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e), n.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e), n.closePath(), Ce(n, i[1], i[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 183 * e), n.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e), n.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e), n.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e), n.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e), n.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e), n.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e), n.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e), n.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e), n.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e), n.closePath(), Ce(n, i[2], i[0], 12 * e), Ne(n, 41 * e, 30 * e, 14.7648230602334 * e), Ce(n, i[2], i[0], 12 * e), Ne(n, 369 * e, 30 * e, 15.556349186104045 * e), Ce(n, i[2], i[0], 12 * e), Ne(n, 364 * e, 190 * e, 15.620499351813308 * e), Ce(n, i[2], i[0], 12 * e), Ne(n, 41 * e, 186 * e, 15.556349186104045 * e), Ce(n, i[2], i[0], 12 * e), r
    }

    function Pt(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        n.width = 450 * e, n.height = 260 * e;
        var o = ft(1 * e, !0, t);
        if (a.drawImage(o, 0 * e, 0 * e), 1 == r) {
            a.translate(100 * e, 0 * e), Ne(a, 113 * e, 120 * e, 66 * e), Ce(a, void 0, t[4], 13 * e);
            o = gi(.65 * e, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            a.rotate(.7), a.drawImage(o, 133 * e, -64 * e), a.rotate(-.7), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70 * e, 70 * e), a.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e), a.closePath(), Ce(a, void 0, t[4], 13 * e)
        } else if (2 == r) {
            a.translate(100 * e, 0 * e), Ne(a, 113 * e, 120 * e, 66 * e), Ce(a, void 0, t[4], 13 * e), a.translate(30 * e, 40 * e), a.save(), a.translate(83.5 * e, 66.5 * e), ge(a, -40.5 * e, -29.5 * e, 81 * e, 59 * e, 15 * e), a.restore(), Ce(a, "#dff2f7", "#187484", 7 * e), Ne(a, 22 * e, 82 * e, 12 * e), Ce(a, "#dff2f7", "#187484", 7 * e), Ne(a, 145 * e, 82 * e, 12 * e), Ce(a, "#dff2f7", "#187484", 7 * e);
            o = wi(.5 * e, !0, ["#80500b", "#7c4908"]);
            a.drawImage(o, 10 * e, 85 * e);
            o = wi(.5 * e, !0, ["#80500b", "#7c4908"]);
            a.drawImage(o, 50 * e, 85 * e);
            o = wi(.5 * e, !0, ["#80500b", "#7c4908"]);
            a.drawImage(o, 90 * e, 85 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 90 * e, 105 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 90 * e, 105 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 30 * e, 125 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 50 * e, 115 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 30 * e, 100 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 80 * e, 120 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 110 * e, 125 * e);
            o = Ui(1 * e, 0, ["#3d2a6e", "#8255b5"]);
            a.drawImage(o, 120 * e, 105 * e)
        } else 3 == r ? (a.translate(100 * e, 0 * e), Ne(a, 113 * e, 120 * e, 66 * e), Ce(a, void 0, t[4], 13 * e), a.translate(40 * e, 50 * e), a.save(), a.translate(71 * e, 69 * e), ge(a, -30 * e, -42 * e, 60 * e, 84 * e, 10 * e), a.restore(), Ce(a, void 0, t[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42 * e, 28 * e), a.bezierCurveTo(60 * e, 31 * e, 60 * e, 31 * e, 78 * e, 34 * e), a.bezierCurveTo(82 * e, 34 * e, 84 * e, 37 * e, 83 * e, 45 * e), a.bezierCurveTo(83 * e, 80 * e, 83 * e, 80 * e, 83 * e, 115 * e), a.bezierCurveTo(83 * e, 120 * e, 80 * e, 122 * e, 73 * e, 120 * e), a.bezierCurveTo(42 * e, 111 * e, 43 * e, 109 * e, 41 * e, 102 * e), a.bezierCurveTo(41 * e, 71 * e, 41 * e, 71 * e, 41 * e, 40 * e), a.closePath(), Ce(a, t[5], t[5], 4 * e), a.translate(-40 * e, -50 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70 * e, 70 * e), a.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e), a.closePath(), Ce(a, void 0, t[4], 13 * e)) : 4 == r && (a.scale(1, 1), a.translate(70 * e, 50 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(23 * e, 6 * e), a.bezierCurveTo(25.5 * e, 56 * e, 25.5 * e, 56 * e, 28 * e, 106 * e), Ce(a, void 0, t[5], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59 * e, 10 * e), a.bezierCurveTo(61 * e, 51.5 * e, 61 * e, 51.5 * e, 63 * e, 93 * e), Ce(a, void 0, t[5], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(7 * e, 55 * e), a.bezierCurveTo(33.5 * e, 55 * e, 33.5 * e, 55 * e, 60 * e, 55 * e), Ce(a, void 0, t[5], 14 * e), a.translate(10 * e, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123 * e, 16 * e), a.bezierCurveTo(103 * e, 16.5 * e, 103 * e, 16.5 * e, 83 * e, 17 * e), a.bezierCurveTo(83.5 * e, 61 * e, 83.5 * e, 61 * e, 84 * e, 105 * e), a.bezierCurveTo(106 * e, 105 * e, 106 * e, 105 * e, 128 * e, 105 * e), Ce(a, void 0, t[5], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72 * e, 63 * e), a.bezierCurveTo(88.5 * e, 62.5 * e, 88.5 * e, 62.5 * e, 105 * e, 62 * e), Ce(a, void 0, t[5], 14 * e), a.translate(10 * e, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(141 * e, 8 * e), a.bezierCurveTo(143 * e, 50 * e, 143 * e, 50 * e, 145 * e, 92 * e), a.bezierCurveTo(169 * e, 88.5 * e, 169 * e, 88.5 * e, 193 * e, 85 * e), Ce(a, void 0, t[5], 14 * e), a.translate(10 * e, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(205 * e, 124 * e), a.bezierCurveTo(205 * e, 69 * e, 205 * e, 69 * e, 205 * e, 14 * e), a.bezierCurveTo(239 * e, 15 * e, 250 * e, 37 * e, 249 * e, 49 * e), a.bezierCurveTo(251 * e, 65 * e, 242 * e, 76 * e, 206 * e, 75 * e), Ce(a, void 0, t[5], 14 * e));
        return n
    }

    function yt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 345 * e, r.height = 250 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105 * e, 58 * e), n.bezierCurveTo(100.5 * e, 43 * e, 100.5 * e, 43 * e, 96 * e, 28 * e), n.bezierCurveTo(119.5 * e, 33.5 * e, 119.5 * e, 33.5 * e, 143 * e, 39 * e), n.bezierCurveTo(170 * e, 37 * e, 177 * e, 37 * e, 188 * e, 40 * e), n.bezierCurveTo(213 * e, 33.5 * e, 213 * e, 33.5 * e, 238 * e, 27 * e), n.bezierCurveTo(231 * e, 52 * e, 234 * e, 42.5 * e, 230 * e, 58 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(108 * e, 51 * e), n.bezierCurveTo(91 * e, 55 * e, 85 * e, 44 * e, 86 * e, 29 * e), n.bezierCurveTo(62 * e, 50 * e, 78 * e, 69 * e, 92 * e, 75 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(249 * e, 27 * e), n.bezierCurveTo(273 * e, 49 * e, 262 * e, 68 * e, 246 * e, 77 * e), n.bezierCurveTo(231 * e, 59 * e, 236 * e, 66.5 * e, 226 * e, 56 * e), n.bezierCurveTo(243 * e, 53 * e, 252 * e, 43 * e, 249 * e, 28 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87 * e, 78 * e), n.bezierCurveTo(87 * e, 59 * e, 98 * e, 46 * e, 127 * e, 48 * e), n.bezierCurveTo(176 * e, 48.5 * e, 176 * e, 48.5 * e, 225 * e, 49 * e), n.bezierCurveTo(243 * e, 49 * e, 253 * e, 59 * e, 253 * e, 76 * e), n.bezierCurveTo(211 * e, 85.5 * e, 211 * e, 85.5 * e, 169 * e, 95 * e), n.closePath(), Ce(n, t[5], t[6], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 105 * e), n.bezierCurveTo(56 * e, 92 * e, 59 * e, 86 * e, 65 * e, 73 * e), n.bezierCurveTo(62.5 * e, 61.5 * e, 62.5 * e, 61.5 * e, 60 * e, 50 * e), n.bezierCurveTo(99.5 * e, 64.5 * e, 99.5 * e, 64.5 * e, 139 * e, 79 * e), n.bezierCurveTo(164 * e, 77 * e, 177 * e, 76 * e, 203 * e, 78 * e), n.bezierCurveTo(242 * e, 63.5 * e, 242 * e, 63.5 * e, 281 * e, 49 * e), n.bezierCurveTo(279 * e, 60.5 * e, 279 * e, 60.5 * e, 277 * e, 72 * e), n.bezierCurveTo(286 * e, 88 * e, 286 * e, 96 * e, 287 * e, 104 * e), n.bezierCurveTo(228.5 * e, 127 * e, 228.5 * e, 127 * e, 170 * e, 150 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(48 * e, 130 * e), n.bezierCurveTo(61 * e, 155 * e, 63 * e, 165 * e, 56 * e, 171 * e), n.bezierCurveTo(48 * e, 177 * e, 40 * e, 171 * e, 38 * e, 178 * e), n.bezierCurveTo(33 * e, 180 * e, 37 * e, 188 * e, 47 * e, 208 * e), n.bezierCurveTo(52 * e, 221 * e, 55 * e, 222 * e, 75 * e, 229 * e), n.bezierCurveTo(91 * e, 213 * e, 98 * e, 212 * e, 112 * e, 219 * e), n.bezierCurveTo(167 * e, 225 * e, 187 * e, 224 * e, 222 * e, 220 * e), n.bezierCurveTo(244 * e, 214 * e, 247 * e, 213 * e, 263 * e, 229 * e), n.bezierCurveTo(295 * e, 220 * e, 291 * e, 215 * e, 301 * e, 194 * e), n.bezierCurveTo(308 * e, 178 * e, 309 * e, 176 * e, 302 * e, 173 * e), n.bezierCurveTo(290 * e, 177 * e, 289 * e, 177 * e, 283 * e, 169 * e), n.bezierCurveTo(279 * e, 163 * e, 279 * e, 161 * e, 290 * e, 130 * e), n.bezierCurveTo(270 * e, 127 * e, 270 * e, 127 * e, 250 * e, 124 * e), n.bezierCurveTo(209 * e, 137.5 * e, 209 * e, 137.5 * e, 168 * e, 151 * e), n.bezierCurveTo(121 * e, 135 * e, 121 * e, 135 * e, 74 * e, 119 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.globalCompositeOperation = "destination-out", n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(133 * e, 158 * e), n.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e), n.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e), n.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e), n.closePath(), Ce(n, t[7], t[8], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(215 * e, 146 * e), n.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e), n.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e), n.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e), n.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e), n.closePath(), Ce(n, t[7], t[8], 8 * e), n.globalCompositeOperation = "source-over", n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(133 * e, 158 * e), n.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e), n.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e), n.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e), n.closePath(), Ce(n, void 0, t[8], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(215 * e, 146 * e), n.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e), n.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e), n.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e), n.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e), n.closePath(), Ce(n, void 0, t[8], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 66 * e), n.bezierCurveTo(57 * e, 107 * e, 63 * e, 96 * e, 120 * e, 106 * e), n.bezierCurveTo(154 * e, 112 * e, 163 * e, 116 * e, 174 * e, 135 * e), n.bezierCurveTo(180 * e, 109 * e, 191 * e, 113 * e, 237 * e, 103 * e), n.bezierCurveTo(276 * e, 100 * e, 289 * e, 94 * e, 301 * e, 67 * e), n.bezierCurveTo(317 * e, 112 * e, 301 * e, 141 * e, 274 * e, 139 * e), n.bezierCurveTo(204 * e, 166 * e, 197 * e, 169 * e, 173 * e, 183 * e), n.bezierCurveTo(170 * e, 183 * e, 170 * e, 183 * e, 167 * e, 183 * e), n.bezierCurveTo(132 * e, 160 * e, 112 * e, 156 * e, 73 * e, 141 * e), n.bezierCurveTo(43 * e, 146 * e, 27 * e, 120 * e, 39 * e, 66 * e), n.closePath(), Ce(n, t[7], t[8], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 185 * e), n.bezierCurveTo(115 * e, 200 * e, 118 * e, 206 * e, 124 * e, 212 * e), n.bezierCurveTo(133 * e, 223 * e, 132 * e, 231 * e, 121 * e, 230 * e), n.bezierCurveTo(108 * e, 226 * e, 108 * e, 215 * e, 107 * e, 209 * e), n.bezierCurveTo(106 * e, 201 * e, 110 * e, 196 * e, 114 * e, 185 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(226 * e, 186 * e), n.bezierCurveTo(234 * e, 201 * e, 238 * e, 209 * e, 228 * e, 225 * e), n.bezierCurveTo(223 * e, 233 * e, 213 * e, 233 * e, 211 * e, 226 * e), n.bezierCurveTo(206 * e, 219 * e, 217 * e, 216 * e, 221 * e, 207 * e), n.bezierCurveTo(225 * e, 196 * e, 225 * e, 191 * e, 226 * e, 186 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(172 * e, 110 * e), n.bezierCurveTo(189 * e, 153 * e, 192 * e, 160 * e, 188 * e, 175 * e), n.bezierCurveTo(183 * e, 190 * e, 176 * e, 197 * e, 165 * e, 191 * e), n.bezierCurveTo(153 * e, 181 * e, 152 * e, 166 * e, 157 * e, 151 * e), n.bezierCurveTo(164.5 * e, 131 * e, 164.5 * e, 131 * e, 172 * e, 111 * e), n.closePath(), Ce(n, t[3], t[4], 8 * e), r
    }

    function zt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 149 * e, t.height = 153 * e, r.globalAlpha = .5, Ne(r, 74.5 * e, 85 * e, 66 * e), Ce(r, i[0]), r.globalAlpha = 1, Ne(r, 75.5 * e, 72.5 * e, 67 * e), Ce(r, i[1], i[2], 4 * e), Ne(r, 75.5 * e, 73.5 * e, 54 * e), Ce(r, i[3]), r.globalAlpha = .5, Ne(r, 74.5 * e, 80.5 * e, 39 * e), Ce(r, i[4]), r.globalAlpha = 1, Ne(r, 74.5 * e, 74.5 * e, 37 * e), Ce(r, i[5]), t
    }

    function Bt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 173 * e, t.height = 178 * e, r.globalAlpha = .5, Ne(r, 86.5 * e, 98 * e, 80 * e), Ce(r, i[0]), r.globalAlpha = 1, Ne(r, 86.5 * e, 89 * e, 81 * e), Ce(r, i[1], i[2], 4 * e), Ne(r, 86.5 * e, 86 * e, 59 * e), Ce(r, i[3], i[4], 4 * e), r.globalAlpha = .5, Ne(r, 86.5 * e, 95 * e, 34 * e), Ce(r, i[0]), r.globalAlpha = 1, Ne(r, 86.5 * e, 89 * e, 34 * e), Ce(r, i[5]), t
    }

    function Wt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 253 * e, t.height = 260 * e, r.globalAlpha = .5, Ne(r, 126.5 * e, 134 * e, 119 * e), Ce(r, i[0]), r.globalAlpha = 1, Ne(r, 126.5 * e, 124 * e, 119 * e), Ce(r, i[1], i[2], 4 * e), Ne(r, 126.5 * e, 127 * e, 100 * e), Ce(r, i[3]), r.globalAlpha = .5, Ne(r, 126.5 * e, 135 * e, 81 * e), Ce(r, i[0]), r.globalAlpha = 1, Ne(r, 126.5 * e, 125 * e, 84 * e), Ce(r, i[4], i[5], 4 * e), Ne(r, 126.5 * e, 125 * e, 61 * e), Ce(r, i[6], i[7], 4 * e), r.globalAlpha = .5, Ne(r, 126.5 * e, 134 * e, 40 * e), Ce(r, i[8]), r.globalAlpha = 1, Ne(r, 126.5 * e, 125 * e, 40 * e), Ce(r, i[9]), t
    }

    function Vt(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 139 * e, r.height = 135 * e, n.translate(0, 10 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 77 * e), n.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e), n.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e), n.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e), n.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e), n.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65 * e, 37 * e), n.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e), n.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e), n.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e), n.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e), n.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 63 * e), n.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e), n.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e), n.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e), n.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e), n.closePath(), Ce(n, t[0]), n.translate(0, -10 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 77 * e), n.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e), n.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e), n.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e), n.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e), n.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65 * e, 37 * e), n.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e), n.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e), n.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e), n.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e), n.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 63 * e), n.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e), n.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e), n.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e), n.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80 * e, 38 * e), n.bezierCurveTo(72.5 * e, 52 * e, 72.5 * e, 52 * e, 65 * e, 66 * e), n.bezierCurveTo(47.5 * e, 37 * e, 47.5 * e, 37 * e, 30 * e, 7 * e), n.bezierCurveTo(48 * e, 4 * e, 57 * e, 4 * e, 64 * e, 10 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65 * e, 65 * e), n.bezierCurveTo(125 * e, 73 * e, 95.5 * e, 69 * e, 126 * e, 73 * e), n.bezierCurveTo(119 * e, 98 * e, 106 * e, 104 * e, 98 * e, 103 * e), n.bezierCurveTo(84.5 * e, 102 * e, 84.5 * e, 102 * e, 71 * e, 101 * e), n.bezierCurveTo(64 * e, 86 * e, 64 * e, 86 * e, 57 * e, 70 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27 * e, 69 * e), n.bezierCurveTo(64 * e, 65 * e, 46 * e, 67 * e, 65 * e, 65 * e), n.bezierCurveTo(43.5 * e, 94 * e, 43.5 * e, 94 * e, 22 * e, 123 * e), n.bezierCurveTo(8 * e, 103 * e, 8 * e, 103 * e, 9 * e, 103 * e), n.bezierCurveTo(5 * e, 98 * e, 11 * e, 89 * e, 26 * e, 70 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(26 * e, 69 * e), n.bezierCurveTo(65 * e, 60 * e, 45 * e, 65 * e, 64 * e, 60 * e), n.bezierCurveTo(63 * e, 65 * e, 63 * e, 65 * e, 62 * e, 70 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80 * e, 38 * e), n.bezierCurveTo(68 * e, 70 * e, 75 * e, 53 * e, 70 * e, 68 * e), n.bezierCurveTo(65 * e, 67 * e, 65 * e, 67 * e, 60 * e, 65 * e), n.closePath(), Ce(n, t[2]), r
    }

    function Kt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 100 * e, t.height = 100 * e, r.globalAlpha = .5, r.fillStyle = i[0], r.fillRect(0, 0, t.width, t.height), t
    }

    function wt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 120 * e, t.height = 300 * e, r.translate(-80 * e, -20), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(200.5 * e, 14.953125 * e), r.bezierCurveTo(203 * e, 171.953125 * e, 203 * e, 171.953125 * e, 205.5 * e, 328.953125 * e), r.bezierCurveTo(188.5 * e, 257.953125 * e, 164.5 * e, 216.953125 * e, 166.5 * e, 176.953125 * e), r.bezierCurveTo(168.5 * e, 133.953125 * e, 198.5 * e, 98.953125 * e, 200.5 * e, 14.953125 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Ut(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 120 * e, t.height = 300 * e, r.translate(-200 * e, -40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(344 * e, 18.40625 * e), r.bezierCurveTo(345 * e, 361.40625 * e, 344 * e, 191.40625 * e, 344 * e, 364.40625 * e), r.bezierCurveTo(261 * e, 275.40625 * e, 274 * e, 259.40625 * e, 229 * e, 213.40625 * e), r.bezierCurveTo(199 * e, 187.40625 * e, 222 * e, 133.40625 * e, 273 * e, 100.40625 * e), r.bezierCurveTo(321 * e, 71.40625 * e, 327 * e, 34.40625 * e, 344 * e, 18.40625 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(335 * e, 38.072906494140625 * e), r.bezierCurveTo(307 * e, 62.072906494140625 * e, 291 * e, 60.072906494140625 * e, 262 * e, 68.07290649414062 * e), r.bezierCurveTo(223 * e, 80.07290649414062 * e, 225 * e, 111.07290649414062 * e, 264 * e, 139.07290649414062 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Yt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 120 * e, t.height = 320 * e, r.translate(-60 * e, -15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(188.5 * e, 3.953125 * e), r.bezierCurveTo(188.5 * e, 171.453125 * e, 188.5 * e, 171.453125 * e, 188.5 * e, 338.953125 * e), r.bezierCurveTo(162.5 * e, 268.953125 * e, 145.5 * e, 265.953125 * e, 116.5 * e, 244.953125 * e), r.bezierCurveTo(67.5 * e, 204.953125 * e, 87.5 * e, 160.953125 * e, 113.5 * e, 125.953125 * e), r.bezierCurveTo(141.5 * e, 90.953125 * e, 176.5 * e, 56.953125 * e, 188.5 * e, 3.953125 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Ft(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 120 * e, t.height = 330 * e, r.translate(-60 * e, -10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(188.5 * e, 7.953125 * e), r.bezierCurveTo(188.5 * e, 334.953125 * e, 188.5 * e, 332.953125 * e, 188.5 * e, 339.953125 * e), r.bezierCurveTo(166.5 * e, 295.953125 * e, 145.5 * e, 295.953125 * e, 139.5 * e, 282.953125 * e), r.bezierCurveTo(124.5 * e, 244.953125 * e, 139.5 * e, 243.953125 * e, 131.5 * e, 212.953125 * e), r.bezierCurveTo(118.5 * e, 161.953125 * e, 69.5 * e, 156.953125 * e, 74.5 * e, 92.953125 * e), r.bezierCurveTo(85.5 * e, 41.953125 * e, 158.5 * e, 49.953125 * e, 188.5 * e, 7.953125 * e), r.closePath(), Ce(r, i[0]), t
    }

    function kt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 48 * e, t.height = 47 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(7.1875 * e, 25.434661865234375 * e), r.bezierCurveTo(11.1875 * e, 13.434661865234375 * e, 18.1875 * e, 8.434661865234375 * e, 32.1875 * e, 10.434661865234375 * e), r.bezierCurveTo(45.1875 * e, 14.434661865234375 * e, 41.1875 * e, 24.434661865234375 * e, 36.1875 * e, 30.434661865234375 * e), r.bezierCurveTo(22.1875 * e, 42.434661865234375 * e, 2.1875 * e, 41.434661865234375 * e, 7.1875 * e, 25.434661865234375 * e), r.closePath(), Ce(r, i[0]), t
    }

    function xt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 120 * e, t.height = 280 * e, r.translate(-100 * e, -20 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(228.5 * e, 331.953125 * e), r.bezierCurveTo(228.5 * e, 12.953125 * e, 228.5 * e, 171.453125 * e, 228.5 * e, 10.953125 * e), r.bezierCurveTo(196.5 * e, 76.953125 * e, 206.5 * e, 78.953125 * e, 191.5 * e, 114.953125 * e), r.bezierCurveTo(162.5 * e, 170.953125 * e, 206.5 * e, 220.953125 * e, 210.5 * e, 251.953125 * e), r.bezierCurveTo(218.5 * e, 287.953125 * e, 220.5 * e, 291.953125 * e, 228.5 * e, 331.953125 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Jt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 33 * e, t.height = 35 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(12.75 * e, 7.1328125 * e), r.bezierCurveTo(26.75 * e, 8.1328125 * e, 27.75 * e, 14.1328125 * e, 24.75 * e, 23.1328125 * e), r.bezierCurveTo(19.75 * e, 31.1328125 * e, 15.75 * e, 33.1328125 * e, 6.75 * e, 26.1328125 * e), r.bezierCurveTo(.75 * e, 19.1328125 * e, 4.75 * e, 8.1328125 * e, 12.75 * e, 7.1328125 * e), r.closePath(), Ce(r, i[0]), t
    }

    function Xt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 20 * e, t.height = 35 * e, ge(r, 0, 0, 20, 35, 7), Ce(r, i[0]), t
    }

    function qt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 161 * e, t.height = 190 * e, r.globalAlpha = .5, r.translate(0, 8), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), Ce(r, i[0]), r.globalAlpha = 1, r.translate(0, -8), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), Ce(r, i[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(28 * e, 63 * e), r.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e), r.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e), r.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e), r.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e), r.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e), r.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e), r.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(99 * e, 55 * e), r.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e), r.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e), r.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e), r.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e), r.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e), r.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e), r.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e), r.closePath(), Ce(r, i[3]), Ne(r, 103 * e, 110 * e, 11 * e), Ce(r, i[4]), Ne(r, 55 * e, 111 * e, 11 * e), Ce(r, i[4]), Ne(r, 99 * e, 107 * e, 5 * e), Ce(r, i[1]), Ne(r, 51 * e, 108 * e, 5 * e), Ce(r, i[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(31 * e, 121 * e), r.bezierCurveTo(45 * e, 128 * e, 51 * e, 133 * e, 53 * e, 141 * e), r.bezierCurveTo(59 * e, 161 * e, 70 * e, 173 * e, 80 * e, 169 * e), r.bezierCurveTo(89 * e, 172 * e, 99 * e, 149 * e, 107 * e, 133 * e), r.bezierCurveTo(114 * e, 122 * e, 119 * e, 123 * e, 124 * e, 119 * e), r.bezierCurveTo(109 * e, 148 * e, 117 * e, 133 * e, 109 * e, 147 * e), r.bezierCurveTo(87 * e, 180 * e, 84 * e, 179 * e, 76 * e, 178 * e), r.bezierCurveTo(49 * e, 173 * e, 44 * e, 149 * e, 31 * e, 121 * e), r.closePath(), Ce(r, i[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.translate(-2, 0), r.moveTo(71 * e, 162 * e), r.bezierCurveTo(80 * e, 155 * e, 85 * e, 159 * e, 89 * e, 164 * e), r.bezierCurveTo(90 * e, 171 * e, 86 * e, 173 * e, 79 * e, 173 * e), r.bezierCurveTo(67 * e, 172 * e, 67 * e, 168 * e, 71 * e, 162 * e), r.closePath(), Ce(r, i[3]), r.translate(2, 0), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), Ce(r, void 0, i[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(25 * e, 63 * e), r.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e), r.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e), r.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e), Ce(r, i[1], i[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(91 * e, 53 * e), r.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e), r.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e), r.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e), Ce(r, i[1], i[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(31 * e, 63 * e), r.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e), r.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e), r.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e), r.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e), r.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e), r.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e), r.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(99 * e, 55 * e), r.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e), r.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e), r.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e), r.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e), r.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e), r.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e), r.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e), r.closePath(), Ce(r, i[3]), t
    }

    function jt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 147 * e, t.height = 172 * e, r.globalAlpha = .5, r.translate(0, 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(8 * e, 50 * e), r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e), r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e), r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e), r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e), r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e), r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e), r.closePath(), Ce(r, i[0]), r.translate(0, -8 * e), r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(8 * e, 50 * e), r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e), r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e), r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e), r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e), r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e), r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e), r.closePath(), Ce(r, i[1], i[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(14 * e, 57 * e), r.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e), r.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e), Ce(r, i[1], i[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 47 * e), r.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e), r.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e), Ce(r, i[1], i[2], 4 * e), Ne(r, 51 * e, 91 * e, 9 * e), Ce(r, i[3]), Ne(r, 95 * e, 91 * e, 9 * e), Ce(r, i[3]), Ne(r, 91 * e, 89 * e, 4 * e), Ce(r, i[4]), Ne(r, 47 * e, 89 * e, 4 * e), Ce(r, i[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(54 * e, 133 * e), r.bezierCurveTo(56 * e, 108 * e, 64 * e, 99 * e, 73 * e, 98 * e), r.bezierCurveTo(86 * e, 97 * e, 91 * e, 119 * e, 93 * e, 133 * e), r.bezierCurveTo(94 * e, 155 * e, 90 * e, 150 * e, 74 * e, 155 * e), r.bezierCurveTo(50 * e, 152 * e, 55 * e, 145 * e, 54 * e, 134 * e), r.closePath(), Ce(r, i[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(65.25 * e, 135 * e), r.bezierCurveTo(75.25 * e, 128 * e, 83.25 * e, 133 * e, 83.25 * e, 138 * e), r.bezierCurveTo(88.25 * e, 148 * e, 61.25 * e, 149 * e, 64.25 * e, 137 * e), r.closePath(), Ce(r, i[6]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(74 * e, 145 * e), r.bezierCurveTo(74 * e, 148 * e, 74 * e, 148 * e, 74 * e, 151 * e), r.closePath(), Ce(r, void 0, i[6], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(19 * e, 58 * e), r.bezierCurveTo(10 * e, 38 * e, 18 * e, 33 * e, 28 * e, 34 * e), r.bezierCurveTo(41 * e, 39 * e, 45 * e, 45 * e, 50 * e, 51 * e), r.closePath(), Ce(r, i[6]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(100 * e, 51 * e), r.bezierCurveTo(106 * e, 36 * e, 119 * e, 31 * e, 128 * e, 36 * e), r.bezierCurveTo(137 * e, 49 * e, 128 * e, 58 * e, 128 * e, 60 * e), r.closePath(), Ce(r, i[6]), t
    }

    function Zt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 271 * e, t.height = 366 * e, r.globalAlpha = .5, r.translate(0, 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), Ce(r, i[0]), r.globalAlpha = 1, r.translate(0, -10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), Ce(r, i[3], i[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), Ce(r, i[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), Ce(r, i[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), Ce(r, i[2]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), Ce(r, i[1]), Ne(r, 102 * e, 269 * e, 11 * e), Ce(r, i[3]), Ne(r, 98 * e, 266 * e, 5 * e), Ce(r, i[6]), Ne(r, 168 * e, 269 * e, 11 * e), Ce(r, i[3]), Ne(r, 164 * e, 266 * e, 5 * e), Ce(r, i[6]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), Ce(r, i[2]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 235 * e), r.bezierCurveTo(118 * e, 258 * e, 137 * e, 268 * e, 148 * e, 246 * e), r.bezierCurveTo(156 * e, 228 * e, 152 * e, 169 * e, 150 * e, 140 * e), r.bezierCurveTo(147 * e, 87 * e, 143 * e, 69 * e, 142 * e, 60 * e), r.bezierCurveTo(136 * e, 44 * e, 132 * e, 43 * e, 127 * e, 62 * e), r.bezierCurveTo(119 * e, 116 * e, 119 * e, 140 * e, 116 * e, 166 * e), r.bezierCurveTo(113 * e, 202 * e, 113 * e, 223 * e, 115 * e, 233 * e), r.closePath(), Ce(r, i[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(132 * e, 219 * e), r.bezierCurveTo(140 * e, 229 * e, 142 * e, 231 * e, 145 * e, 237 * e), r.bezierCurveTo(145 * e, 245 * e, 139 * e, 249 * e, 133 * e, 249 * e), r.bezierCurveTo(123 * e, 248 * e, 123 * e, 243 * e, 121 * e, 239 * e), r.bezierCurveTo(126 * e, 227 * e, 129 * e, 223 * e, 132 * e, 219 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 179 * e), r.bezierCurveTo(140 * e, 188.5 * e, 140 * e, 188.5 * e, 147 * e, 198 * e), r.bezierCurveTo(148 * e, 209 * e, 142 * e, 214 * e, 133 * e, 214 * e), r.bezierCurveTo(121 * e, 211 * e, 121 * e, 207 * e, 120 * e, 200 * e), r.bezierCurveTo(126.5 * e, 189.5 * e, 126.5 * e, 189.5 * e, 133 * e, 179 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 143 * e), r.bezierCurveTo(139 * e, 151.5 * e, 139 * e, 151.5 * e, 145 * e, 160 * e), r.bezierCurveTo(143 * e, 167 * e, 140 * e, 170 * e, 134 * e, 170 * e), r.bezierCurveTo(128 * e, 169 * e, 124 * e, 167 * e, 123 * e, 161 * e), r.bezierCurveTo(128 * e, 152 * e, 128 * e, 152 * e, 133 * e, 143 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 115 * e), r.bezierCurveTo(137.5 * e, 121.5 * e, 137.5 * e, 121.5 * e, 142 * e, 128 * e), r.bezierCurveTo(141 * e, 133 * e, 138 * e, 135 * e, 133 * e, 135 * e), r.bezierCurveTo(129 * e, 135 * e, 125 * e, 132 * e, 125 * e, 129 * e), r.bezierCurveTo(129 * e, 122 * e, 129 * e, 122 * e, 133 * e, 115 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 94 * e), r.bezierCurveTo(136.5 * e, 98.5 * e, 136.5 * e, 98.5 * e, 140 * e, 103 * e), r.bezierCurveTo(139 * e, 109 * e, 137 * e, 109 * e, 133 * e, 110 * e), r.bezierCurveTo(127 * e, 108 * e, 129 * e, 107 * e, 127 * e, 105 * e), r.bezierCurveTo(130 * e, 99.5 * e, 130 * e, 99.5 * e, 133 * e, 94 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130 * e, 279 * e), r.bezierCurveTo(136.5 * e, 287.5 * e, 136.5 * e, 287.5 * e, 143 * e, 296 * e), r.bezierCurveTo(143 * e, 302 * e, 139 * e, 309 * e, 131 * e, 308 * e), r.bezierCurveTo(123 * e, 306 * e, 121 * e, 303 * e, 120 * e, 297 * e), r.bezierCurveTo(125.5 * e, 288.5 * e, 125.5 * e, 288.5 * e, 131 * e, 280 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(147 * e, 303 * e), r.bezierCurveTo(151 * e, 311 * e, 151 * e, 319 * e, 147 * e, 321 * e), r.bezierCurveTo(138 * e, 320 * e, 145 * e, 308 * e, 147 * e, 303 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 303 * e), r.bezierCurveTo(115 * e, 312 * e, 118 * e, 319 * e, 115 * e, 319 * e), r.bezierCurveTo(112 * e, 324 * e, 109 * e, 318 * e, 109 * e, 314 * e), r.bezierCurveTo(109 * e, 308 * e, 112 * e, 303 * e, 115 * e, 303 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(89 * e, 280 * e), r.bezierCurveTo(83 * e, 279 * e, 80 * e, 281 * e, 81 * e, 286 * e), r.bezierCurveTo(83 * e, 290 * e, 84 * e, 290 * e, 87 * e, 286 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(94 * e, 290 * e), r.bezierCurveTo(93 * e, 294 * e, 90 * e, 303 * e, 86 * e, 298 * e), r.bezierCurveTo(84 * e, 295 * e, 84 * e, 291 * e, 89 * e, 291 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(163 * e, 295 * e), r.bezierCurveTo(175 * e, 294 * e, 176 * e, 296 * e, 175 * e, 301 * e), r.bezierCurveTo(174 * e, 305 * e, 171 * e, 305 * e, 166 * e, 300 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(172 * e, 286 * e), r.bezierCurveTo(180 * e, 285 * e, 181 * e, 285 * e, 180 * e, 291 * e), r.bezierCurveTo(176 * e, 295 * e, 174 * e, 294 * e, 172 * e, 286 * e), r.closePath(), Ce(r, i[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), Ce(r, i[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), Ce(r, i[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), Ce(r, i[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), Ce(r, i[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), Ce(r, i[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), Ce(r, i[7]), t
    }

    function Qt(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 85 * e, t.height = 145 * e, r.translate(-20 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(50 * e, 105 * e), r.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e), r.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e), r.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e), r.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e), r.closePath(), Ce(r, i[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44 * e, 106 * e), r.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e), r.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e), r.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e), r.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e), r.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e), r.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e), r.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e), r.closePath(), Ce(r, i[2], i[3], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 159 * e), r.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e), r.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e), r.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e), r.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e), r.closePath(), Ce(r, i[2]), t
    }

    function $t(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 85 * e, t.height = 145 * e, r.translate(-165 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217 * e, 103 * e), r.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e), r.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e), r.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e), r.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e), r.closePath(), Ce(r, i[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(231 * e, 163 * e), r.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e), r.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e), r.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e), r.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e), r.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e), r.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e), r.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e), r.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e), r.closePath(), Ce(r, i[2], i[3], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(234 * e, 154 * e), r.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e), r.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e), r.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e), r.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e), r.closePath(), Ce(r, i[2]), t
    }

    function er(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 187 * e, r.height = 119 * e, n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(0, 3), n.moveTo(53 * e, 45 * e), n.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e), n.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e), n.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e), n.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e), n.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e), n.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e), n.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e), n.closePath(), Ce(n, t[5]), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(0, -3), n.moveTo(53 * e, 45 * e), n.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e), n.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e), n.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e), n.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e), n.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e), n.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e), n.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e), n.closePath(), Ce(n, t[0], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(151 * e, 60 * e), n.bezierCurveTo(140 * e, 36 * e, 137 * e, 32 * e, 124 * e, 29 * e), n.bezierCurveTo(98 * e, 22 * e, 80 * e, 24 * e, 62 * e, 28 * e), n.bezierCurveTo(42 * e, 35 * e, 38 * e, 46 * e, 34 * e, 58 * e), n.bezierCurveTo(53 * e, 74 * e, 76 * e, 76 * e, 91 * e, 78 * e), n.closePath(), Ce(n, t[0], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(37 * e, 53 * e), n.bezierCurveTo(30 * e, 56 * e, 29 * e, 67 * e, 30 * e, 68 * e), n.bezierCurveTo(94 * e, 108 * e, 150 * e, 76 * e, 155 * e, 70 * e), n.bezierCurveTo(154 * e, 60 * e, 151 * e, 54 * e, 149 * e, 53 * e), n.bezierCurveTo(101 * e, 74 * e, 66 * e, 66 * e, 37 * e, 53 * e), n.closePath(), Ce(n, t[2], t[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 36 * e), n.bezierCurveTo(92 * e, 25 * e, 86 * e, 28 * e, 82 * e, 34 * e), n.bezierCurveTo(88 * e, 40 * e, 93 * e, 40 * e, 98 * e, 36 * e), n.closePath(), Ce(n, t[0], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80 * e, 43 * e), n.bezierCurveTo(69 * e, 46 * e, 67 * e, 52 * e, 69 * e, 58 * e), Ce(n, void 0, t[1], 4 * e), Ne(n, 58 * e, 50 * e, 5 * e), Ce(n, t[4]), Ne(n, 43 * e, 65 * e, 5 * e), Ce(n, t[4]), Ne(n, 58 * e, 73 * e, 5 * e), Ce(n, t[4]), Ne(n, 58 * e, 50 * e, 2 * e), Ce(n, t[5]), Ne(n, 43 * e, 65 * e, 2 * e), Ce(n, t[5]), Ne(n, 58 * e, 73 * e, 2 * e), Ce(n, t[5]), r
    }

    function ir(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 180 * e, r.height = 120 * e, n.translate(-65 * e, -35 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.save(), n.translate(150.5 * e, 63.84375 * e), ge(n, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80.5 * e, 75.34375 * e), n.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e), n.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e), n.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(206.5 * e, 71.34375 * e), n.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e), n.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e), n.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(136.5 * e, 75.34375 * e), n.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e), n.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e), n.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e), n.closePath(), Ce(n, t[0]), n.save(), n.translate(152.5 * e, 80.84375 * e), n.rotate(3.12), ge(n, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(150.5 * e, 63.84375 * e), ge(n, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80.5 * e, 75.34375 * e), n.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e), n.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e), n.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(206.5 * e, 71.34375 * e), n.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e), n.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e), n.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(136.5 * e, 75.34375 * e), n.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e), n.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e), n.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.save(), n.translate(152.5 * e, 80.84375 * e), n.rotate(3.12), ge(n, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(83.5 * e, 73.34375 * e), n.bezierCurveTo(93.5 * e, 70.34375 * e, 105.5 * e, 70.34375 * e, 124.5 * e, 72.34375 * e), n.bezierCurveTo(132.5 * e, 78.34375 * e, 162.5 * e, 80.34375 * e, 176.5 * e, 76.34375 * e), n.bezierCurveTo(194.5 * e, 69.34375 * e, 192.5 * e, 68.34375 * e, 199.5 * e, 63.34375 * e), n.bezierCurveTo(204.5 * e, 63.34375 * e, 204.5 * e, 63.34375 * e, 209.5 * e, 63.34375 * e), n.bezierCurveTo(153.5 * e, 82.34375 * e, 157.5 * e, 85.34375 * e, 209.5 * e, 63.34375 * e), n.bezierCurveTo(194.5 * e, 88.34375 * e, 162.5 * e, 87.34375 * e, 149.5 * e, 88.34375 * e), n.bezierCurveTo(129.5 * e, 81.34375 * e, 103.5 * e, 75.34375 * e, 83.5 * e, 82.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(137.5 * e, 65.34375 * e), n.bezierCurveTo(150.5 * e, 76.34375 * e, 170.5 * e, 71.34375 * e, 174.5 * e, 65.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(221.5 * e, 85.34375 * e), n.bezierCurveTo(211.5 * e, 79.34375 * e, 191.5 * e, 88.34375 * e, 181.5 * e, 96.34375 * e), n.bezierCurveTo(201.5 * e, 96.34375 * e, 201.5 * e, 96.34375 * e, 221.5 * e, 96.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84.5 * e, 89.34375 * e), n.bezierCurveTo(102.5 * e, 87.34375 * e, 112.5 * e, 88.34375 * e, 119.5 * e, 97.34375 * e), n.bezierCurveTo(102 * e, 98.34375 * e, 102 * e, 98.34375 * e, 84.5 * e, 99.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(208.5 * e, 104.34375 * e), n.bezierCurveTo(208.5 * e, 110.34375 * e, 208.5 * e, 110.34375 * e, 208.5 * e, 116.34375 * e), n.bezierCurveTo(211.5 * e, 110.34375 * e, 211.5 * e, 110.34375 * e, 214.5 * e, 104.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.5 * e, 117.34375 * e), n.bezierCurveTo(92 * e, 118.84375 * e, 92 * e, 118.84375 * e, 96.5 * e, 120.34375 * e), n.bezierCurveTo(93 * e, 123.84375 * e, 93 * e, 123.84375 * e, 89.5 * e, 127.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(107.5 * e, 51.34375 * e), n.bezierCurveTo(122.5 * e, 54.34375 * e, 122.5 * e, 54.34375 * e, 137.5 * e, 57.34375 * e), n.bezierCurveTo(118 * e, 57.34375 * e, 118 * e, 57.34375 * e, 98.5 * e, 57.34375 * e), n.bezierCurveTo(94.5 * e, 54.84375 * e, 94.5 * e, 54.84375 * e, 90.5 * e, 52.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(170.5 * e, 52.34375 * e), n.bezierCurveTo(179.5 * e, 51.84375 * e, 179.5 * e, 51.84375 * e, 188.5 * e, 51.34375 * e), n.bezierCurveTo(187.5 * e, 53.84375 * e, 187.5 * e, 53.84375 * e, 186.5 * e, 56.34375 * e), n.bezierCurveTo(177 * e, 56.34375 * e, 177 * e, 56.34375 * e, 167.5 * e, 56.34375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80.5 * e, 69.34375 * e), n.bezierCurveTo(86.5 * e, 70.34375 * e, 86.5 * e, 70.34375 * e, 92.5 * e, 71.34375 * e), n.bezierCurveTo(86 * e, 73.34375 * e, 86 * e, 73.34375 * e, 79.5 * e, 75.34375 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(222.5 * e, 75.34375 * e), n.bezierCurveTo(214.5 * e, 76.34375 * e, 214.5 * e, 76.34375 * e, 206.5 * e, 77.34375 * e), n.bezierCurveTo(216.5 * e, 79.34375 * e, 216.5 * e, 79.34375 * e, 226.5 * e, 81.34375 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(116.5 * e, 100.34375 * e), n.bezierCurveTo(128 * e, 97.34375 * e, 128 * e, 97.34375 * e, 139.5 * e, 94.34375 * e), n.bezierCurveTo(140 * e, 96.84375 * e, 140 * e, 96.84375 * e, 140.5 * e, 99.34375 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(112.5 * e, 48.34375 * e), n.bezierCurveTo(115.5 * e, 50.84375 * e, 115.5 * e, 50.84375 * e, 118.5 * e, 53.34375 * e), n.bezierCurveTo(131 * e, 50.84375 * e, 131 * e, 50.84375 * e, 143.5 * e, 48.34375 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(216.5 * e, 109.34375 * e), n.bezierCurveTo(213 * e, 114.84375 * e, 213 * e, 114.84375 * e, 209.5 * e, 120.34375 * e), n.bezierCurveTo(212 * e, 118.84375 * e, 212 * e, 118.84375 * e, 214.5 * e, 117.34375 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(86.5 * e, 133.34375 * e), n.bezierCurveTo(89 * e, 127.34375 * e, 89 * e, 127.34375 * e, 91.5 * e, 121.34375 * e), n.bezierCurveTo(92.5 * e, 127.34375 * e, 92.5 * e, 127.34375 * e, 93.5 * e, 133.34375 * e), n.closePath(), Ce(n, t[2]), r
    }

    function tr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 175 * e, r.height = 106 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 67 * e), n.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e), n.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e), n.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(145 * e, 75 * e), n.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e), n.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e), n.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e), n.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(38 * e, 46 * e), n.bezierCurveTo(52 * e, 37 * e, 69 * e, 36 * e, 85 * e, 36 * e), n.bezierCurveTo(118 * e, 38 * e, 129 * e, 42 * e, 137 * e, 48 * e), n.bezierCurveTo(135 * e, 45 * e, 135 * e, 45 * e, 133 * e, 42 * e), n.bezierCurveTo(124 * e, 32 * e, 116 * e, 28 * e, 88 * e, 25 * e), n.bezierCurveTo(47 * e, 28 * e, 40 * e, 32 * e, 36 * e, 44 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(145 * e, 75 * e), n.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e), n.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e), n.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e), n.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e), n.closePath(), Ce(n, void 0, t[2], 4 * e), n.translate(0, -3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 67 * e), n.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e), n.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e), n.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e), n.closePath(), Ce(n, t[10], t[10], 4 * e), n.translate(0, 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131 * e, 43 * e), n.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e), n.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e), n.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 43 * e), n.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e), n.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e), n.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(24 * e, 19 * e), n.bezierCurveTo(24 * e, 35 * e, 35 * e, 42 * e, 42 * e, 44 * e), n.bezierCurveTo(43 * e, 51 * e, 43 * e, 48 * e, 43 * e, 56 * e), n.bezierCurveTo(25 * e, 47 * e, 17 * e, 36 * e, 23 * e, 20 * e), n.closePath(), Ce(n, t[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(148 * e, 18 * e), n.bezierCurveTo(159 * e, 44 * e, 139 * e, 52 * e, 130 * e, 55 * e), n.bezierCurveTo(129 * e, 48 * e, 129 * e, 46 * e, 131 * e, 43 * e), n.bezierCurveTo(144 * e, 37 * e, 148 * e, 35 * e, 147 * e, 18 * e), n.closePath(), Ce(n, t[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131 * e, 43 * e), n.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e), n.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e), n.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e), n.closePath(), Ce(n, void 0, t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 43 * e), n.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e), n.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e), n.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e), n.closePath(), Ce(n, void 0, t[4], 4 * e), n.save(), n.translate(87 * e, 34.5 * e), n.rotate(0), ge(n, -8 * e, -10.5 * e, 16 * e, 21 * e, 10 * e), n.restore(), Ce(n, t[7], t[2], 4 * e), n.save(), n.translate(87 * e, 57 * e), n.rotate(0), ge(n, -8 * e, -23 * e, 16 * e, 46 * e, 10 * e), n.restore(), Ce(n, t[8], t[2], 4 * e), Ne(n, 87 * e, 39 * e, 4.123105625617661 * e), Ce(n, t[9], t[2], 4 * e), Ne(n, 87 * e, 60 * e, 4.242640687119285 * e), Ce(n, t[9], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 67 * e), n.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e), n.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e), n.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e), n.closePath(), Ce(n, t[8], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27 * e, 69 * e), n.bezierCurveTo(13 * e, 77 * e, 16 * e, 74 * e, 27 * e, 80 * e), n.closePath(), Ce(n, t[9], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(145 * e, 70 * e), n.bezierCurveTo(149.5 * e, 72 * e, 149.5 * e, 72 * e, 154 * e, 74 * e), n.bezierCurveTo(150 * e, 77 * e, 150 * e, 77 * e, 146 * e, 80 * e), n.closePath(), Ce(n, t[9], t[2], 4 * e), Ne(n, 50 * e, 80 * e, 5 * e), Ce(n, t[9], t[2], 4 * e), Ne(n, 86.01141357421875 * e, 81.76705932617188 * e, 5 * e), Ce(n, t[9], t[2], 4 * e), Ne(n, 119.01141357421875 * e, 80.13069152832031 * e, 5 * e), Ce(n, t[9], t[2], 4 * e), r
    }

    function rr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 142 * e, r.height = 118 * e, n.save(), n.translate(70.16665649414062 * e, 38.20831298828125 * e), ge(n, -58.5 * e, -27.5 * e, 117 * e, 55 * e, 20 * e), n.restore(), Ce(n, t[0], t[1], 4 * e), n.save(), n.translate(70 * e, 42.70831298828125 * e), ge(n, -61 * e, -20 * e, 122 * e, 40 * e, 20 * e), n.restore(), Ce(n, t[2], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123 * e, 70.375 * e), n.bezierCurveTo(115 * e, 99.375 * e, 119 * e, 85.375 * e, 115 * e, 100.375 * e), n.bezierCurveTo(112 * e, 116.375 * e, 117 * e, 109.375 * e, 131 * e, 100.375 * e), n.bezierCurveTo(131 * e, 83.375 * e, 131 * e, 83.375 * e, 131 * e, 66.375 * e), n.closePath(), Ce(n, t[2], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(11 * e, 68.375 * e), n.bezierCurveTo(11.166656494140625 * e, 84.375 * e, 9 * e, 99.375 * e, 10 * e, 100.375 * e), n.bezierCurveTo(35 * e, 113.375 * e, 27 * e, 110.375 * e, 25 * e, 95.375 * e), n.bezierCurveTo(16 * e, 68.375 * e, 17 * e, 69.375 * e, 17 * e, 68.375 * e), n.closePath(), Ce(n, t[2], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46 * e, 32.375 * e), n.bezierCurveTo(43 * e, 8.375 * e, 45 * e, 7.375 * e, 56 * e, 6.375 * e), n.bezierCurveTo(105 * e, 4.375 * e, 102 * e, 6.375 * e, 97 * e, 32.375 * e), n.bezierCurveTo(138 * e, 43.375 * e, 133 * e, 45.375 * e, 133 * e, 58.375 * e), n.bezierCurveTo(133 * e, 85.375 * e, 125 * e, 74.375 * e, 111 * e, 70.375 * e), n.bezierCurveTo(70 * e, 69.875 * e, 29 * e, 69.375 * e, 29 * e, 69.375 * e), n.bezierCurveTo(7 * e, 84.375 * e, 7 * e, 70.375 * e, 7 * e, 59.375 * e), n.bezierCurveTo(6 * e, 28.375 * e, 32 * e, 39.375 * e, 44 * e, 32.375 * e), n.closePath(), Ce(n, t[2], t[1], 4 * e), Ne(n, 71 * e, 44.375 * e, 16.55294535724685 * e), Ce(n, t[2], t[1], 4 * e), Ne(n, 71 * e, 43.70831298828125 * e, 8.94427190999916 * e), Ce(n, t[2], t[1], 4 * e), r
    }

    function nr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 142 * e, r.height = 118 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111 * e, 27.3671875 * e), n.bezierCurveTo(128 * e, 9.3671875 * e, 125 * e, 13.3671875 * e, 126 * e, 21.3671875 * e), n.bezierCurveTo(126 * e, 33.3671875 * e, 119 * e, 43.3671875 * e, 118 * e, 42.3671875 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 23.3671875 * e), n.bezierCurveTo(17 * e, 15.3671875 * e, 16 * e, 14.3671875 * e, 17 * e, 20.3671875 * e), n.bezierCurveTo(22 * e, 33.3671875 * e, 20 * e, 27.3671875 * e, 24 * e, 34.3671875 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.save(), n.translate(70.5 * e, 34.8671875 * e), n.rotate(0), ge(n, -49.5 * e, -21.5 * e, 99 * e, 43 * e, 15 * e), n.restore(), Ce(n, t[0], t[1], 4 * e), n.save(), n.translate(71 * e, 40.8671875 * e), n.rotate(0), ge(n, -49 * e, -12.5 * e, 98 * e, 25 * e, 15 * e), n.restore(), Ce(n, t[2], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(19.800003051757812 * e, 75.95625305175781 * e), n.bezierCurveTo(19.300003051757812 * e, 82.95625305175781 * e, 19.300003051757812 * e, 82.95625305175781 * e, 18.800003051757812 * e, 89.95625305175781 * e), n.bezierCurveTo(38.80000305175781 * e, 115.95625305175781 * e, 37.80000305175781 * e, 104.95625305175781 * e, 31.800003051757812 * e, 91.95625305175781 * e), n.closePath(), Ce(n, t[2], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(119.80000305175781 * e, 75.95625305175781 * e), n.bezierCurveTo(120.80000305175781 * e, 82.95625305175781 * e, 120.80000305175781 * e, 82.95625305175781 * e, 121.80000305175781 * e, 89.95625305175781 * e), n.bezierCurveTo(101.80000305175781 * e, 111.95625305175781 * e, 99.80000305175781 * e, 111.95625305175781 * e, 112.80000305175781 * e, 81.95625305175781 * e), n.closePath(), Ce(n, t[2], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(17.800003051757812 * e, 49.15625 * e), n.bezierCurveTo(17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 79.15625 * e), n.bezierCurveTo(23.300003051757812 * e, 85.15625 * e, 23.300003051757812 * e, 85.15625 * e, 28.800003051757812 * e, 91.15625 * e), n.bezierCurveTo(36.80000305175781 * e, 96.15625 * e, 32.80000305175781 * e, 91.15625 * e, 28.800003051757812 * e, 77.15625 * e), n.bezierCurveTo(33.80000305175781 * e, 65.15625 * e, 33.80000305175781 * e, 65.15625 * e, 38.80000305175781 * e, 53.15625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123.80000305175781 * e, 53.95625305175781 * e), n.bezierCurveTo(121.80000305175781 * e, 77.95625305175781 * e, 121.80000305175781 * e, 74.95625305175781 * e, 121.80000305175781 * e, 78.95625305175781 * e), n.bezierCurveTo(115.80000305175781 * e, 84.95625305175781 * e, 115.80000305175781 * e, 84.95625305175781 * e, 109.80000305175781 * e, 90.95625305175781 * e), n.bezierCurveTo(102.80000305175781 * e, 93.95625305175781 * e, 105.80000305175781 * e, 86.95625305175781 * e, 110.80000305175781 * e, 76.95625305175781 * e), n.bezierCurveTo(107.30000305175781 * e, 65.45625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(18 * e, 56.3671875 * e), n.bezierCurveTo(70 * e, 56.8671875 * e, 70 * e, 56.8671875 * e, 122 * e, 57.3671875 * e), n.bezierCurveTo(137 * e, 20.3671875 * e, 137 * e, 16.3671875 * e, 126 * e, 22.3671875 * e), n.bezierCurveTo(115.5 * e, 34.3671875 * e, 115.5 * e, 34.3671875 * e, 105 * e, 46.3671875 * e), n.bezierCurveTo(70.5 * e, 46.3671875 * e, 70.5 * e, 46.3671875 * e, 36 * e, 46.3671875 * e), n.bezierCurveTo(4 * e, 14.3671875 * e, 7 * e, 18.3671875 * e, 8 * e, 27.3671875 * e), n.bezierCurveTo(12.5 * e, 41.8671875 * e, 12.5 * e, 41.8671875 * e, 17 * e, 56.3671875 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.save(), n.translate(68.30000305175781 * e, 41.45625305175781 * e), n.rotate(.76), ge(n, -20.5 * e, -20.5 * e, 41 * e, 41 * e, 10 * e), n.restore(), Ce(n, void 0, t[5], 4 * e), n.save(), n.translate(68.80000305175781 * e, 44.45625305175781 * e), n.rotate(.76), ge(n, -21 * e, -20.5 * e, 42 * e, 41 * e, 10 * e), n.restore(), Ce(n, t[3], t[4], 4 * e), n.save(), n.translate(69.80000305175781 * e, 44.556243896484375 * e), n.rotate(.76), ge(n, -10 * e, -10 * e, 20 * e, 20 * e, 5 * e), n.restore(), Ce(n, t[6], t[7], 4 * e), r
    }

    function ar(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 145 * e, r.height = 120 * e, n.beginPath(), n.scale(.6, .6), n.lineCap = "round", n.lineJoin = "round", n.translate(18 * e, -8 * e), n.moveTo(101 * e, 72 * e), n.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e), n.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e), n.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e), n.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e), n.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e), n.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e), n.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e), n.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e), n.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e), n.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e), n.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e), n.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), n.beginPath(), n.scale(1.1, 1.1), n.lineCap = "round", n.lineJoin = "round", n.translate(-9 * e, 4 * e), n.moveTo(101 * e, 72 * e), n.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e), n.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e), n.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e), n.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e), n.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e), n.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e), n.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e), n.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e), n.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e), n.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e), n.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e), n.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), n.scale(1.1, 1.1), n.translate(-9 * e, 4 * e), n.save(), n.translate(100 * e, 73.06874084472656 * e), n.rotate(0), ge(n, -61 * e, -38.5 * e, 122 * e, 40 * e, 20 * e), n.restore(), Ce(n, t[1], t[2], 4 * e), n.save(), n.translate(100 * e, 71.36874389648438 * e), n.rotate(0), ge(n, -60.5 * e, -18 * e, 121 * e, 30 * e, 20 * e), n.restore(), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(144 * e, 80 * e), n.bezierCurveTo(152 * e, 100 * e, 152 * e, 101 * e, 153 * e, 102 * e), n.bezierCurveTo(159 * e, 100 * e, 159 * e, 100 * e, 160 * e, 100 * e), n.bezierCurveTo(161 * e, 84 * e, 161 * e, 84 * e, 162 * e, 68 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(57 * e, 75 * e), n.bezierCurveTo(48 * e, 101 * e, 53 * e, 89 * e, 48 * e, 102 * e), n.bezierCurveTo(44 * e, 100 * e, 44 * e, 100 * e, 39 * e, 97 * e), n.bezierCurveTo(39 * e, 83 * e, 39 * e, 83 * e, 39 * e, 69 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(101 * e, 72 * e), n.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e), n.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e), n.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e), n.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e), n.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e), n.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e), n.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e), n.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e), n.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e), n.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e), n.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e), n.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e), n.closePath(), Ce(n, t[4], t[5], 4 * e), n.translate(0, 0), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115.5 * e, 116.07290649414062 * e), n.bezierCurveTo(159.5 * e, 99.07290649414062 * e, 159.5 * e, 98.07290649414062 * e, 159.5 * e, 98.07290649414062 * e), n.bezierCurveTo(155.5 * e, 116.07290649414062 * e, 159.5 * e, 116.07290649414062 * e, 159.5 * e, 118.07290649414062 * e), n.bezierCurveTo(147.5 * e, 130.07290649414062 * e, 136.5 * e, 132.07290649414062 * e, 115.5 * e, 138.07290649414062 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39.5 * e, 96.07290649414062 * e), n.bezierCurveTo(85.5 * e, 114.07290649414062 * e, 62.5 * e, 105.57290649414062 * e, 85.5 * e, 115.07290649414062 * e), n.bezierCurveTo(85.5 * e, 125.57290649414062 * e, 85.5 * e, 125.57290649414062 * e, 85.5 * e, 136.07290649414062 * e), n.bezierCurveTo(51.5 * e, 129.07290649414062 * e, 51.5 * e, 125.07290649414062 * e, 41.5 * e, 118.07290649414062 * e), n.bezierCurveTo(44.5 * e, 106.07290649414062 * e, 42.5 * e, 103.07290649414062 * e, 40.5 * e, 96.07290649414062 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(86 * e, 80 * e), n.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e), n.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e), n.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), n.scale(.5, .5), n.translate(100 * e, 71 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(86 * e, 80 * e), n.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e), n.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e), n.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e), n.closePath(), Ce(n, t[6], t[2], 4 * e), r
    }

    function or(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.save(), n.translate(204 * e, 195.0833282470703 * e), n.rotate(10.16), ge(n, -97.5 * e, -134.5 * e, 195 * e, 269 * e, 10 * e), n.restore(), Ce(n, t[0], t[1], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58.5 * e, 226.5833282470703 * e), n.bezierCurveTo(120.5 * e, 281.5833282470703 * e, 120.5 * e, 281.5833282470703 * e, 182.5 * e, 336.5833282470703 * e), n.bezierCurveTo(263 * e, 248.5833282470703 * e, 263 * e, 248.5833282470703 * e, 343.5 * e, 160.5833282470703 * e), n.bezierCurveTo(280.5 * e, 104.58332824707031 * e, 280.5 * e, 104.58332824707031 * e, 217.5 * e, 48.58332824707031 * e), n.closePath(), Ce(n, t[2], t[3], 4 * e), n.save(), n.translate(197 * e, 169.0833282470703 * e), n.rotate(10.16), ge(n, -93.5 * e, -126.5 * e, 187 * e, 253 * e, 10 * e), n.restore(), Ce(n, t[4], t[1], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(226.5 * e, 24.583328247070312 * e), n.bezierCurveTo(58.5 * e, 207.5833282470703 * e, 143 * e, 116.58332824707031 * e, 59.5 * e, 208.5833282470703 * e), n.closePath(), Ce(n, void 0, t[1], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46.133331298828125 * e, 202.64999389648438 * e), n.bezierCurveTo(46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 228.64999389648438 * e), n.closePath(), Ce(n, t[4], t[1], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55.133331298828125 * e, 211.64999389648438 * e), n.bezierCurveTo(55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 238.64999389648438 * e), n.bezierCurveTo(50.133331298828125 * e, 235.64999389648438 * e, 50.133331298828125 * e, 235.64999389648438 * e, 45.133331298828125 * e, 232.64999389648438 * e), n.bezierCurveTo(45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 200.64999389648438 * e), n.closePath(), Ce(n, t[4], t[1], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46.133331298828125 * e, 198.39999389648438 * e), n.bezierCurveTo(46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 201.39999389648438 * e), n.closePath(), Ce(n, t[4], t[1], 8 * e), n.save(), n.translate(249.63333129882812 * e, 120.89999389648438 * e), n.rotate(7.04), ge(n, -58.5 * e, -32 * e, 117 * e, 64 * e, 10 * e), n.restore(), Ce(n, t[5]), r
    }

    function sr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 170 * e, r.height = 170 * e, n.globalAlpha = i ? .5 : 1, n.translate(-10 * e, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 4.109375 * e), n.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e), n.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e), n.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e), n.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(10 * e, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 4.109375 * e), n.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e), n.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e), n.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e), n.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e), n.closePath(), Ce(n, t[1], t[2], 10 * e), r
    }

    function _r(e, i, t) {
        var r = (n = document.createElement("canvas")).getContext("2d");
        n.width = 47 * e, n.height = 60 * e;
        var n;
        r = (n = document.createElement("canvas")).getContext("2d");
        return n.width = 47 * e, n.height = 60 * e, Ne(r, 23.5 * e, 20.734375 * e, 15.132745950421556 * e), Ce(r, void 0, t[2], 4 * e), Ne(r, 23.5 * e, 20.734375 * e, 18.601075237738275 * e), Ce(r, void 0, t[1], 4 * e), Ne(r, 23.5 * e, 20.734375 * e, 11.40175425099138 * e), Ce(r, void 0, t[1], 4 * e), r.save(), r.translate(23 * e, 38.734375 * e), r.rotate(0), ge(r, -21.5 * e, -19 * e, 43 * e, 38 * e, 10 * e), r.restore(), Ce(r, t[2], t[1], 4 * e), r.save(), r.translate(23.5 * e, 43.734375 * e), r.rotate(.5235987755982988), be(r, 3, 8.06225774829855 * e, 0 * e), r.restore(), Ce(r, t[3]), Ne(r, 23.5 * e, 35.734375 * e, 7.0710678118654755 * e), Ce(r, t[3]), n
    }

    function Er(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        return n.width = 501 * e, n.height = 564 * e, a.scale(.5, .5), a.translate(240 * e, 255 * e), a.rotate(r), a.globalAlpha = i ? .5 : .2, Ne(a, 174 * e, 87.984375 * e, 20.8806130178211 * e), Ce(a, t[0], t[0], 8 * e), Ne(a, 174 * e, 87.984375 * e, 12.165525060596439 * e), Ce(a, t[0], t[0], 8 * e), Ne(a, 174 * e, 87.484375 * e, 6 * e), Ce(a, t[0]), Ne(a, 30 * e, 87.984375 * e, 20.8806130178211 * e), Ce(a, t[0], t[0], 4 * e), Ne(a, 30 * e, 87.984375 * e, 12.165525060596439 * e), Ce(a, t[0], t[0], 4 * e), Ne(a, 30 * e, 87.484375 * e, 6 * e), Ce(a, t[0]), Ne(a, 100 * e, 30 * e, 20.8806130178211 * e), Ce(a, t[0], t[0], 4 * e), Ne(a, 100 * e, 30 * e, 12.165525060596439 * e), Ce(a, t[0], t[0], 4 * e), Ne(a, 100 * e, 30 * e, 6 * e), Ce(a, t[0]), Ne(a, 100 * e, 130 * e, 20.8806130178211 * e), Ce(a, t[0], t[0], 4 * e), Ne(a, 100 * e, 130 * e, 12.165525060596439 * e), Ce(a, t[0], t[0], 4 * e), Ne(a, 100 * e, 130 * e, 6 * e), Ce(a, t[0]), a.save(), a.translate(102 * e, 81.984375 * e), a.rotate(0), ge(a, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e), a.restore(), Ce(a, t[0], t[0], 4 * e), a.save(), a.translate(101 * e, 64.984375 * e), a.rotate(0), ge(a, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e), a.restore(), Ce(a, t[0], t[0], 4 * e), a.save(), a.translate(102 * e, 63.484375 * e), a.rotate(0), ge(a, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e), a.restore(), a.translate(5, -5), a.globalAlpha = 1, Ne(a, 174 * e, 87.984375 * e, 20.8806130178211 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 174 * e, 87.984375 * e, 12.165525060596439 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 174 * e, 87.484375 * e, 6 * e), Ce(a, t[2]), Ne(a, 30 * e, 87.984375 * e, 20.8806130178211 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 30 * e, 87.984375 * e, 12.165525060596439 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 30 * e, 87.484375 * e, 6 * e), Ce(a, t[2]), Ne(a, 102 * e, 30 * e, 20.8806130178211 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 102 * e, 30 * e, 12.165525060596439 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 102 * e, 30 * e, 6 * e), Ce(a, t[1]), Ne(a, 102 * e, 130 * e, 20.8806130178211 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 102 * e, 130 * e, 12.165525060596439 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 102 * e, 130 * e, 6 * e), Ce(a, t[1]), a.save(), a.translate(102 * e, 81.984375 * e), ge(a, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e), a.restore(), Ce(a, t[1], t[3], 8 * e), a.save(), a.translate(101 * e, 64.984375 * e), ge(a, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e), a.restore(), Ce(a, t[2], t[1], 8 * e), a.save(), a.translate(102 * e, 63.484375 * e), ge(a, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e), a.restore(), Ce(a, t[2], t[1], 8 * e), Ne(a, 135 * e, 107.36605834960938 * e, 21.095023109728988 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 135 * e, 107.36605834960938 * e, 13 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 135 * e, 107.36605834960938 * e, 6.082762530298219 * e), Ce(a, t[2]), Ne(a, 70 * e, 107.36605834960938 * e, 21.095023109728988 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 70 * e, 107.36605834960938 * e, 13 * e), Ce(a, t[1], t[3], 8 * e), Ne(a, 70 * e, 107.36605834960938 * e, 6.082762530298219 * e), Ce(a, t[2]), n
    }

    function Tr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 95 * e, r.height = 85 * e, 0 == t ? (n.translate(7 * e, 15 * e), n.scale(.9, .9), n.save(), ge(n, 0 * e, 5 * e, 90 * e, 60 * e, 10), Ce(n, i[0]), n.globalCompositeOperation = "destination-out", Ne(n, 25 * e, 40 * e, 10 * e), n.fill(), Ne(n, 65 * e, 40 * e, 10 * e), n.fill(), n.restore(), n.save(), ge(n, 0, 0, 90 * e, 60 * e, 10 * e), Ce(n, i[1]), n.globalCompositeOperation = "destination-out", Ne(n, 25 * e, 40 * e, 10 * e), n.fill(), Ne(n, 65 * e, 40 * e, 10 * e), n.fill(), n.restore()) : 1 == t && (n.scale(.8, .8), n.translate(15 * e, 33 * e), n.save(), n.scale(.56, .56), n.translate(-39 * e, -60 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32.5 * e, 50.642852783203125 * e), n.bezierCurveTo(83 * e, 69.64285278320312 * e, 83 * e, 69.64285278320312 * e, 133.5 * e, 88.64285278320312 * e), n.bezierCurveTo(93 * e, 92.64285278320312 * e, 93 * e, 92.64285278320312 * e, 52.5 * e, 96.64285278320312 * e), n.bezierCurveTo(30.5 * e, 100.64285278320312 * e, 36.5 * e, 94.64285278320312 * e, 32.5 * e, 84.64285278320312 * e), n.bezierCurveTo(21.5 * e, 45.642852783203125 * e, 24.5 * e, 48.642852783203125 * e, 31.5 * e, 50.642852783203125 * e), n.closePath(), Ce(n, i[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(116.5 * e, 85.64285278320312 * e), n.bezierCurveTo(160.5 * e, 67.14285278320312 * e, 160.5 * e, 67.14285278320312 * e, 204.5 * e, 48.642852783203125 * e), n.bezierCurveTo(220.5 * e, 42.642852783203125 * e, 208.5 * e, 68.64285278320312 * e, 205.5 * e, 85.64285278320312 * e), n.bezierCurveTo(202.5 * e, 98.64285278320312 * e, 199.5 * e, 98.64285278320312 * e, 188.5 * e, 100.64285278320312 * e), n.closePath(), Ce(n, i[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(166.5 * e, 68.64285278320312 * e), n.bezierCurveTo(147.5 * e, 72.64285278320312 * e, 145.5 * e, 73.64285278320312 * e, 142.5 * e, 62.642852783203125 * e), n.bezierCurveTo(121.5 * e, 12.642852783203125 * e, 122.5 * e, 5.642852783203125 * e, 117.5 * e, 15.642852783203125 * e), n.bezierCurveTo(105.5 * e, 40.642852783203125 * e, 105.5 * e, 40.642852783203125 * e, 93.5 * e, 65.64285278320312 * e), n.bezierCurveTo(89.5 * e, 74.64285278320312 * e, 84.5 * e, 72.64285278320312 * e, 73.5 * e, 74.64285278320312 * e), n.bezierCurveTo(98 * e, 87.64285278320312 * e, 98 * e, 87.64285278320312 * e, 122.5 * e, 100.64285278320312 * e), n.closePath(), Ce(n, i[1]), n.restore(), n.save(), ge(n, 0, 15 * e, 90 * e, 50 * e, 10 * e), Ce(n, i[0]), ge(n, 0, 10 * e, 90 * e, 50 * e, 10 * e), Ce(n, i[1]), n.globalCompositeOperation = "destination-out", Ne(n, 25 * e, 40 * e, 10 * e), n.fill(), Ne(n, 65 * e, 40 * e, 10 * e), n.fill(), n.restore()), r
    }

    function Ar(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        if (r.width = 120 * e, r.height = 100 * e, ge(n, 10 * e, 10 * e, 95 * e, 80 * e, 10 * e), Ce(n, i[2]), ge(n, 10 * e, 5 * e, 95 * e, 80 * e, 10 * e), Ce(n, i[3], i[4], 4 * e), 0 == t) {
            var a = Tr(.75 * e, i, 0);
            n.drawImage(a, 22 * e, 18 * e)
        } else if (1 == t) {
            a = Tr(.75 * e, i, 1);
            n.drawImage(a, 22 * e, 18 * e)
        }
        return r
    }

    function dr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        r.width = 185 * e, r.height = 164 * e, n.translate(0, 0);
        var a = function (e, i, t) {
            var r = document.createElement("canvas"),
                n = r.getContext("2d");
            return r.width = 201 * e, r.height = 164 * e, n.translate(0, 5 * e), n.globalAlpha = i ? .5 : 1, Ne(n, 100.5 * e, 82 * e, 74.92746655359852 * e), Ce(n, t[0], t[0], 4 * e), Ne(n, 100.5 * e, 82 * e, 65.9417374971317 * e), Ce(n, t[0], t[0], 4 * e), n.translate(0, -5), n.globalAlpha = 1, Ne(n, 100.5 * e, 82 * e, 74.92746655359852 * e), Ce(n, t[1], t[3], 4 * e), Ne(n, 100.5 * e, 82 * e, 65.9417374971317 * e), Ce(n, t[1], t[2], 4 * e), Ne(n, 100.5 * e, 82 * e, 35.9417374971317 * e), Ce(n, t[1], t[2], 20 * e), Ne(n, 100.5 * e, 82 * e, 15.9417374971317 * e), Ce(n, t[1], t[2], 6 * e), r
        }(e, i, t);
        n.drawImage(a, -10 * e, 0 * e);
        a = Er(e, i, t, 0);
        n.drawImage(a, -83 * e, -40 * e);
        a = Er(e, i, t, Math.PI / 1.4);
        n.drawImage(a, -15 * e, -88 * e);
        a = Er(e, i, t, Math.PI / -1.4);
        return n.drawImage(a, 15 * e, -8 * e), r
    }

    function Ir(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 450 * e, r.height = 790 * e, n.translate(5 * e, 5 * e), n.globalAlpha = 0, Ne(n, 178.5 * e, 172.828125 * e, 150 * e), Ce(n, void 0, t[0], 65 * e), Ne(n, 178.5 * e, 172.828125 * e, 150 * e), Ce(n, void 0, t[0], 55 * e), n.closePath(), n.save(), n.translate(177 * e, 512.328125 * e), ge(n, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(136 * e, 581.828125 * e), ge(n, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e), n.restore(), Ce(n, t[0]), n.save(), n.translate(135.5 * e, 663.828125 * e), ge(n, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(114 * e, 594.828125 * e), n.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e), n.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e), n.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e), n.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e), n.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(0, 5 * e), n.moveTo(140 * e, 294.828125 * e), n.bezierCurveTo(212 * e, 295.828125 * e, 176.5 * e, 295.328125 * e, 213 * e, 295.828125 * e), n.bezierCurveTo(201.5 * e, 325.328125 * e, 201.5 * e, 325.328125 * e, 190 * e, 354.828125 * e), n.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 161 * e, 356.828125 * e), n.bezierCurveTo(154.5 * e, 328.828125 * e, 154.5 * e, 328.828125 * e, 148 * e, 300.828125 * e), n.closePath(), Ce(n, t[0]), n.translate(3, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(159 * e, 679.828125 * e), n.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e), n.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e), n.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e), n.closePath(), Ce(n, t[0]), n.save(), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157 * e, 548.828125 * e), n.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e), n.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e), n.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e), n.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e), n.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e), n.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e), n.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e), n.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e), n.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e), n.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e), n.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e), n.closePath(), Ce(n, t[0], t[0], 7 * e), n.restore(), n.globalAlpha = 1, n.translate(15 * e, 35 * e), Ne(n, 178.5 * e, 172.828125 * e, 150 * e), Ce(n, void 0, t[2], 95 * e), Ne(n, 178.5 * e, 172.828125 * e, 150 * e), Ce(n, void 0, t[1], 55 * e), n.closePath(), n.save(), n.translate(177 * e, 512.328125 * e), ge(n, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e), n.restore(), Ce(n, t[1], t[2], 20 * e), n.save(), n.translate(136 * e, 581.828125 * e), ge(n, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e), n.restore(), Ce(n, t[1], t[2], 20 * e), n.save(), n.translate(135.5 * e, 663.828125 * e), ge(n, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e), n.restore(), Ce(n, t[1], t[2], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(114 * e, 594.828125 * e), n.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e), n.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e), n.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e), n.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e), n.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(0, 5 * e), n.moveTo(123 * e, 294.828125 * e), n.bezierCurveTo(212 * e, 295.828125 * e, 190.5 * e, 295.328125 * e, 250 * e, 295.828125 * e), n.bezierCurveTo(231.5 * e, 325.328125 * e, 231.5 * e, 325.328125 * e, 220 * e, 354.828125 * e), n.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 140 * e, 356.828125 * e), n.bezierCurveTo(123.5 * e, 328.828125 * e, 123.5 * e, 328.828125 * e, 123 * e, 294.828125 * e), n.closePath(), Ce(n, t[1]), n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(159 * e, 679.828125 * e), n.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e), n.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e), n.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e), n.closePath(), Ce(n, t[1]), n.save(), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157 * e, 548.828125 * e), n.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e), n.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e), n.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e), n.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e), n.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e), n.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e), n.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e), n.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e), n.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e), n.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e), n.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e), n.closePath(), Ce(n, t[1], t[1], 7 * e), n.restore(), r
    }

    function hr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 202 * e, r.height = 202 * e, n.translate(2 * e, 1 * e), n.globalAlpha = .3, Ne(n, 98 * e, 99 * e, 100 * e), Ce(n, t[0]), n.globalAlpha = .5, Ne(n, 98 * e, 99 * e, 90 * e), Ce(n, t[1]), r
    }

    function ur(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 89 * e, r.height = 89 * e, n.save(), n.translate(44.5 * e, 44.5 * e), be(n, 6, 40 * e, 10 * e), n.restore(), Ce(n, t[0], t[1], 5 * e), n.save(), n.translate(44.5 * e, 44.5 * e), be(n, 6, 25.11521001172521 * e, 10 * e), n.restore(), Ce(n, t[2], t[3], 5 * e), r
    }

    function Or(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 88 * e, r.height = 88 * e, n.save(), n.translate(44 * e, 44 * e), n.rotate(.52), be(n, 6, 43 * e, 10 * e), n.restore(), Ce(n, t[0], t[1], 3 * e), r
    }

    function lr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 202 * e, r.height = 202 * e, n.translate(2 * e, 1 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.save(), n.translate(98 * e, 41.15177917480469 * e), n.rotate(.8), ge(n, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e), n.restore(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98 * e, 22.5089111328125 * e), n.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e), Ce(n, t[2]), n.save(), n.translate(147.5 * e, 69.5089111328125 * e), n.rotate(.2), ge(n, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e), n.restore(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(163 * e, 59.50892639160156 * e), n.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e), Ce(n, t[2]), n.save(), n.translate(143.5 * e, 128.2946319580078 * e), n.rotate(1.24), ge(n, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e), n.restore(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 135.93748474121094 * e), n.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e), Ce(n, t[2]), n.save(), n.translate(99 * e, 156.08035278320312 * e), n.rotate(.84), ge(n, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e), n.restore(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98 * e, 136.08035278320312 * e), n.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e), Ce(n, t[2]), n.save(), n.translate(54 * e, 72.22320556640625 * e), n.rotate(1.32), ge(n, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e), n.restore(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34 * e, 60.79463195800781 * e), n.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e), Ce(n, t[2]), n.save(), n.translate(49 * e, 127.29463195800781 * e), n.rotate(1.76), ge(n, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e), n.restore(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 141.7946319580078 * e), n.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e), Ce(n, t[2]), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(98 * e, 41.15177917480469 * e), n.rotate(.8), ge(n, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e), n.restore(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98 * e, 22.5089111328125 * e), n.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e), Ce(n, void 0, t[4], 5 * e), n.save(), n.translate(147.5 * e, 69.5089111328125 * e), n.rotate(.2), ge(n, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e), n.restore(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(163 * e, 59.50892639160156 * e), n.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e), Ce(n, void 0, t[4], 5 * e), n.save(), n.translate(143.5 * e, 128.2946319580078 * e), n.rotate(1.24), ge(n, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e), n.restore(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 135.93748474121094 * e), n.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e), Ce(n, void 0, t[4], 5 * e), n.save(), n.translate(99 * e, 156.08035278320312 * e), n.rotate(.84), ge(n, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e), n.restore(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98 * e, 136.08035278320312 * e), n.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e), Ce(n, void 0, t[4], 5 * e), n.save(), n.translate(54 * e, 72.22320556640625 * e), n.rotate(1.32), ge(n, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e), n.restore(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34 * e, 60.79463195800781 * e), n.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e), Ce(n, void 0, t[4], 5 * e), n.save(), n.translate(49 * e, 127.29463195800781 * e), n.rotate(1.76), ge(n, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e), n.restore(), Ce(n, t[3], t[4], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 141.7946319580078 * e), n.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e), Ce(n, void 0, t[4], 5 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.save(), n.translate(98 * e, 99 * e), be(n, 6, 70.28669492273468 * e, 10 * e), n.restore(), Ce(n, t[2]), n.save(), n.translate(98 * e, 99 * e), be(n, 6, 56.455940020351264 * e, 10 * e), n.restore(), Ce(n, t[2]), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(98 * e, 99 * e), be(n, 6, 70.28669492273468 * e, 10 * e), n.restore(), Ce(n, t[5], t[6], 5 * e), n.save(), n.translate(98 * e, 99 * e), be(n, 6, 56.455940020351264 * e, 10 * e), n.restore(), Ce(n, t[7], t[8], 7 * e), r
    }

    function Rr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 161 * e, r.height = 184 * e, n.translate(0, 10 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105.5 * e, 34.609375 * e), n.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e), n.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e), n.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e), n.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e), n.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e), n.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e), n.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e), n.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e), n.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e), n.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(45.5 * e, 144.609375 * e), n.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e), n.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e), n.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e), Ce(n, t[0]), n.translate(0, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(45.5 * e, 144.609375 * e), n.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e), n.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e), n.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105.5 * e, 34.609375 * e), n.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e), n.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e), n.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e), n.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e), n.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e), n.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e), n.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e), n.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e), n.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e), n.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(104.5 * e, 35.609375 * e), n.bezierCurveTo(71.5 * e, 36.609375 * e, 57.5 * e, 52.609375 * e, 58.5 * e, 81.609375 * e), n.bezierCurveTo(59.5 * e, 103.609375 * e, 66.5 * e, 107.609375 * e, 66.5 * e, 116.609375 * e), n.bezierCurveTo(67.5 * e, 128.609375 * e, 65.5 * e, 131.609375 * e, 63.5 * e, 137.609375 * e), Ce(n, void 0, t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59.5 * e, 72.609375 * e), n.bezierCurveTo(38.5 * e, 80.609375 * e, 43.5 * e, 81.609375 * e, 37.5 * e, 89.609375 * e), Ce(n, void 0, t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60.5 * e, 85.609375 * e), n.bezierCurveTo(75.5 * e, 91.609375 * e, 76.5 * e, 96.609375 * e, 81.5 * e, 104.609375 * e), Ce(n, void 0, t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(68.5 * e, 122.609375 * e), n.bezierCurveTo(79.5 * e, 130.609375 * e, 74.5 * e, 128.609375 * e, 80.5 * e, 134.609375 * e), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(142.5 * e, 18.609375 * e), n.bezierCurveTo(151.5 * e, 28.609375 * e, 151.5 * e, 32.609375 * e, 146.5 * e, 40.609375 * e), n.bezierCurveTo(137.5 * e, 26.609375 * e, 138.5 * e, 24.609375 * e, 142.5 * e, 19.609375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(146.5 * e, 61.50892639160156 * e), n.bezierCurveTo(157.5 * e, 69.50892639160156 * e, 150.5 * e, 79.50892639160156 * e, 145.5 * e, 81.50892639160156 * e), n.bezierCurveTo(140.5 * e, 65.50892639160156 * e, 144.5 * e, 64.50892639160156 * e, 146.5 * e, 62.50892639160156 * e), n.closePath(), Ce(n, t[3]), r
    }

    function cr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 104 * e, r.height = 117 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 90 * e), n.bezierCurveTo(20 * e, 99.5 * e, 20 * e, 99.5 * e, 36 * e, 109 * e), n.bezierCurveTo(67 * e, 92 * e, 67 * e, 92 * e, 98 * e, 75 * e), n.bezierCurveTo(91 * e, 27 * e, 91 * e, 27 * e, 91 * e, 28 * e), n.bezierCurveTo(72.5 * e, 16 * e, 72.5 * e, 16 * e, 54 * e, 4 * e), n.bezierCurveTo(33.5 * e, 10 * e, 33.5 * e, 10 * e, 13 * e, 16 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(6 * e, 76 * e), n.bezierCurveTo(13.5 * e, 51.5 * e, 13.5 * e, 51.5 * e, 21 * e, 27 * e), n.bezierCurveTo(37.5 * e, 17 * e, 37.5 * e, 17 * e, 54 * e, 7 * e), n.bezierCurveTo(33.5 * e, 12.5 * e, 33.5 * e, 12.5 * e, 13 * e, 18 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(24 * e, 62 * e), n.bezierCurveTo(28.5 * e, 53 * e, 28.5 * e, 53 * e, 33 * e, 44 * e), n.bezierCurveTo(41.5 * e, 41 * e, 41.5 * e, 41 * e, 50 * e, 38 * e), n.bezierCurveTo(52.5 * e, 35 * e, 52.5 * e, 35 * e, 55 * e, 32 * e), n.bezierCurveTo(52 * e, 30 * e, 52 * e, 30 * e, 49 * e, 28 * e), n.bezierCurveTo(38 * e, 31.5 * e, 38 * e, 31.5 * e, 27 * e, 35 * e), n.closePath(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 107 * e), n.bezierCurveTo(66 * e, 90.5 * e, 66 * e, 90.5 * e, 96 * e, 74 * e), n.bezierCurveTo(93 * e, 52.5 * e, 93 * e, 52.5 * e, 90 * e, 31 * e), n.bezierCurveTo(87 * e, 48 * e, 87 * e, 48 * e, 84 * e, 65 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(1 * e, 89 * e), n.bezierCurveTo(18 * e, 100 * e, 34 * e, 110 * e, 35 * e, 111 * e), n.bezierCurveTo(67 * e, 93 * e, 67 * e, 93 * e, 99 * e, 75 * e), n.bezierCurveTo(100 * e, 78.5 * e, 100 * e, 78.5 * e, 101 * e, 82 * e), n.bezierCurveTo(68 * e, 99 * e, 68 * e, 99 * e, 35 * e, 116 * e), n.bezierCurveTo(18 * e, 106.5 * e, 18 * e, 106.5 * e, 1 * e, 97 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 107 * e), n.bezierCurveTo(66.5 * e, 91.5 * e, 66.5 * e, 91.5 * e, 97 * e, 76 * e), n.bezierCurveTo(94.5 * e, 52 * e, 94.5 * e, 52 * e, 92 * e, 28 * e), n.bezierCurveTo(73 * e, 15.5 * e, 73 * e, 15.5 * e, 54 * e, 3 * e), n.bezierCurveTo(33 * e, 9.5 * e, 33 * e, 9.5 * e, 12 * e, 16 * e), n.bezierCurveTo(8 * e, 53 * e, 8 * e, 53 * e, 4 * e, 90 * e), n.bezierCurveTo(18.5 * e, 99 * e, 18.5 * e, 99 * e, 33 * e, 108 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(22 * e, 71 * e), n.bezierCurveTo(30 * e, 76.5 * e, 30 * e, 76.5 * e, 38 * e, 82 * e), n.bezierCurveTo(53 * e, 72 * e, 53 * e, 72 * e, 68 * e, 62 * e), n.bezierCurveTo(68 * e, 52 * e, 68 * e, 52 * e, 68 * e, 42 * e), n.bezierCurveTo(59.5 * e, 35.5 * e, 59.5 * e, 35.5 * e, 51 * e, 29 * e), n.bezierCurveTo(39.5 * e, 32 * e, 39.5 * e, 32 * e, 28 * e, 35 * e), n.bezierCurveTo(25 * e, 52 * e, 25 * e, 52 * e, 22 * e, 69 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(5 * e, 89 * e), n.bezierCurveTo(20 * e, 73 * e, 12.5 * e, 80.5 * e, 20 * e, 72 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35 * e, 102 * e), n.bezierCurveTo(36 * e, 92.5 * e, 36 * e, 92.5 * e, 37 * e, 83 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(68 * e, 62 * e), n.bezierCurveTo(81 * e, 67.5 * e, 81 * e, 67.5 * e, 94 * e, 73 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70 * e, 41 * e), n.bezierCurveTo(80 * e, 35.5 * e, 80 * e, 35.5 * e, 90 * e, 30 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(28 * e, 33 * e), n.bezierCurveTo(21.5 * e, 26.5 * e, 21.5 * e, 26.5 * e, 15 * e, 20 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(51 * e, 28 * e), n.bezierCurveTo(53 * e, 17 * e, 53 * e, 17 * e, 55 * e, 6 * e), n.closePath(), Ce(n, void 0, t[4], 6 * e), r
    }

    function Cr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 105 * e, r.height = 144 * e, n.globalAlpha = i ? .5 : 1, n.translate(-5 * e, 0 * e), n.save(), n.translate(52.5 * e, 91.5 * e), ge(n, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e), n.restore(), Ce(n, t[0], t[0], 3 * e), n.save(), n.translate(53 * e, 36 * e), ge(n, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e), n.restore(), Ce(n, t[0], t[0], 4 * e), n.save(), n.translate(53.5 * e, 35.5 * e), ge(n, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e), n.restore(), Ce(n, t[0], t[0], 4 * e), n.translate(5 * e, 0 * e), n.globalAlpha = 1, n.save(), n.translate(52.5 * e, 91.5 * e), ge(n, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e), n.restore(), Ce(n, t[1], t[2], 3 * e), n.save(), n.translate(53 * e, 36 * e), ge(n, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e), n.restore(), Ce(n, t[3], t[4], 4 * e), n.save(), n.translate(53.5 * e, 35.5 * e), ge(n, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e), n.restore(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(49 * e, 60.5 * e), n.bezierCurveTo(44 * e, 56.5 * e, 44 * e, 56.5 * e, 39 * e, 52.5 * e), n.bezierCurveTo(39 * e, 46.5 * e, 39 * e, 46.5 * e, 39 * e, 40.5 * e), n.bezierCurveTo(44 * e, 44 * e, 44 * e, 44 * e, 49 * e, 47.5 * e), n.bezierCurveTo(49 * e, 54 * e, 49 * e, 54 * e, 49 * e, 60.5 * e), n.closePath(), Ce(n, t[7], t[6], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(66 * e, 40.5 * e), n.bezierCurveTo(66 * e, 46.5 * e, 66 * e, 46.5 * e, 66 * e, 52.5 * e), n.bezierCurveTo(60.5 * e, 56.5 * e, 60.5 * e, 56.5 * e, 55 * e, 60.5 * e), n.bezierCurveTo(56 * e, 53 * e, 56 * e, 53 * e, 57 * e, 45.5 * e), n.bezierCurveTo(61.5 * e, 43 * e, 61.5 * e, 43 * e, 66 * e, 40.5 * e), n.closePath(), Ce(n, t[7], t[6], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 33.5 * e), n.bezierCurveTo(55.5 * e, 41 * e, 55.5 * e, 41 * e, 59 * e, 48.5 * e), n.bezierCurveTo(56 * e, 58 * e, 56 * e, 58 * e, 53 * e, 67.5 * e), n.bezierCurveTo(49 * e, 58 * e, 49 * e, 58 * e, 45 * e, 48.5 * e), n.bezierCurveTo(48.5 * e, 41 * e, 48.5 * e, 41 * e, 52 * e, 33.5 * e), n.closePath(), Ce(n, t[9], t[8], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 47.5 * e), n.bezierCurveTo(54.5 * e, 50.5 * e, 54.5 * e, 50.5 * e, 57 * e, 53.5 * e), n.bezierCurveTo(55 * e, 60 * e, 55 * e, 60 * e, 53 * e, 66.5 * e), n.bezierCurveTo(50.5 * e, 61 * e, 50.5 * e, 61 * e, 48 * e, 55.5 * e), n.bezierCurveTo(50 * e, 52 * e, 50 * e, 52 * e, 52 * e, 48.5 * e), n.closePath(), Ce(n, t[11], t[10], 3 * e), r
    }

    function gr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 46 * e, r.height = 140 * e, n.scale(-1 * e, 1 * e), n.translate(-50 * e, 40 * e), n.translate(-20 * e, 0), n.globalAlpha = i ? .5 : 1, n.translate(10 * e, 0), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(22.599990844726562 * e, 85.94999694824219 * e), n.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e), n.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e), n.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e), n.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(-1 * e, 0), n.moveTo(17.599990844726562 * e, 89.75 * e), n.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e), n.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e), n.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(1 * e, 0), n.moveTo(7.5999908447265625 * e, 86.34999084472656 * e), n.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e), n.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e), n.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e), n.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e), n.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e), n.closePath(), Ce(n, t[0]), n.save(), n.translate(23.599990844726562 * e, 110.94999694824219 * e), n.rotate(0), ge(n, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e), n.restore(), Ce(n, t[0]), n.translate(0 * e, 0), n.globalAlpha = 1, n.translate(10 * e, 0), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(22.599990844726562 * e, 85.94999694824219 * e), n.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e), n.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e), n.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e), n.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e), n.closePath(), Ce(n, t[3], t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(-1 * e, 0), n.moveTo(17.599990844726562 * e, 89.75 * e), n.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e), n.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e), n.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e), n.closePath(), Ce(n, t[1], t[2], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(1 * e, 0), n.moveTo(7.5999908447265625 * e, 86.34999084472656 * e), n.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e), n.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e), n.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e), n.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e), n.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e), n.closePath(), Ce(n, t[1], t[2], 3 * e), n.save(), n.translate(23.599990844726562 * e, 110.94999694824219 * e), n.rotate(0), ge(n, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 3 * e), r
    }

    function Nr(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d"),
            n = 120 * e,
            a = 140 * e;
        t.width = n, t.height = a, t.width = 130 * e, t.height = 120 * e, ge(r, 10 * e, 12 * e, 110 * e, 90 * e, 10 * e), Ce(r, i[0]), ge(r, 10 * e, 5 * e, 110 * e, 90 * e, 10 * e), Ce(r, i[1], i[2], 4 * e);
        var o = Se(-Math.PI / 5, Ri(.5 * e, !0, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        r.drawImage(o, 12 * e, 18 * e);
        o = Se(Math.PI / 4, Gt(.55 * e, !0, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        return r.drawImage(o, 36 * e, 16 * e), t
    }

    function Dr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 137 * e, r.height = 129 * e, n.globalAlpha = .5, Ne(n, 69 * e, 64 * e, 48.16637831516918 * e), Ce(n, t[1]), n.globalAlpha = .7, Ne(n, 69 * e, 64 * e, 38.23105625617661 * e), Ce(n, t[2]), n.globalAlpha = .7, Ne(n, 69 * e, 64 * e, 32.01562118716424 * e), Ce(n, t[2], t[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72 * e, 41 * e), n.bezierCurveTo(52 * e, 41 * e, 48 * e, 50 * e, 45 * e, 58 * e), n.bezierCurveTo(43 * e, 67 * e, 45 * e, 68 * e, 46 * e, 72 * e), n.bezierCurveTo(52 * e, 53 * e, 60 * e, 48 * e, 72 * e, 42 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 62 * e), n.bezierCurveTo(95 * e, 72 * e, 90 * e, 81 * e, 81 * e, 87 * e), n.bezierCurveTo(74 * e, 91 * e, 69 * e, 89 * e, 64 * e, 88 * e), n.bezierCurveTo(77 * e, 83 * e, 84 * e, 82 * e, 92 * e, 62 * e), n.closePath(), Ce(n, t[3]), r
    }

    function br(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 137 * e, r.height = 129 * e, n.globalAlpha = .4, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.000030517578125 * e, 41.17047119140625 * e), n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), n.closePath(), Ce(n, void 0, t[2], 40 * e), n.globalAlpha = .4, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.000030517578125 * e, 41.17047119140625 * e), n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), n.closePath(), Ce(n, void 0, t[1], 20 * e), n.globalAlpha = .8, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.000030517578125 * e, 41.17047119140625 * e), n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), n.closePath(), Ce(n, t[0], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(51.000030517578125 * e, 37.9886474609375 * e), n.bezierCurveTo(51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 85.9886474609375 * e), n.bezierCurveTo(75.50003051757812 * e, 85.9886474609375 * e, 75.50003051757812 * e, 85.9886474609375 * e, 100.00003051757812 * e, 85.9886474609375 * e), n.bezierCurveTo(100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 37.9886474609375 * e), n.bezierCurveTo(76.00003051757812 * e, 37.9886474609375 * e, 76.00003051757812 * e, 37.9886474609375 * e, 52.000030517578125 * e, 37.9886474609375 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(99.00003051757812 * e, 38.9886474609375 * e), n.bezierCurveTo(93.50003051757812 * e, 44.9886474609375 * e, 93.50003051757812 * e, 44.9886474609375 * e, 88.00003051757812 * e, 50.9886474609375 * e), n.bezierCurveTo(88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 93.9886474609375 * e), n.bezierCurveTo(94.00003051757812 * e, 90.4886474609375 * e, 94.00003051757812 * e, 90.4886474609375 * e, 100.00003051757812 * e, 86.9886474609375 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.00003051757812 * e, 49.625 * e), n.bezierCurveTo(61.000030517578125 * e, 49.625 * e, 61.000030517578125 * e, 49.625 * e, 35.000030517578125 * e, 49.625 * e), n.bezierCurveTo(35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 91.625 * e), n.bezierCurveTo(60.500030517578125 * e, 91.625 * e, 60.500030517578125 * e, 91.625 * e, 86.00003051757812 * e, 91.625 * e), n.bezierCurveTo(86.50003051757812 * e, 70.625 * e, 86.50003051757812 * e, 70.625 * e, 87.00003051757812 * e, 49.625 * e), n.closePath(), Ce(n, t[1], t[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(47.000030517578125 * e, 36.625 * e), n.bezierCurveTo(73.00003051757812 * e, 37.125 * e, 73.00003051757812 * e, 37.125 * e, 99.00003051757812 * e, 37.625 * e), n.bezierCurveTo(93.50003051757812 * e, 44.125 * e, 93.50003051757812 * e, 44.125 * e, 88.00003051757812 * e, 50.625 * e), n.bezierCurveTo(60.500030517578125 * e, 50.125 * e, 60.500030517578125 * e, 50.125 * e, 33.000030517578125 * e, 49.625 * e), n.closePath(), Ce(n, t[1], t[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53.000030517578125 * e, 52.625 * e), n.bezierCurveTo(40.000030517578125 * e, 54.625 * e, 39.000030517578125 * e, 59.625 * e, 40.000030517578125 * e, 67.625 * e), n.bezierCurveTo(45.000030517578125 * e, 59.625 * e, 48.000030517578125 * e, 58.625 * e, 54.000030517578125 * e, 53.625 * e), n.closePath(), Ce(n, t[3]), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.000030517578125 * e, 41.17047119140625 * e), n.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), n.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), n.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), n.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), n.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), n.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), n.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), n.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), n.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), n.closePath(), Ce(n, void 0, t[3], 4 * e), r
    }

    function Sr(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 376 * e, t.height = 371 * e, r.globalAlpha = .5, r.translate(5 * e, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e), r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e), r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e), r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e), r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e), r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e), r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e), r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e), r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e), r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e), r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e), r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e), r.closePath(), Ce(r, i[0]), r.globalAlpha = 1, r.translate(-4 * e, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e), r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e), r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e), r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e), r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e), r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e), r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e), r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e), r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e), r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e), r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e), r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e), r.closePath(), Ce(r, void 0, i[1], 12 * e), r.translate(-1 * e, 0 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(270.633544921875 * e, 88.98580932617188 * e), r.bezierCurveTo(296.633544921875 * e, 65.98580932617188 * e, 318.633544921875 * e, 62.985809326171875 * e, 348.633544921875 * e, 57.985809326171875 * e), r.bezierCurveTo(309.633544921875 * e, 76.98580932617188 * e, 291.633544921875 * e, 88.98580932617188 * e, 280.633544921875 * e, 99.98580932617188 * e), r.closePath(), Ce(r, i[4], i[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(275.633544921875 * e, 281.9858093261719 * e), r.bezierCurveTo(303.633544921875 * e, 308.9858093261719 * e, 321.633544921875 * e, 308.9858093261719 * e, 335.633544921875 * e, 315.9858093261719 * e), r.bezierCurveTo(305.633544921875 * e, 320.9858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e, 264.633544921875 * e, 293.9858093261719 * e), r.closePath(), Ce(r, i[4], i[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(124.633544921875 * e, 291.9858093261719 * e), r.bezierCurveTo(106.633544921875 * e, 316.9858093261719 * e, 72.633544921875 * e, 325.9858093261719 * e, 53.633544921875 * e, 319.9858093261719 * e), r.bezierCurveTo(83.633544921875 * e, 308.9858093261719 * e, 97.633544921875 * e, 298.9858093261719 * e, 112.633544921875 * e, 284.9858093261719 * e), r.closePath(), Ce(r, i[4], i[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(113.633544921875 * e, 80.98580932617188 * e), r.bezierCurveTo(91.633544921875 * e, 54.985809326171875 * e, 72.633544921875 * e, 56.985809326171875 * e, 36.633544921875 * e, 49.985809326171875 * e), r.bezierCurveTo(87.633544921875 * e, 72.98580932617188 * e, 95.633544921875 * e, 82.98580932617188 * e, 106.633544921875 * e, 96.98580932617188 * e), r.closePath(), Ce(r, i[4], i[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(202.633544921875 * e, 20.985809326171875 * e), r.bezierCurveTo(219.633544921875 * e, 49.985809326171875 * e, 259.633544921875 * e, 80.98580932617188 * e, 255.633544921875 * e, 92.98580932617188 * e), r.bezierCurveTo(268.633544921875 * e, 86.98580932617188 * e, 265.633544921875 * e, 87.98580932617188 * e, 275.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(283.633544921875 * e, 87.98580932617188 * e, 283.633544921875 * e, 87.98580932617188 * e, 291.633544921875 * e, 92.98580932617188 * e), r.bezierCurveTo(269.633544921875 * e, 116.98580932617188 * e, 270.633544921875 * e, 124.98580932617188 * e, 267.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(307.633544921875 * e, 168.98580932617188 * e, 339.633544921875 * e, 132.98580932617188 * e, 352.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(366.633544921875 * e, 145.98580932617188 * e, 345.633544921875 * e, 207.98580932617188 * e, 286.633544921875 * e, 208.98580932617188 * e), r.bezierCurveTo(315.633544921875 * e, 223.98580932617188 * e, 327.633544921875 * e, 287.9858093261719 * e, 355.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(293.633544921875 * e, 298.9858093261719 * e, 293.633544921875 * e, 275.9858093261719 * e, 276.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(274.633544921875 * e, 282.9858093261719 * e, 287.633544921875 * e, 288.9858093261719 * e, 295.633544921875 * e, 296.9858093261719 * e), r.bezierCurveTo(287.133544921875 * e, 302.4858093261719 * e, 287.133544921875 * e, 302.4858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(261.633544921875 * e, 297.9858093261719 * e, 258.633544921875 * e, 293.9858093261719 * e, 255.633544921875 * e, 290.9858093261719 * e), r.bezierCurveTo(249.633544921875 * e, 301.9858093261719 * e, 225.633544921875 * e, 320.9858093261719 * e, 202.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 318.9858093261719 * e, 196.633544921875 * e, 306.9858093261719 * e, 198.633544921875 * e, 300.9858093261719 * e), r.bezierCurveTo(209.633544921875 * e, 268.9858093261719 * e, 199.633544921875 * e, 266.9858093261719 * e, 195.633544921875 * e, 256.9858093261719 * e), r.bezierCurveTo(183.633544921875 * e, 274.9858093261719 * e, 182.633544921875 * e, 281.9858093261719 * e, 192.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(194.633544921875 * e, 317.9858093261719 * e, 191.633544921875 * e, 336.9858093261719 * e, 186.633544921875 * e, 351.9858093261719 * e), r.bezierCurveTo(166.633544921875 * e, 318.9858093261719 * e, 141.633544921875 * e, 303.9858093261719 * e, 136.633544921875 * e, 286.9858093261719 * e), r.bezierCurveTo(122.633544921875 * e, 303.9858093261719 * e, 115.633544921875 * e, 305.9858093261719 * e, 109.633544921875 * e, 306.9858093261719 * e), r.bezierCurveTo(101.133544921875 * e, 301.9858093261719 * e, 94.633544921875 * e, 297.9858093261719 * e, 92.633544921875 * e, 296.9858093261719 * e), r.bezierCurveTo(116.633544921875 * e, 277.9858093261719 * e, 116.633544921875 * e, 266.9858093261719 * e, 119.633544921875 * e, 257.9858093261719 * e), r.bezierCurveTo(107.633544921875 * e, 257.9858093261719 * e, 65.633544921875 * e, 308.9858093261719 * e, 24.633544921875 * e, 303.9858093261719 * e), r.bezierCurveTo(51.633544921875 * e, 275.9858093261719 * e, 64.633544921875 * e, 220.98580932617188 * e, 108.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 198.98580932617188 * e, 26.633544921875 * e, 142.98580932617188 * e, 25.633544921875 * e, 86.98580932617188 * e), r.bezierCurveTo(41.633544921875 * e, 155.98580932617188 * e, 81.633544921875 * e, 148.98580932617188 * e, 113.633544921875 * e, 124.98580932617188 * e), r.bezierCurveTo(102.633544921875 * e, 93.98580932617188 * e, 95.633544921875 * e, 88.98580932617188 * e, 89.633544921875 * e, 81.98580932617188 * e), r.bezierCurveTo(97.633544921875 * e, 76.48580932617188 * e, 97.633544921875 * e, 76.48580932617188 * e, 105.633544921875 * e, 70.98580932617188 * e), r.bezierCurveTo(120.633544921875 * e, 78.98580932617188 * e, 121.633544921875 * e, 81.98580932617188 * e, 124.633544921875 * e, 86.98580932617188 * e), r.bezierCurveTo(132.633544921875 * e, 71.98580932617188 * e, 160.633544921875 * e, 56.985809326171875 * e, 175.633544921875 * e, 23.985809326171875 * e), r.bezierCurveTo(182.633544921875 * e, 53.985809326171875 * e, 170.633544921875 * e, 102.98580932617188 * e, 191.633544921875 * e, 125.98580932617188 * e), r.bezierCurveTo(214.633544921875 * e, 89.98580932617188 * e, 192.633544921875 * e, 58.985809326171875 * e, 202.633544921875 * e, 20.985809326171875 * e), r.closePath(), Ce(r, i[2], i[3], 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(203.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(223.633544921875 * e, 63.985809326171875 * e, 227.633544921875 * e, 72.98580932617188 * e, 235.633544921875 * e, 98.98580932617188 * e), r.bezierCurveTo(241.633544921875 * e, 123.98580932617188 * e, 225.633544921875 * e, 138.98580932617188 * e, 196.633544921875 * e, 122.98580932617188 * e), r.bezierCurveTo(213.633544921875 * e, 93.98580932617188 * e, 199.633544921875 * e, 49.985809326171875 * e, 203.633544921875 * e, 26.985809326171875 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(175.633544921875 * e, 25.985809326171875 * e), r.bezierCurveTo(176.633544921875 * e, 51.985809326171875 * e, 171.633544921875 * e, 88.98580932617188 * e, 186.633544921875 * e, 121.98580932617188 * e), r.bezierCurveTo(156.633544921875 * e, 144.98580932617188 * e, 139.633544921875 * e, 120.98580932617188 * e, 147.633544921875 * e, 97.98580932617188 * e), r.bezierCurveTo(152.633544921875 * e, 77.98580932617188 * e, 162.633544921875 * e, 60.985809326171875 * e, 176.633544921875 * e, 25.985809326171875 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(26.633544921875 * e, 96.98580932617188 * e), r.bezierCurveTo(38.633544921875 * e, 151.98580932617188 * e, 61.633544921875 * e, 161.98580932617188 * e, 88.633544921875 * e, 168.98580932617188 * e), r.bezierCurveTo(117.633544921875 * e, 177.98580932617188 * e, 113.633544921875 * e, 185.98580932617188 * e, 106.633544921875 * e, 204.98580932617188 * e), r.bezierCurveTo(32.633544921875 * e, 204.98580932617188 * e, 25.633544921875 * e, 149.98580932617188 * e, 25.633544921875 * e, 97.98580932617188 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(351.633544921875 * e, 99.98580932617188 * e), r.bezierCurveTo(365.633544921875 * e, 161.98580932617188 * e, 333.633544921875 * e, 203.98580932617188 * e, 287.633544921875 * e, 207.98580932617188 * e), r.bezierCurveTo(255.633544921875 * e, 208.98580932617188 * e, 266.633544921875 * e, 174.98580932617188 * e, 285.633544921875 * e, 176.98580932617188 * e), r.bezierCurveTo(313.633544921875 * e, 178.98580932617188 * e, 348.633544921875 * e, 135.98580932617188 * e, 353.633544921875 * e, 99.98580932617188 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(350.633544921875 * e, 302.9858093261719 * e), r.bezierCurveTo(310.633544921875 * e, 280.9858093261719 * e, 314.633544921875 * e, 244.98580932617188 * e, 292.633544921875 * e, 230.98580932617188 * e), r.bezierCurveTo(272.633544921875 * e, 215.98580932617188 * e, 263.633544921875 * e, 222.98580932617188 * e, 256.633544921875 * e, 236.98580932617188 * e), r.bezierCurveTo(251.633544921875 * e, 249.98580932617188 * e, 264.633544921875 * e, 255.98580932617188 * e, 279.633544921875 * e, 268.9858093261719 * e), r.bezierCurveTo(306.633544921875 * e, 295.9858093261719 * e, 325.633544921875 * e, 299.9858093261719 * e, 349.633544921875 * e, 302.9858093261719 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(95.633544921875 * e, 224.98580932617188 * e), r.bezierCurveTo(64.633544921875 * e, 245.98580932617188 * e, 62.633544921875 * e, 280.9858093261719 * e, 32.633544921875 * e, 303.9858093261719 * e), r.bezierCurveTo(59.633544921875 * e, 301.9858093261719 * e, 102.633544921875 * e, 260.9858093261719 * e, 116.633544921875 * e, 255.98580932617188 * e), r.bezierCurveTo(139.633544921875 * e, 229.98580932617188 * e, 108.633544921875 * e, 209.98580932617188 * e, 97.633544921875 * e, 224.98580932617188 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(195.633544921875 * e, 253.98580932617188 * e), r.bezierCurveTo(209.633544921875 * e, 282.9858093261719 * e, 205.633544921875 * e, 278.9858093261719 * e, 199.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(198.633544921875 * e, 332.9858093261719 * e, 201.633544921875 * e, 340.9858093261719 * e, 202.633544921875 * e, 348.9858093261719 * e), r.bezierCurveTo(215.633544921875 * e, 313.9858093261719 * e, 226.633544921875 * e, 291.9858093261719 * e, 235.633544921875 * e, 270.9858093261719 * e), r.bezierCurveTo(243.633544921875 * e, 247.98580932617188 * e, 219.633544921875 * e, 235.98580932617188 * e, 196.633544921875 * e, 252.98580932617188 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(195.633544921875 * e, 251.98580932617188 * e), r.bezierCurveTo(176.633544921875 * e, 275.9858093261719 * e, 182.633544921875 * e, 285.9858093261719 * e, 191.633544921875 * e, 308.9858093261719 * e), r.bezierCurveTo(194.633544921875 * e, 318.9858093261719 * e, 190.633544921875 * e, 334.9858093261719 * e, 186.633544921875 * e, 348.9858093261719 * e), r.bezierCurveTo(175.633544921875 * e, 307.9858093261719 * e, 157.633544921875 * e, 291.9858093261719 * e, 155.633544921875 * e, 272.9858093261719 * e), r.bezierCurveTo(150.633544921875 * e, 243.98580932617188 * e, 170.633544921875 * e, 236.98580932617188 * e, 195.633544921875 * e, 251.98580932617188 * e), r.closePath(), Ce(r, i[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(316 * e, 186.8020782470703 * e), r.bezierCurveTo(315 * e, 173.8020782470703 * e, 298 * e, 177.8020782470703 * e, 293 * e, 183.8020782470703 * e), r.bezierCurveTo(285 * e, 195.8020782470703 * e, 314 * e, 197.8020782470703 * e, 315 * e, 187.8020782470703 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(340 * e, 157.8020782470703 * e), r.bezierCurveTo(327 * e, 153.8020782470703 * e, 321 * e, 168.8020782470703 * e, 330 * e, 174.8020782470703 * e), r.bezierCurveTo(341 * e, 178.8020782470703 * e, 347 * e, 161.8020782470703 * e, 341 * e, 157.8020782470703 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(349 * e, 136.8020782470703 * e), r.bezierCurveTo(343 * e, 135.8020782470703 * e, 342 * e, 139.8020782470703 * e, 341 * e, 147.8020782470703 * e), r.bezierCurveTo(343 * e, 155.8020782470703 * e, 353 * e, 143.8020782470703 * e, 349 * e, 137.8020782470703 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(278.75 * e, 246.4375 * e), r.bezierCurveTo(288.75 * e, 242.4375 * e, 301.75 * e, 248.4375 * e, 298.75 * e, 262.4375 * e), r.bezierCurveTo(293.75 * e, 271.4375 * e, 287.75 * e, 271.4375 * e, 278.75 * e, 262.4375 * e), r.bezierCurveTo(271.75 * e, 255.4375 * e, 274.75 * e, 250.4375 * e, 277.75 * e, 247.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(310.75 * e, 277.4375 * e), r.bezierCurveTo(319.75 * e, 280.4375 * e, 322.75 * e, 283.4375 * e, 321.75 * e, 289.4375 * e), r.bezierCurveTo(319.75 * e, 295.4375 * e, 313.75 * e, 291.4375 * e, 308.75 * e, 288.4375 * e), r.bezierCurveTo(301.75 * e, 281.4375 * e, 306.75 * e, 277.4375 * e, 309.75 * e, 277.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.75 * e, 257.4375 * e), r.bezierCurveTo(227.75 * e, 269.4375 * e, 220.75 * e, 281.4375 * e, 212.75 * e, 280.4375 * e), r.bezierCurveTo(206.75 * e, 279.4375 * e, 206.75 * e, 269.4375 * e, 204.75 * e, 260.4375 * e), r.bezierCurveTo(204.75 * e, 254.4375 * e, 211.75 * e, 253.4375 * e, 216.75 * e, 256.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(211.75 * e, 289.4375 * e), r.bezierCurveTo(219.75 * e, 292.4375 * e, 213.75 * e, 306.4375 * e, 206.75 * e, 307.4375 * e), r.bezierCurveTo(199.75 * e, 303.4375 * e, 209.75 * e, 287.4375 * e, 210.75 * e, 289.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(171.75 * e, 256.4375 * e), r.bezierCurveTo(162.75 * e, 273.4375 * e, 166.75 * e, 278.4375 * e, 175.75 * e, 280.4375 * e), r.bezierCurveTo(183.75 * e, 278.4375 * e, 185.75 * e, 257.4375 * e, 182.75 * e, 255.4375 * e), r.bezierCurveTo(176.75 * e, 251.4375 * e, 172.75 * e, 253.4375 * e, 172.75 * e, 256.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(175.75 * e, 289.9375 * e), r.bezierCurveTo(183.75 * e, 287.9375 * e, 186.75 * e, 301.9375 * e, 182.75 * e, 305.9375 * e), r.bezierCurveTo(176.75 * e, 307.9375 * e, 171.75 * e, 292.9375 * e, 174.75 * e, 290.9375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(205.75 * e, 314.4375 * e), r.bezierCurveTo(209.75 * e, 316.4375 * e, 210.75 * e, 320.4375 * e, 206.75 * e, 323.4375 * e), r.bezierCurveTo(201.75 * e, 324.4375 * e, 201.75 * e, 314.4375 * e, 204.75 * e, 314.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(186.75 * e, 313.4375 * e), r.bezierCurveTo(181.75 * e, 315.4375 * e, 180.75 * e, 321.4375 * e, 185.75 * e, 326.4375 * e), r.bezierCurveTo(190.75 * e, 327.4375 * e, 190.75 * e, 313.4375 * e, 187.75 * e, 314.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(103.75 * e, 244.4375 * e), r.bezierCurveTo(96.75 * e, 239.4375 * e, 83.75 * e, 240.4375 * e, 81.75 * e, 255.4375 * e), r.bezierCurveTo(80.75 * e, 264.4375 * e, 89.75 * e, 269.4375 * e, 99.75 * e, 260.4375 * e), r.bezierCurveTo(106.75 * e, 254.4375 * e, 106.75 * e, 250.4375 * e, 104.75 * e, 245.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(86.75 * e, 182.4375 * e), r.bezierCurveTo(82.75 * e, 170.4375 * e, 66.75 * e, 169.4375 * e, 61.75 * e, 181.4375 * e), r.bezierCurveTo(58.75 * e, 187.4375 * e, 68.75 * e, 194.4375 * e, 75.75 * e, 192.4375 * e), r.bezierCurveTo(83.75 * e, 192.4375 * e, 86.75 * e, 187.4375 * e, 86.75 * e, 183.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44.75 * e, 152.4375 * e), r.bezierCurveTo(55.75 * e, 159.4375 * e, 54.75 * e, 170.4375 * e, 46.75 * e, 171.4375 * e), r.bezierCurveTo(39.75 * e, 170.4375 * e, 34.75 * e, 151.4375 * e, 43.75 * e, 152.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(31.75 * e, 130.4375 * e), r.bezierCurveTo(35.75 * e, 132.4375 * e, 35.75 * e, 131.4375 * e, 37.75 * e, 137.4375 * e), r.bezierCurveTo(36.75 * e, 144.4375 * e, 36.75 * e, 145.4375 * e, 33.75 * e, 144.4375 * e), r.bezierCurveTo(26.75 * e, 137.4375 * e, 29.75 * e, 131.4375 * e, 31.75 * e, 130.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(69.75 * e, 274.4375 * e), r.bezierCurveTo(62.75 * e, 272.4375 * e, 59.75 * e, 277.4375 * e, 57.75 * e, 284.4375 * e), r.bezierCurveTo(56.75 * e, 290.4375 * e, 63.75 * e, 289.4375 * e, 71.75 * e, 282.4375 * e), r.bezierCurveTo(75.75 * e, 277.4375 * e, 72.75 * e, 275.4375 * e, 69.75 * e, 274.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(165.75 * e, 95.4375 * e), r.bezierCurveTo(177.75 * e, 97.4375 * e, 182.75 * e, 115.4375 * e, 173.75 * e, 121.4375 * e), r.bezierCurveTo(164.75 * e, 126.4375 * e, 149.75 * e, 102.4375 * e, 164.75 * e, 96.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(216.75 * e, 94.4375 * e), r.bezierCurveTo(227.75 * e, 99.4375 * e, 223.75 * e, 122.4375 * e, 210.75 * e, 119.4375 * e), r.bezierCurveTo(203.75 * e, 115.4375 * e, 207.75 * e, 93.4375 * e, 216.75 * e, 94.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(211.75 * e, 68.4375 * e), r.bezierCurveTo(218.75 * e, 69.4375 * e, 220.75 * e, 77.4375 * e, 216.75 * e, 83.4375 * e), r.bezierCurveTo(208.75 * e, 89.4375 * e, 205.75 * e, 68.4375 * e, 210.75 * e, 68.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(169.75 * e, 71.4375 * e), r.bezierCurveTo(162.75 * e, 72.4375 * e, 159.75 * e, 83.4375 * e, 167.75 * e, 88.4375 * e), r.bezierCurveTo(174.75 * e, 90.4375 * e, 174.75 * e, 72.4375 * e, 170.75 * e, 71.4375 * e), r.closePath(), Ce(r, i[6], i[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(193.75 * e, 160.4375 * e), r.bezierCurveTo(215.75 * e, 168.4375 * e, 224.75 * e, 180.4375 * e, 229.75 * e, 193.4375 * e), r.bezierCurveTo(223.75 * e, 211.4375 * e, 205.75 * e, 225.4375 * e, 193.75 * e, 229.4375 * e), r.bezierCurveTo(167.75 * e, 217.4375 * e, 161.75 * e, 205.4375 * e, 156.75 * e, 192.4375 * e), r.bezierCurveTo(164.75 * e, 175.4375 * e, 176.75 * e, 166.4375 * e, 192.75 * e, 160.4375 * e), r.closePath(), Ce(r, i[8], i[9], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(189.1999969482422 * e, 182.61249923706055 * e), r.bezierCurveTo(190.1999969482422 * e, 184.11249923706055 * e, 190.1999969482422 * e, 184.11249923706055 * e, 191.1999969482422 * e, 185.61249923706055 * e), r.bezierCurveTo(192.1999969482422 * e, 180.61249923706055 * e, 192.1999969482422 * e, 180.61249923706055 * e, 193.1999969482422 * e, 175.61249923706055 * e), r.bezierCurveTo(195.6999969482422 * e, 177.11249923706055 * e, 195.6999969482422 * e, 177.11249923706055 * e, 198.1999969482422 * e, 178.61249923706055 * e), r.bezierCurveTo(198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 183.61249923706055 * e), r.bezierCurveTo(201.6999969482422 * e, 181.11249923706055 * e, 201.6999969482422 * e, 181.11249923706055 * e, 205.1999969482422 * e, 178.61249923706055 * e), r.bezierCurveTo(206.6999969482422 * e, 180.61249923706055 * e, 206.6999969482422 * e, 180.61249923706055 * e, 208.1999969482422 * e, 182.61249923706055 * e), r.bezierCurveTo(206.1999969482422 * e, 185.61249923706055 * e, 206.1999969482422 * e, 185.61249923706055 * e, 204.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(208.6999969482422 * e, 188.61249923706055 * e, 208.6999969482422 * e, 188.61249923706055 * e, 213.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 193.61249923706055 * e), r.bezierCurveTo(209.6999969482422 * e, 194.61249923706055 * e, 209.6999969482422 * e, 194.61249923706055 * e, 206.1999969482422 * e, 195.61249923706055 * e), r.bezierCurveTo(210.1999969482422 * e, 198.61249923706055 * e, 210.1999969482422 * e, 198.61249923706055 * e, 214.1999969482422 * e, 201.61249923706055 * e), r.bezierCurveTo(212.1999969482422 * e, 203.61249923706055 * e, 212.1999969482422 * e, 203.61249923706055 * e, 210.1999969482422 * e, 205.61249923706055 * e), r.bezierCurveTo(207.1999969482422 * e, 204.11249923706055 * e, 207.1999969482422 * e, 204.11249923706055 * e, 204.1999969482422 * e, 202.61249923706055 * e), r.bezierCurveTo(205.6999969482422 * e, 207.61249923706055 * e, 205.6999969482422 * e, 207.61249923706055 * e, 207.1999969482422 * e, 212.61249923706055 * e), r.bezierCurveTo(204.6999969482422 * e, 213.61249923706055 * e, 204.6999969482422 * e, 213.61249923706055 * e, 202.1999969482422 * e, 214.61249923706055 * e), r.bezierCurveTo(200.1999969482422 * e, 210.61249923706055 * e, 200.1999969482422 * e, 210.61249923706055 * e, 198.1999969482422 * e, 206.61249923706055 * e), r.bezierCurveTo(196.6999969482422 * e, 211.61249923706055 * e, 196.6999969482422 * e, 211.61249923706055 * e, 195.1999969482422 * e, 216.61249923706055 * e), r.bezierCurveTo(192.6999969482422 * e, 216.11249923706055 * e, 192.6999969482422 * e, 216.11249923706055 * e, 190.1999969482422 * e, 215.61249923706055 * e), r.bezierCurveTo(190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 207.61249923706055 * e), r.bezierCurveTo(186.1999969482422 * e, 210.61249923706055 * e, 186.1999969482422 * e, 210.61249923706055 * e, 182.1999969482422 * e, 213.61249923706055 * e), r.bezierCurveTo(181.1999969482422 * e, 211.11249923706055 * e, 181.1999969482422 * e, 211.11249923706055 * e, 180.1999969482422 * e, 208.61249923706055 * e), r.bezierCurveTo(183.1999969482422 * e, 205.61249923706055 * e, 183.1999969482422 * e, 205.61249923706055 * e, 186.1999969482422 * e, 202.61249923706055 * e), r.bezierCurveTo(180.6999969482422 * e, 203.11249923706055 * e, 180.6999969482422 * e, 203.11249923706055 * e, 175.1999969482422 * e, 203.61249923706055 * e), r.bezierCurveTo(174.6999969482422 * e, 200.11249923706055 * e, 174.6999969482422 * e, 200.11249923706055 * e, 174.1999969482422 * e, 196.61249923706055 * e), r.bezierCurveTo(177.1999969482422 * e, 195.61249923706055 * e, 177.1999969482422 * e, 195.61249923706055 * e, 180.1999969482422 * e, 194.61249923706055 * e), r.bezierCurveTo(177.1999969482422 * e, 191.61249923706055 * e, 177.1999969482422 * e, 191.61249923706055 * e, 174.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(175.6999969482422 * e, 187.11249923706055 * e, 175.6999969482422 * e, 187.11249923706055 * e, 177.1999969482422 * e, 185.61249923706055 * e), r.bezierCurveTo(180.6999969482422 * e, 187.11249923706055 * e, 180.6999969482422 * e, 187.11249923706055 * e, 184.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(182.6999969482422 * e, 183.61249923706055 * e, 182.6999969482422 * e, 183.61249923706055 * e, 181.1999969482422 * e, 178.61249923706055 * e), r.bezierCurveTo(183.1999969482422 * e, 177.11249923706055 * e, 183.1999969482422 * e, 177.11249923706055 * e, 185.1999969482422 * e, 175.61249923706055 * e), r.closePath(), Ce(r, i[10]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(185.1999969482422 * e, 173.8125 * e), r.bezierCurveTo(187.1999969482422 * e, 179.3125 * e, 187.1999969482422 * e, 179.3125 * e, 189.1999969482422 * e, 184.8125 * e), r.bezierCurveTo(184.1999969482422 * e, 181.8125 * e, 184.1999969482422 * e, 181.8125 * e, 179.1999969482422 * e, 178.8125 * e), r.bezierCurveTo(181.1999969482422 * e, 175.8125 * e, 182.1999969482422 * e, 174.8125 * e, 185.1999969482422 * e, 173.8125 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(192.1999969482422 * e, 173.61249542236328 * e), r.bezierCurveTo(194.1999969482422 * e, 172.61249542236328 * e, 196.1999969482422 * e, 171.61249542236328 * e, 199.1999969482422 * e, 173.61249542236328 * e), r.bezierCurveTo(197.6999969482422 * e, 179.61249542236328 * e, 197.6999969482422 * e, 179.61249542236328 * e, 196.1999969482422 * e, 185.61249542236328 * e), r.bezierCurveTo(194.1999969482422 * e, 179.61249542236328 * e, 194.1999969482422 * e, 179.61249542236328 * e, 192.1999969482422 * e, 173.61249542236328 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(205.1999969482422 * e, 176.2125015258789 * e), r.bezierCurveTo(210.1999969482422 * e, 178.2125015258789 * e, 211.1999969482422 * e, 179.2125015258789 * e, 211.1999969482422 * e, 181.2125015258789 * e), r.bezierCurveTo(206.6999969482422 * e, 184.7125015258789 * e, 206.6999969482422 * e, 184.7125015258789 * e, 202.1999969482422 * e, 188.2125015258789 * e), r.bezierCurveTo(203.6999969482422 * e, 182.2125015258789 * e, 203.6999969482422 * e, 182.2125015258789 * e, 205.1999969482422 * e, 176.2125015258789 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.1999969482422 * e, 187.21249985694885 * e), r.bezierCurveTo(216.1999969482422 * e, 191.21249985694885 * e, 216.1999969482422 * e, 192.21249985694885 * e, 215.1999969482422 * e, 195.21249985694885 * e), r.bezierCurveTo(206.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e), r.bezierCurveTo(209.6999969482422 * e, 190.71249985694885 * e, 209.6999969482422 * e, 190.71249985694885 * e, 214.1999969482422 * e, 187.21249985694885 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(204.1999969482422 * e, 201.8125 * e), r.bezierCurveTo(209.1999969482422 * e, 201.3125 * e, 209.1999969482422 * e, 201.3125 * e, 214.1999969482422 * e, 200.8125 * e), r.bezierCurveTo(215.1999969482422 * e, 204.8125 * e, 214.1999969482422 * e, 205.8125 * e, 213.1999969482422 * e, 208.8125 * e), r.bezierCurveTo(208.6999969482422 * e, 205.3125 * e, 208.6999969482422 * e, 205.3125 * e, 204.1999969482422 * e, 201.8125 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(199.1999969482422 * e, 205.61249923706055 * e), r.bezierCurveTo(207.1999969482422 * e, 212.61249923706055 * e, 203.6999969482422 * e, 209.11249923706055 * e, 208.1999969482422 * e, 212.61249923706055 * e), r.bezierCurveTo(206.1999969482422 * e, 215.61249923706055 * e, 204.1999969482422 * e, 217.61249923706055 * e, 203.1999969482422 * e, 216.61249923706055 * e), r.bezierCurveTo(201.1999969482422 * e, 211.11249923706055 * e, 201.1999969482422 * e, 211.11249923706055 * e, 199.1999969482422 * e, 205.61249923706055 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.1999969482422 * e, 207.01250076293945 * e), r.bezierCurveTo(194.1999969482422 * e, 213.01250076293945 * e, 194.1999969482422 * e, 216.01250076293945 * e, 196.1999969482422 * e, 218.01250076293945 * e), r.bezierCurveTo(193.1999969482422 * e, 220.01250076293945 * e, 190.1999969482422 * e, 220.01250076293945 * e, 188.1999969482422 * e, 218.01250076293945 * e), r.bezierCurveTo(189.6999969482422 * e, 213.01250076293945 * e, 189.6999969482422 * e, 213.01250076293945 * e, 191.1999969482422 * e, 208.01250076293945 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(186.1999969482422 * e, 203.21249961853027 * e), r.bezierCurveTo(184.1999969482422 * e, 209.21249961853027 * e, 184.1999969482422 * e, 209.21249961853027 * e, 182.1999969482422 * e, 215.21249961853027 * e), r.bezierCurveTo(177.1999969482422 * e, 212.21249961853027 * e, 176.1999969482422 * e, 211.21249961853027 * e, 177.1999969482422 * e, 210.21249961853027 * e), r.bezierCurveTo(181.6999969482422 * e, 206.71249961853027 * e, 181.6999969482422 * e, 206.71249961853027 * e, 186.1999969482422 * e, 203.21249961853027 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(183.1999969482422 * e, 196.8125 * e), r.bezierCurveTo(177.1999969482422 * e, 196.3125 * e, 177.1999969482422 * e, 196.3125 * e, 171.1999969482422 * e, 195.8125 * e), r.bezierCurveTo(171.1999969482422 * e, 199.8125 * e, 171.1999969482422 * e, 202.8125 * e, 174.1999969482422 * e, 204.8125 * e), r.bezierCurveTo(178.6999969482422 * e, 200.8125 * e, 178.6999969482422 * e, 200.8125 * e, 183.1999969482422 * e, 196.8125 * e), r.closePath(), Ce(r, i[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(185.1999969482422 * e, 190.21249771118164 * e), r.bezierCurveTo(179.6999969482422 * e, 186.71249771118164 * e, 179.6999969482422 * e, 186.71249771118164 * e, 174.1999969482422 * e, 183.21249771118164 * e), r.bezierCurveTo(172.1999969482422 * e, 186.21249771118164 * e, 172.1999969482422 * e, 187.21249771118164 * e, 172.1999969482422 * e, 190.21249771118164 * e), r.bezierCurveTo(178.1999969482422 * e, 190.21249771118164 * e, 178.1999969482422 * e, 190.21249771118164 * e, 184.1999969482422 * e, 190.21249771118164 * e), r.closePath(), Ce(r, i[11]), Ne(r, 126.19999694824219 * e, 169.8125 * e, 8.94427190999916 * e), Ce(r, i[12]), Ne(r, 123.19999694824219 * e, 164.8125 * e, 2.8284271247461903 * e), Ce(r, i[13]), Ne(r, 253.1999969482422 * e, 169.8125 * e, 8.94427190999916 * e), Ce(r, i[12]), Ne(r, 255.1999969482422 * e, 164.8125 * e, 2.23606797749979 * e), Ce(r, i[13]), t
    }

    function pr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.globalAlpha = 1, n.translate(20 * e, 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36.5 * e, 278.0625 * e), n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), n.closePath(), Ce(n, t[0]), n.translate(-20 * e, -20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36.5 * e, 278.0625 * e), n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), n.closePath(), Ce(n, t[1], t[2], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(214.5 * e, 124.0625 * e), n.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e), n.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e), n.closePath(), Ce(n, void 0, t[2], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157.5 * e, 145.0625 * e), n.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e), n.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e), n.closePath(), Ce(n, void 0, t[2], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103.5 * e, 169.0625 * e), n.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e), n.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e), n.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e), n.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e), n.closePath(), Ce(n, t[3], t[2], 19 * e), Ne(n, 92.5 * e, 216.0625 * e, 13.892443989449804 * e), Ce(n, t[4]), Ne(n, 68.5 * e, 227.0625 * e, 8.06225774829855 * e), Ce(n, t[4]), Ne(n, 85.5 * e, 240.0625 * e, 6.708203932499369 * e), Ce(n, t[4]), Ne(n, 147.5 * e, 294.0625 * e, 17.46424919657298 * e), Ce(n, t[4]), Ne(n, 166.5 * e, 273.0625 * e, 6.708203932499369 * e), Ce(n, t[4]), Ne(n, 114.5 * e, 294.0625 * e, 12.36931687685298 * e), Ce(n, t[4]), Ne(n, 123.5 * e, 220.0625 * e, 5.830951894845301 * e), Ce(n, t[4]), Ne(n, 114.5 * e, 259.0625 * e, 4.123105625617661 * e), Ce(n, t[4]), Ne(n, 63.5 * e, 265.0625 * e, 5.385164807134504 * e), Ce(n, t[4]), Ne(n, 148.5 * e, 235.0625 * e, 4.47213595499958 * e), Ce(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(194.5 * e, 313.0625 * e), n.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e), n.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e), n.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e), n.closePath(), Ce(n, t[5]), r
    }

    function mr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 440 * e, r.height = 388 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), Ne(n, 220 * e, 201 * e, 170.41713528867922 * e), Ce(n, t[0], t[0], 6 * e), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), Ne(n, 220 * e, 201 * e, 170.41713528867922 * e), Ce(n, t[1], t[2], 6 * e), Ne(n, 220 * e, 201 * e, 130 * e), Ce(n, t[11], t[2], 6 * e), Ne(n, 222 * e, 199 * e, 120.74767078498864 * e), Ce(n, void 0, t[3], 40 * e), Ne(n, 220 * e, 200 * e, 95.44108130150245 * e), Ce(n, void 0, t[2], 15 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), Ne(n, 63 * e, 136 * e, 49.193495504995376 * e), Ce(n, t[0], t[0], 4 * e), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), Ne(n, 63 * e, 136 * e, 49.193495504995376 * e), Ce(n, t[8], t[2], 4 * e), Ne(n, 63 * e, 137 * e, 25.632011235952593 * e), Ce(n, t[7], t[2], 4 * e), r
    }

    function vr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 440 * e, r.height = 388 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), Ne(n, 220 * e, 201 * e, 170.41713528867922 * e), Ce(n, t[0], t[0], 6 * e), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), Ne(n, 220 * e, 201 * e, 170.41713528867922 * e), Ce(n, t[1], t[2], 6 * e), Ne(n, 220 * e, 201 * e, 130 * e), Ce(n, t[11], t[2], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(218 * e, 97 * e), n.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e), n.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(224 * e, 181 * e), n.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e), n.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e), n.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e), n.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(169 * e, 289 * e), n.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e), n.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(143 * e, 146 * e), n.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e), n.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(283 * e, 135 * e), n.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e), n.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(318 * e, 223 * e), n.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e), n.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e), n.closePath(), Ce(n, t[5], t[6], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(142 * e, 223 * e), n.bezierCurveTo(128 * e, 213 * e, 123 * e, 214 * e, 111 * e, 223 * e), n.closePath(), Ce(n, t[10], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(251 * e, 133 * e), n.bezierCurveTo(269 * e, 188 * e, 262 * e, 229 * e, 251 * e, 253 * e), n.bezierCurveTo(288 * e, 224 * e, 273 * e, 139 * e, 252 * e, 133 * e), n.closePath(), Ce(n, t[10], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(203 * e, 102 * e), n.bezierCurveTo(204 * e, 136 * e, 200 * e, 159 * e, 189 * e, 174 * e), n.bezierCurveTo(223 * e, 164 * e, 219 * e, 87 * e, 205 * e, 83 * e), n.closePath(), Ce(n, t[10], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(196 * e, 324 * e), n.bezierCurveTo(209 * e, 239 * e, 200 * e, 219 * e, 192 * e, 196 * e), n.bezierCurveTo(229 * e, 216 * e, 219 * e, 316 * e, 198 * e, 325 * e), n.closePath(), Ce(n, t[10], t[10], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(266 * e, 166 * e), n.bezierCurveTo(249 * e, 154 * e, 243 * e, 161 * e, 233 * e, 167 * e), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(269 * e, 192 * e), n.bezierCurveTo(256 * e, 183 * e, 241 * e, 186 * e, 233 * e, 192 * e), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(263 * e, 217 * e), n.bezierCurveTo(251 * e, 211 * e, 242 * e, 213 * e, 236 * e, 218 * e), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(204 * e, 141 * e), n.bezierCurveTo(191 * e, 131 * e, 187 * e, 133 * e, 176 * e, 141 * e), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(207 * e, 230 * e), n.bezierCurveTo(193 * e, 222 * e, 185 * e, 224 * e, 177 * e, 231 * e), Ce(n, void 0, t[6], 6 * e), n.lineCap = "round", n.lineJoin = "round", n.moveTo(210 * e, 258 * e), n.bezierCurveTo(196 * e, 247 * e, 191 * e, 250 * e, 177 * e, 259 * e), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(145 * e, 196 * e), n.bezierCurveTo(130 * e, 186 * e, 124 * e, 187 * e, 114 * e, 195 * e), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(218 * e, 97 * e), n.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e), n.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e), n.closePath(), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(224 * e, 181 * e), n.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e), n.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e), n.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e), n.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e), n.closePath(), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(169 * e, 289 * e), n.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e), n.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e), n.closePath(), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(143 * e, 146 * e), n.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e), n.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e), n.closePath(), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(283 * e, 135 * e), n.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e), n.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e), n.closePath(), Ce(n, void 0, t[6], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(318 * e, 223 * e), n.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e), n.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e), n.closePath(), Ce(n, void 0, t[6], 6 * e), Ne(n, 222 * e, 199 * e, 120.74767078498864 * e), Ce(n, void 0, t[3], 40 * e), Ne(n, 220 * e, 200 * e, 95.44108130150245 * e), Ce(n, void 0, t[2], 15 * e), Ne(n, 220 * e, 201 * e, 85 * e), Ce(n, void 0, t[4], 10 * e), n.globalAlpha = .5, Ne(n, 220 * e, 201 * e, 82 * e), Ce(n, t[9]), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), Ne(n, 63 * e, 136 * e, 49.193495504995376 * e), Ce(n, t[0], t[0], 4 * e), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), Ne(n, 63 * e, 136 * e, 49.193495504995376 * e), Ce(n, t[8], t[2], 4 * e), Ne(n, 63 * e, 137 * e, 25.632011235952593 * e), Ce(n, t[7], t[2], 4 * e), r
    }

    function Mr(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 110 * e, t.height = 110 * e, r.globalAlpha = .2, Ne(r, 55 * e, 55 * e, 55 * e), Ce(r, i[0]), t
    }

    function Gr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 102 * e, r.height = 102 * e, n.globalAlpha = i ? .5 : 1, n.translate(3, 3), ge(n, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e), Ce(n, t[0]), ge(n, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e), Ce(n, t[0]), ge(n, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e), Ce(n, t[0]), ge(n, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e), Ce(n, t[0]), ge(n, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-3, -3), ge(n, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e), Ce(n, t[1]), ge(n, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e), Ce(n, t[1]), ge(n, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e), Ce(n, t[2], t[3], 4 * e), ge(n, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e), Ce(n, t[2], t[3], 4 * e), ge(n, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e), Ce(n, t[2], t[3], 4 * e), r
    }

    function Lr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        r.width = 496 * e, r.height = 520 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(19.000030517578125 * e, 256.67613983154297 * e), n.bezierCurveTo(1.000030517578125 * e, 332.67613983154297 * e, 23.000030517578125 * e, 404.67613983154297 * e, 95.00003051757812 * e, 463.67613983154297 * e), n.bezierCurveTo(128.00003051757812 * e, 491.67613983154297 * e, 165.00003051757812 * e, 507.67613983154297 * e, 194.00003051757812 * e, 512.676139831543 * e), n.bezierCurveTo(280.0000305175781 * e, 517.676139831543 * e, 291.0000305175781 * e, 516.676139831543 * e, 342.0000305175781 * e, 497.67613983154297 * e), n.bezierCurveTo(425.0000305175781 * e, 454.67613983154297 * e, 469.0000305175781 * e, 392.67613983154297 * e, 468.0000305175781 * e, 300.67613983154297 * e), n.bezierCurveTo(408.5000305175781 * e, 365.17613983154297 * e, 408.5000305175781 * e, 365.17613983154297 * e, 349.0000305175781 * e, 429.67613983154297 * e), n.bezierCurveTo(256.0000305175781 * e, 473.67613983154297 * e, 167.00003051757812 * e, 459.67613983154297 * e, 78.00003051757812 * e, 384.67613983154297 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), Ne(n, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e), Ce(n, t[5], void 0, 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65.00003051757812 * e, 263.4034118652344 * e), n.bezierCurveTo(109.00003051757812 * e, 160.40341186523438 * e, 185.00003051757812 * e, 128.40341186523438 * e, 222.00003051757812 * e, 124.40341186523438 * e), n.bezierCurveTo(277.0000305175781 * e, 116.40341186523438 * e, 339.0000305175781 * e, 134.40341186523438 * e, 379.0000305175781 * e, 195.40341186523438 * e), n.bezierCurveTo(409.0000305175781 * e, 242.40341186523438 * e, 416.0000305175781 * e, 256.4034118652344 * e, 428.0000305175781 * e, 304.4034118652344 * e), n.bezierCurveTo(457.0000305175781 * e, 203.40341186523438 * e, 449.0000305175781 * e, 183.40341186523438 * e, 438.0000305175781 * e, 162.40341186523438 * e), n.bezierCurveTo(381.0000305175781 * e, 73.40341186523438 * e, 360.0000305175781 * e, 66.40341186523438 * e, 257.0000305175781 * e, 46.403411865234375 * e), n.bezierCurveTo(191.00003051757812 * e, 45.403411865234375 * e, 142.00003051757812 * e, 65.40341186523438 * e, 101.00003051757812 * e, 115.40341186523438 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1;
        var a = function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 496 * e, t.height = 520 * e, r.globalAlpha = 1, r.translate(0, -10 * e), Ne(r, 247.01138305664062 * e, 250.13068389892578 * e, 232.81967270830015 * e), Ce(r, i[1], i[2], 14 * e), r.globalCompositeOperation = "destination-out", Ne(r, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e), Ce(r, i[0], i[0], 14 * e), r.globalCompositeOperation = "source-over", t
        }(e, t);
        return n.drawImage(a, 0, 0), n.translate(0, -10 * e), Ne(n, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e), Ce(n, void 0, t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(325.0113830566406 * e, 13.767059326171875 * e), n.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e), n.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e), n.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e), n.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e), n.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e), n.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e), n.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e), n.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(325.0113830566406 * e, 13.767059326171875 * e), n.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e), n.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e), n.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e), n.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e), n.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e), n.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e), n.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e), n.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e), n.closePath(), Ce(n, t[3], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(403.0113830566406 * e, 89.76705932617188 * e), n.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e), n.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e), n.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e), n.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e), n.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e), n.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(403.0113830566406 * e, 89.76705932617188 * e), n.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e), n.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e), n.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e), n.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e), n.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e), n.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(228.01138305664062 * e, 1.767059326171875 * e), n.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e), n.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e), n.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e), n.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e), n.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e), n.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e), n.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(228.01138305664062 * e, 1.767059326171875 * e), n.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e), n.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e), n.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e), n.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e), n.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e), n.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e), n.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(142.01138305664062 * e, 25.767059326171875 * e), n.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e), n.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e), n.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e), n.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e), n.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e), n.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e), n.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(142.01138305664062 * e, 25.767059326171875 * e), n.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e), n.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e), n.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e), n.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e), n.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e), n.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e), n.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70.01138305664062 * e, 76.76705932617188 * e), n.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e), n.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e), n.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e), n.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e), n.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e), n.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e), n.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70.01138305664062 * e, 76.76705932617188 * e), n.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e), n.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e), n.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e), n.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e), n.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e), n.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e), n.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(33.011383056640625 * e, 126.76705932617188 * e), n.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e), n.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e), n.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e), n.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e), n.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e), n.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e), n.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(33.011383056640625 * e, 126.76705932617188 * e), n.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e), n.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e), n.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e), n.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e), n.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e), n.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e), n.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e), n.closePath(), Ce(n, t[3], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(13.011383056640625 * e, 229.76705932617188 * e), n.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e), n.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e), n.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e), n.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e), n.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e), n.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(13.011383056640625 * e, 229.76705932617188 * e), n.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e), n.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e), n.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e), n.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e), n.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e), n.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(97.01138305664062 * e, 329.7670593261719 * e), n.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e), n.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e), n.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e), n.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e), n.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e), n.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e), n.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(97.01138305664062 * e, 329.7670593261719 * e), n.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e), n.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e), n.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e), n.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e), n.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e), n.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e), n.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(394.0113830566406 * e, 181.76705932617188 * e), n.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e), n.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e), n.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e), n.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e), n.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e), n.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e), n.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(394.0113830566406 * e, 181.76705932617188 * e), n.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e), n.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e), n.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e), n.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e), n.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e), n.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e), n.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(411.0113830566406 * e, 234.76705932617188 * e), n.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e), n.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e), n.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e), n.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e), n.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e), n.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e), n.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(411.0113830566406 * e, 234.76705932617188 * e), n.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e), n.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e), n.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e), n.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e), n.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e), n.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e), n.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(400.0113830566406 * e, 290.7670593261719 * e), n.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e), n.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e), n.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e), n.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e), n.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e), n.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e), n.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(400.0113830566406 * e, 290.7670593261719 * e), n.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e), n.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e), n.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e), n.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e), n.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e), n.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e), n.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e), n.closePath(), Ce(n, t[3], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(366.0113830566406 * e, 361.2216033935547 * e), n.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e), n.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e), n.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e), n.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e), n.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e), n.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e), n.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(366.0113830566406 * e, 361.2216033935547 * e), n.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e), n.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e), n.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e), n.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e), n.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e), n.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e), n.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(323.0113830566406 * e, 393.2216033935547 * e), n.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e), n.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e), n.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e), n.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e), n.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e), n.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e), n.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(323.0113830566406 * e, 393.2216033935547 * e), n.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e), n.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e), n.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e), n.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e), n.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e), n.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e), n.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(270.0113830566406 * e, 413.2216033935547 * e), n.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e), n.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e), n.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e), n.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e), n.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e), n.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(270.0113830566406 * e, 413.2216033935547 * e), n.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e), n.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e), n.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e), n.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e), n.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e), n.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(207.01138305664062 * e, 406.2216033935547 * e), n.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e), n.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e), n.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e), n.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e), n.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e), n.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e), n.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(207.01138305664062 * e, 406.2216033935547 * e), n.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e), n.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e), n.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e), n.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e), n.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e), n.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e), n.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e), n.closePath(), Ce(n, t[3], t[2], 12 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130.01138305664062 * e, 375.2216033935547 * e), n.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e), n.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e), n.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e), n.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e), n.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e), n.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e), n.closePath(), Ce(n, t[0], t[0], 12 * e), n.globalAlpha = 1, n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130.01138305664062 * e, 375.2216033935547 * e), n.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e), n.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e), n.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e), n.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e), n.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e), n.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e), n.closePath(), Ce(n, t[4], t[2], 12 * e), r
    }

    function fr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 218 * e, r.height = 185 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(64 * e, 53.135406494140625 * e), n.bezierCurveTo(92 * e, 17.135406494140625 * e, 116 * e, 11.135406494140625 * e, 158 * e, 53.135406494140625 * e), n.bezierCurveTo(178 * e, 74.13540649414062 * e, 181 * e, 81.13540649414062 * e, 196 * e, 101.13540649414062 * e), n.bezierCurveTo(214 * e, 127.13540649414062 * e, 192 * e, 138.13540649414062 * e, 173 * e, 149.13540649414062 * e), n.bezierCurveTo(137 * e, 166.13540649414062 * e, 74 * e, 170.13540649414062 * e, 36 * e, 141.13540649414062 * e), n.bezierCurveTo(13 * e, 127.13540649414062 * e, 20 * e, 119.13540649414062 * e, 30 * e, 103.13540649414062 * e), n.bezierCurveTo(48 * e, 71.13540649414062 * e, 54 * e, 67.13540649414062 * e, 63 * e, 54.135406494140625 * e), n.closePath(), Ce(n, t[0], t[1], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(107 * e, 25.135406494140625 * e), n.bezierCurveTo(62 * e, 90.13540649414062 * e, 54 * e, 129.13540649414062 * e, 53 * e, 151.13540649414062 * e), n.bezierCurveTo(39.5 * e, 142.13540649414062 * e, 39.5 * e, 142.13540649414062 * e, 26 * e, 133.13540649414062 * e), n.bezierCurveTo(23.5 * e, 128.63540649414062 * e, 23.5 * e, 128.63540649414062 * e, 21 * e, 124.13540649414062 * e), n.bezierCurveTo(22 * e, 113.13540649414062 * e, 31 * e, 99.13540649414062 * e, 40 * e, 88.13540649414062 * e), n.bezierCurveTo(54.5 * e, 67.13540649414062 * e, 54.5 * e, 67.13540649414062 * e, 69 * e, 46.135406494140625 * e), n.bezierCurveTo(80.5 * e, 36.635406494140625 * e, 80.5 * e, 36.635406494140625 * e, 92 * e, 27.135406494140625 * e), n.closePath(), Ce(n, t[1]), r
    }

    function Hr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 167 * e, r.height = 136 * e, n.globalAlpha = .5, n.save(), n.translate(76.71426391601562 * e, 67.85713195800781 * e), ge(n, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = .8, n.save(), n.translate(76.71426391601562 * e, 67.85713195800781 * e), ge(n, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e), n.restore(), Ce(n, void 0, t[1], 7 * e), n.globalAlpha = .5, n.save(), n.translate(91.21426391601562 * e, 67.35713195800781 * e), ge(n, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.save(), n.translate(91.21426391601562 * e, 67.35713195800781 * e), ge(n, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e), n.restore(), Ce(n, void 0, t[1], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131.21426391601562 * e, 70.35713195800781 * e), n.bezierCurveTo(133.21426391601562 * e, 95.35713195800781 * e, 128.21426391601562 * e, 109.35713195800781 * e, 108.21426391601562 * e, 108.35713195800781 * e), Ce(n, void 0, t[1], 10 * e), r
    }

    function Pr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 163 * e, r.height = 163 * e, n.save(), n.translate(82.5 * e, 81.1015625 * e), n.rotate(0), ge(n, -65.5 * e, -66 * e, 131 * e, 131 * e, 5 * e), n.restore(), Ce(n, t[1]), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(80 * e, 17.1015625 * e), ge(n, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(80 * e, 17.1015625 * e), ge(n, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(145.5 * e, 83.6015625 * e), ge(n, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(145.5 * e, 83.6015625 * e), ge(n, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(17.5 * e, 82.6015625 * e), ge(n, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(17.5 * e, 82.6015625 * e), ge(n, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(80.5 * e, 145.6015625 * e), ge(n, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(80.5 * e, 145.6015625 * e), ge(n, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(17 * e, 18.1015625 * e), ge(n, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(17 * e, 18.1015625 * e), ge(n, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(145.5 * e, 16.6015625 * e), ge(n, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(145.5 * e, 16.6015625 * e), ge(n, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(145.5 * e, 144.1015625 * e), ge(n, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(145.5 * e, 144.1015625 * e), ge(n, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), n.translate(17.5 * e, 145.1015625 * e), ge(n, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), n.translate(17.5 * e, 145.1015625 * e), ge(n, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e), n.restore(), Ce(n, t[2], t[3], 3 * e), r
    }

    function yr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 168 * e, r.height = 100 * e, n.globalAlpha = i ? .5 : 1, n.translate(10 * e, 5 * e), n.save(), n.translate(24.5 * e, 44.30000305175781 * e), ge(n, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e), n.restore(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 37.80000305175781 * e), n.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e), n.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e), n.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e), n.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e), n.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e), n.closePath(), Ce(n, t[0]), Ne(n, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-10 * e, -5 * e), n.save(), n.translate(24.5 * e, 44.30000305175781 * e), ge(n, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e), n.restore(), Ce(n, void 0, t[3], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 37.80000305175781 * e), n.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e), n.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e), n.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e), n.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e), n.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e), n.closePath(), Ce(n, void 0, t[3], 6 * e), Ne(n, 78 * e, 44.80000305175781 * e, 42.44616584663204 * e), Ce(n, void 0, t[3], 6 * e), n.save(), n.translate(24.5 * e, 44.30000305175781 * e), ge(n, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e), n.restore(), Ce(n, t[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 37.80000305175781 * e), n.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e), n.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e), n.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e), n.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e), n.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e), n.closePath(), Ce(n, t[1]), Ne(n, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e), Ce(n, t[2], t[1], 4 * e), Ne(n, 78 * e, 44.80000305175781 * e, 29.68164415931166 * e), Ce(n, t[3], t[1], 4 * e), Ne(n, 78 * e, 44 * e, 20 * e), Ce(n, t[4]), r
    }

    function zr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 158 * e, r.height = 201 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(96.5 * e, 76.421875 * e), n.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e), n.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e), n.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(61.5 * e, 78.421875 * e), n.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e), n.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e), n.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(116.5 * e, 127.421875 * e), n.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e), n.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e), n.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41.5 * e, 134.421875 * e), n.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e), n.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e), n.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(78.5 * e, 51.921875 * e), n.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e), n.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e), n.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e), n.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 72.421875 * e), n.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), n.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.5 * e, 163.421875 * e), n.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e), n.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e), n.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e), n.closePath(), Ce(n, t[8], t[8], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79.5 * e, 61.421875 * e), n.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e), n.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e), n.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 72.421875 * e), n.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), n.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), n.closePath(), Ce(n, t[8], t[8], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(96.5 * e, 76.421875 * e), n.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e), n.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e), n.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(61.5 * e, 78.421875 * e), n.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e), n.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e), n.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(116.5 * e, 127.421875 * e), n.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e), n.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e), n.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41.5 * e, 134.421875 * e), n.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e), n.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e), n.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e), n.closePath(), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(78.5 * e, 51.921875 * e), n.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e), n.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e), n.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e), n.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), Ne(n, 108.5 * e, 148.421875 * e, 9 * e), Ce(n, t[5]), Ne(n, 106.5 * e, 144.421875 * e, 3 * e), Ce(n, t[6]), Ne(n, 46.5 * e, 148.421875 * e, 9 * e), Ce(n, t[5]), Ne(n, 44.5 * e, 144.421875 * e, 3 * e), Ce(n, t[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(116.5 * e, 114.421875 * e), n.bezierCurveTo(121.5 * e, 137.421875 * e, 118.5 * e, 133.421875 * e, 108.5 * e, 139.421875 * e), n.bezierCurveTo(94.5 * e, 146.421875 * e, 96.5 * e, 148.421875 * e, 95.5 * e, 152.421875 * e), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.translate(0, -2 * e), n.lineCap = "round", n.lineJoin = "round", n.moveTo(35.5 * e, 131.421875 * e), n.bezierCurveTo(36.5 * e, 140.421875 * e, 39.5 * e, 140.421875 * e, 49.5 * e, 143.421875 * e), n.bezierCurveTo(59.5 * e, 149.421875 * e, 57.5 * e, 151.421875 * e, 59.5 * e, 155.421875 * e), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84.5 * e, 57.421875 * e), n.bezierCurveTo(101.5 * e, 120.421875 * e, 92.5 * e, 127.421875 * e, 78.5 * e, 134.421875 * e), n.bezierCurveTo(51.5 * e, 131.421875 * e, 63.5 * e, 102.421875 * e, 70.5 * e, 59.421875 * e), n.bezierCurveTo(75 * e, 55.421875 * e, 78.5 * e, 52.421875 * e, 79.5 * e, 51.421875 * e), n.closePath(), Ce(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79.5 * e, 61.421875 * e), n.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e), n.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e), n.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 72.421875 * e), n.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), n.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(87.5 * e, 154.421875 * e), n.bezierCurveTo(93.5 * e, 163.921875 * e, 93.5 * e, 163.921875 * e, 99.5 * e, 173.421875 * e), n.bezierCurveTo(95 * e, 177.421875 * e, 95 * e, 177.421875 * e, 90.5 * e, 181.421875 * e), n.bezierCurveTo(89 * e, 167.921875 * e, 89 * e, 167.921875 * e, 87.5 * e, 154.421875 * e), n.closePath(), Ce(n, t[6], t[7], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(81.5 * e, 164.421875 * e), n.bezierCurveTo(84 * e, 172.921875 * e, 84 * e, 172.921875 * e, 86.5 * e, 181.421875 * e), n.bezierCurveTo(82.5 * e, 182.421875 * e, 82.5 * e, 182.421875 * e, 78.5 * e, 183.421875 * e), n.closePath(), Ce(n, t[6], t[7], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72.5 * e, 164.421875 * e), n.bezierCurveTo(73.5 * e, 173.921875 * e, 73.5 * e, 173.921875 * e, 74.5 * e, 183.421875 * e), n.bezierCurveTo(70.5 * e, 182.921875 * e, 70.5 * e, 182.921875 * e, 66.5 * e, 182.421875 * e), n.closePath(), Ce(n, t[6], t[7], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(65.5 * e, 156.421875 * e), n.bezierCurveTo(65 * e, 168.421875 * e, 65 * e, 168.421875 * e, 64.5 * e, 180.421875 * e), n.bezierCurveTo(58.5 * e, 177.421875 * e, 58.5 * e, 177.421875 * e, 52.5 * e, 174.421875 * e), n.closePath(), Ce(n, t[6], t[7], 2 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42.5 * e, 163.421875 * e), n.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e), n.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e), n.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e), n.closePath(), Ce(n, t[3], t[2], 4 * e), r
    }

    function Br(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 170 * e, n.translate(0, -170 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(159.5 * e, 322.0625 * e), n.bezierCurveTo(240.5 * e, 293.0625 * e, 240.5 * e, 293.0625 * e, 321.5 * e, 264.0625 * e), n.bezierCurveTo(276.5 * e, 230.0625 * e, 276.5 * e, 230.0625 * e, 231.5 * e, 196.0625 * e), n.bezierCurveTo(158.5 * e, 221.5625 * e, 158.5 * e, 221.5625 * e, 85.5 * e, 247.0625 * e), n.closePath(), Ce(n, t[0], t[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(212.5 * e, 270.0625 * e), n.bezierCurveTo(235 * e, 261.5625 * e, 235 * e, 261.5625 * e, 257.5 * e, 253.0625 * e), n.closePath(), Ce(n, void 0, t[0], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(193.5 * e, 226.0625 * e), n.bezierCurveTo(204.5 * e, 242.0625 * e, 242.5 * e, 237.0625 * e, 251.5 * e, 225.0625 * e), n.bezierCurveTo(246.5 * e, 195.0625 * e, 205.5 * e, 190.0625 * e, 193.5 * e, 227.0625 * e), n.closePath(), Ce(n, t[2], t[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(164.5 * e, 245.0625 * e), n.bezierCurveTo(182.5 * e, 264.0625 * e, 252.5 * e, 258.0625 * e, 276.5 * e, 244.0625 * e), n.bezierCurveTo(265.5 * e, 226.0625 * e, 244.5 * e, 231.0625 * e, 229.5 * e, 230.0625 * e), n.bezierCurveTo(205.5 * e, 227.0625 * e, 175.5 * e, 202.0625 * e, 162.5 * e, 244.0625 * e), n.closePath(), Ce(n, t[2], t[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115.5 * e, 260.0625 * e), n.bezierCurveTo(134.5 * e, 279.0625 * e, 170.5 * e, 275.0625 * e, 191.5 * e, 257.0625 * e), n.bezierCurveTo(174.5 * e, 208.0625 * e, 142.5 * e, 197.0625 * e, 116.5 * e, 259.0625 * e), n.closePath(), Ce(n, t[2], t[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(152.5 * e, 278.0625 * e), n.bezierCurveTo(165.5 * e, 294.0625 * e, 200.5 * e, 287.0625 * e, 216.5 * e, 278.0625 * e), n.bezierCurveTo(206.5 * e, 247.0625 * e, 173.5 * e, 233.0625 * e, 153.5 * e, 276.0625 * e), n.closePath(), Ce(n, t[2], t[3], 12 * e), r
    }

    function Wr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 272 * e, r.height = 264 * e, n.translate(0, 20 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56.999969482421875 * e, 84.517333984375 * e), n.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e), n.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e), n.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e), n.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e), n.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e), n.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e), n.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e), n.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e), n.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e), n.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e), n.closePath(), Ce(n, t[0]), n.translate(0, -20 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56.999969482421875 * e, 84.517333984375 * e), n.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e), n.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e), n.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e), n.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e), n.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e), n.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e), n.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e), n.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e), n.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e), n.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e), n.closePath(), Ce(n, t[1], t[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123.99996948242188 * e, 116.18402099609375 * e), n.bezierCurveTo(115.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 74.18402099609375 * e, 109.99996948242188 * e, 63.18402099609375 * e), n.bezierCurveTo(115.99996948242188 * e, 69.18402099609375 * e, 125.99996948242188 * e, 87.18402099609375 * e, 137.99996948242188 * e, 112.18402099609375 * e), n.bezierCurveTo(142.99996948242188 * e, 84.18402099609375 * e, 143.99996948242188 * e, 76.18402099609375 * e, 153.99996948242188 * e, 62.18402099609375 * e), n.bezierCurveTo(155.99996948242188 * e, 79.18402099609375 * e, 149.99996948242188 * e, 110.18402099609375 * e, 151.99996948242188 * e, 117.18402099609375 * e), n.bezierCurveTo(162.99996948242188 * e, 104.18402099609375 * e, 180.99996948242188 * e, 91.18402099609375 * e, 191.99996948242188 * e, 91.18402099609375 * e), n.bezierCurveTo(185.99996948242188 * e, 102.18402099609375 * e, 180.99996948242188 * e, 106.18402099609375 * e, 160.99996948242188 * e, 124.18402099609375 * e), n.bezierCurveTo(190.99996948242188 * e, 121.18402099609375 * e, 199.99996948242188 * e, 120.18402099609375 * e, 207.99996948242188 * e, 123.18402099609375 * e), n.bezierCurveTo(199.99996948242188 * e, 129.18402099609375 * e, 181.99996948242188 * e, 132.18402099609375 * e, 160.99996948242188 * e, 135.18402099609375 * e), n.bezierCurveTo(179.99996948242188 * e, 142.18402099609375 * e, 193.99996948242188 * e, 151.18402099609375 * e, 196.99996948242188 * e, 156.18402099609375 * e), n.bezierCurveTo(185.99996948242188 * e, 156.18402099609375 * e, 163.99996948242188 * e, 149.18402099609375 * e, 152.99996948242188 * e, 147.18402099609375 * e), n.bezierCurveTo(157.99996948242188 * e, 155.18402099609375 * e, 165.99996948242188 * e, 176.18402099609375 * e, 169.99996948242188 * e, 195.18402099609375 * e), n.bezierCurveTo(162.99996948242188 * e, 190.18402099609375 * e, 147.99996948242188 * e, 167.18402099609375 * e, 139.99996948242188 * e, 153.18402099609375 * e), n.bezierCurveTo(137.99996948242188 * e, 167.18402099609375 * e, 126.99996948242188 * e, 194.18402099609375 * e, 119.99996948242188 * e, 204.18402099609375 * e), n.bezierCurveTo(117.99996948242188 * e, 186.18402099609375 * e, 123.99996948242188 * e, 165.18402099609375 * e, 126.99996948242188 * e, 149.18402099609375 * e), n.bezierCurveTo(110.99996948242188 * e, 163.18402099609375 * e, 103.99996948242188 * e, 170.18402099609375 * e, 82.99996948242188 * e, 177.18402099609375 * e), n.bezierCurveTo(90.99996948242188 * e, 162.18402099609375 * e, 99.99996948242188 * e, 153.18402099609375 * e, 117.99996948242188 * e, 140.18402099609375 * e), n.bezierCurveTo(97.99996948242188 * e, 140.18402099609375 * e, 83.99996948242188 * e, 139.18402099609375 * e, 65.99996948242188 * e, 132.18402099609375 * e), n.bezierCurveTo(77.99996948242188 * e, 127.18402099609375 * e, 95.99996948242188 * e, 127.18402099609375 * e, 115.99996948242188 * e, 127.18402099609375 * e), n.bezierCurveTo(91.99996948242188 * e, 113.18402099609375 * e, 84.99996948242188 * e, 107.18402099609375 * e, 76.99996948242188 * e, 96.18402099609375 * e), n.bezierCurveTo(94.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 109.18402099609375 * e, 123.99996948242188 * e, 116.18402099609375 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(131.99996948242188 * e, 119.18402099609375 * e), n.bezierCurveTo(141.99996948242188 * e, 119.18402099609375 * e, 145.99996948242188 * e, 116.18402099609375 * e, 147.99996948242188 * e, 109.18402099609375 * e), n.bezierCurveTo(151.99996948242188 * e, 107.18402099609375 * e, 159.99996948242188 * e, 107.18402099609375 * e, 156.99996948242188 * e, 123.18402099609375 * e), n.bezierCurveTo(155.99996948242188 * e, 140.18402099609375 * e, 142.99996948242188 * e, 149.18402099609375 * e, 132.99996948242188 * e, 147.18402099609375 * e), n.bezierCurveTo(119.99996948242188 * e, 144.18402099609375 * e, 113.99996948242188 * e, 122.18402099609375 * e, 131.99996948242188 * e, 119.18402099609375 * e), n.closePath(), Ce(n, t[4], t[5], 6 * e), r
    }

    function Vr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 247 * e, r.height = 247 * e, n.translate(0, 10 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(150 * e, 62 * e), n.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e), n.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(164 * e, 171 * e), n.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e), n.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(132 * e, 95 * e), n.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e), n.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e), n.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e), n.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e), n.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e), n.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e), n.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e), n.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e), n.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e), n.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e), n.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e), n.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e), n.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e), n.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e), n.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e), n.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e), n.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e), n.closePath(), Ce(n, t[0]), n.translate(0, -10 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(150 * e, 62 * e), n.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e), n.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(164 * e, 171 * e), n.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e), n.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e), n.closePath(), Ce(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(132 * e, 95 * e), n.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e), n.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e), n.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e), n.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e), n.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e), n.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e), n.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e), n.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e), n.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e), n.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e), n.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e), n.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e), n.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e), n.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e), n.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e), n.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e), n.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e), n.closePath(), Ce(n, t[1], t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(137 * e, 137 * e), n.bezierCurveTo(145 * e, 125 * e, 138 * e, 108 * e, 123 * e, 104 * e), n.bezierCurveTo(81 * e, 101 * e, 88 * e, 77 * e, 98 * e, 65 * e), n.bezierCurveTo(117 * e, 38 * e, 138 * e, 39 * e, 165 * e, 52 * e), n.bezierCurveTo(197 * e, 72 * e, 207 * e, 111 * e, 197 * e, 140 * e), n.bezierCurveTo(182 * e, 180 * e, 161 * e, 197 * e, 112 * e, 194 * e), n.bezierCurveTo(58 * e, 194 * e, 37 * e, 170 * e, 34 * e, 142 * e), n.bezierCurveTo(29 * e, 102 * e, 40 * e, 63 * e, 51 * e, 45 * e), n.bezierCurveTo(43 * e, 78 * e, 41 * e, 103 * e, 43 * e, 122 * e), n.bezierCurveTo(51 * e, 158 * e, 63 * e, 174 * e, 95 * e, 179 * e), n.bezierCurveTo(129 * e, 186 * e, 169 * e, 172 * e, 177 * e, 144 * e), n.bezierCurveTo(197 * e, 105 * e, 172 * e, 76 * e, 160 * e, 71 * e), n.bezierCurveTo(125 * e, 52 * e, 111 * e, 73 * e, 111 * e, 81 * e), n.bezierCurveTo(106 * e, 93 * e, 140 * e, 92 * e, 147 * e, 107 * e), n.bezierCurveTo(153 * e, 128 * e, 140 * e, 135 * e, 137 * e, 139 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(132 * e, 95 * e), n.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e), n.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e), n.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e), n.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e), n.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e), n.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e), n.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e), n.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e), n.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e), n.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e), n.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e), n.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e), n.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e), n.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e), n.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e), n.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e), n.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e), n.closePath(), Ce(n, void 0, t[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(82 * e, 63 * e), n.bezierCurveTo(91 * e, 64 * e, 96 * e, 62 * e, 98 * e, 53 * e), n.bezierCurveTo(91 * e, 45 * e, 85 * e, 42 * e, 78 * e, 41 * e), n.bezierCurveTo(81 * e, 51 * e, 82 * e, 57 * e, 82 * e, 63 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(148 * e, 40 * e), n.bezierCurveTo(140 * e, 52 * e, 131 * e, 51 * e, 123 * e, 43 * e), n.bezierCurveTo(123 * e, 25 * e, 129 * e, 17 * e, 134 * e, 12 * e), n.bezierCurveTo(138 * e, 35 * e, 142 * e, 31 * e, 148 * e, 40 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(189 * e, 43 * e), n.bezierCurveTo(191 * e, 54 * e, 196 * e, 58 * e, 205 * e, 59 * e), n.bezierCurveTo(211 * e, 42 * e, 214 * e, 37 * e, 216 * e, 31 * e), n.bezierCurveTo(202 * e, 34 * e, 195 * e, 39 * e, 190 * e, 43 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(216 * e, 98 * e), n.bezierCurveTo(219 * e, 105 * e, 225 * e, 107 * e, 230 * e, 109 * e), n.bezierCurveTo(227 * e, 113 * e, 221 * e, 115 * e, 215 * e, 115 * e), n.bezierCurveTo(208 * e, 109 * e, 211 * e, 101 * e, 216 * e, 98 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(180 * e, 85 * e), n.bezierCurveTo(193 * e, 86 * e, 196 * e, 98 * e, 191 * e, 108 * e), n.bezierCurveTo(179 * e, 112 * e, 167 * e, 113 * e, 155 * e, 111 * e), n.bezierCurveTo(169 * e, 100 * e, 176 * e, 96 * e, 180 * e, 85 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(96 * e, 114 * e), n.bezierCurveTo(102 * e, 109 * e, 112 * e, 110 * e, 114 * e, 118 * e), n.bezierCurveTo(111 * e, 134 * e, 102 * e, 143 * e, 95 * e, 147 * e), n.bezierCurveTo(98 * e, 123 * e, 97 * e, 119 * e, 96 * e, 115 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 92 * e), n.bezierCurveTo(86 * e, 95 * e, 89 * e, 102 * e, 83 * e, 111 * e), n.bezierCurveTo(70 * e, 110 * e, 61 * e, 107 * e, 54 * e, 100 * e), n.bezierCurveTo(70 * e, 97 * e, 70 * e, 95 * e, 78 * e, 92 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 130 * e), n.bezierCurveTo(37 * e, 141 * e, 41 * e, 143 * e, 48 * e, 144 * e), n.bezierCurveTo(54 * e, 134 * e, 55 * e, 131 * e, 56 * e, 123 * e), n.bezierCurveTo(47 * e, 129 * e, 43 * e, 129 * e, 39 * e, 129 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(113 * e, 189 * e), n.bezierCurveTo(119 * e, 201 * e, 127 * e, 198 * e, 134 * e, 192 * e), n.bezierCurveTo(128 * e, 175 * e, 128 * e, 173 * e, 128 * e, 165 * e), n.bezierCurveTo(117 * e, 176 * e, 116 * e, 182 * e, 113 * e, 187 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(74 * e, 154 * e), n.bezierCurveTo(76 * e, 163 * e, 76 * e, 170 * e, 75 * e, 177 * e), n.bezierCurveTo(68 * e, 179 * e, 66 * e, 176 * e, 63 * e, 171 * e), n.bezierCurveTo(69 * e, 164 * e, 72 * e, 159 * e, 74 * e, 154 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(206 * e, 152 * e), n.bezierCurveTo(198 * e, 158 * e, 198 * e, 166 * e, 201 * e, 171 * e), n.bezierCurveTo(209 * e, 170 * e, 221 * e, 170 * e, 226 * e, 172 * e), n.bezierCurveTo(219 * e, 159 * e, 210 * e, 155 * e, 207 * e, 153 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(181 * e, 184 * e), n.bezierCurveTo(170 * e, 184 * e, 167 * e, 187 * e, 163 * e, 195 * e), n.bezierCurveTo(171 * e, 207 * e, 183 * e, 214 * e, 191 * e, 217 * e), n.bezierCurveTo(183 * e, 204 * e, 184 * e, 196 * e, 181 * e, 184 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(66 * e, 199 * e), n.bezierCurveTo(73 * e, 197 * e, 78 * e, 199 * e, 79 * e, 206 * e), n.bezierCurveTo(71 * e, 216 * e, 67 * e, 221 * e, 57 * e, 223 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(182 * e, 143 * e), n.bezierCurveTo(183 * e, 146 * e, 183 * e, 149 * e, 179 * e, 152 * e), n.bezierCurveTo(174 * e, 146 * e, 174 * e, 146 * e, 169 * e, 140 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(32 * e, 159 * e), n.bezierCurveTo(45 * e, 160 * e, 48 * e, 164 * e, 45 * e, 175 * e), n.bezierCurveTo(28 * e, 183 * e, 25 * e, 184 * e, 19 * e, 184 * e), n.bezierCurveTo(30 * e, 170 * e, 29 * e, 164 * e, 31 * e, 160 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110 * e, 214 * e), n.bezierCurveTo(106 * e, 212 * e, 104 * e, 213 * e, 102 * e, 218 * e), n.bezierCurveTo(104 * e, 220 * e, 107 * e, 222 * e, 110 * e, 224 * e), n.bezierCurveTo(110.5 * e, 219 * e, 110.5 * e, 219 * e, 111 * e, 214 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(40 * e, 52 * e), n.bezierCurveTo(41 * e, 57 * e, 40 * e, 61 * e, 34 * e, 60 * e), n.bezierCurveTo(31.5 * e, 55 * e, 31.5 * e, 55 * e, 29 * e, 50 * e), n.bezierCurveTo(34 * e, 50.5 * e, 34 * e, 50.5 * e, 39 * e, 51 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(31 * e, 81 * e), n.bezierCurveTo(37 * e, 84 * e, 38 * e, 90 * e, 34 * e, 99 * e), n.bezierCurveTo(23 * e, 97 * e, 19 * e, 96 * e, 16 * e, 93 * e), n.bezierCurveTo(24 * e, 88 * e, 28 * e, 85 * e, 30 * e, 81 * e), n.closePath(), Ce(n, t[4], t[5], 5 * e), r
    }

    function Kr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 465 * e, r.height = 310 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(126 * e, 192 * e), n.bezierCurveTo(198 * e, 202 * e, 245 * e, 203 * e, 335 * e, 194 * e), n.bezierCurveTo(336 * e, 232 * e, 326 * e, 235 * e, 232 * e, 237 * e), n.bezierCurveTo(161 * e, 235 * e, 122 * e, 235 * e, 126 * e, 193 * e), n.closePath(), Ce(n, t[0], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(146 * e, 239 * e), n.bezierCurveTo(174 * e, 74 * e, 287 * e, 88 * e, 320 * e, 240 * e), n.bezierCurveTo(329 * e, 231 * e, 340 * e, 219 * e, 332 * e, 115 * e), n.bezierCurveTo(330 * e, 40 * e, 144 * e, 30 * e, 129 * e, 116 * e), n.bezierCurveTo(124 * e, 217 * e, 124 * e, 228 * e, 143 * e, 237 * e), n.closePath(), Ce(n, t[0], t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(126 * e, 193 * e), n.bezierCurveTo(173 * e, 94 * e, 209 * e, 100 * e, 228 * e, 57 * e), n.bezierCurveTo(190 * e, 112 * e, 165 * e, 115 * e, 127 * e, 184 * e), n.closePath(), Ce(n, void 0, t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(230 * e, 57 * e), n.bezierCurveTo(266 * e, 117 * e, 310 * e, 130 * e, 332 * e, 183 * e), n.bezierCurveTo(290 * e, 112 * e, 262 * e, 109 * e, 230 * e, 56 * e), n.closePath(), Ce(n, void 0, t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(154 * e, 212 * e), n.bezierCurveTo(208 * e, 224 * e, 252 * e, 219 * e, 305 * e, 212 * e), n.bezierCurveTo(267 * e, 219 * e, 204 * e, 222 * e, 155 * e, 212 * e), n.closePath(), Ce(n, void 0, t[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(239 * e, 59 * e), n.bezierCurveTo(302 * e, 72 * e, 325 * e, 84 * e, 326 * e, 115 * e), n.bezierCurveTo(289 * e, 80 * e, 270 * e, 88 * e, 253 * e, 78 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(216 * e, 61 * e), n.bezierCurveTo(209 * e, 70 * e, 209 * e, 70 * e, 202 * e, 79 * e), n.bezierCurveTo(173 * e, 87 * e, 162 * e, 91 * e, 137 * e, 107 * e), n.bezierCurveTo(153 * e, 78 * e, 174 * e, 67 * e, 212 * e, 62 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(175 * e, 125 * e), n.bezierCurveTo(218 * e, 94 * e, 238 * e, 90 * e, 281 * e, 125 * e), n.bezierCurveTo(245 * e, 89 * e, 240 * e, 80 * e, 228 * e, 67 * e), n.bezierCurveTo(207 * e, 100 * e, 192 * e, 104 * e, 177 * e, 123 * e), n.closePath(), Ce(n, t[2]), r
    }

    function wr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 465 * e, r.height = 405 * e, n.globalAlpha = 1, n.translate(6 * e, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39.000030517578125 * e, 162.03977966308594 * e), n.bezierCurveTo(125.00003051757812 * e, 84.03977966308594 * e, 108.50003051757812 * e, 115.03977966308594 * e, 178.00003051757812 * e, 68.03977966308594 * e), n.bezierCurveTo(299.0000305175781 * e, 146.53977966308594 * e, 299.0000305175781 * e, 146.53977966308594 * e, 420.0000305175781 * e, 225.03977966308594 * e), n.bezierCurveTo(400.0000305175781 * e, 288.53977966308594 * e, 400.0000305175781 * e, 288.53977966308594 * e, 380.0000305175781 * e, 352.03977966308594 * e), n.bezierCurveTo(216.50003051757812 * e, 345.53977966308594 * e, 216.50003051757812 * e, 345.53977966308594 * e, 53.000030517578125 * e, 339.03977966308594 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(23.000030517578125 * e, 306.94886779785156 * e), n.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e), n.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e), n.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e), n.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e), n.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e), n.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e), n.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e), n.closePath(), Ce(n, t[0], t[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(17.000030517578125 * e, 149.94886779785156 * e), n.bezierCurveTo(76.00003051757812 * e, 67.94886779785156 * e, 177.00003051757812 * e, 40.94886779785156 * e, 232.00003051757812 * e, 45.94886779785156 * e), n.bezierCurveTo(316.0000305175781 * e, 46.94886779785156 * e, 359.0000305175781 * e, 74.94886779785156 * e, 428.0000305175781 * e, 145.94886779785156 * e), n.bezierCurveTo(414.0000305175781 * e, 73.94886779785156 * e, 386.0000305175781 * e, 68.94886779785156 * e, 359.0000305175781 * e, 43.94886779785156 * e), n.bezierCurveTo(295.0000305175781 * e, 5.9488677978515625 * e, 239.00003051757812 * e, 10.948867797851562 * e, 207.00003051757812 * e, 10.948867797851562 * e), n.bezierCurveTo(121.00003051757812 * e, 20.948867797851562 * e, 104.00003051757812 * e, 34.94886779785156 * e, 45.000030517578125 * e, 84.94886779785156 * e), n.bezierCurveTo(14.000030517578125 * e, 128.94886779785156 * e, 18.000030517578125 * e, 142.94886779785156 * e, 16.000030517578125 * e, 151.94886779785156 * e), n.closePath(), Ce(n, t[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(23.000030517578125 * e, 306.94886779785156 * e), n.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e), n.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e), n.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e), n.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e), n.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e), n.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e), n.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e), n.closePath(), Ce(n, void 0, t[1], 16 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60.000030517578125 * e, 288.03977966308594 * e), n.bezierCurveTo(183.00003051757812 * e, 320.03977966308594 * e, 342.0000305175781 * e, 306.03977966308594 * e, 399.0000305175781 * e, 286.03977966308594 * e), n.bezierCurveTo(420.0000305175781 * e, 345.03977966308594 * e, 410.0000305175781 * e, 335.03977966308594 * e, 415.0000305175781 * e, 362.03977966308594 * e), n.bezierCurveTo(351.0000305175781 * e, 384.03977966308594 * e, 299.0000305175781 * e, 389.03977966308594 * e, 215.00003051757812 * e, 391.03977966308594 * e), n.bezierCurveTo(128.00003051757812 * e, 388.03977966308594 * e, 69.00003051757812 * e, 373.03977966308594 * e, 39.000030517578125 * e, 359.03977966308594 * e), n.closePath(), Ce(n, t[0], t[1], 13 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(47.000030517578125 * e, 327.03977966308594 * e), n.bezierCurveTo(203.00003051757812 * e, 377.03977966308594 * e, 331.0000305175781 * e, 349.03977966308594 * e, 410.0000305175781 * e, 330.03977966308594 * e), n.closePath(), Ce(n, t[0], t[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(9.000030517578125 * e, 339.1306915283203 * e), n.bezierCurveTo(2.000030517578125 * e, 280.1306915283203 * e, 30.000030517578125 * e, 219.1306915283203 * e, 85.00003051757812 * e, 167.1306915283203 * e), n.bezierCurveTo(174.00003051757812 * e, 82.13069152832031 * e, 241.00003051757812 * e, 101.13069152832031 * e, 284.0000305175781 * e, 115.13069152832031 * e), n.bezierCurveTo(333.0000305175781 * e, 134.1306915283203 * e, 376.0000305175781 * e, 177.1306915283203 * e, 410.0000305175781 * e, 247.1306915283203 * e), n.bezierCurveTo(439.0000305175781 * e, 300.1306915283203 * e, 442.0000305175781 * e, 346.1306915283203 * e, 430.0000305175781 * e, 363.1306915283203 * e), n.bezierCurveTo(418.0000305175781 * e, 366.1306915283203 * e, 395.0000305175781 * e, 295.1306915283203 * e, 355.0000305175781 * e, 223.1306915283203 * e), n.bezierCurveTo(299.0000305175781 * e, 156.1306915283203 * e, 262.0000305175781 * e, 155.1306915283203 * e, 215.00003051757812 * e, 159.1306915283203 * e), n.bezierCurveTo(133.00003051757812 * e, 171.1306915283203 * e, 120.00003051757812 * e, 193.1306915283203 * e, 96.00003051757812 * e, 221.1306915283203 * e), n.bezierCurveTo(49.000030517578125 * e, 262.1306915283203 * e, 47.000030517578125 * e, 306.1306915283203 * e, 38.000030517578125 * e, 336.1306915283203 * e), n.bezierCurveTo(30.000030517578125 * e, 349.1306915283203 * e, 30.000030517578125 * e, 349.1306915283203 * e, 22.000030517578125 * e, 362.1306915283203 * e), n.closePath(), Ce(n, t[2], t[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(228.00003051757812 * e, 128.03977966308594 * e), n.bezierCurveTo(315.0000305175781 * e, 131.03977966308594 * e, 349.0000305175781 * e, 178.03977966308594 * e, 386.0000305175781 * e, 234.03977966308594 * e), n.bezierCurveTo(444.0000305175781 * e, 329.03977966308594 * e, 446.0000305175781 * e, 354.03977966308594 * e, 427.0000305175781 * e, 373.03977966308594 * e), n.bezierCurveTo(389.0000305175781 * e, 389.03977966308594 * e, 399.0000305175781 * e, 329.03977966308594 * e, 361.0000305175781 * e, 277.03977966308594 * e), n.bezierCurveTo(306.0000305175781 * e, 191.03977966308594 * e, 266.0000305175781 * e, 183.03977966308594 * e, 220.00003051757812 * e, 181.03977966308594 * e), n.bezierCurveTo(138.00003051757812 * e, 184.03977966308594 * e, 123.00003051757812 * e, 212.03977966308594 * e, 89.00003051757812 * e, 271.03977966308594 * e), n.bezierCurveTo(52.000030517578125 * e, 349.03977966308594 * e, 68.00003051757812 * e, 364.03977966308594 * e, 33.000030517578125 * e, 369.03977966308594 * e), n.bezierCurveTo(6.000030517578125 * e, 366.03977966308594 * e, 5.000030517578125 * e, 341.03977966308594 * e, 26.000030517578125 * e, 288.03977966308594 * e), n.bezierCurveTo(60.000030517578125 * e, 207.03977966308594 * e, 100.00003051757812 * e, 180.03977966308594 * e, 113.00003051757812 * e, 170.03977966308594 * e), n.bezierCurveTo(159.00003051757812 * e, 132.03977966308594 * e, 196.00003051757812 * e, 133.03977966308594 * e, 226.00003051757812 * e, 129.03977966308594 * e), n.closePath(), Ce(n, t[0], t[1], 20 * e), r
    }

    function Ur(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        return n.width = 198 * e, n.height = 147 * e, a.globalAlpha = i ? .5 : 1, a.translate(0, 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 76 * e), a.bezierCurveTo(50 * e, 82 * e, 50 * e, 82 * e, 56 * e, 88 * e), a.bezierCurveTo(59 * e, 82 * e, 59 * e, 82 * e, 62 * e, 76 * e), a.bezierCurveTo(59 * e, 71 * e, 59 * e, 71 * e, 56 * e, 66 * e), a.bezierCurveTo(59 * e, 69 * e, 59 * e, 69 * e, 62 * e, 72 * e), a.bezierCurveTo(80 * e, 48 * e, 102 * e, 50 * e, 120 * e, 62 * e), a.bezierCurveTo(127 * e, 58 * e, 127 * e, 58 * e, 134 * e, 54 * e), a.bezierCurveTo(129 * e, 60 * e, 129 * e, 60 * e, 124 * e, 66 * e), a.bezierCurveTo(129 * e, 73 * e, 129 * e, 73 * e, 134 * e, 80 * e), a.bezierCurveTo(140 * e, 74 * e, 140 * e, 74 * e, 146 * e, 68 * e), a.bezierCurveTo(142 * e, 76 * e, 142 * e, 76 * e, 138 * e, 84 * e), a.bezierCurveTo(144 * e, 90 * e, 142 * e, 90 * e, 144 * e, 90 * e), a.bezierCurveTo(136 * e, 97 * e, 136 * e, 97 * e, 128 * e, 104 * e), a.bezierCurveTo(154 * e, 110 * e, 164 * e, 90 * e, 160 * e, 80 * e), a.bezierCurveTo(138 * e, 22 * e, 148 * e, 51 * e, 136 * e, 22 * e), a.bezierCurveTo(97 * e, 24 * e, 97 * e, 24 * e, 58 * e, 26 * e), a.bezierCurveTo(47 * e, 54 * e, 36 * e, 80 * e, 36 * e, 82 * e), a.bezierCurveTo(40 * e, 108 * e, 54 * e, 104 * e, 62 * e, 104 * e), a.bezierCurveTo(46 * e, 92 * e, 54 * e, 97 * e, 46 * e, 90 * e), a.closePath(), Ce(a, t[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 80 * e), a.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e), a.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e), a.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e), a.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e), a.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e), a.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e), a.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e), a.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e), a.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e), a.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e), a.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e), a.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e), a.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e), a.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e), a.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e), a.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e), a.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e), a.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e), a.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e), a.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e), a.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e), a.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e), a.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e), a.closePath(), Ce(a, t[0]), a.globalAlpha = 1, a.translate(0, -6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 80 * e), a.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e), a.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e), a.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e), a.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e), a.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e), a.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e), a.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e), a.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e), a.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e), a.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e), a.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e), a.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e), a.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e), a.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e), a.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e), a.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e), a.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e), a.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e), a.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e), a.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e), a.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e), a.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e), a.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e), a.closePath(), Ce(a, t[1], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(49 * e, 98 * e), a.bezierCurveTo(96.5 * e, 98 * e, 96.5 * e, 98 * e, 144 * e, 98 * e), a.bezierCurveTo(136.5 * e, 102 * e, 136.5 * e, 102 * e, 129 * e, 106 * e), a.bezierCurveTo(103 * e, 105.5 * e, 103 * e, 105.5 * e, 77 * e, 105 * e), a.bezierCurveTo(65 * e, 105 * e, 65 * e, 105 * e, 53 * e, 105 * e), a.closePath(), Ce(a, t[1]), a.globalAlpha = .5, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(54 * e, 98 * e), a.bezierCurveTo(97 * e, 98 * e, 97 * e, 98 * e, 140 * e, 98 * e), a.bezierCurveTo(134 * e, 101 * e, 134 * e, 101 * e, 128 * e, 104 * e), a.bezierCurveTo(92 * e, 104 * e, 92 * e, 104 * e, 56 * e, 104 * e), a.closePath(), Ce(a, t[0]), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 47 * e), a.bezierCurveTo(124.5 * e, 43.5 * e, 124.5 * e, 43.5 * e, 131 * e, 40 * e), a.bezierCurveTo(128 * e, 46 * e, 128 * e, 46 * e, 125 * e, 52 * e), a.bezierCurveTo(131 * e, 57 * e, 135 * e, 64 * e, 139 * e, 73 * e), a.bezierCurveTo(142.5 * e, 69.5 * e, 142.5 * e, 69.5 * e, 146 * e, 66 * e), a.bezierCurveTo(143.5 * e, 72.5 * e, 143.5 * e, 72.5 * e, 141 * e, 79 * e), a.bezierCurveTo(142 * e, 91 * e, 141 * e, 94 * e, 132 * e, 98 * e), a.bezierCurveTo(117 * e, 102 * e, 126 * e, 108 * e, 142 * e, 102 * e), a.bezierCurveTo(159 * e, 98 * e, 164 * e, 80 * e, 162 * e, 47 * e), a.bezierCurveTo(160 * e, 19 * e, 150 * e, 6 * e, 117 * e, 4 * e), a.bezierCurveTo(44 * e, 0 * e, 35 * e, 20 * e, 33 * e, 37 * e), a.bezierCurveTo(29 * e, 69 * e, 33 * e, 88 * e, 44 * e, 96 * e), a.bezierCurveTo(64 * e, 107 * e, 70 * e, 102 * e, 54 * e, 93 * e), a.bezierCurveTo(49 * e, 88 * e, 50 * e, 82 * e, 53 * e, 77 * e), a.bezierCurveTo(51.5 * e, 71 * e, 51.5 * e, 71 * e, 50 * e, 65 * e), a.bezierCurveTo(53 * e, 68.5 * e, 53 * e, 68.5 * e, 56 * e, 72 * e), a.bezierCurveTo(59 * e, 67.5 * e, 59 * e, 67.5 * e, 62 * e, 63 * e), a.bezierCurveTo(60.5 * e, 59.5 * e, 60.5 * e, 59.5 * e, 59 * e, 56 * e), a.bezierCurveTo(62 * e, 57 * e, 62 * e, 57 * e, 65 * e, 58 * e), a.bezierCurveTo(78 * e, 35 * e, 103 * e, 36 * e, 117 * e, 47 * e), a.closePath(), Ce(a, t[1], t[2], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(62 * e, 21 * e), a.bezierCurveTo(63 * e, 34 * e, 64 * e, 37 * e, 66 * e, 40 * e), a.bezierCurveTo(54 * e, 49 * e, 53 * e, 51 * e, 48 * e, 58 * e), a.bezierCurveTo(44 * e, 51 * e, 42 * e, 43 * e, 40 * e, 36 * e), a.bezierCurveTo(47 * e, 28 * e, 52 * e, 25 * e, 61 * e, 21 * e), a.closePath(), Ce(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60 * e, 29 * e), a.bezierCurveTo(62 * e, 25 * e, 65 * e, 24 * e, 70 * e, 23 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(61 * e, 37 * e), a.bezierCurveTo(63 * e, 32 * e, 66 * e, 32 * e, 71 * e, 32 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 31 * e), a.bezierCurveTo(50 * e, 26 * e, 50 * e, 25 * e, 51 * e, 23 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46 * e, 35 * e), a.bezierCurveTo(44 * e, 31 * e, 43 * e, 29 * e, 45 * e, 26 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 44 * e), a.bezierCurveTo(57 * e, 48 * e, 57 * e, 50 * e, 60 * e, 52 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 48 * e), a.bezierCurveTo(52 * e, 52 * e, 52 * e, 54 * e, 55 * e, 57 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46 * e, 41 * e), a.bezierCurveTo(41 * e, 42 * e, 39 * e, 45 * e, 38 * e, 48 * e), Ce(a, void 0, t[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(48 * e, 48 * e), a.bezierCurveTo(42 * e, 51 * e, 42 * e, 53 * e, 40 * e, 55 * e), Ce(a, void 0, t[3], 4 * e), 0 == r ? (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(99 * e, 101 * e), a.bezierCurveTo(118.6666259765625 * e, 104.33331298828125 * e, 124.6666259765625 * e, 116.33331298828125 * e, 112.6666259765625 * e, 114.33331298828125 * e), a.bezierCurveTo(104.6666259765625 * e, 112.33331298828125 * e, 100.6666259765625 * e, 105.33331298828125 * e, 99.6666259765625 * e, 101.33331298828125 * e), Ce(a, void 0, t[5], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97.6666259765625 * e, 101.33331298828125 * e), a.bezierCurveTo(81.6666259765625 * e, 106.33331298828125 * e, 79.6666259765625 * e, 114.33331298828125 * e, 89.6666259765625 * e, 114.33331298828125 * e), a.bezierCurveTo(95.6666259765625 * e, 111.33331298828125 * e, 95.6666259765625 * e, 109.33331298828125 * e, 98.6666259765625 * e, 102.33331298828125 * e), Ce(a, void 0, t[5], 6 * e)) : (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103 * e, 100.39999389648438 * e), a.bezierCurveTo(120 * e, 106.39999389648438 * e, 118 * e, 107.39999389648438 * e, 120 * e, 111.39999389648438 * e), Ce(a, void 0, t[5], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103 * e, 100.39999389648438 * e), a.bezierCurveTo(90 * e, 103.39999389648438 * e, 89 * e, 106.39999389648438 * e, 87 * e, 112.39999389648438 * e), Ce(a, void 0, t[5], 6 * e), Ne(a, 86 * e, 114.39999389648438 * e, 4.5 * e), Ce(a, t[1], t[5], 6 * e), Ne(a, 121 * e, 114.39999389648438 * e, 4.5 * e), Ce(a, t[1], t[5], 6 * e)), n
    }

    function Yr(e, i) {
        var t = document.createElement("canvas"),
            r = t.getContext("2d");
        return t.width = 253 * e, t.height = 192 * e, r.globalAlpha = .5, r.save(), r.translate(42 * e, 99 * e), r.globalAlpha = .5, ge(r, -7 * e, -20 * e, 14 * e, 39 * e, 20 * e), r.restore(), Ce(r, i[0]), r.globalAlpha = 1, r.save(), r.translate(37 * e, 94 * e), ge(r, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e), r.restore(), Ce(r, i[2]), r.globalAlpha = .5, r.save(), r.translate(136 * e, 99 * e), r.globalAlpha = .5, ge(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e), r.restore(), Ce(r, i[0], i[0], 13 * e), r.globalAlpha = 1, r.save(), r.translate(131 * e, 94 * e), ge(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e), r.restore(), Ce(r, i[2], i[2], 13 * e), r.save(), r.translate(131 * e, 94 * e), ge(r, -76 * e, -61 * e, 152 * e, 122 * e, 20 * e), r.restore(), Ce(r, i[3], i[1], 8 * e), r.save(), r.translate(168.5 * e, 93.5 * e), ge(r, -30.5 * e, -58.5 * e, 61 * e, 117 * e, 20 * e), r.restore(), Ce(r, i[3], i[4], 6 * e), r.save(), r.translate(93.5 * e, 95.5 * e), ge(r, -32 * e, -59.5 * e, 59 * e, 119 * e, 20 * e), r.restore(), Ce(r, i[3], i[4], 6 * e), r.save(), r.translate(130.5 * e, 94 * e), ge(r, -36 * e, -67 * e, 73 * e, 134 * e, 20 * e), r.restore(), Ce(r, i[3], i[2], 8 * e), r.globalAlpha = .5, r.save(), r.translate(133 * e, 97 * e), ge(r, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e), r.restore(), Ce(r, i[0]), r.globalAlpha = 1, r.save(), r.translate(133 * e, 92 * e), ge(r, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e), r.restore(), Ce(r, i[2]), r.globalAlpha = .5, r.save(), r.translate(228 * e, 99.5 * e), r.globalAlpha = .5, ge(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e), r.restore(), Ce(r, i[0]), r.globalAlpha = 1, r.save(), r.translate(223 * e, 94.5 * e), ge(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e), r.restore(), Ce(r, i[2]), r.save(), r.translate(133.5 * e, 175.5 * e), r.globalAlpha = .5, ge(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e), r.restore(), Ce(r, i[0]), r.globalAlpha = 1, r.save(), r.translate(128.5 * e, 170.5 * e), ge(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e), r.restore(), Ce(r, i[2]), t
    }

    function Fr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 316 * e, r.height = 365 * e, n.save(), n.translate(156.07142639160156 * e, 51.81248474121094 * e), n.rotate(0), ge(n, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e), n.restore(), Ce(n, t[1], t[2], 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110.57142639160156 * e, 197.09820556640625 * e), n.bezierCurveTo(158.07142639160156 * e, 179.09820556640625 * e, 158.07142639160156 * e, 179.09820556640625 * e, 205.57142639160156 * e, 161.09820556640625 * e), n.bezierCurveTo(205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 309.8125 * e), n.bezierCurveTo(205.57142639160156 * e, 323.8125 * e, 200.57142639160156 * e, 325.8125 * e, 187.57142639160156 * e, 326.8125 * e), n.bezierCurveTo(155.57142639160156 * e, 326.3125 * e, 155.57142639160156 * e, 326.3125 * e, 123.57142639160156 * e, 325.8125 * e), n.bezierCurveTo(111.57142639160156 * e, 326.8125 * e, 109.57142639160156 * e, 321.8125 * e, 110.57142639160156 * e, 312.8125 * e), n.closePath(), Ce(n, t[3], t[4], 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(126.57142639160156 * e, 67.38392639160156 * e), n.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e), n.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e), n.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e), n.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e), n.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e), n.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e), n.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e), n.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e), n.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e), n.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e), n.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e), n.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e), n.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e), n.closePath(), Ce(n, void 0, t[5], 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(125.57142639160156 * e, 156.66963958740234 * e), n.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e), n.closePath(), Ce(n, void 0, t[6], 15 * e), r
    }

    function kr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 316 * e, r.height = 365 * e, n.save(), n.translate(156.07142639160156 * e, 51.81248474121094 * e), n.rotate(0), ge(n, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e), n.restore(), Ce(n, t[1], t[2], 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(126.57142639160156 * e, 67.38392639160156 * e), n.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e), n.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e), n.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e), n.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e), n.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e), n.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e), n.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e), n.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e), n.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e), n.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e), n.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e), n.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e), n.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e), n.closePath(), Ce(n, void 0, t[5], 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(125.57142639160156 * e, 156.66963958740234 * e), n.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e), n.closePath(), Ce(n, void 0, t[6], 15 * e), r
    }

    function xr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.translate(0, 15 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), n.closePath(), Ce(n, void 0, t[0], 11 * e), n.translate(0, -5 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103 * e, 154 * e), n.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e), n.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e), n.closePath(), Ce(n, t[3], t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), n.closePath(), Ce(n, t[1], t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(182 * e, 185 * e), n.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(222 * e, 287 * e), n.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(145 * e, 290 * e), n.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e), n.closePath(), Ce(n, t[1], t[2], 11 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105 * e, 184 * e), n.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e), n.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e), n.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e), n.closePath(), Ce(n, t[4], t[2], 11 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(251 * e, 276 * e), n.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e), n.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e), n.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e), n.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e), n.closePath(), Ce(n, t[4], t[2], 11 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), n.closePath(), Ce(n, void 0, t[2], 11 * e), r
    }

    function Jr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 400 * e, r.height = 400 * e, n.translate(0, 15 * e), n.globalAlpha = i ? .5 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), n.closePath(), Ce(n, void 0, t[0], 11 * e), n.translate(0, -5 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103 * e, 154 * e), n.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e), n.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e), n.closePath(), Ce(n, t[3], t[2], 12 * e), n.translate(0, 25 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103 * e, 154 * e), n.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e), n.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e), n.closePath(), Ce(n, t[5]), n.translate(0, -25 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), n.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), n.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), n.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), n.closePath(), Ce(n, t[1], t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(182 * e, 185 * e), n.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(222 * e, 287 * e), n.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e), n.closePath(), Ce(n, void 0, t[2], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(145 * e, 290 * e), n.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e), n.closePath(), Ce(n, t[1], t[2], 11 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105 * e, 184 * e), n.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e), n.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e), n.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e), n.closePath(), Ce(n, t[4], t[2], 11 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(251 * e, 276 * e), n.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e), n.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e), n.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e), n.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e), n.closePath(), Ce(n, t[4], t[2], 11 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(102 * e, 154 * e), n.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), n.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), n.closePath(), Ce(n, void 0, t[2], 11 * e), r
    }

    function Xr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 80 * e, r.height = 160 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.save(), ge(n, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(-150 * e, -100 * e), n.moveTo(167.5 * e, 171.0625 * e), n.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e), n.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e), n.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e), n.closePath(), Ce(n, t[0]), n.restore(), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.save(), ge(n, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e), Ce(n, t[1], t[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(-150 * e, -100 * e), n.moveTo(167.5 * e, 171.0625 * e), n.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e), n.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e), n.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e), n.closePath(), Ce(n, t[3], t[4], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.translate(0 * e, 1 * e), n.moveTo(180.5 * e, 169.0625 * e), n.bezierCurveTo(180.5 * e, 157.5625 * e, 180.5 * e, 157.5625 * e, 180.5 * e, 146.0625 * e), n.bezierCurveTo(181.5 * e, 134.0625 * e, 193.5 * e, 129.0625 * e, 196.5 * e, 146.0625 * e), n.bezierCurveTo(196.5 * e, 157.5625 * e, 196.5 * e, 157.5625 * e, 196.5 * e, 169.0625 * e), n.closePath(), Ce(n, t[5]), n.restore(), r
    }

    function qr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 109 * e, r.height = 110 * e, Ne(n, 54.5 * e, 55 * e, 48.038209575038294 * e), Ce(n, i[0], i[1], 8 * e), 0 == t ? (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(54.928558349609375 * e, 43.72320556640625 * e), n.bezierCurveTo(66.92855834960938 * e, 31.72320556640625 * e, 69.92855834960938 * e, 29.72320556640625 * e, 74.92855834960938 * e, 29.72320556640625 * e), n.bezierCurveTo(86.92855834960938 * e, 28.72320556640625 * e, 91.92855834960938 * e, 42.72320556640625 * e, 89.92855834960938 * e, 52.72320556640625 * e), n.bezierCurveTo(88.92855834960938 * e, 63.72320556640625 * e, 73.92855834960938 * e, 75.72320556640625 * e, 55.928558349609375 * e, 87.72320556640625 * e), n.bezierCurveTo(37.928558349609375 * e, 78.72320556640625 * e, 26.928558349609375 * e, 65.72320556640625 * e, 19.928558349609375 * e, 54.72320556640625 * e), n.bezierCurveTo(13.928558349609375 * e, 42.72320556640625 * e, 21.928558349609375 * e, 28.72320556640625 * e, 35.928558349609375 * e, 29.72320556640625 * e), n.bezierCurveTo(45.928558349609375 * e, 31.72320556640625 * e, 51.928558349609375 * e, 40.72320556640625 * e, 53.928558349609375 * e, 44.72320556640625 * e), n.closePath(), Ce(n, i[2])) : 1 == t ? (n.save(), n.translate(55 * e, 39.48748779296875 * e), ge(n, -11.5 * e, -36 * e, 23 * e, 72 * e, 10 * e), n.restore(), Ce(n, i[2], i[3], 4 * e), Ne(n, 54.5 * e, 78.48748779296875 * e, 22.02271554554524 * e), Ce(n, i[4], i[3], 4 * e), n.save(), n.translate(55.5 * e, 57.287506103515625 * e), ge(n, -9 * e, -16 * e, 18 * e, 32 * e, 10 * e), n.restore(), Ce(n, i[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(66.5 * e, 25.287506103515625 * e), n.bezierCurveTo(60.5 * e, 25.287506103515625 * e, 63.5 * e, 25.287506103515625 * e, 54.5 * e, 25.287506103515625 * e), n.closePath(), Ce(n, void 0, i[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(66.5 * e, 37.287506103515625 * e), n.bezierCurveTo(60.5 * e, 37.287506103515625 * e, 60.5 * e, 37.287506103515625 * e, 54.5 * e, 37.287506103515625 * e), n.closePath(), Ce(n, void 0, i[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(66.5 * e, 50.287506103515625 * e), n.bezierCurveTo(61 * e, 50.287506103515625 * e, 61 * e, 50.287506103515625 * e, 55.5 * e, 50.287506103515625 * e), n.closePath(), Ce(n, void 0, i[5], 4 * e)) : 2 == t ? (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(45.928558349609375 * e, 55.29463195800781 * e), n.bezierCurveTo(38.928558349609375 * e, 67.29463195800781 * e, 38.928558349609375 * e, 67.29463195800781 * e, 31.928558349609375 * e, 79.29463195800781 * e), n.bezierCurveTo(15.928558349609375 * e, 85.29463195800781 * e, 17.928558349609375 * e, 86.29463195800781 * e, 17.928558349609375 * e, 90.29463195800781 * e), n.bezierCurveTo(19.928558349609375 * e, 94.29463195800781 * e, 21.928558349609375 * e, 94.29463195800781 * e, 27.928558349609375 * e, 92.29463195800781 * e), n.bezierCurveTo(29.928558349609375 * e, 98.29463195800781 * e, 30.928558349609375 * e, 99.29463195800781 * e, 33.928558349609375 * e, 99.29463195800781 * e), n.bezierCurveTo(38.928558349609375 * e, 97.29463195800781 * e, 38.928558349609375 * e, 93.29463195800781 * e, 37.928558349609375 * e, 86.29463195800781 * e), n.bezierCurveTo(45.428558349609375 * e, 73.29463195800781 * e, 51.928558349609375 * e, 64.29463195800781 * e, 52.928558349609375 * e, 60.29463195800781 * e), n.closePath(), Ce(n, i[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(55.928558349609375 * e, 8.866058349609375 * e), n.bezierCurveTo(35.928558349609375 * e, 35.866058349609375 * e, 37.928558349609375 * e, 48.866058349609375 * e, 46.928558349609375 * e, 62.866058349609375 * e), n.bezierCurveTo(65.92855834960938 * e, 72.86605834960938 * e, 80.92855834960938 * e, 55.866058349609375 * e, 93.92855834960938 * e, 36.866058349609375 * e), n.closePath(), Ce(n, i[3], i[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93.92855834960938 * e, 36.866058349609375 * e), n.bezierCurveTo(82.92855834960938 * e, 37.866058349609375 * e, 77.92855834960938 * e, 36.866058349609375 * e, 67.92855834960938 * e, 28.866058349609375 * e), n.bezierCurveTo(53.928558349609375 * e, 16.866058349609375 * e, 53.928558349609375 * e, 14.866058349609375 * e, 55.928558349609375 * e, 7.866058349609375 * e), n.bezierCurveTo(65.92855834960938 * e, 4.866058349609375 * e, 71.92855834960938 * e, 7.866058349609375 * e, 83.92855834960938 * e, 13.866058349609375 * e), n.bezierCurveTo(96.92855834960938 * e, 21.866058349609375 * e, 95.92855834960938 * e, 31.866058349609375 * e, 92.92855834960938 * e, 36.866058349609375 * e), n.closePath(), Ce(n, i[3], i[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(68.92855834960938 * e, 16.866058349609375 * e), n.bezierCurveTo(71.92855834960938 * e, 13.866058349609375 * e, 76.92855834960938 * e, 16.866058349609375 * e, 79.92855834960938 * e, 21.866058349609375 * e), n.bezierCurveTo(82.92855834960938 * e, 24.866058349609375 * e, 81.92855834960938 * e, 27.866058349609375 * e, 73.92855834960938 * e, 24.866058349609375 * e), n.bezierCurveTo(67.92855834960938 * e, 20.866058349609375 * e, 66.92855834960938 * e, 19.866058349609375 * e, 67.92855834960938 * e, 17.866058349609375 * e), n.closePath(), Ce(n, i[2])) : 3 == t && (n.scale(.9, .9), n.translate(6 * e, 0), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(54 * e, .421875 * e), n.bezierCurveTo(84 * e, 45.421875 * e, 89 * e, 51.421875 * e, 83 * e, 74.421875 * e), n.bezierCurveTo(74 * e, 95.421875 * e, 46 * e, 98.421875 * e, 30 * e, 78.421875 * e), n.bezierCurveTo(22 * e, 59.421875 * e, 27 * e, 49.421875 * e, 34 * e, 36.421875 * e), n.closePath(), Ce(n, i[2], i[3], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(74 * e, 52.421875 * e), n.bezierCurveTo(77 * e, 73.421875 * e, 69 * e, 81.421875 * e, 58 * e, 81.421875 * e), n.bezierCurveTo(66 * e, 71.421875 * e, 70 * e, 66.421875 * e, 74 * e, 52.421875 * e), n.closePath(), Ce(n, i[3])), r
    }

    function jr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 573 * e, r.height = 350 * e, 1 == t && (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(336 * e, 72 * e), n.bezierCurveTo(366 * e, 15 * e, 426 * e, 36 * e, 497 * e, 83 * e), n.bezierCurveTo(522 * e, 85 * e, 522 * e, 85 * e, 547 * e, 87 * e), n.bezierCurveTo(476.5 * e, 205 * e, 476.5 * e, 205 * e, 406 * e, 323 * e), n.bezierCurveTo(297.5 * e, 319 * e, 297.5 * e, 319 * e, 189 * e, 315 * e), n.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 243 * e), n.bezierCurveTo(92 * e, 140 * e, 92 * e, 140 * e, 162 * e, 37 * e), n.bezierCurveTo(173 * e, 39 * e, 173 * e, 39 * e, 184 * e, 41 * e), n.bezierCurveTo(185 * e, 38.5 * e, 185 * e, 38.5 * e, 186 * e, 36 * e), n.bezierCurveTo(323 * e, 13 * e, 322 * e, 25 * e, 337 * e, 74 * e), n.closePath(), Ce(n, i[4], i[4], 35 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(168 * e, 42 * e), n.bezierCurveTo(255 * e, 60 * e, 255 * e, 60 * e, 342 * e, 78 * e), n.bezierCurveTo(443 * e, 81.5 * e, 443 * e, 81.5 * e, 544 * e, 85 * e), n.bezierCurveTo(475 * e, 204.5 * e, 475 * e, 204.5 * e, 406 * e, 324 * e), n.bezierCurveTo(297.5 * e, 320 * e, 297.5 * e, 320 * e, 189 * e, 316 * e), n.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 242 * e), n.closePath(), Ce(n, i[0], i[1], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(188 * e, 41 * e), n.bezierCurveTo(308 * e, 15 * e, 325 * e, 18 * e, 337 * e, 66 * e), n.bezierCurveTo(191 * e, 305 * e, 196 * e, 286 * e, 184 * e, 307 * e), n.bezierCurveTo(175 * e, 250 * e, 90 * e, 254 * e, 52 * e, 241 * e), n.closePath(), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(336 * e, 71 * e), n.bezierCurveTo(375 * e, 8 * e, 429 * e, 50 * e, 518 * e, 92 * e), n.bezierCurveTo(455 * e, 199.5 * e, 455 * e, 199.5 * e, 392 * e, 307 * e), n.bezierCurveTo(227 * e, 301 * e, 261 * e, 255 * e, 188 * e, 308 * e), n.closePath(), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(357 * e, 76 * e), n.bezierCurveTo(390 * e, 67 * e, 414 * e, 86 * e, 435 * e, 104 * e), n.bezierCurveTo(417 * e, 135 * e, 417 * e, 135 * e, 399 * e, 166 * e), n.bezierCurveTo(352 * e, 140 * e, 345 * e, 139 * e, 319 * e, 142 * e), n.closePath(), Ce(n, i[3], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(309 * e, 168 * e), n.bezierCurveTo(345 * e, 163 * e, 372 * e, 180 * e, 412 * e, 203 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(263 * e, 54 * e), n.bezierCurveTo(305 * e, 44 * e, 307 * e, 51 * e, 311 * e, 64 * e), n.bezierCurveTo(270.5 * e, 129.5 * e, 270.5 * e, 129.5 * e, 230 * e, 195 * e), n.bezierCurveTo(221 * e, 175 * e, 203 * e, 171 * e, 186 * e, 172 * e), n.closePath(), Ce(n, i[3], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(292 * e, 198 * e), n.bezierCurveTo(328 * e, 191 * e, 364 * e, 211 * e, 401 * e, 237 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(245 * e, 68 * e), n.bezierCurveTo(210 * e, 72 * e, 210 * e, 72 * e, 189 * e, 69 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(222 * e, 96 * e), n.bezierCurveTo(196 * e, 97 * e, 193 * e, 97 * e, 177 * e, 92 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(207 * e, 124 * e), n.bezierCurveTo(179 * e, 123 * e, 177 * e, 124 * e, 161 * e, 119 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(115 * e, 183 * e), n.bezierCurveTo(184 * e, 185 * e, 203 * e, 198 * e, 219 * e, 221 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(98 * e, 213 * e), n.bezierCurveTo(161 * e, 214 * e, 193 * e, 227 * e, 201 * e, 249 * e), Ce(n, i[2], i[3], 12 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(399 * e, 257 * e), n.bezierCurveTo(287 * e, 215 * e, 280 * e, 215 * e, 263 * e, 222 * e), n.bezierCurveTo(253 * e, 238 * e, 247 * e, 245 * e, 243 * e, 254 * e), n.bezierCurveTo(267 * e, 236 * e, 292 * e, 263 * e, 377 * e, 284 * e), Ce(n, i[3], i[3], 12 * e), r
    }

    function Zr(e, i, t, r) {
        var n = document.createElement("canvas"),
            a = n.getContext("2d");
        return n.width = 170 * e, n.height = 200 * e, a.translate(5 * e, 15 * e), 1 == r && (a.translate(0, -5 * e), Ne(a, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e), Ce(a, t[1], t[5], 20 * e), Ne(a, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e), Ce(a, t[1], t[5], 20 * e), a.save(), a.translate(77.00003051757812 * e, 31.267044067382812 * e), ge(a, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e), a.restore(), Ce(a, t[1], t[5], 20 * e), a.save(), a.translate(77.00003051757812 * e, 13.267044067382812 * e), ge(a, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e), a.restore(), Ce(a, t[1], t[5], 20 * e)), Ne(a, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e), Ce(a, t[1], t[2], 7 * e), Ne(a, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e), Ce(a, t[1], t[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(18.000030517578125 * e, 105.85795593261719 * e), a.bezierCurveTo(134.00003051757812 * e, 104.85795593261719 * e, 77.00003051757812 * e, 104.85795593261719 * e, 136.00003051757812 * e, 103.85795593261719 * e), a.closePath(), Ce(a, t[1], t[2], 8 * e), Ne(a, 77.00003051757812 * e, 104.6761474609375 * e, 32.55764119219941 * e), Ce(a, t[1], t[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(78.00003051757812 * e, 112.03977966308594 * e), a.bezierCurveTo(78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 62.03977966308594 * e), a.closePath(), Ce(a, t[3], t[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(78.00003051757812 * e, 48.03977966308594 * e), a.bezierCurveTo(82.00003051757812 * e, 55.53977966308594 * e, 82.00003051757812 * e, 55.53977966308594 * e, 86.00003051757812 * e, 63.03977966308594 * e), a.bezierCurveTo(78.00003051757812 * e, 63.03977966308594 * e, 78.00003051757812 * e, 63.03977966308594 * e, 70.00003051757812 * e, 63.03977966308594 * e), a.closePath(), Ce(a, t[3], t[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80.00003051757812 * e, 111.6761474609375 * e), a.bezierCurveTo(95.00003051757812 * e, 97.1761474609375 * e, 95.00003051757812 * e, 97.1761474609375 * e, 110.00003051757812 * e, 82.6761474609375 * e), a.closePath(), Ce(a, t[3], t[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(107.00003051757812 * e, 76.6761474609375 * e), a.bezierCurveTo(111.50003051757812 * e, 82.6761474609375 * e, 111.50003051757812 * e, 82.6761474609375 * e, 116.00003051757812 * e, 88.6761474609375 * e), a.bezierCurveTo(118.50003051757812 * e, 81.6761474609375 * e, 118.50003051757812 * e, 81.6761474609375 * e, 121.00003051757812 * e, 74.6761474609375 * e), a.closePath(), Ce(a, t[3], t[2], 4 * e), Ne(a, 77.00003051757812 * e, 105.03977966308594 * e, 15.556349186104045 * e), Ce(a, t[3], t[2], 4 * e), a.save(), a.translate(77.00003051757812 * e, 31.267044067382812 * e), a.rotate(0), ge(a, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e), a.restore(), Ce(a, t[1], t[2], 7 * e), a.save(), a.translate(77.00003051757812 * e, 13.267044067382812 * e), a.rotate(0), ge(a, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e), a.restore(), Ce(a, t[1], t[2], 7 * e), n
    }

    function Qr(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 81 * e, r.height = 77 * e, n.translate(0, 10 * e), n.scale(.2, .2), n.translate(0, -30 * e), 1 == t && (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36.5 * e, 278.0625 * e), n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), n.closePath(), Ce(n, i[0], i[3], 50 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36.5 * e, 278.0625 * e), n.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), n.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), n.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), n.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), n.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), n.closePath(), Ce(n, i[0], i[1], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(214.5 * e, 124.0625 * e), n.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e), n.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e), n.closePath(), Ce(n, i[0], i[1], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(157.5 * e, 145.0625 * e), n.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e), n.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e), n.closePath(), Ce(n, i[0], i[1], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103.5 * e, 169.0625 * e), n.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e), n.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e), n.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e), n.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e), n.closePath(), Ce(n, i[2], i[1], 19 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(194.5 * e, 313.0625 * e), n.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e), n.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e), n.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e), n.closePath(), Ce(n, i[1]), n.scale(3, 3), n.translate(15, 10 * e), 1 == t && (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 32 * e), n.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e), n.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e), n.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e), Ce(n, void 0, i[3], 28 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 6 * e), n.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e), n.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e), n.closePath(), Ce(n, i[3], i[3], 28 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 32 * e), n.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e), n.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e), n.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e), Ce(n, void 0, i[1], 17 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 6 * e), n.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e), n.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e), n.closePath(), Ce(n, i[1], i[1], 17 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(4 * e, 32 * e), n.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e), n.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e), n.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e), Ce(n, void 0, i[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 6 * e), n.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e), n.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e), n.closePath(), Ce(n, i[2], i[2], 10 * e), r
    }

    function $r(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 144 * e, r.height = 280 * e, n.globalAlpha = i ? .5 : 1, n.translate(5 * e, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(62 * e, 103.79999542236328 * e), n.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e), n.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e), n.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e), n.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e), n.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e), n.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e), n.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e), n.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e), n.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e), n.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e), n.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e), n.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e), n.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e), n.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(-5 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(62 * e, 103.79999542236328 * e), n.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e), n.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e), n.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e), n.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e), n.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e), n.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e), n.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e), n.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e), n.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e), n.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e), n.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e), n.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e), n.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e), n.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e), n.closePath(), Ce(n, t[1], t[2], 6 * e), r
    }

    function en(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 160 * e, r.height = 161 * e, n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.save(), n.translate(80.5 * e, 78 * e), ge(n, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(80.5 * e, 78 * e), ge(n, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e), n.restore(), Ce(n, t[1], t[2], 6 * e), n.save(), n.translate(80 * e, 78.5 * e), ge(n, -17 * e, -72.5 * e, 34 * e, 145 * e, 10 * e), n.restore(), Ce(n, t[3], t[4], 6 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.save(), n.translate(80 * e, 79.5 * e), ge(n, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(80 * e, 79.5 * e), ge(n, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e), n.restore(), Ce(n, t[3], t[4], 6 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 71 * e), n.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e), n.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e), n.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84 * e, 78 * e), n.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e), n.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e), n.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80 * e, 73 * e), n.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e), n.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e), n.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e), n.closePath(), Ce(n, t[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(82 * e, 83 * e), n.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e), n.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e), n.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e), n.closePath(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 71 * e), n.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e), n.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e), n.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(84 * e, 78 * e), n.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e), n.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e), n.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80 * e, 73 * e), n.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e), n.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e), n.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(82 * e, 83 * e), n.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e), n.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e), n.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e), n.closePath(), Ce(n, t[3], t[4], 6 * e), n.globalAlpha = i ? .5 : 1, n.translate(0, 10 * e), n.save(), n.translate(78.5 * e, 78 * e), ge(n, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e), n.restore(), Ce(n, t[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.save(), n.translate(78.5 * e, 78 * e), ge(n, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e), n.restore(), Ce(n, t[3], t[4], 6 * e), r
    }

    function tn(e, i, t) {
        var r = document.createElement("canvas"),
            n = r.getContext("2d");
        return r.width = 372 * e, r.height = 358 * e, n.translate(0 * e, 10 * e), n.globalAlpha = i ? .2 : 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(247.00003051757812 * e, 115.76704406738281 * e), n.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e), n.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e), n.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e), n.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e), n.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e), n.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e), n.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e), n.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e), n.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e), n.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e), n.closePath(), Ce(n, t[0], t[0], 10 * e), n.translate(0 * e, -10 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(107.00003051757812 * e, 54.13069152832031 * e), n.bezierCurveTo(106.50003051757812 * e, 38.63069152832031 * e, 106.50003051757812 * e, 38.63069152832031 * e, 106.00003051757812 * e, 23.130691528320312 * e), n.bezierCurveTo(121.50003051757812 * e, 38.13069152832031 * e, 121.50003051757812 * e, 38.13069152832031 * e, 137.00003051757812 * e, 53.13069152832031 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(233.00003051757812 * e, 53.6761474609375 * e), n.bezierCurveTo(247.00003051757812 * e, 37.1761474609375 * e, 247.00003051757812 * e, 37.1761474609375 * e, 261.0000305175781 * e, 20.6761474609375 * e), n.bezierCurveTo(261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 51.6761474609375 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(293.0000305175781 * e, 54.403411865234375 * e), n.bezierCurveTo(300.0000305175781 * e, 49.903411865234375 * e, 300.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 45.403411865234375 * e), n.bezierCurveTo(307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 54.403411865234375 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(77.00003051757812 * e, 54.403411865234375 * e), n.bezierCurveTo(70.00003051757812 * e, 50.403411865234375 * e, 70.00003051757812 * e, 50.403411865234375 * e, 63.000030517578125 * e, 46.403411865234375 * e), n.bezierCurveTo(62.500030517578125 * e, 50.903411865234375 * e, 62.500030517578125 * e, 50.903411865234375 * e, 62.000030517578125 * e, 55.403411865234375 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58.000030517578125 * e, 122.3125 * e), n.bezierCurveTo(59.500030517578125 * e, 97.3125 * e, 59.500030517578125 * e, 97.3125 * e, 61.000030517578125 * e, 72.3125 * e), n.bezierCurveTo(91.00003051757812 * e, 89.3125 * e, 91.00003051757812 * e, 89.3125 * e, 121.00003051757812 * e, 106.3125 * e), n.closePath(), Ce(n, t[1], t[1], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(310.0000305175781 * e, 127.3125 * e), n.bezierCurveTo(308.0000305175781 * e, 98.3125 * e, 308.0000305175781 * e, 98.3125 * e, 306.0000305175781 * e, 69.3125 * e), n.bezierCurveTo(274.5000305175781 * e, 88.8125 * e, 274.5000305175781 * e, 88.8125 * e, 243.00003051757812 * e, 108.3125 * e), n.closePath(), Ce(n, t[1], t[1], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(226.00003051757812 * e, 87.85795593261719 * e), n.bezierCurveTo(243.50003051757812 * e, 66.85795593261719 * e, 243.50003051757812 * e, 66.85795593261719 * e, 261.0000305175781 * e, 45.85795593261719 * e), n.bezierCurveTo(265.0000305175781 * e, 83.85795593261719 * e, 265.0000305175781 * e, 83.85795593261719 * e, 269.0000305175781 * e, 121.85795593261719 * e), n.bezierCurveTo(235.00003051757812 * e, 122.85795593261719 * e, 233.00003051757812 * e, 107.85795593261719 * e, 228.00003051757812 * e, 90.85795593261719 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105.00003051757812 * e, 128.8579559326172 * e), n.bezierCurveTo(104.50003051757812 * e, 87.85795593261719 * e, 104.50003051757812 * e, 87.85795593261719 * e, 104.00003051757812 * e, 46.85795593261719 * e), n.bezierCurveTo(126.50003051757812 * e, 69.35795593261719 * e, 126.50003051757812 * e, 69.35795593261719 * e, 149.00003051757812 * e, 91.85795593261719 * e), n.bezierCurveTo(130.00003051757812 * e, 123.85795593261719 * e, 123.00003051757812 * e, 132.8579559326172 * e, 107.00003051757812 * e, 130.8579559326172 * e), n.closePath(), Ce(n, t[1], t[1], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59.000030517578125 * e, 121.85795593261719 * e), n.bezierCurveTo(59.500030517578125 * e, 99.35795593261719 * e, 59.500030517578125 * e, 99.35795593261719 * e, 60.000030517578125 * e, 76.85795593261719 * e), n.bezierCurveTo(84.00003051757812 * e, 92.35795593261719 * e, 84.00003051757812 * e, 92.35795593261719 * e, 108.00003051757812 * e, 107.85795593261719 * e), n.bezierCurveTo(106.00003051757812 * e, 148.8579559326172 * e, 86.00003051757812 * e, 148.8579559326172 * e, 62.000030517578125 * e, 123.85795593261719 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105.00003051757812 * e, 132.8579559326172 * e), n.bezierCurveTo(104.50003051757812 * e, 93.35795593261719 * e, 104.50003051757812 * e, 93.35795593261719 * e, 104.00003051757812 * e, 53.85795593261719 * e), n.bezierCurveTo(126.50003051757812 * e, 75.85795593261719 * e, 126.50003051757812 * e, 75.85795593261719 * e, 149.00003051757812 * e, 97.85795593261719 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(311.0000305175781 * e, 126.85795593261719 * e), n.bezierCurveTo(309.0000305175781 * e, 101.35795593261719 * e, 309.0000305175781 * e, 101.35795593261719 * e, 307.0000305175781 * e, 75.85795593261719 * e), n.bezierCurveTo(271.0000305175781 * e, 96.85795593261719 * e, 271.0000305175781 * e, 96.85795593261719 * e, 235.00003051757812 * e, 117.85795593261719 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(228.00003051757812 * e, 96.85795593261719 * e), n.bezierCurveTo(244.50003051757812 * e, 74.85795593261719 * e, 244.50003051757812 * e, 74.85795593261719 * e, 261.0000305175781 * e, 52.85795593261719 * e), n.bezierCurveTo(265.5000305175781 * e, 89.85795593261719 * e, 265.5000305175781 * e, 89.85795593261719 * e, 270.0000305175781 * e, 126.85795593261719 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(12.000030517578125 * e, 86.13069152832031 * e), n.bezierCurveTo(36.000030517578125 * e, 113.13069152832031 * e, 84.00003051757812 * e, 111.13069152832031 * e, 116.00003051757812 * e, 113.13069152832031 * e), n.bezierCurveTo(164.00003051757812 * e, 23.130691528320312 * e, 172.00003051757812 * e, 18.130691528320312 * e, 181.00003051757812 * e, 9.130691528320312 * e), n.bezierCurveTo(199.00003051757812 * e, 29.130691528320312 * e, 221.00003051757812 * e, 78.13069152832031 * e, 247.00003051757812 * e, 112.13069152832031 * e), n.bezierCurveTo(301.0000305175781 * e, 122.13069152832031 * e, 338.0000305175781 * e, 111.13069152832031 * e, 359.0000305175781 * e, 94.13069152832031 * e), n.bezierCurveTo(359.0000305175781 * e, 113.13069152832031 * e, 358.5000305175781 * e, 105.13069152832031 * e, 358.0000305175781 * e, 116.13069152832031 * e), n.bezierCurveTo(270.5000305175781 * e, 130.1306915283203 * e, 270.5000305175781 * e, 130.1306915283203 * e, 183.00003051757812 * e, 144.1306915283203 * e), n.bezierCurveTo(98.00003051757812 * e, 128.6306915283203 * e, 98.00003051757812 * e, 128.6306915283203 * e, 13.000030517578125 * e, 113.13069152832031 * e), n.closePath(), Ce(n, t[1], t[1], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(247.00003051757812 * e, 115.76704406738281 * e), n.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e), n.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e), n.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e), n.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e), n.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e), n.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e), n.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e), n.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e), n.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e), n.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(27.000030517578125 * e, 94.76704406738281 * e), n.bezierCurveTo(11.000030517578125 * e, 81.76704406738281 * e, 31.000030517578125 * e, 72.76704406738281 * e, 44.000030517578125 * e, 59.76704406738281 * e), n.bezierCurveTo(9.000030517578125 * e, 65.76704406738281 * e, 4.000030517578125 * e, 78.76704406738281 * e, 9.000030517578125 * e, 89.76704406738281 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(352.0000305175781 * e, 100.76705932617188 * e), n.bezierCurveTo(362.0000305175781 * e, 92.76705932617188 * e, 352.0000305175781 * e, 84.76705932617188 * e, 340.0000305175781 * e, 68.76705932617188 * e), n.bezierCurveTo(360.0000305175781 * e, 69.76705932617188 * e, 364.0000305175781 * e, 79.76705932617188 * e, 364.0000305175781 * e, 94.76705932617188 * e), n.closePath(), Ce(n, t[1], t[1], 1 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(25.000030517578125 * e, 97.94886779785156 * e), n.bezierCurveTo(2.000030517578125 * e, 76.94886779785156 * e, 29.000030517578125 * e, 62.94886779785156 * e, 44.000030517578125 * e, 59.94886779785156 * e), n.bezierCurveTo(8.000030517578125 * e, 59.94886779785156 * e, -.999969482421875 * e, 81.94886779785156 * e, 4.000030517578125 * e, 92.94886779785156 * e), n.closePath(), Ce(n, t[3]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(349.0000305175781 * e, 100.94886779785156 * e), n.bezierCurveTo(366.0000305175781 * e, 82.94886779785156 * e, 353.0000305175781 * e, 76.94886779785156 * e, 337.0000305175781 * e, 67.94886779785156 * e), n.bezierCurveTo(366.0000305175781 * e, 69.94886779785156 * e, 366.0000305175781 * e, 83.94886779785156 * e, 363.0000305175781 * e, 101.94886779785156 * e), n.closePath(), Ce(n, t[2], t[3], 10 * e), Ne(n, 46.000030517578125 * e, 137.5852279663086 * e, 9.219544457292887 * e), Ce(n, t[4], t[5], 1 * e), Ne(n, 308.0000305175781 * e, 141.5852279663086 * e, 8.54400374531753 * e), Ce(n, t[4], t[5], 1 * e), Ne(n, 92.00003051757812 * e, 149.58523559570312 * e, 14.866068747318506 * e), Ce(n, t[4], t[5], 1 * e), Ne(n, 262.0000305175781 * e, 148.8579559326172 * e, 15.620499351813308 * e), Ce(n, t[4], t[5], 1 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(184.00003051757812 * e, 68.85795593261719 * e), n.bezierCurveTo(203.00003051757812 * e, 108.85795593261719 * e, 203.00003051757812 * e, 108.85795593261719 * e, 222.00003051757812 * e, 148.8579559326172 * e), n.bezierCurveTo(202.50003051757812 * e, 177.8579559326172 * e, 202.50003051757812 * e, 177.8579559326172 * e, 183.00003051757812 * e, 206.8579559326172 * e), n.bezierCurveTo(162.00003051757812 * e, 178.8579559326172 * e, 162.00003051757812 * e, 178.8579559326172 * e, 141.00003051757812 * e, 150.8579559326172 * e), n.closePath(), Ce(n, t[4], t[5], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(183.00003051757812 * e, 104.94886779785156 * e), n.bezierCurveTo(192.50003051757812 * e, 125.44886779785156 * e, 192.50003051757812 * e, 125.44886779785156 * e, 202.00003051757812 * e, 145.94886779785156 * e), n.bezierCurveTo(192.00003051757812 * e, 163.94886779785156 * e, 192.00003051757812 * e, 163.94886779785156 * e, 182.00003051757812 * e, 181.94886779785156 * e), n.bezierCurveTo(172.50003051757812 * e, 164.44886779785156 * e, 172.50003051757812 * e, 164.44886779785156 * e, 163.00003051757812 * e, 146.94886779785156 * e), n.closePath(), Ce(n, t[6]), r
    }

    function rn() {
        var e = (new Date).getTime();

        function i(e) {
            for (var i = 0, t = 0, r = 0; t < e.length; t++) {
                var n = e.charAt(t);
                "_" !== n && 5 !== t && ("1" === n && (i += Math.pow(2, r)), r++)
            }
            return i
        }
        for (var t in render_cosmetics(), sprite[k.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN], sprite[k.RIVER_DECO] = [], sprite[k.RIVER_DECO][k.DAY] = [], sprite[k.RIVER_DECO][k.DAY][i("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20], sprite[k.RIVER_DECO][k.DAY][i("000_010_010")] = sprite[k.RIVER_DECO][k.DAY][i("000_010_000")], sprite[k.RIVER_DECO][k.DAY][i("000_011_000")] = sprite[k.RIVER_DECO][k.DAY][i("000_010_000")], sprite[k.RIVER_DECO][k.DAY][i("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24], sprite[k.RIVER_DECO][k.DAY][i("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25], sprite[k.RIVER_DECO][k.DAY][i("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20], sprite[k.RIVER_DECO][k.DAY][i("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27], sprite[k.RIVER_DECO][k.DAY][i("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27], sprite[k.RIVER_DECO][k.DAY][i("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19], sprite[k.RIVER_DECO][k.DAY][i("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13], sprite[k.RIVER_DECO][k.DAY][i("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20], sprite[k.RIVER_DECO][k.DAY][i("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21], sprite[k.RIVER_DECO][k.DAY][i("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26], sprite[k.RIVER_DECO][k.DAY][i("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("010_011_010")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_011_011")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("000_111_011")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_110_010")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_111_000")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_111_010")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_111_011")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_111_110")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("010_111_111")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("000_111_110")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("000_111_010")] = sprite[k.RIVER_DECO][k.DAY][i("010_110_110")], sprite[k.RIVER_DECO][k.DAY][i("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26], sprite[k.RIVER_DECO][k.DAY][i("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15], sprite[k.RIVER_DECO][k.DAY][i("011_111_000")] = sprite[k.RIVER_DECO][k.DAY][i("011_011_010")], sprite[k.RIVER_DECO][k.DAY][i("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("011_111_011")] = sprite[k.RIVER_DECO][k.DAY][i("011_111_010")], sprite[k.RIVER_DECO][k.DAY][i("011_111_110")] = sprite[k.RIVER_DECO][k.DAY][i("011_111_010")], sprite[k.RIVER_DECO][k.DAY][i("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("110_111_111")] = sprite[k.RIVER_DECO][k.DAY][i("110_111_110")], sprite[k.RIVER_DECO][k.DAY][i("110_111_011")] = sprite[k.RIVER_DECO][k.DAY][i("110_111_110")], sprite[k.RIVER_DECO][k.DAY][i("110_111_010")] = sprite[k.RIVER_DECO][k.DAY][i("110_111_110")], sprite[k.RIVER_DECO][k.DAY][i("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1], sprite[k.RIVER_DECO][k.DAY][i("111_111_011")] = sprite[k.RIVER_DECO][k.DAY][i("111_111_110")], sprite[k.RIVER_DECO][k.DAY][i("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14], sprite[k.RIVER_DECO][k.DAY][i("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[k.RIVER_DECO][k.DAY][i("111_111_010")] = sprite[k.RIVER_DECO][k.DAY][i("111_111_110")], sprite[k.RIVER_DECO][k.NIGHT] = [], sprite[k.RIVER_DECO][k.NIGHT][i("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20], sprite[k.RIVER_DECO][k.NIGHT][i("000_010_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("000_010_000")], sprite[k.RIVER_DECO][k.NIGHT][i("000_011_000")] = sprite[k.RIVER_DECO][k.NIGHT][i("000_010_000")], sprite[k.RIVER_DECO][k.NIGHT][i("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24], sprite[k.RIVER_DECO][k.NIGHT][i("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25], sprite[k.RIVER_DECO][k.NIGHT][i("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20], sprite[k.RIVER_DECO][k.NIGHT][i("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27], sprite[k.RIVER_DECO][k.NIGHT][i("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27], sprite[k.RIVER_DECO][k.NIGHT][i("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19], sprite[k.RIVER_DECO][k.NIGHT][i("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13], sprite[k.RIVER_DECO][k.NIGHT][i("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20], sprite[k.RIVER_DECO][k.NIGHT][i("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21], sprite[k.RIVER_DECO][k.NIGHT][i("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26], sprite[k.RIVER_DECO][k.NIGHT][i("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("010_011_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_011_011")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("000_111_011")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_110_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_111_000")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_111_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_111_011")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_111_110")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("010_111_111")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("000_111_110")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("000_111_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("010_110_110")], sprite[k.RIVER_DECO][k.NIGHT][i("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26], sprite[k.RIVER_DECO][k.NIGHT][i("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15], sprite[k.RIVER_DECO][k.NIGHT][i("011_111_000")] = sprite[k.RIVER_DECO][k.NIGHT][i("011_011_010")], sprite[k.RIVER_DECO][k.NIGHT][i("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("011_111_011")] = sprite[k.RIVER_DECO][k.NIGHT][i("011_111_010")], sprite[k.RIVER_DECO][k.NIGHT][i("011_111_110")] = sprite[k.RIVER_DECO][k.NIGHT][i("011_111_010")], sprite[k.RIVER_DECO][k.NIGHT][i("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("110_111_111")] = sprite[k.RIVER_DECO][k.NIGHT][i("110_111_110")], sprite[k.RIVER_DECO][k.NIGHT][i("110_111_011")] = sprite[k.RIVER_DECO][k.NIGHT][i("110_111_110")], sprite[k.RIVER_DECO][k.NIGHT][i("110_111_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("110_111_110")], sprite[k.RIVER_DECO][k.NIGHT][i("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1], sprite[k.RIVER_DECO][k.NIGHT][i("111_111_011")] = sprite[k.RIVER_DECO][k.NIGHT][i("111_111_110")], sprite[k.RIVER_DECO][k.NIGHT][i("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14], sprite[k.RIVER_DECO][k.NIGHT][i("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[k.RIVER_DECO][k.NIGHT][i("111_111_010")] = sprite[k.RIVER_DECO][k.NIGHT][i("111_111_110")], sprite[k.RIVER] = [], sprite[k.RIVER][k.DAY] = [], sprite[k.RIVER][k.DAY][i("000_010_000")] = IMAGES.DAY_RIVER_000_010_000, sprite[k.RIVER][k.DAY][i("000_010_010")] = IMAGES.DAY_RIVER_000_010_010, sprite[k.RIVER][k.DAY][i("000_011_000")] = IMAGES.DAY_RIVER_000_011_000, sprite[k.RIVER][k.DAY][i("000_011_010")] = IMAGES.DAY_RIVER_000_011_010, sprite[k.RIVER][k.DAY][i("000_011_011")] = IMAGES.DAY_RIVER_000_011_011, sprite[k.RIVER][k.DAY][i("000_110_000")] = IMAGES.DAY_RIVER_000_110_000, sprite[k.RIVER][k.DAY][i("000_110_010")] = IMAGES.DAY_RIVER_000_110_010, sprite[k.RIVER][k.DAY][i("000_110_110")] = IMAGES.DAY_RIVER_000_110_110, sprite[k.RIVER][k.DAY][i("000_111_000")] = IMAGES.DAY_RIVER_000_111_000, sprite[k.RIVER][k.DAY][i("000_111_010")] = IMAGES.DAY_RIVER_000_111_010, sprite[k.RIVER][k.DAY][i("000_111_011")] = IMAGES.DAY_RIVER_000_111_011, sprite[k.RIVER][k.DAY][i("000_111_110")] = IMAGES.DAY_RIVER_000_111_110, sprite[k.RIVER][k.DAY][i("000_111_111")] = IMAGES.DAY_RIVER_000_111_111, sprite[k.RIVER][k.DAY][i("010_010_000")] = IMAGES.DAY_RIVER_010_010_000, sprite[k.RIVER][k.DAY][i("010_010_010")] = IMAGES.DAY_RIVER_010_010_010, sprite[k.RIVER][k.DAY][i("010_011_000")] = IMAGES.DAY_RIVER_010_011_000, sprite[k.RIVER][k.DAY][i("010_011_010")] = IMAGES.DAY_RIVER_010_011_010, sprite[k.RIVER][k.DAY][i("010_011_011")] = IMAGES.DAY_RIVER_010_011_011, sprite[k.RIVER][k.DAY][i("010_110_000")] = IMAGES.DAY_RIVER_010_110_000, sprite[k.RIVER][k.DAY][i("010_110_010")] = IMAGES.DAY_RIVER_010_110_010, sprite[k.RIVER][k.DAY][i("010_110_110")] = IMAGES.DAY_RIVER_010_110_110, sprite[k.RIVER][k.DAY][i("010_111_000")] = IMAGES.DAY_RIVER_010_111_000, sprite[k.RIVER][k.DAY][i("010_111_010")] = IMAGES.DAY_RIVER_010_111_010, sprite[k.RIVER][k.DAY][i("010_111_011")] = IMAGES.DAY_RIVER_010_111_011, sprite[k.RIVER][k.DAY][i("010_111_110")] = IMAGES.DAY_RIVER_010_111_110, sprite[k.RIVER][k.DAY][i("010_111_111")] = IMAGES.DAY_RIVER_010_111_111, sprite[k.RIVER][k.DAY][i("011_011_000")] = IMAGES.DAY_RIVER_011_011_000, sprite[k.RIVER][k.DAY][i("011_011_010")] = IMAGES.DAY_RIVER_011_011_010, sprite[k.RIVER][k.DAY][i("011_011_011")] = IMAGES.DAY_RIVER_011_011_011, sprite[k.RIVER][k.DAY][i("011_111_000")] = IMAGES.DAY_RIVER_011_111_000, sprite[k.RIVER][k.DAY][i("011_111_010")] = IMAGES.DAY_RIVER_011_111_010, sprite[k.RIVER][k.DAY][i("011_111_011")] = IMAGES.DAY_RIVER_011_111_011, sprite[k.RIVER][k.DAY][i("011_111_110")] = IMAGES.DAY_RIVER_011_111_110, sprite[k.RIVER][k.DAY][i("011_111_111")] = IMAGES.DAY_RIVER_011_111_111, sprite[k.RIVER][k.DAY][i("110_110_000")] = IMAGES.DAY_RIVER_110_110_000, sprite[k.RIVER][k.DAY][i("110_110_010")] = IMAGES.DAY_RIVER_110_110_010, sprite[k.RIVER][k.DAY][i("110_110_110")] = IMAGES.DAY_RIVER_110_110_110, sprite[k.RIVER][k.DAY][i("110_111_000")] = IMAGES.DAY_RIVER_110_111_000, sprite[k.RIVER][k.DAY][i("110_111_010")] = IMAGES.DAY_RIVER_110_111_010, sprite[k.RIVER][k.DAY][i("110_111_011")] = IMAGES.DAY_RIVER_110_111_011, sprite[k.RIVER][k.DAY][i("110_111_110")] = IMAGES.DAY_RIVER_110_111_110, sprite[k.RIVER][k.DAY][i("110_111_111")] = IMAGES.DAY_RIVER_110_111_111, sprite[k.RIVER][k.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011, sprite[k.RIVER][k.DAY][i("111_111_110")] = IMAGES.DAY_RIVER_111_111_110, sprite[k.RIVER][k.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011, sprite[k.RIVER][k.DAY][i("111_111_000")] = IMAGES.DAY_RIVER_111_111_000, sprite[k.RIVER][k.DAY][i("111_111_111")] = IMAGES.DAY_RIVER_111_111_111, sprite[k.RIVER][k.DAY][i("111_111_010")] = IMAGES.DAY_RIVER_111_111_010, sprite[k.RIVER][k.NIGHT] = [], sprite[k.RIVER][k.NIGHT][i("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000, sprite[k.RIVER][k.NIGHT][i("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010, sprite[k.RIVER][k.NIGHT][i("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000, sprite[k.RIVER][k.NIGHT][i("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010, sprite[k.RIVER][k.NIGHT][i("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011, sprite[k.RIVER][k.NIGHT][i("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000, sprite[k.RIVER][k.NIGHT][i("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010, sprite[k.RIVER][k.NIGHT][i("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110, sprite[k.RIVER][k.NIGHT][i("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000, sprite[k.RIVER][k.NIGHT][i("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010, sprite[k.RIVER][k.NIGHT][i("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011, sprite[k.RIVER][k.NIGHT][i("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110, sprite[k.RIVER][k.NIGHT][i("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111, sprite[k.RIVER][k.NIGHT][i("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000, sprite[k.RIVER][k.NIGHT][i("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010, sprite[k.RIVER][k.NIGHT][i("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000, sprite[k.RIVER][k.NIGHT][i("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010, sprite[k.RIVER][k.NIGHT][i("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011, sprite[k.RIVER][k.NIGHT][i("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000, sprite[k.RIVER][k.NIGHT][i("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010, sprite[k.RIVER][k.NIGHT][i("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110, sprite[k.RIVER][k.NIGHT][i("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000, sprite[k.RIVER][k.NIGHT][i("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010, sprite[k.RIVER][k.NIGHT][i("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011, sprite[k.RIVER][k.NIGHT][i("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110, sprite[k.RIVER][k.NIGHT][i("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111, sprite[k.RIVER][k.NIGHT][i("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000, sprite[k.RIVER][k.NIGHT][i("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010, sprite[k.RIVER][k.NIGHT][i("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011, sprite[k.RIVER][k.NIGHT][i("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000, sprite[k.RIVER][k.NIGHT][i("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010, sprite[k.RIVER][k.NIGHT][i("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011, sprite[k.RIVER][k.NIGHT][i("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110, sprite[k.RIVER][k.NIGHT][i("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111, sprite[k.RIVER][k.NIGHT][i("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000, sprite[k.RIVER][k.NIGHT][i("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010, sprite[k.RIVER][k.NIGHT][i("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110, sprite[k.RIVER][k.NIGHT][i("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000, sprite[k.RIVER][k.NIGHT][i("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010, sprite[k.RIVER][k.NIGHT][i("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011, sprite[k.RIVER][k.NIGHT][i("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110, sprite[k.RIVER][k.NIGHT][i("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111, sprite[k.RIVER][k.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011, sprite[k.RIVER][k.NIGHT][i("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110, sprite[k.RIVER][k.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011, sprite[k.RIVER][k.NIGHT][i("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000, sprite[k.RIVER][k.NIGHT][i("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111, sprite[k.RIVER][k.NIGHT][i("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010, sprite[k.PICK_REIDITE] = [], sprite[k.PICK_REIDITE][k.DAY] = IMAGES.PICK_REIDITED, sprite[k.PICK_REIDITE][k.NIGHT] = IMAGES.PICK_REIDITEN, sprite[k.CARROT] = [], sprite[k.CARROT][k.DAY] = IMAGES.CARROTD, sprite[k.CARROT][k.NIGHT] = IMAGES.CARROTN, sprite[k.TOMATO_MINI] = [], sprite[k.TOMATO_MINI][k.DAY] = IMAGES.TOMATO_MINID, sprite[k.TOMATO_MINI][k.NIGHT] = IMAGES.TOMATO_MININ, sprite[k.TOMATO] = [], sprite[k.TOMATO][k.DAY] = IMAGES.TOMATOD, sprite[k.TOMATO][k.NIGHT] = IMAGES.TOMATON, sprite[k.DRIED_CARROT] = [], sprite[k.DRIED_CARROT][k.DAY] = IMAGES.CARROT_DRIEDD, sprite[k.DRIED_CARROT][k.NIGHT] = IMAGES.CARROT_DRIEDN, sprite[k.DRIED_TOMATO_MINI] = [], sprite[k.DRIED_TOMATO_MINI][k.DAY] = IMAGES.TOMATO_MINI_DRIEDD, sprite[k.DRIED_TOMATO_MINI][k.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN, sprite[k.WATERMELON] = [], sprite[k.WATERMELON][k.DAY] = IMAGES.WATERMELOND, sprite[k.WATERMELON][k.NIGHT] = IMAGES.WATERMELONN, sprite[k.DRIED_WATERMELON] = [], sprite[k.DRIED_WATERMELON][k.DAY] = IMAGES.DRIED_WATERMELOND, sprite[k.DRIED_WATERMELON][k.NIGHT] = IMAGES.DRIED_WATERMELONN, sprite[k.ALOE_VERA_GROWN] = [], sprite[k.ALOE_VERA_GROWN][k.DAY] = IMAGES.ALOE_VERA_GROWND, sprite[k.ALOE_VERA_GROWN][k.NIGHT] = IMAGES.ALOE_VERA_GROWNN, sprite[k.DRIED_ALOE_VERA] = [], sprite[k.DRIED_ALOE_VERA][k.DAY] = IMAGES.ALOE_VERA_DRIEDD, sprite[k.DRIED_ALOE_VERA][k.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN, sprite[k.CACTUS] = [], sprite[k.CACTUS][k.DAY] = [IMAGES.CACTUSD], sprite[k.CACTUS][k.NIGHT] = [IMAGES.CACTUSN], sprite[k.REIDITE_WALL] = [], sprite[k.REIDITE_WALL][k.DAY] = IMAGES.REIDITE_WALLD, sprite[k.REIDITE_WALL][k.NIGHT] = IMAGES.REIDITE_WALLN, sprite[k.REIDITE_SPIKE] = [], sprite[k.REIDITE_SPIKE][k.DAY] = IMAGES.REIDITE_SPIKED, sprite[k.REIDITE_SPIKE][k.NIGHT] = IMAGES.REIDITE_SPIKEN, sprite[k.REIDITE_DOOR] = [], sprite[k.REIDITE_DOOR][k.DAY] = IMAGES.REIDITE_DOORD, sprite[k.REIDITE_DOOR][k.NIGHT] = IMAGES.REIDITE_DOORN, sprite[k.WOOD_DOOR_SPIKE] = [], sprite[k.WOOD_DOOR_SPIKE][k.DAY] = IMAGES.WOOD_DOOR_SPIKED, sprite[k.WOOD_DOOR_SPIKE][k.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN, sprite[k.STONE_DOOR_SPIKE] = [], sprite[k.STONE_DOOR_SPIKE][k.DAY] = IMAGES.STONE_DOOR_SPIKED, sprite[k.STONE_DOOR_SPIKE][k.NIGHT] = IMAGES.STONE_DOOR_SPIKEN, sprite[k.GOLD_DOOR_SPIKE] = [], sprite[k.GOLD_DOOR_SPIKE][k.DAY] = IMAGES.GOLD_DOOR_SPIKED, sprite[k.GOLD_DOOR_SPIKE][k.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN, sprite[k.DIAMOND_DOOR_SPIKE] = [], sprite[k.DIAMOND_DOOR_SPIKE][k.DAY] = IMAGES.DIAMOND_DOOR_SPIKED, sprite[k.DIAMOND_DOOR_SPIKE][k.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN, sprite[k.AMETHYST_DOOR_SPIKE] = [], sprite[k.AMETHYST_DOOR_SPIKE][k.DAY] = IMAGES.AMETHYST_DOOR_SPIKED, sprite[k.AMETHYST_DOOR_SPIKE][k.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN, sprite[k.REIDITE_DOOR_SPIKE] = [], sprite[k.REIDITE_DOOR_SPIKE][k.DAY] = IMAGES.REIDITE_DOOR_SPIKED, sprite[k.REIDITE_DOOR_SPIKE][k.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN, sprite[k.GOLDEN_HEN] = [], sprite[k.GOLDEN_HEN][k.DAY] = IMAGES.HEND, sprite[k.GOLDEN_HEN][k.NIGHT] = IMAGES.HENN, sprite[k.GOLDEN_CHICKEN] = [], sprite[k.GOLDEN_CHICKEN][k.DAY] = IMAGES.CHICKEND, sprite[k.GOLDEN_CHICKEN][k.NIGHT] = IMAGES.CHICKENN, sprite[k.HAMMER_REIDITE] = [], sprite[k.HAMMER_REIDITE][k.DAY] = IMAGES.HAMMER_REIDITED, sprite[k.HAMMER_REIDITE][k.NIGHT] = IMAGES.HAMMER_REIDITEN, sprite[k.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN, sprite[k.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN, sprite[k.FOG] = [], sprite[k.FOG][k.DAY] = [], sprite[k.FOG][k.NIGHT] = [], sprite[k.FOG][k.DAY].push(IMAGES.FOG0D), sprite[k.FOG][k.DAY].push(IMAGES.FOG1D), sprite[k.FOG][k.DAY].push(IMAGES.FOG2D), sprite[k.FOG][k.NIGHT].push(IMAGES.FOG0N), sprite[k.FOG][k.NIGHT].push(IMAGES.FOG1N), sprite[k.FOG][k.NIGHT].push(IMAGES.FOG2N), sprite[k.FOD] = [], sprite[k.FOD][k.DAY] = [], sprite[k.FOD][k.NIGHT] = [], sprite[k.FOD][k.DAY].push(IMAGES.FOD0D), sprite[k.FOD][k.DAY].push(IMAGES.FOD1D), sprite[k.FOD][k.DAY].push(IMAGES.FOD2D), sprite[k.FOD][k.NIGHT].push(IMAGES.FOD0N), sprite[k.FOD][k.NIGHT].push(IMAGES.FOD1N), sprite[k.FOD][k.NIGHT].push(IMAGES.FOD2N), sprite[k.MARKER] = [], sprite[k.MARKER][k.DAY] = [], sprite[k.MARKER][k.NIGHT] = [], sprite[k.MARKER][k.DAY].push(IMAGES.MARKER0D), sprite[k.MARKER][k.DAY].push(IMAGES.MARKER1D), sprite[k.MARKER][k.DAY].push(IMAGES.MARKER2D), sprite[k.MARKER][k.DAY].push(IMAGES.MARKER3D), sprite[k.MARKER][k.NIGHT].push(IMAGES.MARKER0N), sprite[k.MARKER][k.NIGHT].push(IMAGES.MARKER1N), sprite[k.MARKER][k.NIGHT].push(IMAGES.MARKER2N), sprite[k.MARKER][k.NIGHT].push(IMAGES.MARKER3N), sprite[k.LAVA_DRAGON] = [], sprite[k.LAVA_DRAGON][k.DAY] = IMAGES.LAVA_DRAGOND, sprite[k.LAVA_DRAGON][k.NIGHT] = IMAGES.LAVA_DRAGONN, sprite[k.LAVA_WING_LEFT] = [], sprite[k.LAVA_WING_LEFT][k.DAY] = IMAGES.LAVA_WING_LEFTD, sprite[k.LAVA_WING_LEFT][k.NIGHT] = IMAGES.LAVA_WING_LEFTN, sprite[k.LAVA_WING_RIGHT] = [], sprite[k.LAVA_WING_RIGHT][k.DAY] = IMAGES.LAVA_WING_RIGHTD, sprite[k.LAVA_WING_RIGHT][k.NIGHT] = IMAGES.LAVA_WING_RIGHTN, sprite[k.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON, sprite[k.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT, sprite[k.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT, sprite[k.DIAMOND_PROTECTION] = [], sprite[k.DIAMOND_PROTECTION][k.DAY] = IMAGES.DIAMOND_PROTECTIOND, sprite[k.DIAMOND_PROTECTION][k.NIGHT] = IMAGES.DIAMOND_PROTECTIONN, sprite[k.GLOVES_DIAMOND_PROTECTION] = [], sprite[k.GLOVES_DIAMOND_PROTECTION][k.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND, sprite[k.GLOVES_DIAMOND_PROTECTION][k.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN, sprite[k.AMETHYST_PROTECTION] = [], sprite[k.AMETHYST_PROTECTION][k.DAY] = IMAGES.AMETHYST_PROTECTIOND, sprite[k.AMETHYST_PROTECTION][k.NIGHT] = IMAGES.AMETHYST_PROTECTIONN, sprite[k.GLOVES_AMETHYST_PROTECTION] = [], sprite[k.GLOVES_AMETHYST_PROTECTION][k.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND, sprite[k.GLOVES_AMETHYST_PROTECTION][k.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN, sprite[k.REIDITE_HELMET] = [], sprite[k.REIDITE_HELMET][k.DAY] = IMAGES.REIDITE_HELMETD, sprite[k.REIDITE_HELMET][k.NIGHT] = IMAGES.REIDITE_HELMETN, sprite[k.REIDITE_SWORD] = [], sprite[k.REIDITE_SWORD][k.DAY] = IMAGES.REIDITE_SWORDD, sprite[k.REIDITE_SWORD][k.NIGHT] = IMAGES.REIDITE_SWORDN, sprite[k.REIDITE_SPEAR] = [], sprite[k.REIDITE_SPEAR][k.DAY] = IMAGES.REIDITE_SPEARD, sprite[k.REIDITE_SPEAR][k.NIGHT] = IMAGES.REIDITE_SPEARN, sprite[k.LAVA_SPEAR] = [], sprite[k.LAVA_SPEAR][k.DAY] = IMAGES.LAVA_SPEARD, sprite[k.LAVA_SPEAR][k.NIGHT] = IMAGES.LAVA_SPEARN, sprite[k.LAVA_SWORD] = [], sprite[k.LAVA_SWORD][k.DAY] = IMAGES.LAVA_SWORDD, sprite[k.LAVA_SWORD][k.NIGHT] = IMAGES.LAVA_SWORDN, sprite[k.LAVA_HELMET] = [], sprite[k.LAVA_HELMET][k.DAY] = IMAGES.LAVA_HELMETD, sprite[k.LAVA_HELMET][k.NIGHT] = IMAGES.LAVA_HELMETN, sprite[k.WITCH] = [], sprite[k.WITCH][k.DAY] = IMAGES.WITCHD, sprite[k.WITCH][k.NIGHT] = IMAGES.WITCHN, sprite[k.NIMBUS] = [], sprite[k.NIMBUS][k.DAY] = IMAGES.NIMBUSD, sprite[k.NIMBUS][k.NIGHT] = IMAGES.NIMBUSN, sprite[k.WOOD_SHIELD] = [], sprite[k.WOOD_SHIELD][k.DAY] = IMAGES.WOOD_SHIELDD, sprite[k.WOOD_SHIELD][k.NIGHT] = IMAGES.WOOD_SHIELDN, sprite[k.STONE_SHIELD] = [], sprite[k.STONE_SHIELD][k.DAY] = IMAGES.STONE_SHIELDD, sprite[k.STONE_SHIELD][k.NIGHT] = IMAGES.STONE_SHIELDN, sprite[k.GOLD_SHIELD] = [], sprite[k.GOLD_SHIELD][k.DAY] = IMAGES.GOLD_SHIELDD, sprite[k.GOLD_SHIELD][k.NIGHT] = IMAGES.GOLD_SHIELDN, sprite[k.DIAMOND_SHIELD] = [], sprite[k.DIAMOND_SHIELD][k.DAY] = IMAGES.DIAMOND_SHIELDD, sprite[k.DIAMOND_SHIELD][k.NIGHT] = IMAGES.DIAMOND_SHIELDN, sprite[k.AMETHYST_SHIELD] = [], sprite[k.AMETHYST_SHIELD][k.DAY] = IMAGES.AMETHYST_SHIELDD, sprite[k.AMETHYST_SHIELD][k.NIGHT] = IMAGES.AMETHYST_SHIELDN, sprite[k.REIDITE_SHIELD] = [], sprite[k.REIDITE_SHIELD][k.DAY] = IMAGES.REIDITE_SHIELDD, sprite[k.REIDITE_SHIELD][k.NIGHT] = IMAGES.REIDITE_SHIELDN, sprite[k.WOOD_ARROW] = [], sprite[k.WOOD_ARROW][k.DAY] = IMAGES.WOOD_ARROWD, sprite[k.WOOD_ARROW][k.NIGHT] = IMAGES.WOOD_ARROWN, sprite[k.WOOD_BOW] = [], sprite[k.WOOD_BOW][k.DAY] = IMAGES.WOOD_BOWD, sprite[k.WOOD_BOW][k.NIGHT] = IMAGES.WOOD_BOWN, sprite[k.STONE_ARROW] = [], sprite[k.STONE_ARROW][k.DAY] = IMAGES.STONE_ARROWD, sprite[k.STONE_ARROW][k.NIGHT] = IMAGES.STONE_ARROWN, sprite[k.STONE_BOW] = [], sprite[k.STONE_BOW][k.DAY] = IMAGES.STONE_BOWD, sprite[k.STONE_BOW][k.NIGHT] = IMAGES.STONE_BOWN, sprite[k.GOLD_ARROW] = [], sprite[k.GOLD_ARROW][k.DAY] = IMAGES.GOLD_ARROWD, sprite[k.GOLD_ARROW][k.NIGHT] = IMAGES.GOLD_ARROWN, sprite[k.GOLD_BOW] = [], sprite[k.GOLD_BOW][k.DAY] = IMAGES.GOLD_BOWD, sprite[k.GOLD_BOW][k.NIGHT] = IMAGES.GOLD_BOWN, sprite[k.DIAMOND_ARROW] = [], sprite[k.DIAMOND_ARROW][k.DAY] = IMAGES.DIAMOND_ARROWD, sprite[k.DIAMOND_ARROW][k.NIGHT] = IMAGES.DIAMOND_ARROWN, sprite[k.DIAMOND_BOW] = [], sprite[k.DIAMOND_BOW][k.DAY] = IMAGES.DIAMOND_BOWD, sprite[k.DIAMOND_BOW][k.NIGHT] = IMAGES.DIAMOND_BOWN, sprite[k.AMETHYST_ARROW] = [], sprite[k.AMETHYST_ARROW][k.DAY] = IMAGES.AMETHYST_ARROWD, sprite[k.AMETHYST_ARROW][k.NIGHT] = IMAGES.AMETHYST_ARROWN, sprite[k.AMETHYST_BOW] = [], sprite[k.AMETHYST_BOW][k.DAY] = IMAGES.AMETHYST_BOWD, sprite[k.AMETHYST_BOW][k.NIGHT] = IMAGES.AMETHYST_BOWN, sprite[k.REIDITE_ARROW] = [], sprite[k.REIDITE_ARROW][k.DAY] = IMAGES.REIDITE_ARROWD, sprite[k.REIDITE_ARROW][k.NIGHT] = IMAGES.REIDITE_ARROWN, sprite[k.REIDITE_BOW] = [], sprite[k.REIDITE_BOW][k.DAY] = IMAGES.REIDITE_BOWD, sprite[k.REIDITE_BOW][k.NIGHT] = IMAGES.REIDITE_BOWN, sprite[k.DRAGON_ARROW] = [], sprite[k.DRAGON_ARROW][k.DAY] = IMAGES.DRAGON_ARROWD, sprite[k.DRAGON_ARROW][k.NIGHT] = IMAGES.DRAGON_ARROWN, sprite[k.DRAGON_BOW] = [], sprite[k.DRAGON_BOW][k.DAY] = IMAGES.DRAGON_BOWD, sprite[k.DRAGON_BOW][k.NIGHT] = IMAGES.DRAGON_BOWN, sprite[k.TURBAN1] = [], sprite[k.TURBAN1][k.DAY] = IMAGES.TURBAN1D, sprite[k.TURBAN1][k.NIGHT] = IMAGES.TURBAN1N, sprite[k.TURBAN2] = [], sprite[k.TURBAN2][k.DAY] = IMAGES.TURBAN2D, sprite[k.TURBAN2][k.NIGHT] = IMAGES.TURBAN2N, sprite[k.REIDITE_PROTECTION] = [], sprite[k.REIDITE_PROTECTION][k.DAY] = IMAGES.REIDITE_PROTECTIOND, sprite[k.REIDITE_PROTECTION][k.NIGHT] = IMAGES.REIDITE_PROTECTIONN, sprite[k.GLOVES_REIDITE_PROTECTION] = [], sprite[k.GLOVES_REIDITE_PROTECTION][k.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND, sprite[k.GLOVES_REIDITE_PROTECTION][k.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN, sprite[k.LAVA_SHINGLE] = [], sprite[k.LAVA_SHINGLE][k.DAY] = [], sprite[k.LAVA_SHINGLE][k.NIGHT] = [], sprite[k.LAVA_SHINGLE][k.DAY].push(IMAGES.LAVA_SHINGLES0D), sprite[k.LAVA_SHINGLE][k.DAY].push(IMAGES.LAVA_SHINGLES1D), sprite[k.LAVA_SHINGLE][k.NIGHT].push(IMAGES.LAVA_SHINGLES1D), sprite[k.LAVA_SHINGLE][k.NIGHT].push(IMAGES.LAVA_SHINGLES1N), sprite[k.LAVA_BUBBLE] = [], sprite[k.LAVA_BUBBLE][k.DAY] = [], sprite[k.LAVA_BUBBLE][k.NIGHT] = [], sprite[k.LAVA_BUBBLE][k.DAY].push(IMAGES.LAVA_BUBLE0D), sprite[k.LAVA_BUBBLE][k.DAY].push(IMAGES.LAVA_BUBLE1D), sprite[k.LAVA_BUBBLE][k.DAY].push(IMAGES.LAVA_BUBLE2D), sprite[k.LAVA_BUBBLE][k.NIGHT].push(IMAGES.LAVA_BUBLE0N), sprite[k.LAVA_BUBBLE][k.NIGHT].push(IMAGES.LAVA_BUBLE1N), sprite[k.LAVA_BUBBLE][k.NIGHT].push(IMAGES.LAVA_BUBLE2N), sprite[k.PITCHFORK] = [], sprite[k.PITCHFORK][k.DAY] = IMAGES.PITCHFORKD, sprite[k.PITCHFORK][k.NIGHT] = IMAGES.PITCHFORKN, sprite[k.PITCHFORK2] = [], sprite[k.PITCHFORK2][k.DAY] = IMAGES.PITCHFORK2D, sprite[k.PITCHFORK2][k.NIGHT] = IMAGES.PITCHFORK2N, sprite[k.EMERALD] = [], sprite[k.EMERALD][k.DAY] = [], sprite[k.EMERALD][k.NIGHT] = [], sprite[k.EMERALD][k.DAY].push(IMAGES.EMERALD0D), sprite[k.EMERALD][k.DAY].push(IMAGES.EMERALD1D), sprite[k.EMERALD][k.DAY].push(IMAGES.EMERALD2D), sprite[k.EMERALD][k.NIGHT].push(IMAGES.EMERALD0N), sprite[k.EMERALD][k.NIGHT].push(IMAGES.EMERALD1N), sprite[k.EMERALD][k.NIGHT].push(IMAGES.EMERALD2N), sprite[k.REIDITE] = [], sprite[k.REIDITE][k.DAY] = [], sprite[k.REIDITE][k.NIGHT] = [], sprite[k.REIDITE][k.DAY].push(IMAGES.REIDITE0D), sprite[k.REIDITE][k.DAY].push(IMAGES.REIDITE1D), sprite[k.REIDITE][k.DAY].push(IMAGES.REIDITE2D), sprite[k.REIDITE][k.NIGHT].push(IMAGES.REIDITE0N), sprite[k.REIDITE][k.NIGHT].push(IMAGES.REIDITE1N), sprite[k.REIDITE][k.NIGHT].push(IMAGES.REIDITE2N), sprite[k.MAGMA] = [], sprite[k.MAGMA][k.DAY] = [], sprite[k.MAGMA][k.NIGHT] = [], sprite[k.MAGMA][k.DAY].push(IMAGES.MAGMA1D), sprite[k.MAGMA][k.DAY].push(IMAGES.MAGMA2D), sprite[k.MAGMA][k.DAY].push(IMAGES.MAGMA3D), sprite[k.MAGMA][k.DAY].push(IMAGES.MAGMA4D), sprite[k.MAGMA][k.DAY].push(IMAGES.MAGMA5D), sprite[k.MAGMA][k.DAY].push(IMAGES.MAGMA6D), sprite[k.MAGMA][k.NIGHT].push(IMAGES.MAGMA1N), sprite[k.MAGMA][k.NIGHT].push(IMAGES.MAGMA2N), sprite[k.MAGMA][k.NIGHT].push(IMAGES.MAGMA3N), sprite[k.MAGMA][k.NIGHT].push(IMAGES.MAGMA4N), sprite[k.MAGMA][k.NIGHT].push(IMAGES.MAGMA5N), sprite[k.MAGMA][k.NIGHT].push(IMAGES.MAGMA6N), sprite[k.LAVA_GROUND] = [], sprite[k.LAVA_GROUND][k.DAY] = [], sprite[k.LAVA_GROUND][k.NIGHT] = [], sprite[k.LAVA_GROUND][k.DAY].push(IMAGES.LAVA_GROUND1D), sprite[k.LAVA_GROUND][k.DAY].push(IMAGES.LAVA_GROUND2D), sprite[k.LAVA_GROUND][k.DAY].push(IMAGES.LAVA_GROUND3D), sprite[k.LAVA_GROUND][k.DAY].push(IMAGES.LAVA_GROUND4D), sprite[k.LAVA_GROUND][k.DAY].push(IMAGES.LAVA_GROUND5D), sprite[k.LAVA_GROUND][k.DAY].push(IMAGES.LAVA_GROUND6D), sprite[k.LAVA_GROUND][k.NIGHT].push(IMAGES.LAVA_GROUND1N), sprite[k.LAVA_GROUND][k.NIGHT].push(IMAGES.LAVA_GROUND2N), sprite[k.LAVA_GROUND][k.NIGHT].push(IMAGES.LAVA_GROUND3N), sprite[k.LAVA_GROUND][k.NIGHT].push(IMAGES.LAVA_GROUND4N), sprite[k.LAVA_GROUND][k.NIGHT].push(IMAGES.LAVA_GROUND5N), sprite[k.LAVA_GROUND][k.NIGHT].push(IMAGES.LAVA_GROUND6N), sprite[k.FIRE_MOB] = [], sprite[k.FIRE_MOB][k.DAY] = IMAGES.FIRE_MOBD, sprite[k.FIRE_MOB][k.NIGHT] = IMAGES.FIRE_MOBN, sprite[k.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT, sprite[k.MACHETE] = [], sprite[k.MACHETE][k.DAY] = IMAGES.MACHETED, sprite[k.MACHETE][k.NIGHT] = IMAGES.MACHETEN, sprite[k.BOAT] = [], sprite[k.BOAT][k.DAY] = IMAGES.BOATD, sprite[k.BOAT][k.NIGHT] = IMAGES.BOATN, sprite[k.SLED] = [], sprite[k.SLED][k.DAY] = IMAGES.SLEDD, sprite[k.SLED][k.NIGHT] = IMAGES.SLEDN, sprite[k.PLANE] = [], sprite[k.PLANE][k.DAY] = IMAGES.PLANED, sprite[k.PLANE][k.NIGHT] = IMAGES.PLANEN, sprite[k.PENGUIN] = [], sprite[k.PENGUIN][k.DAY] = IMAGES.PENGUIND, sprite[k.PENGUIN][k.NIGHT] = IMAGES.PENGUINN, sprite[k.HURT_PENGUIN] = IMAGES.HURT_PENGUIN, sprite[k.SAND_WORM1] = [], sprite[k.SAND_WORM1][k.DAY] = IMAGES.SAND_WORM1D, sprite[k.SAND_WORM1][k.NIGHT] = IMAGES.SAND_WORM1N, sprite[k.SAND_WORM2] = [], sprite[k.SAND_WORM2][k.DAY] = IMAGES.SAND_WORM2D, sprite[k.SAND_WORM2][k.NIGHT] = IMAGES.SAND_WORM2N, sprite[k.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0, sprite[k.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1, sprite[k.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2, sprite[k.SCORPION] = [], sprite[k.SCORPION][k.DAY] = IMAGES.SCORPIOND, sprite[k.SCORPION][k.NIGHT] = IMAGES.SCORPIONN, sprite[k.SCORPION_HAND_LEFT] = [], sprite[k.SCORPION_HAND_LEFT][k.DAY] = IMAGES.SCORPION_HAND_LEFTD, sprite[k.SCORPION_HAND_LEFT][k.NIGHT] = IMAGES.SCORPION_HAND_LEFTN, sprite[k.SCORPION_HAND_RIGHT] = [], sprite[k.SCORPION_HAND_RIGHT][k.DAY] = IMAGES.SCORPION_HAND_RIGHTD, sprite[k.SCORPION_HAND_RIGHT][k.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN, sprite[k.HURT_SCORPION] = IMAGES.HURT_SCORPION, sprite[k.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT, sprite[k.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT, sprite[k.CRAB_BOSS_ATTACK] = [], sprite[k.CRAB_BOSS_ATTACK][k.DAY] = IMAGES.CRAB_BOSS_ATTACKD, sprite[k.CRAB_BOSS_ATTACK][k.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN, sprite[k.CRAB_BOSS_TAMED] = [], sprite[k.CRAB_BOSS_TAMED][k.DAY] = IMAGES.CRAB_BOSS_TAMEDD, sprite[k.CRAB_BOSS_TAMED][k.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN, sprite[k.CRAB_BOSS] = [], sprite[k.CRAB_BOSS][k.DAY] = IMAGES.CRAB_BOSSD, sprite[k.CRAB_BOSS][k.NIGHT] = IMAGES.CRAB_BOSSN, sprite[k.CRAB_BOSS_CLAW_LEFT] = [], sprite[k.CRAB_BOSS_CLAW_LEFT][k.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD, sprite[k.CRAB_BOSS_CLAW_LEFT][k.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN, sprite[k.CRAB_BOSS_CLAW_RIGHT] = [], sprite[k.CRAB_BOSS_CLAW_RIGHT][k.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD, sprite[k.CRAB_BOSS_CLAW_RIGHT][k.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN, sprite[k.CRAB_BOSS_CLAW_LEFT_ATTACK] = [], sprite[k.CRAB_BOSS_CLAW_LEFT_ATTACK][k.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD, sprite[k.CRAB_BOSS_CLAW_LEFT_ATTACK][k.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN, sprite[k.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [], sprite[k.CRAB_BOSS_CLAW_RIGHT_ATTACK][k.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD, sprite[k.CRAB_BOSS_CLAW_RIGHT_ATTACK][k.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN, sprite[k.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS, sprite[k.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT, sprite[k.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT, sprite[k.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS, sprite[k.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT, sprite[k.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT, sprite[k.BABY_MAMMOTH_ATTACK] = [], sprite[k.BABY_MAMMOTH_ATTACK][k.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD, sprite[k.BABY_MAMMOTH_ATTACK][k.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN, sprite[k.BABY_MAMMOTH] = [], sprite[k.BABY_MAMMOTH][k.DAY] = IMAGES.BABY_MAMMOTHD, sprite[k.BABY_MAMMOTH][k.NIGHT] = IMAGES.BABY_MAMMOTHN, sprite[k.MAMMOTH] = [], sprite[k.MAMMOTH][k.DAY] = IMAGES.MAMMOTHD, sprite[k.MAMMOTH][k.NIGHT] = IMAGES.MAMMOTHN, sprite[k.BABY_MAMMOTH_TAMED] = [], sprite[k.BABY_MAMMOTH_TAMED][k.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD, sprite[k.BABY_MAMMOTH_TAMED][k.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN, sprite[k.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH, sprite[k.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH, sprite[k.BABY_DRAGON_ATTACK] = [], sprite[k.BABY_DRAGON_ATTACK][k.DAY] = IMAGES.BABY_DRAGON_ATTACKD, sprite[k.BABY_DRAGON_ATTACK][k.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN, sprite[k.BABY_DRAGON] = [], sprite[k.BABY_DRAGON][k.DAY] = IMAGES.BABY_DRAGOND, sprite[k.BABY_DRAGON][k.NIGHT] = IMAGES.BABY_DRAGONN, sprite[k.BABY_DRAGON_TAMED] = [], sprite[k.BABY_DRAGON_TAMED][k.DAY] = IMAGES.BABY_DRAGON_TAMEDD, sprite[k.BABY_DRAGON_TAMED][k.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN, sprite[k.BABY_DRAGON_WING_LEFT] = [], sprite[k.BABY_DRAGON_WING_LEFT][k.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD, sprite[k.BABY_DRAGON_WING_LEFT][k.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN, sprite[k.BABY_DRAGON_WING_RIGHT] = [], sprite[k.BABY_DRAGON_WING_RIGHT][k.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD, sprite[k.BABY_DRAGON_WING_RIGHT][k.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN, sprite[k.BABY_DRAGON_WING_LEFT_ATTACK] = [], sprite[k.BABY_DRAGON_WING_LEFT_ATTACK][k.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD, sprite[k.BABY_DRAGON_WING_LEFT_ATTACK][k.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN, sprite[k.BABY_DRAGON_WING_RIGHT_ATTACK] = [], sprite[k.BABY_DRAGON_WING_RIGHT_ATTACK][k.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD, sprite[k.BABY_DRAGON_WING_RIGHT_ATTACK][k.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN, sprite[k.BABY_DRAGON_WING_LEFT_TAMED] = [], sprite[k.BABY_DRAGON_WING_LEFT_TAMED][k.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD, sprite[k.BABY_DRAGON_WING_LEFT_TAMED][k.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN, sprite[k.BABY_DRAGON_WING_RIGHT_TAMED] = [], sprite[k.BABY_DRAGON_WING_RIGHT_TAMED][k.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD, sprite[k.BABY_DRAGON_WING_RIGHT_TAMED][k.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN, sprite[k.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON, sprite[k.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT, sprite[k.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT, sprite[k.BABY_LAVA_ATTACK] = [], sprite[k.BABY_LAVA_ATTACK][k.DAY] = IMAGES.BABY_LAVA_ATTACKD, sprite[k.BABY_LAVA_ATTACK][k.NIGHT] = IMAGES.BABY_LAVA_ATTACKN, sprite[k.BABY_LAVA] = [], sprite[k.BABY_LAVA][k.DAY] = IMAGES.BABY_LAVAD, sprite[k.BABY_LAVA][k.NIGHT] = IMAGES.BABY_LAVAN, sprite[k.BABY_LAVA_TAMED] = [], sprite[k.BABY_LAVA_TAMED][k.DAY] = IMAGES.BABY_LAVA_TAMEDD, sprite[k.BABY_LAVA_TAMED][k.NIGHT] = IMAGES.BABY_LAVA_TAMEDN, sprite[k.BABY_LAVA_WING_LEFT] = [], sprite[k.BABY_LAVA_WING_LEFT][k.DAY] = IMAGES.BABY_LAVA_WING_LEFTD, sprite[k.BABY_LAVA_WING_LEFT][k.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN, sprite[k.BABY_LAVA_WING_RIGHT] = [], sprite[k.BABY_LAVA_WING_RIGHT][k.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD, sprite[k.BABY_LAVA_WING_RIGHT][k.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN, sprite[k.BABY_LAVA_WING_LEFT_ATTACK] = [], sprite[k.BABY_LAVA_WING_LEFT_ATTACK][k.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD, sprite[k.BABY_LAVA_WING_LEFT_ATTACK][k.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN, sprite[k.BABY_LAVA_WING_RIGHT_ATTACK] = [], sprite[k.BABY_LAVA_WING_RIGHT_ATTACK][k.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD, sprite[k.BABY_LAVA_WING_RIGHT_ATTACK][k.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN, sprite[k.BABY_LAVA_WING_LEFT_TAMED] = [], sprite[k.BABY_LAVA_WING_LEFT_TAMED][k.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD, sprite[k.BABY_LAVA_WING_LEFT_TAMED][k.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN, sprite[k.BABY_LAVA_WING_RIGHT_TAMED] = [], sprite[k.BABY_LAVA_WING_RIGHT_TAMED][k.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD, sprite[k.BABY_LAVA_WING_RIGHT_TAMED][k.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN, sprite[k.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA, sprite[k.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT, sprite[k.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT, sprite[k.HAWK_ATTACK] = [], sprite[k.HAWK_ATTACK][k.DAY] = IMAGES.HAWK_ATTACKD, sprite[k.HAWK_ATTACK][k.NIGHT] = IMAGES.HAWK_ATTACKN, sprite[k.HAWK] = [], sprite[k.HAWK][k.DAY] = IMAGES.HAWKD, sprite[k.HAWK][k.NIGHT] = IMAGES.HAWKN, sprite[k.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND, sprite[k.HAWK_GROUND] = [], sprite[k.HAWK_GROUND][k.DAY] = IMAGES.HAWK_GROUNDD, sprite[k.HAWK_GROUND][k.NIGHT] = IMAGES.HAWK_GROUNDN, sprite[k.HAWK_GROUND_ATTACK] = [], sprite[k.HAWK_GROUND_ATTACK][k.DAY] = IMAGES.HAWK_GROUND_ATTACKD, sprite[k.HAWK_GROUND_ATTACK][k.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN, sprite[k.HAWK_TAMED] = [], sprite[k.HAWK_TAMED][k.DAY] = IMAGES.HAWK_TAMEDD, sprite[k.HAWK_TAMED][k.NIGHT] = IMAGES.HAWK_TAMEDN, sprite[k.HAWK_WING_LEFT] = [], sprite[k.HAWK_WING_LEFT][k.DAY] = IMAGES.HAWK_WING_LEFTD, sprite[k.HAWK_WING_LEFT][k.NIGHT] = IMAGES.HAWK_WING_LEFTN, sprite[k.HAWK_WING_RIGHT] = [], sprite[k.HAWK_WING_RIGHT][k.DAY] = IMAGES.HAWK_WING_RIGHTD, sprite[k.HAWK_WING_RIGHT][k.NIGHT] = IMAGES.HAWK_WING_RIGHTN, sprite[k.HAWK_WING_LEFT_ATTACK] = [], sprite[k.HAWK_WING_LEFT_ATTACK][k.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD, sprite[k.HAWK_WING_LEFT_ATTACK][k.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN, sprite[k.HAWK_WING_RIGHT_ATTACK] = [], sprite[k.HAWK_WING_RIGHT_ATTACK][k.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD, sprite[k.HAWK_WING_RIGHT_ATTACK][k.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN, sprite[k.HAWK_WING_LEFT_TAMED] = [], sprite[k.HAWK_WING_LEFT_TAMED][k.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD, sprite[k.HAWK_WING_LEFT_TAMED][k.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN, sprite[k.HAWK_WING_RIGHT_TAMED] = [], sprite[k.HAWK_WING_RIGHT_TAMED][k.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD, sprite[k.HAWK_WING_RIGHT_TAMED][k.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN, sprite[k.HURT_HAWK] = IMAGES.HURT_HAWK, sprite[k.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT, sprite[k.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT, sprite[k.VULTURE_ATTACK] = [], sprite[k.VULTURE_ATTACK][k.DAY] = IMAGES.VULTURE_ATTACKD, sprite[k.VULTURE_ATTACK][k.NIGHT] = IMAGES.VULTURE_ATTACKN, sprite[k.VULTURE] = [], sprite[k.VULTURE][k.DAY] = IMAGES.VULTURED, sprite[k.VULTURE][k.NIGHT] = IMAGES.VULTUREN, sprite[k.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND, sprite[k.VULTURE_GROUND] = [], sprite[k.VULTURE_GROUND][k.DAY] = IMAGES.VULTURE_GROUNDD, sprite[k.VULTURE_GROUND][k.NIGHT] = IMAGES.VULTURE_GROUNDN, sprite[k.VULTURE_GROUND_ATTACK] = [], sprite[k.VULTURE_GROUND_ATTACK][k.DAY] = IMAGES.VULTURE_GROUND_ATTACKD, sprite[k.VULTURE_GROUND_ATTACK][k.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN, sprite[k.VULTURE_TAMED] = [], sprite[k.VULTURE_TAMED][k.DAY] = IMAGES.VULTURE_TAMEDD, sprite[k.VULTURE_TAMED][k.NIGHT] = IMAGES.VULTURE_TAMEDN, sprite[k.VULTURE_WING_LEFT] = [], sprite[k.VULTURE_WING_LEFT][k.DAY] = IMAGES.VULTURE_WING_LEFTD, sprite[k.VULTURE_WING_LEFT][k.NIGHT] = IMAGES.VULTURE_WING_LEFTN, sprite[k.VULTURE_WING_RIGHT] = [], sprite[k.VULTURE_WING_RIGHT][k.DAY] = IMAGES.VULTURE_WING_RIGHTD, sprite[k.VULTURE_WING_RIGHT][k.NIGHT] = IMAGES.VULTURE_WING_RIGHTN, sprite[k.VULTURE_WING_LEFT_ATTACK] = [], sprite[k.VULTURE_WING_LEFT_ATTACK][k.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD, sprite[k.VULTURE_WING_LEFT_ATTACK][k.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN, sprite[k.VULTURE_WING_RIGHT_ATTACK] = [], sprite[k.VULTURE_WING_RIGHT_ATTACK][k.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD, sprite[k.VULTURE_WING_RIGHT_ATTACK][k.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN, sprite[k.VULTURE_WING_LEFT_TAMED] = [], sprite[k.VULTURE_WING_LEFT_TAMED][k.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD, sprite[k.VULTURE_WING_LEFT_TAMED][k.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN, sprite[k.VULTURE_WING_RIGHT_TAMED] = [], sprite[k.VULTURE_WING_RIGHT_TAMED][k.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD, sprite[k.VULTURE_WING_RIGHT_TAMED][k.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN, sprite[k.HURT_VULTURE] = IMAGES.HURT_VULTURE, sprite[k.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT, sprite[k.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT, sprite[k.BOAR] = [], sprite[k.BOAR][k.DAY] = IMAGES.BOARD, sprite[k.BOAR][k.NIGHT] = IMAGES.BOARN, sprite[k.BOAR_TAMED] = [], sprite[k.BOAR_TAMED][k.DAY] = IMAGES.BOAR_TAMEDD, sprite[k.BOAR_TAMED][k.NIGHT] = IMAGES.BOAR_TAMEDN, sprite[k.BOAR_ATTACK] = [], sprite[k.BOAR_ATTACK][k.DAY] = IMAGES.BOAR_ANGRYD, sprite[k.BOAR_ATTACK][k.NIGHT] = IMAGES.BOAR_ANGRYN, sprite[k.BOAR_STEP] = [], sprite[k.BOAR_STEP][k.DAY] = IMAGES.BOAR_STEP, sprite[k.BOAR_STEP][k.NIGHT] = IMAGES.BOAR_STEP, sprite[k.CRAB_STEP] = [], sprite[k.CRAB_STEP][k.DAY] = IMAGES.CRAB_STEP, sprite[k.CRAB_STEP][k.NIGHT] = IMAGES.CRAB_STEP, sprite[k.BABY_MAMMOTH_STEP] = [], sprite[k.BABY_MAMMOTH_STEP][k.DAY] = IMAGES.BABY_MAMMOTH_STEP, sprite[k.BABY_MAMMOTH_STEP][k.NIGHT] = IMAGES.BABY_MAMMOTH_STEP, sprite[k.HURT_BOAR] = IMAGES.HURT_BOAR, sprite[k.SADDLE] = [], sprite[k.SADDLE][k.DAY] = IMAGES.SADDLED, sprite[k.SADDLE][k.NIGHT] = IMAGES.SADDLEN, sprite[k.WAND1] = [], sprite[k.WAND1][k.DAY] = IMAGES.WAND1D, sprite[k.WAND1][k.NIGHT] = IMAGES.WAND1N, sprite[k.SPELL] = [], sprite[k.SPELL][k.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD], sprite[k.SPELL][k.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN], sprite[k.WAND2] = [], sprite[k.WAND2][k.DAY] = IMAGES.WAND2D, sprite[k.WAND2][k.NIGHT] = IMAGES.WAND2N, sprite[k.BOAT_WAVE] = [], sprite[k.BOAT_WAVE][k.DAY] = IMAGES.BOAT_WAVED, sprite[k.BOAT_WAVE][k.NIGHT] = IMAGES.BOAT_WAVEN, sprite[k.SLED_WAVE] = [], sprite[k.SLED_WAVE][k.DAY] = IMAGES.SLED_WAVED, sprite[k.SLED_WAVE][k.NIGHT] = IMAGES.SLED_WAVEN, sprite[k.PIRATE_HAT] = [], sprite[k.PIRATE_HAT][k.DAY] = IMAGES.PIRATE_HATD, sprite[k.PIRATE_HAT][k.NIGHT] = IMAGES.PIRATE_HATN, sprite[k.FUR_HAT] = [], sprite[k.FUR_HAT][k.DAY] = IMAGES.FUR_HATD, sprite[k.FUR_HAT][k.NIGHT] = IMAGES.FUR_HATN, sprite[k.FLOWER_HAT] = [], sprite[k.FLOWER_HAT][k.DAY] = IMAGES.FLOWER_HATD, sprite[k.FLOWER_HAT][k.NIGHT] = IMAGES.FLOWER_HATN, sprite[k.PILOT_HELMET] = [], sprite[k.PILOT_HELMET][k.DAY] = IMAGES.PILOT_HELMETD, sprite[k.PILOT_HELMET][k.NIGHT] = IMAGES.PILOT_HELMETN, sprite[k.LAKE_EDGE] = [], sprite[k.LAKE_EDGE][k.DAY] = [], sprite[k.LAKE_EDGE][k.NIGHT] = [], sprite[k.LAKE_EDGE][k.DAY].push(IMAGES.LAKE0D_EDGE), sprite[k.LAKE_EDGE][k.DAY].push(IMAGES.LAKE1D_EDGE), sprite[k.LAKE_EDGE][k.DAY].push(IMAGES.LAKE2D_EDGE), sprite[k.LAKE_EDGE][k.NIGHT].push(IMAGES.LAKE0N_EDGE), sprite[k.LAKE_EDGE][k.NIGHT].push(IMAGES.LAKE1N_EDGE), sprite[k.LAKE_EDGE][k.NIGHT].push(IMAGES.LAKE2N_EDGE), sprite[k.LAKE_DEEP] = [], sprite[k.LAKE_DEEP][k.DAY] = [], sprite[k.LAKE_DEEP][k.NIGHT] = [], sprite[k.LAKE_DEEP][k.DAY].push(IMAGES.LAKE0D_DEEP), sprite[k.LAKE_DEEP][k.DAY].push(IMAGES.LAKE1D_DEEP), sprite[k.LAKE_DEEP][k.DAY].push(IMAGES.LAKE2D_DEEP), sprite[k.LAKE_DEEP][k.NIGHT].push(IMAGES.LAKE0N_DEEP), sprite[k.LAKE_DEEP][k.NIGHT].push(IMAGES.LAKE1N_DEEP), sprite[k.LAKE_DEEP][k.NIGHT].push(IMAGES.LAKE2N_DEEP), sprite[k.LAKE] = [], sprite[k.LAKE][k.DAY] = [], sprite[k.LAKE][k.NIGHT] = [], sprite[k.LAKE][k.DAY].push(IMAGES.LAKE0D), sprite[k.LAKE][k.DAY].push(IMAGES.LAKE1D), sprite[k.LAKE][k.DAY].push(IMAGES.LAKE2D), sprite[k.LAKE][k.NIGHT].push(IMAGES.LAKE0N), sprite[k.LAKE][k.NIGHT].push(IMAGES.LAKE1N), sprite[k.LAKE][k.NIGHT].push(IMAGES.LAKE2N), MINIMAP_UTILS.g = [], MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1], MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0], MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2], MINIMAP_UTILS.m = [], MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1], MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0], MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2], MINIMAP_UTILS.la = [], MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA], MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.s = [], MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1], MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0], MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2], MINIMAP_UTILS.p = [], MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY], MINIMAP_UTILS.a = [], MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST], MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0], MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0], MINIMAP_UTILS.d = [], MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND], MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0], MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0], MINIMAP_UTILS.re = [], MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE], MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0], MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0], MINIMAP_UTILS.f = [], MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE], MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0], MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0], MINIMAP_UTILS.isl = [], MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND], MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0], MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0], MINIMAP_UTILS.c = [], MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS], MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0], MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0], MINIMAP_UTILS.wtb = [], MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER], MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA], MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN], MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX], MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF], MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER], MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR], MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE], MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT], MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST], MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER], MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT], MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA], MINIMAP_UTILS)
            for (var r = MINIMAP_UTILS[t], n = 0; n < r.length; n++) {
                var a = r[n];
                if (void 0 !== a.tryLoad) a.tryLoad();
                else if (a.length > 0)
                    for (var o = 0; o < a.length; o++) void 0 !== a[o].tryLoad && a[o].tryLoad()
            }
        console.log("Load images", Date.now() - e)
    }

    function nn() {
        var e = (new Date).getTime();
        rn(),
            function () {
                sprite[k.INV_PUMPKIN] = ri(1, [{
                    f: Wr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
                }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CHEST_PUMPKIN] = sprite[k.INV_PUMPKIN], sprite[k.INV_CARROT] = [], sprite[k.INV_CARROT][0] = IMAGES.INV_CARROT_OUT, sprite[k.INV_CARROT][1] = IMAGES.INV_CARROT_IN, sprite[k.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK, sprite[k.CHEST_CARROT] = sprite[k.INV_CARROT], sprite[k.INV_WATERMELON] = [], sprite[k.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT, sprite[k.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN, sprite[k.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK, sprite[k.CHEST_WATERMELON] = sprite[k.INV_WATERMELON], sprite[k.INV_ALOE_VERA] = [], sprite[k.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT, sprite[k.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN, sprite[k.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK, sprite[k.CHEST_ALOE_VERA] = sprite[k.INV_ALOE_VERA], sprite[k.INV_CACTUS] = [], sprite[k.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT, sprite[k.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN, sprite[k.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK, sprite[k.CHEST_CACTUS] = sprite[k.INV_CACTUS], sprite[k.INV_TOMATO] = [], sprite[k.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT, sprite[k.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN, sprite[k.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK, sprite[k.CHEST_TOMATO] = sprite[k.INV_TOMATO], sprite[k.INV_BOAT] = [], sprite[k.INV_BOAT][0] = IMAGES.INV_BOAT_OUT, sprite[k.INV_BOAT][1] = IMAGES.INV_BOAT_IN, sprite[k.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK, sprite[k.CHEST_BOAT] = sprite[k.INV_BOAT], sprite[k.CRAFT_BOAT] = sprite[k.INV_BOAT], sprite[k.INV_MACHETE] = [], sprite[k.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT, sprite[k.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN, sprite[k.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK, sprite[k.CHEST_MACHETE] = sprite[k.INV_MACHETE], sprite[k.CRAFT_MACHETE] = sprite[k.INV_MACHETE], sprite[k.INV_SLED] = [], sprite[k.INV_SLED][0] = IMAGES.INV_SLED_OUT, sprite[k.INV_SLED][1] = IMAGES.INV_SLED_IN, sprite[k.INV_SLED][2] = IMAGES.INV_SLED_CLICK, sprite[k.CHEST_SLED] = sprite[k.INV_SLED], sprite[k.CRAFT_SLED] = sprite[k.INV_SLED], sprite[k.INV_PIRATE_HAT] = [], sprite[k.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT, sprite[k.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN, sprite[k.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK, sprite[k.CHEST_PIRATE_HAT] = sprite[k.INV_PIRATE_HAT], sprite[k.CRAFT_PIRATE_HAT] = sprite[k.INV_PIRATE_HAT], sprite[k.INV_FUR_MAMMOTH] = [], sprite[k.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT, sprite[k.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN, sprite[k.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK, sprite[k.CHEST_FUR_MAMMOTH] = sprite[k.INV_FUR_MAMMOTH], sprite[k.INV_FUR_HAT] = [], sprite[k.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT, sprite[k.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN, sprite[k.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK, sprite[k.CHEST_FUR_HAT] = sprite[k.INV_FUR_HAT], sprite[k.CRAFT_FUR_HAT] = sprite[k.INV_FUR_HAT], sprite[k.INV_WOOD_BOW] = [], sprite[k.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT, sprite[k.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN, sprite[k.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK, sprite[k.CHEST_WOOD_BOW] = sprite[k.INV_WOOD_BOW], sprite[k.CRAFT_WOOD_BOW] = sprite[k.INV_WOOD_BOW], sprite[k.INV_WOOD_ARROW] = [], sprite[k.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT, sprite[k.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN, sprite[k.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK, sprite[k.CHEST_WOOD_ARROW] = sprite[k.INV_WOOD_ARROW], sprite[k.CRAFT_WOOD_ARROW] = sprite[k.INV_WOOD_ARROW], sprite[k.INV_STONE_BOW] = [], sprite[k.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT, sprite[k.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN, sprite[k.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK, sprite[k.CHEST_STONE_BOW] = sprite[k.INV_STONE_BOW], sprite[k.CRAFT_STONE_BOW] = sprite[k.INV_STONE_BOW], sprite[k.INV_STONE_ARROW] = [], sprite[k.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT, sprite[k.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN, sprite[k.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK, sprite[k.CHEST_STONE_ARROW] = sprite[k.INV_STONE_ARROW], sprite[k.CRAFT_STONE_ARROW] = sprite[k.INV_STONE_ARROW], sprite[k.INV_GOLD_BOW] = [], sprite[k.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT, sprite[k.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN, sprite[k.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK, sprite[k.CHEST_GOLD_BOW] = sprite[k.INV_GOLD_BOW], sprite[k.CRAFT_GOLD_BOW] = sprite[k.INV_GOLD_BOW], sprite[k.INV_GOLD_ARROW] = [], sprite[k.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT, sprite[k.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN, sprite[k.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK, sprite[k.CHEST_GOLD_ARROW] = sprite[k.INV_GOLD_ARROW], sprite[k.CRAFT_GOLD_ARROW] = sprite[k.INV_GOLD_ARROW], sprite[k.INV_DIAMOND_BOW] = [], sprite[k.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT, sprite[k.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN, sprite[k.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK, sprite[k.CHEST_DIAMOND_BOW] = sprite[k.INV_DIAMOND_BOW], sprite[k.CRAFT_DIAMOND_BOW] = sprite[k.INV_DIAMOND_BOW], sprite[k.INV_DIAMOND_ARROW] = [], sprite[k.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT, sprite[k.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN, sprite[k.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK, sprite[k.CHEST_DIAMOND_ARROW] = sprite[k.INV_DIAMOND_ARROW], sprite[k.CRAFT_DIAMOND_ARROW] = sprite[k.INV_DIAMOND_ARROW], sprite[k.INV_AMETHYST_BOW] = [], sprite[k.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT, sprite[k.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN, sprite[k.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK, sprite[k.CHEST_AMETHYST_BOW] = sprite[k.INV_AMETHYST_BOW], sprite[k.CRAFT_AMETHYST_BOW] = sprite[k.INV_AMETHYST_BOW], sprite[k.INV_AMETHYST_ARROW] = [], sprite[k.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT, sprite[k.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN, sprite[k.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK, sprite[k.CHEST_AMETHYST_ARROW] = sprite[k.INV_AMETHYST_ARROW], sprite[k.CRAFT_AMETHYST_ARROW] = sprite[k.INV_AMETHYST_ARROW], sprite[k.INV_REIDITE_BOW] = [], sprite[k.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT, sprite[k.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN, sprite[k.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK, sprite[k.CHEST_REIDITE_BOW] = sprite[k.INV_REIDITE_BOW], sprite[k.CRAFT_REIDITE_BOW] = sprite[k.INV_REIDITE_BOW], sprite[k.INV_REIDITE_ARROW] = [], sprite[k.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT, sprite[k.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN, sprite[k.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK, sprite[k.CHEST_REIDITE_ARROW] = sprite[k.INV_REIDITE_ARROW], sprite[k.CRAFT_REIDITE_ARROW] = sprite[k.INV_REIDITE_ARROW], sprite[k.INV_DRAGON_BOW] = [], sprite[k.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT, sprite[k.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN, sprite[k.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK, sprite[k.CHEST_DRAGON_BOW] = sprite[k.INV_DRAGON_BOW], sprite[k.CRAFT_DRAGON_BOW] = sprite[k.INV_DRAGON_BOW], sprite[k.INV_DRAGON_ARROW] = [], sprite[k.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT, sprite[k.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN, sprite[k.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK, sprite[k.CHEST_DRAGON_ARROW] = sprite[k.INV_DRAGON_ARROW], sprite[k.CRAFT_DRAGON_ARROW] = sprite[k.INV_DRAGON_ARROW], sprite[k.INV_WOOD_SHIELD] = [], sprite[k.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT, sprite[k.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN, sprite[k.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK, sprite[k.CHEST_WOOD_SHIELD] = sprite[k.INV_WOOD_SHIELD], sprite[k.CRAFT_WOOD_SHIELD] = sprite[k.INV_WOOD_SHIELD], sprite[k.INV_STONE_SHIELD] = [], sprite[k.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT, sprite[k.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN, sprite[k.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK, sprite[k.CHEST_STONE_SHIELD] = sprite[k.INV_STONE_SHIELD], sprite[k.CRAFT_STONE_SHIELD] = sprite[k.INV_STONE_SHIELD], sprite[k.INV_GOLD_SHIELD] = [], sprite[k.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT, sprite[k.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN, sprite[k.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK, sprite[k.CHEST_GOLD_SHIELD] = sprite[k.INV_GOLD_SHIELD], sprite[k.CRAFT_GOLD_SHIELD] = sprite[k.INV_GOLD_SHIELD], sprite[k.INV_DIAMOND_SHIELD] = [], sprite[k.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT, sprite[k.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN, sprite[k.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK, sprite[k.CHEST_DIAMOND_SHIELD] = sprite[k.INV_DIAMOND_SHIELD], sprite[k.CRAFT_DIAMOND_SHIELD] = sprite[k.INV_DIAMOND_SHIELD], sprite[k.INV_AMETHYST_SHIELD] = [], sprite[k.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT, sprite[k.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN, sprite[k.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK, sprite[k.CHEST_AMETHYST_SHIELD] = sprite[k.INV_AMETHYST_SHIELD], sprite[k.CRAFT_AMETHYST_SHIELD] = sprite[k.INV_AMETHYST_SHIELD], sprite[k.INV_REIDITE_SHIELD] = [], sprite[k.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT, sprite[k.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN, sprite[k.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK, sprite[k.CHEST_REIDITE_SHIELD] = sprite[k.INV_REIDITE_SHIELD], sprite[k.CRAFT_REIDITE_SHIELD] = sprite[k.INV_REIDITE_SHIELD], sprite[k.INV_FLOWER_HAT] = [], sprite[k.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT, sprite[k.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN, sprite[k.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK, sprite[k.CHEST_FLOWER_HAT] = sprite[k.INV_FLOWER_HAT], sprite[k.CRAFT_FLOWER_HAT] = sprite[k.INV_FLOWER_HAT], sprite[k.INV_SANDWORM_JUICE] = [], sprite[k.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT, sprite[k.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN, sprite[k.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK, sprite[k.CHEST_SANDWORM_JUICE] = sprite[k.INV_SANDWORM_JUICE], sprite[k.CRAFT_SANDWORM_JUICE] = sprite[k.INV_SANDWORM_JUICE], sprite[k.INV_GARLIC] = ri(1, [{
                    f: ve,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
                }], .22, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CHEST_GARLIC] = sprite[k.INV_GARLIC], sprite[k.INV_THORNBUSH] = ri(1, [{
                    f: Vr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
                }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CHEST_THORNBUSH] = sprite[k.INV_THORNBUSH], sprite[k.INV_WINDMILL] = ri(1, [{
                    f: Qe,
                    x: -1,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
                }, {
                    f: $e,
                    x: -1,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
                }, {
                    f: ei,
                    x: -1,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
                }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_WINDMILL] = sprite[k.INV_WINDMILL], sprite[k.INV_WILD_WHEAT] = ri(1, [{
                    f: Ze,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#A89F67", "#9E8456"]
                }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_SIGN] = ri(1, [{
                    f: ft,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
                }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_SIGN] = sprite[k.INV_SIGN], sprite[k.INV_WHEAT_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#A89F67", "#9E8456"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_WHEAT_SEED] = sprite[k.INV_WHEAT_SEED], sprite[k.INV_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#493d36", "#332b28"]
                }], .7, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_SEED] = sprite[k.INV_SEED], sprite[k.INV_PUMPKIN_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#c67933", "#b17238"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_PUMPKIN_SEED] = sprite[k.INV_PUMPKIN_SEED], sprite[k.INV_GARLIC_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#e8e8e8", "#bbbbbb"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_GARLIC_SEED] = sprite[k.INV_GARLIC_SEED], sprite[k.INV_THORNBUSH_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#328a56", "#449573"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_THORNBUSH_SEED] = sprite[k.INV_THORNBUSH_SEED], sprite[k.INV_CARROT_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#c98e2f", "#a36b11"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_CARROT_SEED] = sprite[k.INV_CARROT_SEED], sprite[k.CHEST_CARROT_SEED] = sprite[k.INV_CARROT_SEED], sprite[k.INV_WATERMELON_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#13a56d", "#098a58"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_WATERMELON_SEED] = sprite[k.INV_WATERMELON_SEED], sprite[k.CHEST_WATERMELON_SEED] = sprite[k.INV_WATERMELON_SEED], sprite[k.INV_ALOE_VERA_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#3a8214", "#4a9c1e"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_ALOE_VERA_SEED] = sprite[k.INV_ALOE_VERA_SEED], sprite[k.CHEST_ALOE_VERA_SEED] = sprite[k.INV_ALOE_VERA_SEED], sprite[k.INV_TOMATO_SEED] = ri(1, [{
                    f: yi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#b22419", "#99110e"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_TOMATO_SEED] = sprite[k.INV_TOMATO_SEED], sprite[k.CHEST_TOMATO_SEED] = sprite[k.INV_TOMATO_SEED], sprite[k.INV_FIRE] = ri(1, [{
                    f: oi,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: -Math.PI / 7,
                    c: ["#4d2d14", "#432516"]
                }, {
                    f: ai,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: -Math.PI / 7,
                    c: ["#efd435", "#ec8d35", "#e96132"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_FIRE] = sprite[k.INV_FIRE], sprite[k.INV_BIG_FIRE] = ri(1, [{
                    f: ni,
                    x: -2,
                    y: -1,
                    a: 1,
                    r: -Math.PI / 7,
                    c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
                }, {
                    f: ai,
                    x: -2,
                    y: -1,
                    a: 1,
                    r: -Math.PI / 7,
                    c: ["#efd435", "#ec8d35", "#e96132"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BIG_FIRE] = sprite[k.INV_BIG_FIRE], sprite[k.INV_PIRATE_SWORD] = ri(1, [{
                    f: Ci,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
                }], .1, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_SUGAR_CAN] = ri(1, [{
                    f: Li,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
                }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_SWORD_WOOD] = ri(1, [{
                    f: ci,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_SWORD] = ri(1, [{
                    f: Ni,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_SWORD_GOLD] = ri(1, [{
                    f: vi,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_SWORD_DIAMOND] = ri(1, [{
                    f: Mi,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_SWORD_AMETHYST] = ri(1, [{
                    f: Gi,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_PICK_WOOD] = ri(1, [{
                    f: Ri,
                    x: -2,
                    y: 5,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_PICK] = ri(1, [{
                    f: Ri,
                    x: -2,
                    y: 5,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_PICK_GOLD] = ri(1, [{
                    f: Ri,
                    x: -2,
                    y: 5,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_PICK_DIAMOND] = ri(1, [{
                    f: Ri,
                    x: -2,
                    y: 5,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_PICK_AMETHYST] = ri(1, [{
                    f: Ri,
                    x: -2,
                    y: 5,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_PICK_REIDITE] = [], sprite[k.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT, sprite[k.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN, sprite[k.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK, sprite[k.CRAFT_PICK_REIDITE] = sprite[k.INV_PICK_REIDITE], sprite[k.CHEST_PICK_REIDITE] = sprite[k.INV_PICK_REIDITE], sprite[k.INV_STONE] = ri(1, [{
                    f: Bi,
                    x: -5,
                    y: -5,
                    a: 1,
                    r: 0,
                    c: ["#252B28", "#58645F", "#75827D"]
                }], .23, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_GOLD] = ri(1, [{
                    f: Vi,
                    x: -5,
                    y: -5,
                    a: 1,
                    r: 0,
                    c: ["#282823", "#877c2d", "#c4bc51"]
                }], .43, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_DIAMOND] = ri(1, [{
                    f: Ki,
                    x: -5,
                    y: -5,
                    a: 1,
                    r: 0,
                    c: ["#232828", "#3fc9c9", "#74ede6"]
                }], .33, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_WOOD] = ri(1, [{
                    f: oi,
                    x: 0,
                    y: -5,
                    a: 1,
                    r: Math.PI / 2.5,
                    c: ["#4d2d14", "#432516"]
                }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_SWORD_WOOD] = sprite[k.INV_SWORD_WOOD], sprite[k.CRAFT_SWORD] = sprite[k.INV_SWORD], sprite[k.CRAFT_SWORD_GOLD] = sprite[k.INV_SWORD_GOLD], sprite[k.CRAFT_SWORD_DIAMOND] = sprite[k.INV_SWORD_DIAMOND], sprite[k.CRAFT_SWORD_AMETHYST] = sprite[k.INV_SWORD_AMETHYST], sprite[k.CRAFT_PICK_WOOD] = sprite[k.INV_PICK_WOOD], sprite[k.CRAFT_PICK] = sprite[k.INV_PICK], sprite[k.CRAFT_PICK_GOLD] = sprite[k.INV_PICK_GOLD], sprite[k.CRAFT_PICK_DIAMOND] = sprite[k.INV_PICK_DIAMOND], sprite[k.CRAFT_PICK_AMETHYST] = sprite[k.INV_PICK_AMETHYST], sprite[k.INV_PLANT] = ri(1, [{
                    f: Ke,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0
                }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_WORK] = ri(1, [{
                    f: Ye,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
                }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_WORK] = sprite[k.INV_WORK], sprite[k.INV_STONE_WALL] = ri(1, [{
                    f: it,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
                }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_STONE_WALL] = sprite[k.INV_STONE_WALL], sprite[k.INV_DIAMOND_WALL] = ri(1, [{
                    f: Qi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
                }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DIAMOND_WALL] = sprite[k.INV_DIAMOND_WALL], sprite[k.INV_AMETHYST_WALL] = ri(1, [{
                    f: it,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
                }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_AMETHYST_WALL] = sprite[k.INV_AMETHYST_WALL], sprite[k.INV_GOLD_WALL] = ri(1, [{
                    f: tt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
                }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_GOLD_WALL] = sprite[k.INV_GOLD_WALL], sprite[k.INV_WALL] = ri(1, [{
                    f: Zi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
                }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_WALL] = sprite[k.INV_WALL], sprite[k.INV_SPIKE] = ri(1, [{
                    f: pt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_SPIKE] = sprite[k.INV_SPIKE], sprite[k.INV_GOLD_SPIKE] = ri(1, [{
                    f: vt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_GOLD_SPIKE] = sprite[k.INV_GOLD_SPIKE], sprite[k.INV_DIAMOND_SPIKE] = ri(1, [{
                    f: vt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DIAMOND_SPIKE] = sprite[k.INV_DIAMOND_SPIKE], sprite[k.INV_STONE_SPIKE] = ri(1, [{
                    f: mt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_STONE_SPIKE] = sprite[k.INV_STONE_SPIKE], sprite[k.INV_AMETHYST_SPIKE] = ri(1, [{
                    f: mt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_AMETHYST_SPIKE] = sprite[k.INV_AMETHYST_SPIKE], sprite[k.INV_DOOR_WOOD_CLOSE] = ri(1, [{
                    f: rt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DOOR_WOOD_CLOSE] = sprite[k.INV_DOOR_WOOD_CLOSE], sprite[k.INV_DOOR_STONE_CLOSE] = ri(1, [{
                    f: nt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DOOR_STONE_CLOSE] = sprite[k.INV_DOOR_STONE_CLOSE], sprite[k.INV_DOOR_AMETHYST_CLOSE] = ri(1, [{
                    f: nt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[k.INV_DOOR_AMETHYST_CLOSE], sprite[k.INV_DOOR_GOLD_CLOSE] = ri(1, [{
                    f: at,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DOOR_GOLD_CLOSE] = sprite[k.INV_DOOR_GOLD_CLOSE], sprite[k.INV_DOOR_DIAMOND_CLOSE] = ri(1, [{
                    f: _t,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[k.INV_DOOR_DIAMOND_CLOSE], sprite[k.INV_CHEST] = ri(1, [{
                    f: Nt,
                    x: 0,
                    y: 2,
                    a: 1,
                    r: 0,
                    c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_CHEST] = sprite[k.INV_CHEST], sprite[k.INV_MEAT] = ri(1, [{
                    f: xe,
                    x: 0,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
                }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_COOKED_MEAT] = ri(1, [{
                    f: xe,
                    x: 0,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
                }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_COOKED_MEAT] = sprite[k.INV_COOKED_MEAT], sprite[k.INV_CORD] = ri(1, [{
                    f: ii,
                    x: -3,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#cec0c4", "#ffffff", "#6d6768"]
                }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_BLUE_CORD] = ri(1, [{
                    f: ii,
                    x: -3,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#d4e9ec", "#37b1d7", "#506c71"]
                }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BLUE_CORD] = sprite[k.INV_BLUE_CORD], sprite[k.INV_FUR] = ri(1, [{
                    f: Dt,
                    x: -3,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#ef96be", "#ffffff"]
                }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_FUR_BOAR] = ri(1, [{
                    f: Dt,
                    x: -3,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#55423e", "#ffffff"]
                }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_SPECIAL_FUR] = ri(1, [{
                    f: et,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
                }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_SPECIAL_FUR_2] = ri(1, [{
                    f: et,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
                }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_KRAKEN_SKIN] = ri(1, [{
                    f: Dt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#201851", "#b6222a"]
                }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_FUR_WOLF] = ri(1, [{
                    f: Dt,
                    x: -3,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#231f20", "#b6222a"]
                }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_FUR_WINTER] = ri(1, [{
                    f: Dt,
                    x: -3,
                    y: -3,
                    a: 1,
                    r: 0,
                    c: ["#ffffff", "#b6222a"]
                }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_EARMUFFS] = ri(1, [{
                    f: bt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
                }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_EARMUFFS] = sprite[k.INV_EARMUFFS], sprite[k.INV_COAT] = ri(1, [{
                    f: Et,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
                }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_COAT] = sprite[k.INV_COAT], sprite[k.INV_CAP_SCARF] = ri(1, [{
                    f: St,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
                }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_CAP_SCARF] = sprite[k.INV_CAP_SCARF], sprite[k.INV_CHRISTMAS_HAT] = ri(1, [{
                    f: Ti,
                    x: 0,
                    y: 5,
                    a: 1,
                    r: 0,
                    c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
                }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CHEST_CHRISTMAS_HAT] = sprite[k.INV_CHRISTMAS_HAT], sprite[k.INV_ELF_HAT] = ri(1, [{
                    f: Ei,
                    x: 0,
                    y: 5,
                    a: 1,
                    r: 0,
                    c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
                }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CHEST_ELF_HAT] = sprite[k.INV_ELF_HAT], sprite[k.INV_BANDAGE] = ri(1, [{
                    f: ti,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#ffffff", "#cec0c4"]
                }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BANDAGE] = sprite[k.INV_BANDAGE], sprite[k.INV_BAG] = [], sprite[k.INV_BAG][0] = IMAGES.INV_BAG_OUT, sprite[k.INV_BAG][1] = IMAGES.INV_BAG_IN, sprite[k.INV_BAG][2] = IMAGES.INV_BAG_CLICK, sprite[k.CRAFT_BAG] = sprite[k.INV_BAG], sprite[k.INV_PITCHFORK] = [], sprite[k.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT, sprite[k.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN, sprite[k.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK, sprite[k.CRAFT_PITCHFORK] = sprite[k.INV_PITCHFORK], sprite[k.CHEST_PITCHFORK] = sprite[k.INV_PITCHFORK], sprite[k.INV_PITCHFORK2] = [], sprite[k.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT, sprite[k.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN, sprite[k.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK, sprite[k.CRAFT_PITCHFORK2] = sprite[k.INV_PITCHFORK2], sprite[k.CHEST_PITCHFORK2] = sprite[k.INV_PITCHFORK2], sprite[k.INV_PITCHFORK_PART] = [], sprite[k.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK, sprite[k.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK, sprite[k.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK, sprite[k.CHEST_PITCHFORK_PART] = sprite[k.INV_PITCHFORK_PART], sprite[k.INV_PILOT_HELMET] = [], sprite[k.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT, sprite[k.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN, sprite[k.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK, sprite[k.CRAFT_PILOT_HELMET] = sprite[k.INV_PILOT_HELMET], sprite[k.CHEST_PILOT_HELMET] = sprite[k.INV_PILOT_HELMET], sprite[k.INV_PILOT_GLASSES] = [], sprite[k.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK, sprite[k.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK, sprite[k.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK, sprite[k.CHEST_PILOT_GLASSES] = sprite[k.INV_PILOT_GLASSES], sprite[k.INV_WOOD_TOWER] = [], sprite[k.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT, sprite[k.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN, sprite[k.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK, sprite[k.CRAFT_WOOD_TOWER] = sprite[k.INV_WOOD_TOWER], sprite[k.CHEST_WOOD_TOWER] = sprite[k.INV_WOOD_TOWER], sprite[k.INV_WOOD_DOOR_SPIKE] = [], sprite[k.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT, sprite[k.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN, sprite[k.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK, sprite[k.CRAFT_WOOD_DOOR_SPIKE] = sprite[k.INV_WOOD_DOOR_SPIKE], sprite[k.CHEST_WOOD_DOOR_SPIKE] = sprite[k.INV_WOOD_DOOR_SPIKE], sprite[k.INV_STONE_DOOR_SPIKE] = [], sprite[k.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT, sprite[k.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN, sprite[k.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK, sprite[k.CRAFT_STONE_DOOR_SPIKE] = sprite[k.INV_STONE_DOOR_SPIKE], sprite[k.CHEST_STONE_DOOR_SPIKE] = sprite[k.INV_STONE_DOOR_SPIKE], sprite[k.INV_GOLD_DOOR_SPIKE] = [], sprite[k.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT, sprite[k.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN, sprite[k.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK, sprite[k.CRAFT_GOLD_DOOR_SPIKE] = sprite[k.INV_GOLD_DOOR_SPIKE], sprite[k.CHEST_GOLD_DOOR_SPIKE] = sprite[k.INV_GOLD_DOOR_SPIKE], sprite[k.INV_DIAMOND_DOOR_SPIKE] = [], sprite[k.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT, sprite[k.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN, sprite[k.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK, sprite[k.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[k.INV_DIAMOND_DOOR_SPIKE], sprite[k.CHEST_DIAMOND_DOOR_SPIKE] = sprite[k.INV_DIAMOND_DOOR_SPIKE], sprite[k.INV_AMETHYST_DOOR_SPIKE] = [], sprite[k.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT, sprite[k.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN, sprite[k.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK, sprite[k.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[k.INV_AMETHYST_DOOR_SPIKE], sprite[k.CHEST_AMETHYST_DOOR_SPIKE] = sprite[k.INV_AMETHYST_DOOR_SPIKE], sprite[k.INV_REIDITE_DOOR_SPIKE] = [], sprite[k.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT, sprite[k.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN, sprite[k.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK, sprite[k.CRAFT_REIDITE_DOOR_SPIKE] = sprite[k.INV_REIDITE_DOOR_SPIKE], sprite[k.CHEST_REIDITE_DOOR_SPIKE] = sprite[k.INV_REIDITE_DOOR_SPIKE], sprite[k.INV_REIDITE_DOOR] = [], sprite[k.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT, sprite[k.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN, sprite[k.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK, sprite[k.CRAFT_REIDITE_DOOR] = sprite[k.INV_REIDITE_DOOR], sprite[k.CHEST_REIDITE_DOOR] = sprite[k.INV_REIDITE_DOOR], sprite[k.INV_REIDITE_SPIKE] = [], sprite[k.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT, sprite[k.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN, sprite[k.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK, sprite[k.CRAFT_REIDITE_SPIKE] = sprite[k.INV_REIDITE_SPIKE], sprite[k.CHEST_REIDITE_SPIKE] = sprite[k.INV_REIDITE_SPIKE], sprite[k.INV_REIDITE_WALL] = [], sprite[k.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT, sprite[k.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN, sprite[k.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK, sprite[k.CRAFT_REIDITE_WALL] = sprite[k.INV_REIDITE_WALL], sprite[k.CHEST_REIDITE_WALL] = sprite[k.INV_REIDITE_WALL], sprite[k.INV_PENGUIN_FEATHER] = [], sprite[k.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER, sprite[k.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER, sprite[k.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER, sprite[k.CRAFT_PENGUIN_FEATHER] = sprite[k.INV_PENGUIN_FEATHER], sprite[k.CHEST_PENGUIN_FEATHER] = sprite[k.INV_PENGUIN_FEATHER], sprite[k.INV_HAWK_FEATHER] = [], sprite[k.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER, sprite[k.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER, sprite[k.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER, sprite[k.CRAFT_HAWK_FEATHER] = sprite[k.INV_HAWK_FEATHER], sprite[k.CHEST_HAWK_FEATHER] = sprite[k.INV_HAWK_FEATHER], sprite[k.INV_VULTURE_FEATHER] = [], sprite[k.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER, sprite[k.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER, sprite[k.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER, sprite[k.CRAFT_VULTURE_FEATHER] = sprite[k.INV_VULTURE_FEATHER], sprite[k.CHEST_VULTURE_FEATHER] = sprite[k.INV_VULTURE_FEATHER], sprite[k.INV_EMERALD] = [], sprite[k.INV_EMERALD][0] = IMAGES.INV_EMERALD, sprite[k.INV_EMERALD][1] = IMAGES.INV_EMERALD, sprite[k.INV_EMERALD][2] = IMAGES.INV_EMERALD, sprite[k.CHEST_EMERALD] = sprite[k.INV_EMERALD], sprite[k.INV_SADDLE] = [], sprite[k.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT, sprite[k.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN, sprite[k.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK, sprite[k.CRAFT_SADDLE] = sprite[k.INV_SADDLE], sprite[k.CHEST_SADDLE] = sprite[k.INV_SADDLE], sprite[k.INV_WAND1] = [], sprite[k.INV_WAND1][0] = IMAGES.INV_WAND1_OUT, sprite[k.INV_WAND1][1] = IMAGES.INV_WAND1_IN, sprite[k.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK, sprite[k.CRAFT_WAND1] = sprite[k.INV_WAND1], sprite[k.CHEST_WAND1] = sprite[k.INV_WAND1], sprite[k.INV_WAND2] = [], sprite[k.INV_WAND2][0] = IMAGES.INV_WAND2_OUT, sprite[k.INV_WAND2][1] = IMAGES.INV_WAND2_IN, sprite[k.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK, sprite[k.CRAFT_WAND2] = sprite[k.INV_WAND2], sprite[k.CHEST_WAND2] = sprite[k.INV_WAND2], sprite[k.INV_MOUNT_BOAR] = [], sprite[k.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT, sprite[k.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN, sprite[k.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK, sprite[k.CRAFT_MOUNT_BOAR] = sprite[k.INV_MOUNT_BOAR], sprite[k.CHEST_MOUNT_BOAR] = sprite[k.INV_MOUNT_BOAR], sprite[k.INV_CRAB_BOSS] = [], sprite[k.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT, sprite[k.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN, sprite[k.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK, sprite[k.CRAFT_CRAB_BOSS] = sprite[k.INV_CRAB_BOSS], sprite[k.CHEST_CRAB_BOSS] = sprite[k.INV_CRAB_BOSS], sprite[k.INV_HAWK] = [], sprite[k.INV_HAWK][0] = IMAGES.INV_HAWK_OUT, sprite[k.INV_HAWK][1] = IMAGES.INV_HAWK_IN, sprite[k.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK, sprite[k.CRAFT_HAWK] = sprite[k.INV_HAWK], sprite[k.CHEST_HAWK] = sprite[k.INV_HAWK], sprite[k.INV_VULTURE] = [], sprite[k.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT, sprite[k.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN, sprite[k.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK, sprite[k.CRAFT_VULTURE] = sprite[k.INV_VULTURE], sprite[k.CHEST_VULTURE] = sprite[k.INV_VULTURE], sprite[k.INV_TURBAN1] = [], sprite[k.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT, sprite[k.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN, sprite[k.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK, sprite[k.CRAFT_TURBAN1] = sprite[k.INV_TURBAN1], sprite[k.CHEST_TURBAN1] = sprite[k.INV_TURBAN1], sprite[k.INV_TURBAN2] = [], sprite[k.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT, sprite[k.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN, sprite[k.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK, sprite[k.CRAFT_TURBAN2] = sprite[k.INV_TURBAN2], sprite[k.CHEST_TURBAN2] = sprite[k.INV_TURBAN2], sprite[k.INV_PLANE] = [], sprite[k.INV_PLANE][0] = IMAGES.INV_PLANE_OUT, sprite[k.INV_PLANE][1] = IMAGES.INV_PLANE_IN, sprite[k.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK, sprite[k.CRAFT_PLANE] = sprite[k.INV_PLANE], sprite[k.CHEST_PLANE] = sprite[k.INV_PLANE], sprite[k.INV_BABY_DRAGON] = [], sprite[k.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT, sprite[k.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN, sprite[k.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK, sprite[k.CRAFT_BABY_DRAGON] = sprite[k.INV_BABY_DRAGON], sprite[k.CHEST_BABY_DRAGON] = sprite[k.INV_BABY_DRAGON], sprite[k.INV_BABY_MAMMOTH] = [], sprite[k.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT, sprite[k.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN, sprite[k.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK, sprite[k.CRAFT_BABY_MAMMOTH] = sprite[k.INV_BABY_MAMMOTH], sprite[k.CHEST_BABY_MAMMOTH] = sprite[k.INV_BABY_MAMMOTH], sprite[k.INV_BABY_LAVA] = [], sprite[k.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT, sprite[k.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN, sprite[k.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK, sprite[k.CRAFT_BABY_LAVA] = sprite[k.INV_BABY_LAVA], sprite[k.CHEST_BABY_LAVA] = sprite[k.INV_BABY_LAVA], sprite[k.INV_BREAD_OVEN] = ri(1, [{
                    f: vr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
                }, {
                    f: Mr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#e4c027"]
                }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BREAD_OVEN] = sprite[k.INV_BREAD_OVEN], sprite[k.INV_FURNACE] = ri(1, [{
                    f: ot,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
                }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_FURNACE] = sprite[k.INV_FURNACE], sprite[k.INV_BED] = ri(1, [{
                    f: dt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
                }], .32, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BED] = sprite[k.INV_BED], sprite[k.CHEST_BED] = sprite[k.INV_BED], sprite[k.INV_CRAB_LOOT] = ri(1, [{
                    f: At,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
                }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CHEST_CRAB_LOOT] = sprite[k.INV_CRAB_LOOT], sprite[k.INV_CRAB_SPEAR] = ri(1, [{
                    f: ht,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_CRAB_SPEAR] = sprite[k.INV_CRAB_SPEAR], sprite[k.CHEST_CRAB_SPEAR] = sprite[k.INV_CRAB_SPEAR], sprite[k.INV_WOOD_SPEAR] = ri(1, [{
                    f: ut,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_WOOD_SPEAR] = sprite[k.INV_WOOD_SPEAR], sprite[k.INV_SPEAR] = ri(1, [{
                    f: Ot,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SPEAR] = sprite[k.INV_SPEAR], sprite[k.INV_GOLD_SPEAR] = ri(1, [{
                    f: lt,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_GOLD_SPEAR] = sprite[k.INV_GOLD_SPEAR], sprite[k.INV_DIAMOND_SPEAR] = ri(1, [{
                    f: Rt,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_DIAMOND_SPEAR] = sprite[k.INV_DIAMOND_SPEAR], sprite[k.INV_AMETHYST_SPEAR] = ri(1, [{
                    f: ct,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_AMETHYST_SPEAR] = sprite[k.INV_AMETHYST_SPEAR], sprite[k.INV_DRAGON_SPEAR] = ri(1, [{
                    f: Ct,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
                }], .38, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_DRAGON_SPEAR] = sprite[k.INV_DRAGON_SPEAR], sprite[k.CHEST_DRAGON_SPEAR] = sprite[k.INV_DRAGON_SPEAR], sprite[k.INV_HAMMER] = ri(1, [{
                    f: Gt,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
                }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_HAMMER] = sprite[k.INV_HAMMER], sprite[k.INV_SPANNER] = ri(1, [{
                    f: $r,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#939393", "#5f6061"]
                }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SPANNER] = sprite[k.INV_SPANNER], sprite[k.INV_SUPER_HAMMER] = ri(1, [{
                    f: Cr,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
                }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SUPER_HAMMER] = sprite[k.INV_SUPER_HAMMER], sprite[k.INV_HAMMER_GOLD] = ri(1, [{
                    f: Gt,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
                }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_HAMMER_GOLD] = sprite[k.INV_HAMMER_GOLD], sprite[k.INV_HAMMER_DIAMOND] = ri(1, [{
                    f: Gt,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
                }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_HAMMER_DIAMOND] = sprite[k.INV_HAMMER_DIAMOND], sprite[k.INV_HAMMER_AMETHYST] = ri(1, [{
                    f: Gt,
                    x: 2,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
                }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_HAMMER_AMETHYST] = sprite[k.INV_HAMMER_AMETHYST], sprite[k.INV_HAMMER_REIDITE] = [], sprite[k.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT, sprite[k.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN, sprite[k.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK, sprite[k.CHEST_HAMMER_REIDITE] = sprite[k.INV_HAMMER_REIDITE], sprite[k.CRAFT_HAMMER_REIDITE] = sprite[k.INV_HAMMER_REIDITE], sprite[k.INV_EMERALD_MACHINE] = [], sprite[k.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT, sprite[k.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN, sprite[k.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK, sprite[k.CHEST_EMERALD_MACHINE] = sprite[k.INV_EMERALD_MACHINE], sprite[k.CRAFT_EMERALD_MACHINE] = sprite[k.INV_EMERALD_MACHINE], sprite[k.INV_EXTRACTOR_MACHINE_STONE] = [], sprite[k.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT, sprite[k.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN, sprite[k.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK, sprite[k.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[k.INV_EXTRACTOR_MACHINE_STONE], sprite[k.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[k.INV_EXTRACTOR_MACHINE_STONE], sprite[k.INV_EXTRACTOR_MACHINE_GOLD] = [], sprite[k.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT, sprite[k.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN, sprite[k.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK, sprite[k.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[k.INV_EXTRACTOR_MACHINE_GOLD], sprite[k.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[k.INV_EXTRACTOR_MACHINE_GOLD], sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND] = [], sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT, sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN, sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK, sprite[k.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND], sprite[k.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND], sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST] = [], sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT, sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN, sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK, sprite[k.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST], sprite[k.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST], sprite[k.INV_EXTRACTOR_MACHINE_REIDITE] = [], sprite[k.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT, sprite[k.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN, sprite[k.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK, sprite[k.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[k.INV_EXTRACTOR_MACHINE_REIDITE], sprite[k.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[k.INV_EXTRACTOR_MACHINE_REIDITE], sprite[k.INV_LOCK] = ri(1, [{
                    f: _r,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
                }], .8, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_LOCK] = sprite[k.INV_LOCK], sprite[k.INV_LOCKPICK] = ri(1, [{
                    f: Ir,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#141414", "#c4a23a", "#816511"]
                }], .08, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_LOCKPICK] = sprite[k.INV_LOCKPICK], sprite[k.INV_DRAGON_HEART] = ri(1, [{
                    f: Rr,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#141414", "#178a99", "#0a6372", "#03282e"]
                }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7), sprite[k.INV_LAVA_HEART] = ri(1, [{
                    f: Rr,
                    x: -2,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#120202", "#991616", "#750a0a", "#120202"]
                }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7), sprite[k.INV_RESURRECTION] = ri(1, [{
                    f: hr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#347f93", "#54a4ba"]
                }, {
                    f: lr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
                }, {
                    f: Or,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#a9e4ed", "#86d4e0"]
                }, {
                    f: ur,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_RESURRECTION] = sprite[k.INV_RESURRECTION], sprite[k.INV_TOTEM] = ri(1, [{
                    f: Er,
                    x: 45,
                    y: 70,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_TOTEM] = sprite[k.INV_TOTEM], sprite[k.INV_AMETHYST_HELMET] = ri(1, [{
                    f: ar,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
                }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_AMETHYST_HELMET] = sprite[k.INV_AMETHYST_HELMET], sprite[k.INV_WINTER_HOOD] = ri(1, [{
                    f: wr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
                }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_WINTER_HOOD] = sprite[k.INV_WINTER_HOOD], sprite[k.INV_HOOD] = ri(1, [{
                    f: Kr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#2a2938", "#242330", "#313041"]
                }], .25, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_HOOD] = sprite[k.INV_HOOD], sprite[k.INV_WINTER_PEASANT] = ri(1, [{
                    f: Ur,
                    x: 0,
                    y: 3,
                    a: 1,
                    r: 0,
                    c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
                }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_WINTER_PEASANT] = sprite[k.INV_WINTER_PEASANT], sprite[k.INV_PEASANT] = ri(1, [{
                    f: Ur,
                    x: 0,
                    y: 3,
                    a: 1,
                    r: 0,
                    c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
                }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_PEASANT] = sprite[k.INV_PEASANT], sprite[k.INV_CROWN_GREEN] = ri(1, [{
                    f: tn,
                    x: 0,
                    y: 10,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_CROWN_GREEN] = sprite[k.INV_CROWN_GREEN], sprite[k.INV_CROWN_ORANGE] = ri(1, [{
                    f: tn,
                    x: 0,
                    y: 10,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_CROWN_ORANGE] = sprite[k.INV_CROWN_ORANGE], sprite[k.INV_CROWN_BLUE] = ri(1, [{
                    f: tn,
                    x: 0,
                    y: 10,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_CROWN_BLUE] = sprite[k.INV_CROWN_BLUE], sprite[k.INV_CROWN_CRAB] = ri(1, [{
                    f: Tt,
                    x: -1,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_CROWN_CRAB] = sprite[k.INV_CROWN_CRAB], sprite[k.CHEST_CROWN_CRAB] = sprite[k.INV_CROWN_CRAB], sprite[k.INV_DRAGON_HELMET] = ri(1, [{
                    f: yt,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
                }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_DRAGON_HELMET] = sprite[k.INV_DRAGON_HELMET], sprite[k.INV_DRAGON_SWORD] = ri(1, [{
                    f: gr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
                }], .75, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_DRAGON_SWORD] = sprite[k.INV_DRAGON_SWORD], sprite[k.INV_DRAGON_CUBE] = ri(1, [{
                    f: br,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
                }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_DRAGON_ORB] = ri(1, [{
                    f: Dr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
                }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_LAVA_CUBE] = ri(1, [{
                    f: br,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
                }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_LAVA_ORB] = ri(1, [{
                    f: Dr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
                }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_GEMME_GREEN] = ri(1, [{
                    f: cr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
                }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_GEMME_ORANGE] = ri(1, [{
                    f: cr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
                }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_GEMME_BLUE] = ri(1, [{
                    f: cr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
                }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_SHOVEL] = ri(1, [{
                    f: Xr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SHOVEL] = sprite[k.INV_SHOVEL], sprite[k.INV_SHOVEL_GOLD] = ri(1, [{
                    f: Xr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SHOVEL_GOLD] = sprite[k.INV_SHOVEL_GOLD], sprite[k.INV_SHOVEL_DIAMOND] = ri(1, [{
                    f: Xr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SHOVEL_DIAMOND] = sprite[k.INV_SHOVEL_DIAMOND], sprite[k.INV_SHOVEL_AMETHYST] = ri(1, [{
                    f: Xr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SHOVEL_AMETHYST] = sprite[k.INV_SHOVEL_AMETHYST], sprite[k.INV_EXPLORER_HAT] = ri(1, [{
                    f: er,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
                }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_EXPLORER_HAT] = sprite[k.INV_EXPLORER_HAT], sprite[k.INV_WOOD_HELMET] = ri(1, [{
                    f: ir,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#252525", "#73583e", "#493425", "#7d6144"]
                }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_WOOD_HELMET] = sprite[k.INV_WOOD_HELMET], sprite[k.INV_STONE_HELMET] = ri(1, [{
                    f: tr,
                    x: 0,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
                }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_STONE_HELMET] = sprite[k.INV_STONE_HELMET], sprite[k.INV_GOLD_HELMET] = ri(1, [{
                    f: rr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#dbce71", "#b29c32", "#c4bc51"]
                }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_GOLD_HELMET] = sprite[k.INV_GOLD_HELMET], sprite[k.INV_DIAMOND_HELMET] = ri(1, [{
                    f: nr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
                }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_DIAMOND_HELMET] = sprite[k.INV_DIAMOND_HELMET], sprite[k.INV_BOOK] = ri(1, [{
                    f: or,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
                }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_BOOK] = sprite[k.INV_BOOK], sprite[k.INV_PAPER] = ri(1, [{
                    f: sr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#221e1b", "#ffffff", "#f6f0e7"]
                }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_PAPER] = sprite[k.INV_PAPER], sprite[k.INV_AMETHYST] = ri(1, [{
                    f: Vt,
                    x: -5,
                    y: -5,
                    a: 1,
                    r: 0,
                    c: ["#1d051e", "#c27add", "#cd98e5"]
                }], .31, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_SAND] = ri(1, [{
                    f: fr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#D7C393", "#a48c6c"]
                }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_ICE] = ri(1, [{
                    f: Hr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#93CBCE", "#E9F6F6"]
                }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.INV_GROUND] = ri(1, [{
                    f: fr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#866432", "#6b4f25"]
                }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_BUCKET_FULL] = ri(1, [{
                    f: Jr,
                    x: 3,
                    y: 2,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
                }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_BUCKET_EMPTY] = ri(1, [{
                    f: xr,
                    x: 3,
                    y: 2,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
                }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_BUCKET_FULL] = sprite[k.INV_BUCKET_FULL], sprite[k.CRAFT_BUCKET_EMPTY] = sprite[k.INV_BUCKET_EMPTY], sprite[k.INV_WELL] = ri(1, [{
                    f: Lr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
                }], .1, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_WELL] = sprite[k.INV_WELL], sprite[k.INV_BOTTLE_FULL] = ri(1, [{
                    f: Fr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
                }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_BOTTLE_EMPTY] = ri(1, [{
                    f: kr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: Math.PI / 5,
                    c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
                }], .18, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_BOTTLE_FULL] = sprite[k.INV_BOTTLE_FULL], sprite[k.CRAFT_BOTTLE_EMPTY] = sprite[k.INV_BOTTLE_EMPTY], sprite[k.INV_COOKIE] = ri(1, [{
                    f: fi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_COOKIE] = sprite[k.INV_COOKIE], sprite[k.INV_CANDY] = ri(1, [{
                    f: Hi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_FERRERO] = ri(1, [{
                    f: Pi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
                }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_BREAD] = ri(1, [{
                    f: pr,
                    x: 0,
                    y: -2,
                    a: 1,
                    r: 0,
                    c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
                }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BREAD] = sprite[k.INV_BREAD], sprite[k.INV_FOODFISH] = ri(1, [{
                    f: qi,
                    x: -3,
                    y: -5,
                    a: 1,
                    r: 0,
                    c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
                }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.INV_FOODFISH_COOKED] = ri(1, [{
                    f: ji,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1d051e", "#42261A", "#281818"]
                }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_FOODFISH_COOKED] = sprite[k.INV_FOODFISH_COOKED], sprite[k.INV_DIVING_MASK] = ri(1, [{
                    f: xi,
                    x: -3,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
                }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_DIVING_MASK] = sprite[k.INV_DIVING_MASK], sprite[k.INV_SCALES] = ri(1, [{
                    f: je,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
                }], .15, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_SUPER_DIVING_SUIT] = ri(1, [{
                    f: Ji,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
                }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[k.CRAFT_SUPER_DIVING_SUIT] = sprite[k.INV_SUPER_DIVING_SUIT], sprite[k.INV_PLOT] = ri(1, [{
                    f: Pr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_PLOT] = sprite[k.INV_PLOT], sprite[k.INV_GARLAND] = ri(1, [{
                    f: Me,
                    x: -5,
                    y: -5,
                    a: 1,
                    r: 0,
                    c: ["#e2d63b", "#ee71a9", "#42b672"]
                }], 1, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CHEST_GARLAND] = sprite[k.INV_GARLAND], sprite[k.INV_BRIDGE] = ri(1, [{
                    f: Gr,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
                }], .5, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_BRIDGE] = sprite[k.INV_BRIDGE], sprite[k.INV_ROOF] = ri(1, [{
                    f: Le,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
                }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_ROOF] = sprite[k.INV_ROOF], sprite[k.INV_WATERING_CAN_FULL] = ri(1, [{
                    f: yr,
                    x: -1,
                    y: 0,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
                }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .7), sprite[k.CRAFT_WATERING_CAN_FULL] = sprite[k.INV_WATERING_CAN_FULL], sprite[k.INV_WATERING_CAN] = ri(1, [{
                    f: yr,
                    x: -1,
                    y: 0,
                    a: 1,
                    r: -Math.PI / 5,
                    c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
                }], .4, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.CRAFT_WATERING_CAN] = sprite[k.INV_WATERING_CAN], sprite[k.INV_FLOUR] = ri(1, [{
                    f: Br,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
                }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.INV_CRAB_STICK] = ri(1, [{
                    f: mi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
                }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CHEST_CRAB_STICK] = sprite[k.INV_CRAB_STICK], sprite[k.INV_CAKE] = ri(1, [{
                    f: Xi,
                    x: 0,
                    y: 0,
                    a: 1,
                    r: 0,
                    c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
                }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_CAKE] = sprite[k.INV_CAKE], sprite[k.INV_SANDWICH] = ri(1, [{
                    f: qe,
                    x: -2,
                    y: -8,
                    a: 1,
                    r: 0,
                    c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
                }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[k.CRAFT_SANDWICH] = sprite[k.INV_SANDWICH], sprite[k.INV_LAVA_SWORD] = [], sprite[k.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT, sprite[k.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN, sprite[k.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK, sprite[k.CRAFT_LAVA_SWORD] = sprite[k.INV_LAVA_SWORD], sprite[k.CHEST_LAVA_SWORD] = sprite[k.INV_LAVA_SWORD], sprite[k.INV_LAVA_SPEAR] = [], sprite[k.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT, sprite[k.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN, sprite[k.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK, sprite[k.CRAFT_LAVA_SPEAR] = sprite[k.INV_LAVA_SPEAR], sprite[k.CHEST_LAVA_SPEAR] = sprite[k.INV_LAVA_SPEAR], sprite[k.CRAFT_REIDITE_SWORD] = sprite[k.INV_REIDITE_SWORD], sprite[k.CHEST_REIDITE_SWORD] = sprite[k.INV_REIDITE_SWORD], sprite[k.INV_REIDITE_SWORD] = [], sprite[k.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT, sprite[k.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN, sprite[k.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK, sprite[k.CRAFT_REIDITE_SWORD] = sprite[k.INV_REIDITE_SWORD], sprite[k.CHEST_REIDITE_SWORD] = sprite[k.INV_REIDITE_SWORD], sprite[k.INV_REIDITE_SPEAR] = [], sprite[k.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT, sprite[k.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN, sprite[k.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK, sprite[k.CRAFT_REIDITE_SPEAR] = sprite[k.INV_REIDITE_SPEAR], sprite[k.CHEST_REIDITE_SPEAR] = sprite[k.INV_REIDITE_SPEAR], sprite[k.INV_DIAMOND_PROTECTION] = [], sprite[k.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT, sprite[k.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN, sprite[k.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK, sprite[k.CRAFT_DIAMOND_PROTECTION] = sprite[k.INV_DIAMOND_PROTECTION], sprite[k.CHEST_DIAMOND_PROTECTION] = sprite[k.INV_DIAMOND_PROTECTION], sprite[k.INV_AMETHYST_PROTECTION] = [], sprite[k.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT, sprite[k.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN, sprite[k.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK, sprite[k.CRAFT_AMETHYST_PROTECTION] = sprite[k.INV_AMETHYST_PROTECTION], sprite[k.CHEST_AMETHYST_PROTECTION] = sprite[k.INV_AMETHYST_PROTECTION], sprite[k.INV_REIDITE_PROTECTION] = [], sprite[k.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT, sprite[k.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN, sprite[k.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK, sprite[k.CRAFT_REIDITE_PROTECTION] = sprite[k.INV_REIDITE_PROTECTION], sprite[k.CHEST_REIDITE_PROTECTION] = sprite[k.INV_REIDITE_PROTECTION], sprite[k.INV_REIDITE_HELMET] = [], sprite[k.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT, sprite[k.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN, sprite[k.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK, sprite[k.CRAFT_REIDITE_HELMET] = sprite[k.INV_REIDITE_HELMET], sprite[k.CHEST_REIDITE_HELMET] = sprite[k.INV_REIDITE_HELMET], sprite[k.INV_LAVA_HELMET] = [], sprite[k.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT, sprite[k.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN, sprite[k.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK, sprite[k.CRAFT_LAVA_HELMET] = sprite[k.INV_LAVA_HELMET], sprite[k.CHEST_LAVA_HELMET] = sprite[k.INV_LAVA_HELMET], sprite[k.INV_FIREFLY] = [], sprite[k.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT, sprite[k.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN, sprite[k.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK, sprite[k.CRAFT_FIREFLY] = sprite[k.INV_FIREFLY], sprite[k.CHEST_FIREFLY] = sprite[k.INV_FIREFLY], sprite[k.INV_WITCH] = [], sprite[k.INV_WITCH][0] = IMAGES.INV_WITCH_OUT, sprite[k.INV_WITCH][1] = IMAGES.INV_WITCH_IN, sprite[k.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK, sprite[k.CRAFT_WITCH] = sprite[k.INV_WITCH], sprite[k.CHEST_WITCH] = sprite[k.INV_WITCH], sprite[k.INV_NIMBUS] = [], sprite[k.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT, sprite[k.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN, sprite[k.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK, sprite[k.CRAFT_NIMBUS] = sprite[k.INV_NIMBUS], sprite[k.CHEST_NIMBUS] = sprite[k.INV_NIMBUS], sprite[k.INV_REIDITE] = [], sprite[k.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT, sprite[k.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN, sprite[k.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK, sprite[k.CHEST_REIDITE] = sprite[k.INV_REIDITE], sprite[k.INV_FLAME] = [], sprite[k.INV_FLAME][0] = IMAGES.INV_FLAME_OUT, sprite[k.INV_FLAME][1] = IMAGES.INV_FLAME_IN, sprite[k.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK, sprite[k.CHEST_FLAME] = sprite[k.INV_FLAME], sprite[k.CHEST_SHOVEL] = sprite[k.INV_SHOVEL], sprite[k.CHEST_SHOVEL_GOLD] = sprite[k.INV_SHOVEL_GOLD], sprite[k.CHEST_SHOVEL_DIAMOND] = sprite[k.INV_SHOVEL_DIAMOND], sprite[k.CHEST_SHOVEL_AMETHYST] = sprite[k.INV_SHOVEL_AMETHYST], sprite[k.CHEST_SEED] = sprite[k.INV_SEED], sprite[k.CHEST_WHEAT_SEED] = sprite[k.INV_WHEAT_SEED], sprite[k.CHEST_WINDMILL] = sprite[k.INV_WINDMILL], sprite[k.CHEST_WILD_WHEAT] = sprite[k.INV_WILD_WHEAT], sprite[k.CHEST_FIRE] = sprite[k.INV_FIRE], sprite[k.CHEST_DRAGON_ORB] = sprite[k.INV_DRAGON_ORB], sprite[k.CHEST_DRAGON_CUBE] = sprite[k.INV_DRAGON_CUBE], sprite[k.CHEST_LAVA_ORB] = sprite[k.INV_LAVA_ORB], sprite[k.CHEST_LAVA_CUBE] = sprite[k.INV_LAVA_CUBE];
                sprite[k.CHEST_BIG_FIRE] = sprite[k.INV_BIG_FIRE], sprite[k.CHEST_SUGAR_CAN] = sprite[k.INV_SUGAR_CAN], sprite[k.CHEST_PIRATE_SWORD] = sprite[k.INV_PIRATE_SWORD], sprite[k.CHEST_SWORD_WOOD] = sprite[k.INV_SWORD_WOOD], sprite[k.CHEST_SWORD] = sprite[k.INV_SWORD], sprite[k.CHEST_CURSED_SWORD] = sprite[k.INV_CURSED_SWORD], sprite[k.CHEST_SWORD_GOLD] = sprite[k.INV_SWORD_GOLD], sprite[k.CHEST_SWORD_DIAMOND] = sprite[k.INV_SWORD_DIAMOND], sprite[k.CHEST_SWORD_AMETHYST] = sprite[k.INV_SWORD_AMETHYST], sprite[k.CHEST_PICK_WOOD] = sprite[k.INV_PICK_WOOD], sprite[k.CHEST_PICK] = sprite[k.INV_PICK], sprite[k.CHEST_PICK_GOLD] = sprite[k.INV_PICK_GOLD], sprite[k.CHEST_PICK_DIAMOND] = sprite[k.INV_PICK_DIAMOND], sprite[k.CHEST_PICK_AMETHYST] = sprite[k.INV_PICK_AMETHYST], sprite[k.CHEST_STONE] = sprite[k.INV_STONE], sprite[k.CHEST_GOLD] = sprite[k.INV_GOLD], sprite[k.CHEST_DIAMOND] = sprite[k.INV_DIAMOND], sprite[k.CHEST_WOOD] = sprite[k.INV_WOOD], sprite[k.CHEST_PLANT] = sprite[k.INV_PLANT], sprite[k.CHEST_WORKBENCH] = sprite[k.INV_WORK], sprite[k.CHEST_STONE_WALL] = sprite[k.INV_STONE_WALL], sprite[k.CHEST_DIAMOND_WALL] = sprite[k.INV_DIAMOND_WALL], sprite[k.CHEST_GOLD_WALL] = sprite[k.INV_GOLD_WALL], sprite[k.CHEST_AMETHYST_WALL] = sprite[k.INV_AMETHYST_WALL], sprite[k.CHEST_WALL] = sprite[k.INV_WALL], sprite[k.CHEST_SPIKE] = sprite[k.INV_SPIKE], sprite[k.CHEST_MEAT] = sprite[k.INV_MEAT], sprite[k.CHEST_COOKED_MEAT] = sprite[k.INV_COOKED_MEAT], sprite[k.CHEST_CORD] = sprite[k.INV_CORD], sprite[k.CHEST_BLUE_CORD] = sprite[k.INV_BLUE_CORD], sprite[k.CHEST_BANDAGE] = sprite[k.INV_BANDAGE], sprite[k.CHEST_LOCK] = sprite[k.INV_LOCK], sprite[k.CHEST_LOCKPICK] = sprite[k.INV_LOCKPICK], sprite[k.CHEST_RESURRECTION] = sprite[k.INV_RESURRECTION], sprite[k.CHEST_DRAGON_HEART] = sprite[k.INV_DRAGON_HEART], sprite[k.CHEST_LAVA_HEART] = sprite[k.INV_LAVA_HEART], sprite[k.CHEST_DRAGON_SWORD] = sprite[k.INV_DRAGON_SWORD], sprite[k.CHEST_TOTEM] = sprite[k.INV_TOTEM], sprite[k.CHEST_DOOR_WOOD_CLOSE] = sprite[k.INV_DOOR_WOOD_CLOSE], sprite[k.CHEST_CHEST] = sprite[k.INV_CHEST], sprite[k.CHEST_SLOT] = L(function (e, i, t) {
                    var r = document.createElement("canvas"),
                        n = r.getContext("2d");
                    return r.width = 118 * e, r.height = 129 * e, n.save(), n.translate(90 * e, 90 * e), ge(n, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e), n.restore(), Ce(n, t[0], t[1], 4), n.save(), ge(n, 30 * e, 115 * e, 60 * e, 5 * e, 15 * e), n.restore(), Ce(n, t[2], t[3], 4), n.save(), ge(n, 50 * e, 117 * e, 20 * e, 10 * e, 15 * e), n.restore(), Ce(n, t[2]), r
                }(.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"])), sprite[k.CHEST_PLUS] = ri(.5, [{
                    f: gt,
                    x: 0,
                    y: 2,
                    a: 1,
                    r: 0,
                    c: ["#ffffff"]
                }], .16, ["#c4a23a", "#d0ad41", "#b89733"], .9), sprite[k.CHEST_STONE_SPIKE] = sprite[k.INV_STONE_SPIKE], sprite[k.CHEST_GOLD_SPIKE] = sprite[k.INV_GOLD_SPIKE], sprite[k.CHEST_DIAMOND_SPIKE] = sprite[k.INV_DIAMOND_SPIKE], sprite[k.CHEST_AMETHYST_SPIKE] = sprite[k.INV_AMETHYST_SPIKE], sprite[k.CHEST_BAG] = sprite[k.INV_BAG], sprite[k.CHEST_SPECIAL_FUR] = sprite[k.INV_SPECIAL_FUR], sprite[k.CHEST_SPECIAL_FUR_2] = sprite[k.INV_SPECIAL_FUR_2], sprite[k.CHEST_FUR] = sprite[k.INV_FUR], sprite[k.CHEST_KRAKEN_SKIN] = sprite[k.INV_KRAKEN_SKIN], sprite[k.CHEST_FUR_WOLF] = sprite[k.INV_FUR_WOLF], sprite[k.CHEST_FUR_BOAR] = sprite[k.INV_FUR_BOAR], sprite[k.CHEST_FUR_WINTER] = sprite[k.INV_FUR_WINTER], sprite[k.CHEST_EARMUFFS] = sprite[k.INV_EARMUFFS], sprite[k.CHEST_CAP_SCARF] = sprite[k.INV_CAP_SCARF], sprite[k.CHEST_DOOR_STONE_CLOSE] = sprite[k.INV_DOOR_STONE_CLOSE], sprite[k.CHEST_DOOR_GOLD_CLOSE] = sprite[k.INV_DOOR_GOLD_CLOSE], sprite[k.CHEST_DOOR_DIAMOND_CLOSE] = sprite[k.INV_DOOR_DIAMOND_CLOSE], sprite[k.CHEST_DOOR_AMETHYST_CLOSE] = sprite[k.INV_DOOR_AMETHYST_CLOSE], sprite[k.CHEST_COAT] = sprite[k.INV_COAT], sprite[k.CHEST_WOOD_SPEAR] = sprite[k.INV_WOOD_SPEAR], sprite[k.CHEST_SPEAR] = sprite[k.INV_SPEAR], sprite[k.CHEST_GOLD_SPEAR] = sprite[k.INV_GOLD_SPEAR], sprite[k.CHEST_DIAMOND_SPEAR] = sprite[k.INV_DIAMOND_SPEAR], sprite[k.CHEST_AMETHYST_SPEAR] = sprite[k.INV_AMETHYST_SPEAR], sprite[k.CHEST_DRAGON_SPEAR] = sprite[k.INV_DRAGON_SPEAR], sprite[k.CHEST_SUPER_HAMMER] = sprite[k.INV_SUPER_HAMMER], sprite[k.CHEST_SPANNER] = sprite[k.INV_SPANNER], sprite[k.CHEST_HAMMER] = sprite[k.INV_HAMMER], sprite[k.CHEST_HAMMER_GOLD] = sprite[k.INV_HAMMER_GOLD], sprite[k.CHEST_HAMMER_DIAMOND] = sprite[k.INV_HAMMER_DIAMOND], sprite[k.CHEST_HAMMER_AMETHYST] = sprite[k.INV_HAMMER_AMETHYST], sprite[k.CHEST_FURNACE] = sprite[k.INV_FURNACE], sprite[k.CHEST_BREAD_OVEN] = sprite[k.INV_BREAD_OVEN], sprite[k.CHEST_EXPLORER_HAT] = sprite[k.INV_EXPLORER_HAT], sprite[k.CHEST_STONE_HELMET] = sprite[k.INV_STONE_HELMET], sprite[k.CHEST_GOLD_HELMET] = sprite[k.INV_GOLD_HELMET], sprite[k.CHEST_DIAMOND_HELMET] = sprite[k.INV_DIAMOND_HELMET], sprite[k.CHEST_AMETHYST_HELMET] = sprite[k.INV_AMETHYST_HELMET], sprite[k.CHEST_DRAGON_HELMET] = sprite[k.INV_DRAGON_HELMET], sprite[k.CHEST_BOOK] = sprite[k.INV_BOOK], sprite[k.CHEST_PAPER] = sprite[k.INV_PAPER], sprite[k.CHEST_AMETHYST] = sprite[k.INV_AMETHYST], sprite[k.CHEST_BRIDGE] = sprite[k.INV_BRIDGE], sprite[k.CHEST_ROOF] = sprite[k.INV_ROOF], sprite[k.CHEST_PLOT] = sprite[k.INV_PLOT], sprite[k.CHEST_SAND] = sprite[k.INV_SAND], sprite[k.CHEST_BREAD] = sprite[k.INV_BREAD], sprite[k.CHEST_ICE] = sprite[k.INV_ICE], sprite[k.CHEST_GROUND] = sprite[k.INV_GROUND], sprite[k.CHEST_BOTTLE_FULL] = sprite[k.INV_BOTTLE_FULL], sprite[k.CHEST_BOTTLE_EMPTY] = sprite[k.INV_BOTTLE_EMPTY], sprite[k.CHEST_WATERING_CAN] = sprite[k.INV_WATERING_CAN], sprite[k.CHEST_FLOUR] = sprite[k.INV_FLOUR], sprite[k.CHEST_COOKIE] = sprite[k.INV_COOKIE], sprite[k.CHEST_CANDY] = sprite[k.INV_CANDY], sprite[k.CHEST_FERRERO] = sprite[k.INV_FERRERO], sprite[k.CHEST_SUPER_DIVING_SUIT] = sprite[k.INV_SUPER_DIVING_SUIT], sprite[k.CHEST_DIVING_MASK] = sprite[k.INV_DIVING_MASK], sprite[k.CHEST_WATERING_CAN_FULL] = sprite[k.INV_WATERING_CAN_FULL], sprite[k.CHEST_CAKE] = sprite[k.INV_CAKE], sprite[k.CHEST_CRAB_STICK] = sprite[k.INV_CRAB_STICK], sprite[k.CHEST_FOODFISH] = sprite[k.INV_FOODFISH], sprite[k.CHEST_FOODFISH_COOKED] = sprite[k.INV_FOODFISH_COOKED], sprite[k.CHEST_SCALES] = sprite[k.INV_SCALES], sprite[k.CHEST_SANDWICH] = sprite[k.INV_SANDWICH], sprite[k.CHEST_CROWN_GREEN] = sprite[k.INV_CROWN_GREEN], sprite[k.CHEST_GEMME_GREEN] = sprite[k.INV_GEMME_GREEN], sprite[k.CHEST_CROWN_ORANGE] = sprite[k.INV_CROWN_ORANGE], sprite[k.CHEST_GEMME_ORANGE] = sprite[k.INV_GEMME_ORANGE], sprite[k.CHEST_CROWN_BLUE] = sprite[k.INV_CROWN_BLUE], sprite[k.CHEST_GEMME_BLUE] = sprite[k.INV_GEMME_BLUE], sprite[k.CHEST_HOOD] = sprite[k.INV_HOOD], sprite[k.CHEST_PEASANT] = sprite[k.INV_PEASANT], sprite[k.CHEST_WINTER_PEASANT] = sprite[k.INV_WINTER_PEASANT], sprite[k.CHEST_WINTER_HOOD] = sprite[k.INV_WINTER_HOOD], sprite[k.CHEST_BUCKET_EMPTY] = sprite[k.INV_BUCKET_EMPTY], sprite[k.CHEST_BUCKET_FULL] = sprite[k.INV_BUCKET_FULL], sprite[k.CHEST_WELL] = sprite[k.INV_WELL], sprite[k.CHEST_SIGN] = sprite[k.INV_SIGN], sprite[k.CHEST_PUMPKIN_SEED] = sprite[k.INV_PUMPKIN_SEED], sprite[k.CHEST_GARLIC_SEED] = sprite[k.INV_GARLIC_SEED], sprite[k.CHEST_THORNBUSH_SEED] = sprite[k.INV_THORNBUSH_SEED], sprite[k.CHEST_WOOD_HELMET] = sprite[k.INV_WOOD_HELMET]
            }(), sprite[k.BUBBLES] = [], sprite[k.BUBBLES][k.DAY] = [], sprite[k.BUBBLES][k.NIGHT] = [];
        for (var i = 0; i < k.BUBBLES_SIZES; i++) sprite[k.BUBBLES][k.DAY].push(L(ki(1, 4 + i, "#59B8CE"))), sprite[k.BUBBLES][k.NIGHT].push(L(ki(1, 4 + i, "#90DDD9")));
        sprite[k.FLAKES] = [], sprite[k.FLAKES][k.DAY] = [], sprite[k.FLAKES][k.NIGHT] = [];
        for (i = 0; i < k.FLAKES_SIZES; i++) sprite[k.FLAKES][k.DAY].push(L(ki(1, 4 + i, "#fff"))), sprite[k.FLAKES][k.NIGHT].push(L(ki(1, 4 + i, "#fff")));
        sprite[k.DESERT] = [], sprite[k.DESERT][k.DAY] = [], sprite[k.DESERT][k.NIGHT] = [];
        for (i = 0; i < k.FLAKES_SIZES; i++) sprite[k.DESERT][k.DAY].push(L(ki(1, 6 + i, "#DDCD8A"))), sprite[k.DESERT][k.NIGHT].push(L(ki(1, 6 + i, "#155E57")));
        sprite[k.ASHES] = [], sprite[k.ASHES][k.DAY] = [], sprite[k.ASHES][k.NIGHT] = [];
        for (i = 0; i < k.ASHES_SIZES; i++) sprite[k.ASHES][k.DAY].push(L(ki(1, 4 + i, "#353326"))), sprite[k.ASHES][k.NIGHT].push(L(ki(1, 4 + i, "#1D2526")));
        sprite[k.GARLAND] = [], sprite[k.GARLAND][k.DAY] = L(Ge(1.5, 0, ["#ee71a9"])), sprite[k.GARLAND][k.NIGHT] = L(Ge(1.5, 0, ["#ee71a9"])), sprite[k.GARLANDS] = [sprite[k.GARLAND]], sprite[k.GARLANDS][1] = [], sprite[k.GARLANDS][2] = [], sprite[k.GARLANDS][3] = [], sprite[k.GARLANDS][4] = [], sprite[k.GARLANDS][1][k.DAY] = L(Ge(1.5, 0, ["#e2d63b"])), sprite[k.GARLANDS][1][k.NIGHT] = L(Ge(1.5, 0, ["#e2d63b"])), sprite[k.GARLANDS][2][k.DAY] = L(Ge(1.5, 0, ["#309cbd"])), sprite[k.GARLANDS][2][k.NIGHT] = L(Ge(1.5, 0, ["#309cbd"])), sprite[k.GARLANDS][3][k.DAY] = L(Ge(1.5, 0, ["#cd232d"])), sprite[k.GARLANDS][3][k.NIGHT] = L(Ge(1.5, 0, ["#cd232d"])), sprite[k.GARLANDS][4][k.DAY] = L(Ge(1.5, 0, ["#42b672"])), sprite[k.GARLANDS][4][k.NIGHT] = L(Ge(1.5, 0, ["#42b672"])), _.gup("cti", window.location.href) ? document.getElementById("version").innerHTML += "[CTI]" : L = function (e) {
            return e.loaded = 1, e
        }, sprite[k.MARKET_BGD] = L(function () {
            var e = document.createElement("canvas"),
                i = e.getContext("2d");
            e.width = 460, e.height = 220, i.fillStyle = "#3a2a0d", i.fillRect(0, 0, e.width, e.height), i.lineWidth = 4, i.beginPath(), i.strokeStyle = "#513810";
            for (var t = 20; t < 220; t += 20) i.moveTo(0, t), i.lineTo(460, t), i.closePath(), i.stroke();
            return e
        }()), sprite[k.STONES] = [], sprite[k.STONES][k.DAY] = [], sprite[k.STONES][k.NIGHT] = [], sprite[k.STONES][k.DAY].push(L(Bi(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"]))), sprite[k.STONES][k.DAY].push(L(Bi(.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"]))), sprite[k.STONES][k.DAY].push(L(Bi(.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"]))), sprite[k.STONES][k.NIGHT].push(L(Bi(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"]))), sprite[k.STONES][k.NIGHT].push(L(Bi(.9, 0, ["#0a2728", "#3c8e88", "#40a39b"]))), sprite[k.STONES][k.NIGHT].push(L(Bi(.6, 0, ["#0a2728", "#3c8e88", "#40a39b"]))), sprite[k.GOLD] = [], sprite[k.GOLD][k.DAY] = [], sprite[k.GOLD][k.NIGHT] = [], sprite[k.GOLD][k.DAY].push(L(Vi(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[k.GOLD][k.DAY].push(L(Vi(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[k.GOLD][k.DAY].push(L(Vi(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[k.GOLD][k.NIGHT].push(L(Vi(1.5, 0, ["#030d14", "#1b4444", "#16605a"]))), sprite[k.GOLD][k.NIGHT].push(L(Vi(1.3, 0, ["#030d14", "#1b4444", "#16605a"]))), sprite[k.GOLD][k.NIGHT].push(L(Vi(1.1, 0, ["#030d14", "#1b4444", "#16605a"]))), sprite[k.DIAMOND] = [], sprite[k.DIAMOND][k.DAY] = [], sprite[k.DIAMOND][k.NIGHT] = [], sprite[k.DIAMOND][k.DAY].push(L(Ki(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"]))), sprite[k.DIAMOND][k.DAY].push(L(Ki(.9, 0, ["#232828", "#3fc9c9", "#74ede6"]))), sprite[k.DIAMOND][k.DAY].push(L(Ki(.7, 0, ["#232828", "#3fc9c9", "#74ede6"]))), sprite[k.DIAMOND][k.NIGHT].push(L(Ki(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"]))), sprite[k.DIAMOND][k.NIGHT].push(L(Ki(.9, 0, ["#030d14", "#2b9390", "#57bcb5"]))), sprite[k.DIAMOND][k.NIGHT].push(L(Ki(.7, 0, ["#030d14", "#2b9390", "#57bcb5"]))), sprite[k.ALOE_VERA] = [], sprite[k.ALOE_VERA][k.DAY] = IMAGES.ALOE_VERAD, sprite[k.ALOE_VERA][k.NIGHT] = IMAGES.ALOE_VERAN, sprite[k.HAND_SHADOW] = [], sprite[k.HAND_SHADOW][k.DAY] = L(Ii(.6, ["#0d1b1c"])), sprite[k.HAND_SHADOW][k.NIGHT] = L(Ii(.6, ["#030d14"])), sprite[k.GLOVES_HOOD] = [], sprite[k.GLOVES_HOOD][k.DAY] = L(di(.6, ["#2a2938", "#242330"])), sprite[k.GLOVES_HOOD][k.NIGHT] = L(di(.6, ["#1b1e30", "#161921"])), sprite[k.ZOMBIE_BODY] = [], sprite[k.ZOMBIE_BODY][k.DAY] = L(ye(.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"])), sprite[k.ZOMBIE_BODY][k.NIGHT] = L(ye(.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"])), sprite[k.ZOMBIE_HEAD] = [], sprite[k.ZOMBIE_HEAD][k.DAY] = L(Pe(.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"])), sprite[k.ZOMBIE_HEAD][k.NIGHT] = L(Pe(.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"])), sprite[k.ZOMBIE_HAND] = [], sprite[k.ZOMBIE_HAND][k.DAY] = L(Ai(.4, ["#0d1b1c", "#759e6e", "#55604b"])), sprite[k.ZOMBIE_HAND][k.NIGHT] = L(Ai(.4, ["#030d14", "#11635e", "#02373e"])), sprite[k.ZOMBIE_HURT] = L(ze(.6, ["#BB0000"])), sprite[k.ZOMBIE_HUNGER] = L(ze(.6, ["#DBE71C"])), sprite[k.ZOMBIE_HEAL] = L(ze(.6, ["#00BB00"])), sprite[k.TREE] = [], sprite[k.TREE][k.DAY] = [], sprite[k.TREE][k.NIGHT] = [], sprite[k.TREE][k.DAY].push(hi(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], !1, 0)), sprite[k.TREE][k.DAY].push(hi(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], !0, 0)), sprite[k.TREE][k.DAY].push(hi(.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], !1, 0)), sprite[k.TREE][k.DAY].push(hi(.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], !0, 0)), sprite[k.TREE][k.DAY].push(hi(.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], !1, 0)), sprite[k.TREE][k.DAY].push(hi(.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], !0, 0)), sprite[k.TREE][k.NIGHT].push(hi(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], !1, 0)), sprite[k.TREE][k.NIGHT].push(hi(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], !0, 0)), sprite[k.TREE][k.NIGHT].push(hi(.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], !1, 0)), sprite[k.TREE][k.NIGHT].push(hi(.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], !0, 0)), sprite[k.TREE][k.NIGHT].push(hi(.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], !1, 0)), sprite[k.TREE][k.NIGHT].push(hi(.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], !0, 0)), sprite[k.TREE_BRANCH] = [], sprite[k.TREE_BRANCH][k.DAY] = [], sprite[k.TREE_BRANCH][k.NIGHT] = [], sprite[k.TREE_BRANCH][k.DAY].push(L(li(Oi(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], !1), sprite[k.TREE][k.DAY][0]))), sprite[k.TREE_BRANCH][k.DAY].push(L(li(Oi(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], !0), sprite[k.TREE][k.DAY][1]))), sprite[k.TREE_BRANCH][k.NIGHT].push(L(li(Oi(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], !1), sprite[k.TREE][k.NIGHT][0]))), sprite[k.TREE_BRANCH][k.NIGHT].push(L(li(Oi(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], !0), sprite[k.TREE][k.NIGHT][1]))), sprite[k.TREE_BRANCH][k.DAY].push(L(li(Oi(.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], !1), sprite[k.TREE][k.DAY][2]))), sprite[k.TREE_BRANCH][k.DAY].push(L(li(Oi(.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], !0), sprite[k.TREE][k.DAY][2]))), sprite[k.TREE_BRANCH][k.NIGHT].push(L(li(Oi(.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], !1), sprite[k.TREE][k.NIGHT][2]))), sprite[k.TREE_BRANCH][k.NIGHT].push(L(li(Oi(.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], !0), sprite[k.TREE][k.NIGHT][3]))), sprite[k.TREE][k.DAY][5] = L(sprite[k.TREE][k.DAY][5]), sprite[k.TREE][k.DAY][4] = L(sprite[k.TREE][k.DAY][4]), sprite[k.TREE][k.DAY][3] = L(sprite[k.TREE][k.DAY][3]), sprite[k.TREE][k.DAY][2] = L(sprite[k.TREE][k.DAY][2]), sprite[k.TREE][k.DAY][1] = L(sprite[k.TREE][k.DAY][1]), sprite[k.TREE][k.DAY][0] = L(sprite[k.TREE][k.DAY][0]), sprite[k.TREE][k.NIGHT][5] = L(sprite[k.TREE][k.NIGHT][5]), sprite[k.TREE][k.NIGHT][4] = L(sprite[k.TREE][k.NIGHT][4]), sprite[k.TREE][k.NIGHT][3] = L(sprite[k.TREE][k.NIGHT][3]), sprite[k.TREE][k.NIGHT][2] = L(sprite[k.TREE][k.NIGHT][2]), sprite[k.TREE][k.NIGHT][1] = L(sprite[k.TREE][k.NIGHT][1]), sprite[k.TREE][k.NIGHT][0] = L(sprite[k.TREE][k.NIGHT][0]), sprite[k.PICK_WOOD] = [], sprite[k.PICK_WOOD][k.DAY] = L(Se(4, Ri(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]))), sprite[k.PICK_WOOD][k.NIGHT] = L(Se(4, Ri(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"]))), sprite[k.PICK] = [], sprite[k.PICK][k.DAY] = L(Se(4, Ri(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))), sprite[k.PICK][k.NIGHT] = L(Se(4, Ri(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"]))), sprite[k.PICK_GOLD] = [], sprite[k.PICK_GOLD][k.DAY] = L(Se(4, Ri(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))), sprite[k.PICK_GOLD][k.NIGHT] = L(Se(4, Ri(.75, !0, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"]))), sprite[k.PICK_DIAMOND] = [], sprite[k.PICK_DIAMOND][k.DAY] = L(Se(4, Ri(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))), sprite[k.PICK_DIAMOND][k.NIGHT] = L(Se(4, Ri(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))), sprite[k.PICK_AMETHYST] = [], sprite[k.PICK_AMETHYST][k.DAY] = L(Se(4, Ri(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))), sprite[k.PICK_AMETHYST][k.NIGHT] = L(Se(4, Ri(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))), sprite[k.PIRATE_SWORD] = [], sprite[k.PIRATE_SWORD][k.DAY] = L(Se(3, Ci(.17, !0, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]))), sprite[k.PIRATE_SWORD][k.NIGHT] = L(Se(3, Ci(.17, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"]))), sprite[k.SUGAR_CAN] = [], sprite[k.SUGAR_CAN][k.DAY] = L(Se(3, Li(.32, !0, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]))), sprite[k.SUGAR_CAN][k.NIGHT] = L(Se(3, Li(.42, !0, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"]))), sprite[k.SWORD_WOOD] = [], sprite[k.SWORD_WOOD][k.DAY] = L(Se(3, ci(.4, !0, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"]))), sprite[k.SWORD_WOOD][k.NIGHT] = L(Se(3, ci(.4, !0, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"]))), sprite[k.SWORD] = [], sprite[k.SWORD][k.DAY] = L(Se(3, Ni(.4, !0, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]))), sprite[k.SWORD][k.NIGHT] = L(Se(3, Ni(.4, !0, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"]))), sprite[k.SWORD_GOLD] = [], sprite[k.SWORD_GOLD][k.DAY] = L(Se(3, vi(.4, !0, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]))), sprite[k.SWORD_GOLD][k.NIGHT] = L(Se(3, vi(.4, !0, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"]))), sprite[k.SWORD_DIAMOND] = [], sprite[k.SWORD_DIAMOND][k.DAY] = L(Se(3, Mi(.4, !0, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]))), sprite[k.SWORD_DIAMOND][k.NIGHT] = L(Se(3, Mi(.4, !0, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"]))), sprite[k.SWORD_AMETHYST] = [], sprite[k.SWORD_AMETHYST][k.DAY] = L(Se(3, Gi(.4, !0, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]))), sprite[k.SWORD_AMETHYST][k.NIGHT] = L(Se(3, Gi(.4, !0, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"]))), sprite[k.HERB] = [], sprite[k.HERB][k.DAY] = [], sprite[k.HERB][k.NIGHT] = [], sprite[k.HERB][k.DAY].push(L(Fi(.9, 0, ["#0d4f35"], 0))), sprite[k.HERB][k.DAY].push(L(Fi(.9, 0, ["#0d4f35"], 1))), sprite[k.HERB][k.DAY].push(L(Fi(.9, 0, ["#0d4f35"], 2))), sprite[k.HERB][k.NIGHT].push(L(Fi(.9, 0, ["#053339"], 0))), sprite[k.HERB][k.NIGHT].push(L(Fi(.9, 0, ["#053339"], 1))), sprite[k.HERB][k.NIGHT].push(L(Fi(.9, 0, ["#053339"], 2))), sprite[k.HERB][k.DAY].push(L(Yi(.8, ["#241301", "#ba6b0e", "#6d3f04"]))), sprite[k.HERB][k.DAY].push(L(Yi(.8, ["#292002", "#ba930e", "#6d5704"]))), sprite[k.HERB][k.NIGHT].push(L(Yi(.9, ["#052919", "#0a4738", "#06321f"]))), sprite[k.HERB][k.NIGHT].push(L(Yi(.8, ["#052918", "#08491c", "#063417"]))), sprite[k.SIGN] = [], sprite[k.SIGN][k.DAY] = L(Se(Math.PI / 2, ft(.25, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]))), sprite[k.SIGN][k.NIGHT] = L(Se(Math.PI / 2, ft(.25, !0, ["#030d14", "#082b22", "#0a2f2b", "#072824"]))), sprite[k.SIGN_BUTTON] = [], sprite[k.SIGN_BUTTON].push(L(Ht(.25, ["#44301b", "#57442a", "#523e26"], 0))), sprite[k.SIGN_BUTTON].push(L(Ht(.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1))), sprite[k.SIGN_BUTTON].push(L(Ht(.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2))), sprite[k.SYMBOLS] = [], sprite[k.SYMBOLS][k.DAY] = [], sprite[k.SYMBOLS][k.NIGHT] = [], sprite[k.SYMBOLS][k.DAY].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1)))), sprite[k.SYMBOLS][k.NIGHT].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1)))), sprite[k.SYMBOLS][k.DAY].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2)))), sprite[k.SYMBOLS][k.NIGHT].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2)))), sprite[k.SYMBOLS][k.DAY].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3)))), sprite[k.SYMBOLS][k.NIGHT].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3)))), sprite[k.SYMBOLS][k.DAY].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4)))), sprite[k.SYMBOLS][k.NIGHT].push(L(Se(Math.PI / 2, Pt(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4)))), sprite[k.PLANT] = [], sprite[k.PLANT][k.DAY] = [L(wi(1.2, !0, ["#352b10", "#80500b", "#7c4908"]))], sprite[k.PLANT][k.NIGHT] = [L(wi(1.2, !0, ["#030d14", "#0a3429", "#0a2f2b"]))], sprite[k.DRIED_PLANT] = [], sprite[k.DRIED_PLANT][k.DAY] = L(wi(.8, !0, ["#0e3022", "#68622D", "#665329"])), sprite[k.DRIED_PLANT][k.NIGHT] = L(wi(.8, !0, ["#030d14", "#0F3A24", "#083326"])), sprite[k.PUMPKIN] = [], sprite[k.PUMPKIN][k.DAY] = L(Wr(.5, !0, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"])), sprite[k.PUMPKIN][k.NIGHT] = L(Wr(.5, !0, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"])), sprite[k.GARLIC] = [], sprite[k.GARLIC][k.DAY] = L(ve(.5, !0, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"])), sprite[k.GARLIC][k.NIGHT] = L(ve(.5, !0, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"])), sprite[k.THORNBUSH] = [], sprite[k.THORNBUSH][k.DAY] = L(Vr(.5, !0, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"])), sprite[k.THORNBUSH][k.NIGHT] = L(Vr(.5, !0, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"])), sprite[k.PLANT_MINI] = [], sprite[k.PLANT_MINI][k.DAY] = L(wi(.8, !0, ["#1b170c", "#0b8052", "#077b49"])), sprite[k.PLANT_MINI][k.NIGHT] = L(wi(.8, !0, ["#030d14", "#084442", "#0a4049"])), sprite[k.DRIED_PUMPKIN] = [], sprite[k.DRIED_PUMPKIN][k.DAY] = L(Wr(.5, !0, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"])), sprite[k.DRIED_PUMPKIN][k.NIGHT] = L(Wr(.5, !0, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"])), sprite[k.DRIED_GARLIC] = [], sprite[k.DRIED_GARLIC][k.DAY] = L(ve(.5, !0, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"])), sprite[k.DRIED_GARLIC][k.NIGHT] = L(ve(.5, !0, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"])), sprite[k.DRIED_THORNBUSH] = [], sprite[k.DRIED_THORNBUSH][k.DAY] = L(Vr(.5, !0, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"])), sprite[k.DRIED_THORNBUSH][k.NIGHT] = L(Vr(.5, !0, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"])), sprite[k.GIFT] = [], sprite[k.GIFT][k.DAY] = L(en(.45, !0, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"])), sprite[k.GIFT][k.NIGHT] = L(en(.45, !0, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"])), sprite[k.HURT_GIFT] = L(en(.65, !0, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"])), sprite[k.FRUIT] = [], sprite[k.FRUIT][k.DAY] = L(Ui(1.4, 0, ["#3d2a6e", "#8255b5"])), sprite[k.FRUIT][k.NIGHT] = L(Ui(1.4, 0, ["#26124f", "#524082"])), sprite[k.FIRE] = [], sprite[k.FIRE][k.DAY] = L(ai(.9, 0, ["#efd435", "#ec8d35", "#e96132"])), sprite[k.FIRE][k.NIGHT] = L(ai(.9, 0, ["#efdb7b", "#efe854", "#e8ef62"])), sprite[k.BIG_FIRE_WOOD] = [], sprite[k.BIG_FIRE_WOOD][k.DAY] = L(ni(.9, 0, ["#4d2d14", "#432516"])), sprite[k.BIG_FIRE_WOOD][k.NIGHT] = L(ni(.9, 0, ["#282404", "#0a0a01"])), sprite[k.WOOD_FIRE] = [], sprite[k.WOOD_FIRE][k.DAY] = L(oi(.9, 0, ["#4d2d14", "#432516"])), sprite[k.WOOD_FIRE][k.NIGHT] = L(oi(.9, 0, ["#282404", "#0a0a01"])), sprite[k.HALO_FIRE] = [], sprite[k.HALO_FIRE][k.DAY] = L(_i(.9, 0, ["#efd435"])), sprite[k.HALO_FIRE][k.NIGHT] = L(_i(.9, 0, ["#fffabb"])), sprite[k.GROUND_FIRE] = [], sprite[k.GROUND_FIRE][k.DAY] = L(si(.9, 0, ["#efd435"])), sprite[k.GROUND_FIRE][k.NIGHT] = L(si(.9, 0, ["#fffabb"])), sprite[k.HALO_FIRE_PUMPKIN] = [], sprite[k.HALO_FIRE_PUMPKIN][k.DAY] = L(_i(.9, 0, ["#efd435"])), sprite[k.HALO_FIRE_PUMPKIN][k.NIGHT] = L(_i(.9, 0, ["rgba(255, 84, 0, 1)"])), sprite[k.GROUND_FIRE_PUMPKIN] = [], sprite[k.GROUND_FIRE_PUMPKIN][k.DAY] = L(si(.9, 0, ["#efd435"])), sprite[k.GROUND_FIRE_PUMPKIN][k.NIGHT] = L(si(.9, 0, ["#ff5704"])), sprite[k.GEAR] = L(we(1, "#ffffff")), sprite[k.GEAR2] = L(we(1.5, "#ffffff")), sprite[k.YOUR_SCORE] = L(zi(1, "Your score:", 15, "#FFF")), sprite[k.WINDMILL_CASES] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 243 * e, t.height = 172 * e, Ne(r, 119.5 * e, 140.125 * e, 19 * e), Ce(r, void 0, i[1], 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(36.5 * e, 20.125 * e), r.bezierCurveTo(119.5 * e, 20.625 * e, 119.5 * e, 20.625 * e, 202.5 * e, 21.125 * e), r.bezierCurveTo(214.5 * e, 22.125 * e, 216.5 * e, 26.125 * e, 217.5 * e, 35.125 * e), r.bezierCurveTo(221 * e, 76.125 * e, 221 * e, 76.125 * e, 224.5 * e, 117.125 * e), r.bezierCurveTo(225.5 * e, 127.125 * e, 221.5 * e, 131.125 * e, 210.5 * e, 132.125 * e), r.bezierCurveTo(117.5 * e, 132.125 * e, 117.5 * e, 132.125 * e, 24.5 * e, 132.125 * e), r.bezierCurveTo(14.5 * e, 131.125 * e, 13.5 * e, 126.125 * e, 16.5 * e, 111.125 * e), r.bezierCurveTo(19.5 * e, 73.125 * e, 19.5 * e, 73.125 * e, 22.5 * e, 35.125 * e), r.bezierCurveTo(23.5 * e, 23.125 * e, 29.5 * e, 21.125 * e, 36.5 * e, 20.125 * e), r.closePath(), Ce(r, i[0], i[1], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(15.5 * e, 138.625 * e), r.bezierCurveTo(120 * e, 138.625 * e, 120 * e, 138.625 * e, 224.5 * e, 138.625 * e), r.closePath(), Ce(r, void 0, i[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(13.5 * e, 131.625 * e), r.bezierCurveTo(119.5 * e, 131.625 * e, 119.5 * e, 131.625 * e, 225.5 * e, 131.625 * e), r.closePath(), Ce(r, void 0, i[3], 10 * e), Ne(r, 119.5 * e, 140.125 * e, 14.866068747318506 * e), Ce(r, i[4], i[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(106.5 * e, 146.625 * e), r.bezierCurveTo(116.5 * e, 137.625 * e, 118.5 * e, 136.625 * e, 123.5 * e, 138.625 * e), r.bezierCurveTo(131.5 * e, 145.625 * e, 133.5 * e, 148.625 * e, 127.5 * e, 152.625 * e), r.bezierCurveTo(115.5 * e, 158.625 * e, 111.5 * e, 153.625 * e, 106.5 * e, 147.625 * e), r.closePath(), Ce(r, i[6], i[7], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.5 * e, 146.625 * e), r.bezierCurveTo(116.5 * e, 159.625 * e, 124.5 * e, 156.625 * e, 132.5 * e, 146.625 * e), Ce(r, void 0, i[8], 5 * e), r.save(), r.translate(75.5 * e, 80.125 * e), ge(r, -39 * e, -40 * e, 78 * e, 78 * e, 10 * e), r.restore(), Ce(r, i[9]), r.save(), r.translate(167 * e, 80.125 * e), ge(r, -38.5 * e, -39 * e, 78 * e, 78 * e, 10 * e), r.restore(), Ce(r, i[9]), t
        }(.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"])), sprite[k.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES, sprite[k.WINDMILL] = [], sprite[k.WINDMILL][k.DAY] = L(Qe(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])), sprite[k.WINDMILL][k.NIGHT] = L(Qe(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])), sprite[k.WINDMILL_WINGS] = [], sprite[k.WINDMILL_WINGS][k.DAY] = L($e(2, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])), sprite[k.WINDMILL_WINGS][k.NIGHT] = L($e(2, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])), sprite[k.WINDMILL_HEAD] = [], sprite[k.WINDMILL_HEAD][k.DAY] = L(ei(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])), sprite[k.WINDMILL_HEAD][k.NIGHT] = L(ei(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])), sprite[k.WILD_WHEAT] = [], sprite[k.WILD_WHEAT][k.DAY] = L(Ze(2.2, 0, ["#A89F67", "#9E8456"])), sprite[k.WILD_WHEAT][k.NIGHT] = L(Ze(2.2, 0, ["#0B4049", "#08383D"])), sprite[k.DRIED_WHEAT] = [], sprite[k.DRIED_WHEAT][k.DAY] = L(Ze(2.2, 0, ["#68622D", "#665329"])), sprite[k.DRIED_WHEAT][k.NIGHT] = L(Ze(2.2, 0, ["#0F3A24", "#083326"])), sprite[k.WHEAT_MOB] = [], sprite[k.WHEAT_MOB][k.DAY] = L(yi(.8, 0, ["#A89F67", "#9E8456"])), sprite[k.WHEAT_MOB][k.NIGHT] = L(yi(.8, 0, ["#15514F", "#0F3F3D"])), sprite[k.PUMPKIN_SEED_MOB] = [], sprite[k.PUMPKIN_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#c67933", "#b17238"])), sprite[k.PUMPKIN_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#043c37", "#032b23"])), sprite[k.ALOE_VERA_SEED_MOB] = [], sprite[k.ALOE_VERA_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#3a8214", "#4a9c1e"])), sprite[k.ALOE_VERA_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#032d29", "#044640"])), sprite[k.GARLIC_SEED_MOB] = [], sprite[k.GARLIC_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#e8e8e8", "#bbbbbb"])), sprite[k.GARLIC_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#1c6161", "#07413f"])), sprite[k.THORNBUSH_SEED_MOB] = [], sprite[k.THORNBUSH_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#328a56", "#449573"])), sprite[k.THORNBUSH_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#043c37", "#032b23"])), sprite[k.CARROT_SEED_MOB] = [], sprite[k.CARROT_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#c98e2f", "#a36b11"])), sprite[k.CARROT_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#043c37", "#032b23"])), sprite[k.TOMATO_SEED_MOB] = [], sprite[k.TOMATO_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#b22419", "#99110e"])), sprite[k.TOMATO_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#04323c", "#03222b"])), sprite[k.WATERMELON_SEED_MOB] = [], sprite[k.WATERMELON_SEED_MOB][k.DAY] = L(yi(.8, 0, ["#13a56d", "#098a58"])), sprite[k.WATERMELON_SEED_MOB][k.NIGHT] = L(yi(.8, 0, ["#043c37", "#032b23"])), sprite[k.WINDMILL_WHEAT_SEED] = ri(1, [{
            f: Ze,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[k.BREAD_OVEN_WOOD] = ri(1, [{
            f: oi,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], .3, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[k.BREAD_OVEN_BREAD] = ri(1, [{
            f: pr,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], .15, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[k.EMPTY_SLOT] = ri(.9, [], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[k.PLANT_SEED] = [], sprite[k.PLANT_SEED][k.DAY] = L(Be(.9, 0, ["#7d613e", "#9e7e5a"])), sprite[k.PLANT_SEED][k.NIGHT] = L(Be(.9, 0, ["#084442", "#125e5a"])), sprite[k.WHEAT_SEED] = [], sprite[k.WHEAT_SEED][k.DAY] = L(Be(.9, 0, ["#9E8456", "#A89F67"])), sprite[k.WHEAT_SEED][k.NIGHT] = L(Be(.9, 0, ["#1b6f6a", "#0d4e4c"])), sprite[k.WHEAT_SEED_DRIED] = [], sprite[k.WHEAT_SEED_DRIED][k.DAY] = L(Be(.9, 0, ["#665329", "#68622D"])), sprite[k.WHEAT_SEED_DRIED][k.NIGHT] = L(Be(.9, 0, ["#083326", "#0F3A24"])), sprite[k.PLANT_PUMPKIN] = [], sprite[k.PLANT_PUMPKIN][k.DAY] = L(Be(.9, 0, ["#c67933", "#ec952d"])), sprite[k.PLANT_PUMPKIN][k.NIGHT] = L(Be(.9, 0, ["#0e6553", "#094437"])), sprite[k.PLANT_ALOE_VERA] = [], sprite[k.PLANT_ALOE_VERA][k.DAY] = L(Be(.9, 0, ["#375809", "#4b770e"])), sprite[k.PLANT_ALOE_VERA][k.NIGHT] = L(Be(.9, 0, ["#09542d", "#0d5d2f"])), sprite[k.PLANT_ALOE_VERA_DRIED] = [], sprite[k.PLANT_ALOE_VERA_DRIED][k.DAY] = L(Be(.9, 0, ["#585809", "#72770e"])), sprite[k.PLANT_ALOE_VERA_DRIED][k.NIGHT] = L(Be(.9, 0, ["#295209", "#305d0d"])), sprite[k.PLANT_GARLIC] = [], sprite[k.PLANT_GARLIC][k.DAY] = L(Be(.9, 0, ["#b9b094", "#e2d2c0"])), sprite[k.PLANT_GARLIC][k.NIGHT] = L(Be(.9, 0, ["#126366", "#0d484b"])), sprite[k.PLANT_THORNBUSH] = [], sprite[k.PLANT_THORNBUSH][k.DAY] = L(Be(.9, 0, ["#3f8662", "#30915d"])), sprite[k.PLANT_THORNBUSH][k.NIGHT] = L(Be(.9, 0, ["#0e6553", "#094437"])), sprite[k.PLANT_PUMPKIN_DRIED] = [], sprite[k.PLANT_PUMPKIN_DRIED][k.DAY] = L(Be(.9, 0, ["#c79153", "#dfa868"])), sprite[k.PLANT_PUMPKIN_DRIED][k.NIGHT] = L(Be(.9, 0, ["#073927", "#075040"])), sprite[k.PLANT_GARLIC_DRIED] = [], sprite[k.PLANT_GARLIC_DRIED][k.DAY] = L(Be(.9, 0, ["#768b5b", "#819984"])), sprite[k.PLANT_GARLIC_DRIED][k.NIGHT] = L(Be(.9, 0, ["#0c4540", "#0e5153"])), sprite[k.PLANT_THORNBUSH_DRIED] = [], sprite[k.PLANT_THORNBUSH_DRIED][k.DAY] = L(Be(.9, 0, ["#567465", "#627c6e"])), sprite[k.PLANT_THORNBUSH_DRIED][k.NIGHT] = L(Be(.9, 0, ["#073927", "#075040"])), sprite[k.PLANT_CARROT] = [], sprite[k.PLANT_CARROT][k.DAY] = L(Be(.9, 0, ["#996b3a", "#bf956b"])), sprite[k.PLANT_CARROT][k.NIGHT] = L(Be(.9, 0, ["#0e6553", "#094437"])), sprite[k.PLANT_CARROT_DRIED] = [], sprite[k.PLANT_CARROT_DRIED][k.DAY] = L(Be(.9, 0, ["#7a634a", "#a68f77"])), sprite[k.PLANT_CARROT_DRIED][k.NIGHT] = L(Be(.9, 0, ["#1e4d43", "#113c32"])), sprite[k.PLANT_TOMATO] = [], sprite[k.PLANT_TOMATO][k.DAY] = L(Be(.9, 0, ["#99403c", "#bc796c"])), sprite[k.PLANT_TOMATO][k.NIGHT] = L(Be(.9, 0, ["#1e434d", "#11303c"])), sprite[k.PLANT_TOMATO_DRIED] = [], sprite[k.PLANT_TOMATO_DRIED][k.DAY] = L(Be(.9, 0, ["#88504e", "#b3857c"])), sprite[k.PLANT_TOMATO_DRIED][k.NIGHT] = L(Be(.9, 0, ["#253b41", "#162930"])), sprite[k.PLANT_WATERMELON] = [], sprite[k.PLANT_WATERMELON][k.DAY] = L(Be(.9, 0, ["#0f8870", "#23af93"])), sprite[k.PLANT_WATERMELON][k.NIGHT] = L(Be(.9, 0, ["#032829", "#083233"])), sprite[k.PLANT_WATERMELON_DRIED] = [], sprite[k.PLANT_WATERMELON_DRIED][k.DAY] = L(Be(.9, 0, ["#618a20", "#84a74e"])), sprite[k.PLANT_WATERMELON_DRIED][k.NIGHT] = L(Be(.9, 0, ["#1f4632", "#335d47"])), sprite[k.WORKBENCH] = [], sprite[k.WORKBENCH][k.DAY] = L(Ye(1.2, !0, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"])), sprite[k.WORKBENCH][k.NIGHT] = L(Ye(1.2, !0, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"])), sprite[k.WALL] = [], sprite[k.WALL][k.DAY] = L(Zi(1, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])), sprite[k.WALL][k.NIGHT] = L(Zi(1, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])), sprite[k.DIAMOND_WALL] = [], sprite[k.DIAMOND_WALL][k.DAY] = L(Qi(1, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])), sprite[k.DIAMOND_WALL][k.NIGHT] = L(Qi(1, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])), sprite[k.AMETHYST_WALL] = [], sprite[k.AMETHYST_WALL][k.DAY] = L(it(1, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])), sprite[k.AMETHYST_WALL][k.NIGHT] = L(it(1, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])), sprite[k.STONE_WALL] = [], sprite[k.STONE_WALL][k.DAY] = L(it(1, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])), sprite[k.STONE_WALL][k.NIGHT] = L(it(1, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])), sprite[k.GOLD_WALL] = [], sprite[k.GOLD_WALL][k.DAY] = L(tt(1, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])), sprite[k.GOLD_WALL][k.NIGHT] = L(tt(1, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])), sprite[k.SPIKE] = [], sprite[k.SPIKE][k.DAY] = L(pt(.8, !0, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])), sprite[k.SPIKE][k.NIGHT] = L(pt(.8, !0, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])), sprite[k.GOLD_SPIKE] = [], sprite[k.GOLD_SPIKE][k.DAY] = L(vt(.8, !0, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])), sprite[k.GOLD_SPIKE][k.NIGHT] = L(vt(.8, !0, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])), sprite[k.DIAMOND_SPIKE] = [], sprite[k.DIAMOND_SPIKE][k.DAY] = L(Mt(.8, !0, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])), sprite[k.DIAMOND_SPIKE][k.NIGHT] = L(Mt(.8, !0, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])), sprite[k.STONE_SPIKE] = [], sprite[k.STONE_SPIKE][k.DAY] = L(mt(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])), sprite[k.STONE_SPIKE][k.NIGHT] = L(mt(.8, !0, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])), sprite[k.AMETHYST_SPIKE] = [], sprite[k.AMETHYST_SPIKE][k.DAY] = L(mt(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])), sprite[k.AMETHYST_SPIKE][k.NIGHT] = L(mt(.8, !0, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])), sprite[k.DOOR_WOOD_CLOSE] = [], sprite[k.DOOR_WOOD_CLOSE][k.DAY] = L(rt(1.5, !0, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"])), sprite[k.DOOR_WOOD_CLOSE][k.NIGHT] = L(rt(1.5, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])), sprite[k.DOOR_WOOD_OPEN] = [], sprite[k.DOOR_WOOD_OPEN][k.DAY] = L(rt(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[k.DOOR_WOOD_OPEN][k.NIGHT] = L(rt(1, !1, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"])), sprite[k.DOOR_STONE_CLOSE] = [], sprite[k.DOOR_STONE_CLOSE][k.DAY] = L(nt(1.5, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"])), sprite[k.DOOR_STONE_CLOSE][k.NIGHT] = L(nt(1.5, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"])), sprite[k.DOOR_STONE_OPEN] = [], sprite[k.DOOR_STONE_OPEN][k.DAY] = L(nt(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[k.DOOR_STONE_OPEN][k.NIGHT] = L(nt(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[k.DOOR_AMETHYST_CLOSE] = [], sprite[k.DOOR_AMETHYST_CLOSE][k.DAY] = L(nt(1.5, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])), sprite[k.DOOR_AMETHYST_CLOSE][k.NIGHT] = L(nt(1.5, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])), sprite[k.DOOR_AMETHYST_OPEN] = [], sprite[k.DOOR_AMETHYST_OPEN][k.DAY] = L(nt(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[k.DOOR_AMETHYST_OPEN][k.NIGHT] = L(nt(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[k.DOOR_GOLD_CLOSE] = [], sprite[k.DOOR_GOLD_CLOSE][k.DAY] = L(at(1.5, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"])), sprite[k.DOOR_GOLD_CLOSE][k.NIGHT] = L(at(1.5, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"])), sprite[k.DOOR_GOLD_OPEN] = [], sprite[k.DOOR_GOLD_OPEN][k.DAY] = L(at(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[k.DOOR_GOLD_OPEN][k.NIGHT] = L(at(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[k.DOOR_DIAMOND_CLOSE] = [], sprite[k.DOOR_DIAMOND_CLOSE][k.DAY] = L(_t(1.5, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])), sprite[k.DOOR_DIAMOND_CLOSE][k.NIGHT] = L(_t(1.5, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])), sprite[k.DOOR_DIAMOND_OPEN] = [], sprite[k.DOOR_DIAMOND_OPEN][k.DAY] = L(_t(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[k.DOOR_DIAMOND_OPEN][k.NIGHT] = L(_t(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[k.CHEST] = [], sprite[k.CHEST][k.DAY] = L(Nt(.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"])), sprite[k.CHEST][k.NIGHT] = L(Nt(.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"])), sprite[k.TREASURE_CHEST] = [], sprite[k.TREASURE_CHEST][k.DAY] = L(Yr(.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"])), sprite[k.TREASURE_CHEST][k.NIGHT] = L(Yr(.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"])), sprite[k.RABBIT] = [], sprite[k.RABBIT][k.DAY] = L(Fe(.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"])), sprite[k.RABBIT][k.NIGHT] = L(Fe(.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"])), sprite[k.SPIDER] = [], sprite[k.SPIDER][k.DAY] = L(Se(Math.PI, Je(.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"]))), sprite[k.SPIDER][k.NIGHT] = L(Se(Math.PI, Je(.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"]))), sprite[k.WEB] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 450 * e, t.height = 470 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(226.5 * e, 91.546875 * e), r.bezierCurveTo(254.5 * e, 115.546875 * e, 261.5 * e, 115.546875 * e, 294.5 * e, 109.546875 * e), r.bezierCurveTo(299.5 * e, 141.546875 * e, 315.5 * e, 151.546875 * e, 344.5 * e, 158.546875 * e), r.bezierCurveTo(330.5 * e, 195.546875 * e, 341.5 * e, 207.546875 * e, 361.5 * e, 226.546875 * e), r.bezierCurveTo(331.5 * e, 251.546875 * e, 335.5 * e, 270.546875 * e, 342.5 * e, 295.546875 * e), r.bezierCurveTo(300.5 * e, 296.546875 * e, 293.5 * e, 325.546875 * e, 292.5 * e, 344.546875 * e), r.bezierCurveTo(257.5 * e, 326.546875 * e, 242.5 * e, 338.546875 * e, 224.5 * e, 361.546875 * e), r.bezierCurveTo(200.5 * e, 329.546875 * e, 180.5 * e, 334.546875 * e, 155.5 * e, 341.546875 * e), r.bezierCurveTo(146.5 * e, 307.546875 * e, 140.5 * e, 302.546875 * e, 107.5 * e, 292.546875 * e), r.bezierCurveTo(117.5 * e, 253.546875 * e, 109.5 * e, 244.546875 * e, 89.5 * e, 224.546875 * e), r.bezierCurveTo(118.5 * e, 191.546875 * e, 114.5 * e, 182.546875 * e, 108.5 * e, 156.546875 * e), r.bezierCurveTo(143.5 * e, 149.546875 * e, 150.5 * e, 136.546875 * e, 157.5 * e, 106.546875 * e), r.bezierCurveTo(202.5 * e, 120.546875 * e, 211.5 * e, 103.546875 * e, 228.5 * e, 91.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(224.5 * e, 129.546875 * e), r.bezierCurveTo(247.5 * e, 147.546875 * e, 252.5 * e, 143.546875 * e, 274.5 * e, 141.546875 * e), r.bezierCurveTo(279.5 * e, 163.546875 * e, 289.5 * e, 168.546875 * e, 311.5 * e, 178.546875 * e), r.bezierCurveTo(301.5 * e, 199.546875 * e, 307.5 * e, 213.546875 * e, 323.5 * e, 226.546875 * e), r.bezierCurveTo(303.5 * e, 240.546875 * e, 303.5 * e, 255.546875 * e, 312.5 * e, 275.546875 * e), r.bezierCurveTo(281.5 * e, 278.546875 * e, 276.5 * e, 291.546875 * e, 272.5 * e, 313.546875 * e), r.bezierCurveTo(248.5 * e, 301.546875 * e, 239.5 * e, 310.546875 * e, 224.5 * e, 324.546875 * e), r.bezierCurveTo(211.5 * e, 304.546875 * e, 199.5 * e, 301.546875 * e, 176.5 * e, 309.546875 * e), r.bezierCurveTo(165.5 * e, 276.546875 * e, 159.5 * e, 275.546875 * e, 138.5 * e, 274.546875 * e), r.bezierCurveTo(148.5 * e, 248.546875 * e, 140.5 * e, 237.546875 * e, 125.5 * e, 225.546875 * e), r.bezierCurveTo(145.5 * e, 205.546875 * e, 146.5 * e, 195.546875 * e, 142.5 * e, 176.546875 * e), r.bezierCurveTo(173.5 * e, 164.546875 * e, 173.5 * e, 155.546875 * e, 178.5 * e, 140.546875 * e), r.bezierCurveTo(214.5 * e, 143.546875 * e, 214.5 * e, 135.546875 * e, 226.5 * e, 129.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(224.5 * e, 160.546875 * e), r.bezierCurveTo(236.5 * e, 168.546875 * e, 239.5 * e, 168.546875 * e, 258.5 * e, 168.546875 * e), r.bezierCurveTo(261.5 * e, 185.546875 * e, 268.5 * e, 187.546875 * e, 282.5 * e, 192.546875 * e), r.bezierCurveTo(277.5 * e, 208.546875 * e, 283.5 * e, 216.546875 * e, 289.5 * e, 228.546875 * e), r.bezierCurveTo(277.5 * e, 243.546875 * e, 280.5 * e, 253.546875 * e, 281.5 * e, 260.546875 * e), r.bezierCurveTo(264.5 * e, 260.546875 * e, 259.5 * e, 269.546875 * e, 256.5 * e, 283.546875 * e), r.bezierCurveTo(244.5 * e, 276.546875 * e, 232.5 * e, 283.546875 * e, 223.5 * e, 291.546875 * e), r.bezierCurveTo(213.5 * e, 276.546875 * e, 205.5 * e, 278.546875 * e, 190.5 * e, 281.546875 * e), r.bezierCurveTo(181.5 * e, 262.546875 * e, 173.5 * e, 259.546875 * e, 165.5 * e, 258.546875 * e), r.bezierCurveTo(169.5 * e, 239.546875 * e, 167.5 * e, 233.546875 * e, 157.5 * e, 225.546875 * e), r.bezierCurveTo(169.5 * e, 208.546875 * e, 170.5 * e, 203.546875 * e, 168.5 * e, 192.546875 * e), r.bezierCurveTo(181.5 * e, 187.546875 * e, 188.5 * e, 179.546875 * e, 192.5 * e, 168.546875 * e), r.bezierCurveTo(216.5 * e, 170.546875 * e, 218.5 * e, 163.546875 * e, 225.5 * e, 160.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(205.5 * e, 194.546875 * e), r.bezierCurveTo(216.5 * e, 192.546875 * e, 219.5 * e, 191.546875 * e, 225.5 * e, 185.546875 * e), r.bezierCurveTo(232.5 * e, 193.546875 * e, 237.5 * e, 191.546875 * e, 246.5 * e, 192.546875 * e), r.bezierCurveTo(249.5 * e, 202.546875 * e, 253.5 * e, 205.546875 * e, 258.5 * e, 207.546875 * e), r.bezierCurveTo(259.5 * e, 222.546875 * e, 256.5 * e, 223.546875 * e, 265.5 * e, 226.546875 * e), r.bezierCurveTo(256.5 * e, 231.546875 * e, 255.5 * e, 241.546875 * e, 259.5 * e, 248.546875 * e), r.bezierCurveTo(250.5 * e, 245.546875 * e, 245.5 * e, 252.546875 * e, 243.5 * e, 260.546875 * e), r.bezierCurveTo(234.5 * e, 256.546875 * e, 229.5 * e, 258.546875 * e, 223.5 * e, 265.546875 * e), r.bezierCurveTo(218.5 * e, 255.546875 * e, 213.5 * e, 257.546875 * e, 204.5 * e, 261.546875 * e), r.bezierCurveTo(203.5 * e, 251.546875 * e, 198.5 * e, 248.546875 * e, 189.5 * e, 244.546875 * e), r.bezierCurveTo(194.5 * e, 237.546875 * e, 192.5 * e, 231.546875 * e, 184.5 * e, 225.546875 * e), r.bezierCurveTo(191.5 * e, 211.546875 * e, 192.5 * e, 209.546875 * e, 190.5 * e, 204.546875 * e), r.bezierCurveTo(200.5 * e, 204.546875 * e, 204.5 * e, 198.546875 * e, 207.5 * e, 194.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149.5 * e, 93.546875 * e), r.bezierCurveTo(287.5 * e, 332.546875 * e, 226 * e, 225.546875 * e, 302.5 * e, 357.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(224.5 * e, 66.546875 * e), r.bezierCurveTo(224.5 * e, 223.546875 * e, 224.5 * e, 223.546875 * e, 224.5 * e, 380.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(302.5 * e, 88.546875 * e), r.bezierCurveTo(222.5 * e, 227.546875 * e, 222.5 * e, 227.546875 * e, 142.5 * e, 366.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(361.5 * e, 147.546875 * e), r.bezierCurveTo(223 * e, 226.546875 * e, 223 * e, 226.546875 * e, 84.5 * e, 305.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(379.5 * e, 225.546875 * e), r.bezierCurveTo(221 * e, 225.546875 * e, 221 * e, 225.546875 * e, 62.5 * e, 225.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(90.5 * e, 147.546875 * e), r.bezierCurveTo(226.5 * e, 226.546875 * e, 226.5 * e, 226.546875 * e, 362.5 * e, 305.546875 * e), r.closePath(), Ce(r, void 0, i[0], 4), t
        }(.6, ["#FFFFFF"])), sprite[k.WOLF] = [], sprite[k.WOLF][k.DAY] = L(ke(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"])), sprite[k.WOLF][k.NIGHT] = L(ke(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"])), sprite[k.EARMUFFS] = [], sprite[k.EARMUFFS][k.DAY] = L(bt(.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"])), sprite[k.EARMUFFS][k.NIGHT] = L(bt(.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"])), sprite[k.COAT] = [], sprite[k.COAT][k.DAY] = L(Et(.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"])), sprite[k.COAT][k.NIGHT] = L(Et(.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"])), sprite[k.CAP_SCARF] = [], sprite[k.CAP_SCARF][k.DAY] = L(St(.63, !0, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"])), sprite[k.CAP_SCARF][k.NIGHT] = L(St(.63, !0, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"])), sprite[k.CHRISTMAS_HAT] = [], sprite[k.CHRISTMAS_HAT][k.DAY] = L(Ti(.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"])), sprite[k.CHRISTMAS_HAT][k.NIGHT] = L(Ti(.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"])), sprite[k.ELF_HAT] = [], sprite[k.ELF_HAT][k.DAY] = L(Ei(.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"])), sprite[k.ELF_HAT][k.NIGHT] = L(Ei(.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"])), sprite[k.BREAD_OVEN_ON] = [], sprite[k.BREAD_OVEN_ON][k.DAY] = L(vr(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"])), sprite[k.BREAD_OVEN_ON][k.NIGHT] = L(vr(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"])), sprite[k.BREAD_LIGHT_UP] = [], sprite[k.BREAD_LIGHT_UP][k.DAY] = L(Mr(.9, ["#e4c027"])), sprite[k.BREAD_LIGHT_UP][k.NIGHT] = L(Mr(.9, ["#D8E57F"])), sprite[k.BREAD_OVEN_OFF] = [], sprite[k.BREAD_OVEN_OFF][k.DAY] = L(mr(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"])), sprite[k.BREAD_OVEN_OFF][k.NIGHT] = L(mr(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"])), sprite[k.BREAD_OVEN_UI] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 149 * e, t.height = 356 * e, r.save(), r.translate(74.5 * e, 177.5 * e), ge(r, -57.5 * e, -161.5 * e, 100 * e, 323 * e, 10 * e), r.restore(), Ce(r, i[0], i[1], 4 * e), r.save(), r.translate(74.5 * e, 177.5 * e), ge(r, -57.5 * e, 50.5 * e, 100 * e, 105 * e, 10 * e), r.restore(), Ce(r, i[6], i[1], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 125 * e), r.bezierCurveTo(74.5 * e, 125 * e, 118 * e, 125 * e, 118 * e, 125 * e), r.closePath(), Ce(r, i[2], i[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 120 * e), r.bezierCurveTo(74.5 * e, 120 * e, 74.5 * e, 120 * e, 118 * e, 120 * e), r.closePath(), Ce(r, i[3], i[3], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 228 * e), r.bezierCurveTo(75 * e, 228.5 * e, 118 * e, 228.5 * e, 118 * e, 229 * e), r.closePath(), Ce(r, i[2], i[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 224 * e), r.bezierCurveTo(75 * e, 224 * e, 118 * e, 224 * e, 118 * e, 224 * e), r.closePath(), Ce(r, i[3], i[3], 10 * e), r.save(), r.translate(72 * e, 68.5 * e), ge(r, -41.5 * e, -36.5 * e, 73 * e, 73 * e, 13 * e), r.restore(), Ce(r, i[4]), r.save(), r.translate(72 * e, 175.5 * e), ge(r, -41.5 * e, -38.5 * e, 73 * e, 73 * e, 13 * e), r.restore(), Ce(r, i[4]), r.save(), r.translate(72 * e, 279.5 * e), ge(r, -41.5 * e, -40.5 * e, 73 * e, 73 * e, 13 * e), r.restore(), Ce(r, i[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 338 * e), r.bezierCurveTo(75 * e, 338 * e, 118 * e, 338 * e, 118 * e, 338 * e), r.closePath(), Ce(r, i[2], i[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 333 * e), r.bezierCurveTo(75 * e, 333 * e, 118 * e, 333 * e, 118 * e, 333 * e), r.closePath(), Ce(r, i[3], i[3], 10 * e), t
        }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"])), sprite[k.FURNACE_ON] = [], sprite[k.FURNACE_ON][k.DAY] = L(ot(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"])), sprite[k.FURNACE_ON][k.NIGHT] = L(ot(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"])), sprite[k.FURNACE_OFF] = [], sprite[k.FURNACE_OFF][k.DAY] = L(st(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"])), sprite[k.FURNACE_OFF][k.NIGHT] = L(st(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"])), sprite[k.FURNACE_SLOT] = L(function (e, i, t) {
            var r = document.createElement("canvas"),
                n = r.getContext("2d");
            return r.width = 118 * e, r.height = 129 * e, n.save(), n.translate(90 * e, 90 * e), ge(n, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e), n.restore(), Ce(n, t[0], t[1], 4), r
        }(.8, 0, ["#5f6061", "#939393"])), sprite[k.FURNACE_BUTTON] = ri(1, [{
            f: oi,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], .3, ["#494949", "#5b5858", "#3d3b3b"], 1), sprite[k.BED] = [], sprite[k.BED][k.DAY] = L(dt(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])), sprite[k.BED][k.NIGHT] = L(dt(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])), sprite[k.BED_TOP] = [], sprite[k.BED_TOP][k.DAY] = L(It(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])), sprite[k.BED_TOP][k.NIGHT] = L(It(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])), sprite[k.CRAB_SPEAR] = [], sprite[k.CRAB_SPEAR][k.DAY] = L(Se(3, ht(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]))), sprite[k.CRAB_SPEAR][k.NIGHT] = L(Se(3, ht(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"]))), sprite[k.WOOD_SPEAR] = [], sprite[k.WOOD_SPEAR][k.DAY] = L(Se(3, ut(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]))), sprite[k.WOOD_SPEAR][k.NIGHT] = L(Se(3, ut(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"]))), sprite[k.SPEAR] = [], sprite[k.SPEAR][k.DAY] = L(Se(3, Ot(.65, !0, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]))), sprite[k.SPEAR][k.NIGHT] = L(Se(3, Ot(.65, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"]))), sprite[k.GOLD_SPEAR] = [], sprite[k.GOLD_SPEAR][k.DAY] = L(Se(3, lt(.67, !0, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]))), sprite[k.GOLD_SPEAR][k.NIGHT] = L(Se(3, lt(.67, !0, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"]))), sprite[k.DIAMOND_SPEAR] = [], sprite[k.DIAMOND_SPEAR][k.DAY] = L(Se(3, Rt(.67, !0, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]))), sprite[k.DIAMOND_SPEAR][k.NIGHT] = L(Se(3, Rt(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"]))), sprite[k.AMETHYST_SPEAR] = [], sprite[k.AMETHYST_SPEAR][k.DAY] = L(Se(3, ct(.67, !0, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]))), sprite[k.AMETHYST_SPEAR][k.NIGHT] = L(Se(3, ct(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"]))), sprite[k.DRAGON_SPEAR] = [], sprite[k.DRAGON_SPEAR][k.DAY] = L(Se(3, Ct(1, !0, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]))), sprite[k.DRAGON_SPEAR][k.NIGHT] = L(Se(3, Ct(1, !0, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"]))), sprite[k.HAMMER] = [], sprite[k.HAMMER][k.DAY] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))), sprite[k.HAMMER][k.NIGHT] = L(Se(3, Gt(1, !0, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"]))), sprite[k.SPANNER] = [], sprite[k.SPANNER][k.DAY] = L(Se(3, $r(.5, !0, ["#0d1b1c", "#939393", "#5f6061"]))), sprite[k.SPANNER][k.NIGHT] = L(Se(3, $r(.5, !0, ["#030d14", "#485e66", "#1f343f"]))), sprite[k.SUPER_HAMMER] = [], sprite[k.SUPER_HAMMER][k.DAY] = L(Se(3, Cr(1, !0, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"]))), sprite[k.SUPER_HAMMER][k.NIGHT] = L(Se(3, Cr(1, !0, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"]))), sprite[k.HAMMER_GOLD] = [], sprite[k.HAMMER_GOLD][k.DAY] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))), sprite[k.HAMMER_GOLD][k.NIGHT] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"]))), sprite[k.HAMMER_DIAMOND] = [], sprite[k.HAMMER_DIAMOND][k.DAY] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))), sprite[k.HAMMER_DIAMOND][k.NIGHT] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))), sprite[k.HAMMER_AMETHYST] = [], sprite[k.HAMMER_AMETHYST][k.DAY] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))), sprite[k.HAMMER_AMETHYST][k.NIGHT] = L(Se(3, Gt(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))), sprite[k.LOCK] = [], sprite[k.LOCK][k.DAY] = L(_r(.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])), sprite[k.LOCK][k.NIGHT] = L(_r(.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"])), sprite[k.PADLOCK] = [], sprite[k.PADLOCK].push(L(_r(.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]))), sprite[k.PADLOCK].push(L(_r(.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"]))), sprite[k.PADLOCK].push(L(_r(.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"]))), sprite[k.LOCKED] = [], sprite[k.LOCKED].push(sprite[k.PADLOCK][0]), sprite[k.LOCKED].push(sprite[k.PADLOCK][0]), sprite[k.LOCKED].push(sprite[k.PADLOCK][0]), sprite[k.LOCKPICK] = [], sprite[k.LOCKPICK][k.DAY] = L(Ir(.06, 0, ["#141414", "#c4a23a", "#816511"])), sprite[k.LOCKPICK][k.NIGHT] = L(Ir(.06, 0, ["#030d14", "#2b6664", "#133d3c"])), sprite[k.KEY] = [], sprite[k.KEY].push(L(Ir(.08, 0, ["#141414", "#c4a23a", "#816511"]))), sprite[k.KEY].push(L(Ir(.08, 0, ["#141414", "#e2bd4e", "#a38018"]))), sprite[k.KEY].push(L(Ir(.08, 0, ["#141414", "#b0902e", "#634d09"]))), sprite[k.DRAGON_HEART] = ri(1.5, [{
            f: Rr,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9), sprite[k.RESURRECTION_GROUND] = [], sprite[k.RESURRECTION_GROUND][k.DAY] = L(hr(.8, 0, ["#347f93", "#54a4ba"])), sprite[k.RESURRECTION_GROUND][k.NIGHT] = L(hr(.8, 0, ["#98ede3", "#94f2e7"])), sprite[k.RESURRECTION_HOLE] = [], sprite[k.RESURRECTION_HOLE][k.DAY] = L(ur(.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"])), sprite[k.RESURRECTION_HOLE][k.NIGHT] = L(ur(.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"])), sprite[k.RESURRECTION_ROTATE] = [], sprite[k.RESURRECTION_ROTATE][k.DAY] = L(Or(.8, 0, ["#a9e4ed", "#86d4e0"])), sprite[k.RESURRECTION_ROTATE][k.NIGHT] = L(Or(.8, 0, ["#83ddd4", "#485e66"])), sprite[k.RESURRECTION] = [], sprite[k.RESURRECTION][k.DAY] = L(lr(.8, !0, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"])), sprite[k.RESURRECTION][k.NIGHT] = L(lr(.8, !0, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"])), sprite[k.EMERALD_MACHINE_GROUND] = [], sprite[k.EMERALD_MACHINE_GROUND][k.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD, sprite[k.EMERALD_MACHINE_GROUND][k.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN, sprite[k.EMERALD_MACHINE_HOLE] = [], sprite[k.EMERALD_MACHINE_HOLE][k.DAY] = IMAGES.EMERALD_MACHINE_HOLED, sprite[k.EMERALD_MACHINE_HOLE][k.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN, sprite[k.EMERALD_MACHINE_ROTATE] = [], sprite[k.EMERALD_MACHINE_ROTATE][k.DAY] = IMAGES.EMERALD_MACHINE_ROTATED, sprite[k.EMERALD_MACHINE_ROTATE][k.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN, sprite[k.EMERALD_MACHINE] = [], sprite[k.EMERALD_MACHINE][k.DAY] = IMAGES.EMERALD_MACHINED, sprite[k.EMERALD_MACHINE][k.NIGHT] = IMAGES.EMERALD_MACHINEN, sprite[k.EXTRACTOR_MACHINE0_STONE] = [], sprite[k.EXTRACTOR_MACHINE0_STONE][k.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED, sprite[k.EXTRACTOR_MACHINE0_STONE][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN, sprite[k.EXTRACTOR_MACHINE_STONE] = [], sprite[k.EXTRACTOR_MACHINE_STONE][k.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED, sprite[k.EXTRACTOR_MACHINE_STONE][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN, sprite[k.EXTRACTOR_MACHINE0_GOLD] = [], sprite[k.EXTRACTOR_MACHINE0_GOLD][k.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD, sprite[k.EXTRACTOR_MACHINE0_GOLD][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN, sprite[k.EXTRACTOR_MACHINE_GOLD] = [], sprite[k.EXTRACTOR_MACHINE_GOLD][k.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD, sprite[k.EXTRACTOR_MACHINE_GOLD][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN, sprite[k.EXTRACTOR_MACHINE0_DIAMOND] = [], sprite[k.EXTRACTOR_MACHINE0_DIAMOND][k.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD, sprite[k.EXTRACTOR_MACHINE0_DIAMOND][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN, sprite[k.EXTRACTOR_MACHINE_DIAMOND] = [], sprite[k.EXTRACTOR_MACHINE_DIAMOND][k.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD, sprite[k.EXTRACTOR_MACHINE_DIAMOND][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN, sprite[k.EXTRACTOR_MACHINE0_AMETHYST] = [], sprite[k.EXTRACTOR_MACHINE0_AMETHYST][k.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD, sprite[k.EXTRACTOR_MACHINE0_AMETHYST][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN, sprite[k.EXTRACTOR_MACHINE_AMETHYST] = [], sprite[k.EXTRACTOR_MACHINE_AMETHYST][k.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD, sprite[k.EXTRACTOR_MACHINE_AMETHYST][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN, sprite[k.EXTRACTOR_MACHINE0_REIDITE] = [], sprite[k.EXTRACTOR_MACHINE0_REIDITE][k.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED, sprite[k.EXTRACTOR_MACHINE0_REIDITE][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN, sprite[k.EXTRACTOR_MACHINE_REIDITE] = [], sprite[k.EXTRACTOR_MACHINE_REIDITE][k.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED, sprite[k.EXTRACTOR_MACHINE_REIDITE][k.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN, sprite[k.FIREFLY] = [], sprite[k.FIREFLY][k.DAY] = IMAGES.FIREFLYD, sprite[k.FIREFLY][k.NIGHT] = IMAGES.FIREFLYN, sprite[k.HURT_FIREFLY] = IMAGES.HURT_FIREFLY, sprite[k.TOTEM] = [], sprite[k.TOTEM][k.DAY] = L(dr(.75, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021"])), sprite[k.TOTEM][k.NIGHT] = L(dr(.75, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f"])), sprite[k.ICON_MEMBER] = L(Tr(.3, ["#092813", "#1f773d"], 0)), sprite[k.ICON_LEADER] = L(Tr(.3, ["#092813", "#1f773d"], 1)), sprite[k.VERIFIED] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 60 * e, t.height = 60 * e, r.translate(-25 * e, -25 * e), r.translate(0, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(24 * e, 50 * e), r.bezierCurveTo(32.5 * e, 54.5 * e, 32.5 * e, 54.5 * e, 41 * e, 59 * e), r.bezierCurveTo(57 * e, 47 * e, 57 * e, 47 * e, 73 * e, 35 * e), r.bezierCurveTo(57 * e, 53 * e, 57 * e, 53 * e, 41 * e, 71 * e), r.closePath(), Ce(r, i[0]), r.translate(0, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(24 * e, 50 * e), r.bezierCurveTo(32.5 * e, 54.5 * e, 32.5 * e, 54.5 * e, 41 * e, 59 * e), r.bezierCurveTo(57 * e, 47 * e, 57 * e, 47 * e, 73 * e, 35 * e), r.bezierCurveTo(57 * e, 53 * e, 57 * e, 53 * e, 41 * e, 71 * e), r.closePath(), Ce(r, i[1]), t
        }(.6, ["#092813", "#1f773d"])), sprite[k.TEAM_BUTTON] = [], sprite[k.TEAM_BUTTON].push(L(Ar(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0))), sprite[k.TEAM_BUTTON].push(L(Ar(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0))), sprite[k.TEAM_BUTTON].push(L(Ar(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0))), sprite[k.FULL_TEAM_BUTTON] = [];
        var t = L(Ar(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        sprite[k.FULL_TEAM_BUTTON].push(t), sprite[k.FULL_TEAM_BUTTON].push(t), sprite[k.FULL_TEAM_BUTTON].push(t), sprite[k.MANAGE_TEAM_BUTTON] = [], sprite[k.MANAGE_TEAM_BUTTON].push(L(Ar(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1))), sprite[k.MANAGE_TEAM_BUTTON].push(L(Ar(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1))), sprite[k.MANAGE_TEAM_BUTTON].push(L(Ar(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1))), sprite[k.DELAY_SPIKE] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d"),
                n = 170 * e,
                a = 172 * e,
                o = n / 2,
                s = a / 2;
            t.width = n, t.height = a, r.translate(o, s), r.save();
            for (var _ = 0; _ < 10; _++) r.rotate(Math.PI / 5), r.save(), r.translate(65 * e, 0), be(r, 3, 18 * e, 4 * e), Ce(r, i[0]), r.restore();
            return r.restore(), Ne(r, 0, 0, 40 * e), Ce(r, void 0, i[0], 6 * e), Ne(r, 0, 0, 20 * e), Ce(r, i[0]), t
        }(.3, ["#FFFFFF"])), sprite[k.DELAY_WALL] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d"),
                n = 130 * e,
                a = 142 * e,
                o = n / 2,
                s = a / 2;
            return t.width = n, t.height = a, Ne(r, o, s, 40 * e), Ce(r, void 0, i[0], 7 * e), Ne(r, o, s, 30 * e), Ce(r, void 0, i[0], 7 * e), Ne(r, o, s, 20 * e), Ce(r, i[0]), t
        }(.3, ["#FFFFFF"])), sprite[k.DELAY_TEAM] = L(Tr(.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0)), sprite[k.DELAY_DRINK] = L(Se(Math.PI / 5, function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 316 * e, t.height = 365 * e, r.save(), r.translate(156.07142639160156 * e, 51.81248474121094 * e), r.rotate(0), ge(r, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e), r.restore(), Ce(r, i[0], i[0], 15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(126.57142639160156 * e, 67.38392639160156 * e), r.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e), r.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e), r.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e), r.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e), r.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e), r.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e), r.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e), r.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e), r.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e), r.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e), r.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e), r.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e), r.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e), r.closePath(), Ce(r, i[0], i[0], 15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125.57142639160156 * e, 156.66963958740234 * e), r.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e), r.closePath(), Ce(r, i[0], i[0], 15 * e), t
        }(.2, ["#FFFFFF"]))), sprite[k.AMETHYST_HELMET] = [], sprite[k.AMETHYST_HELMET][k.DAY] = L(ar(.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"])), sprite[k.AMETHYST_HELMET][k.NIGHT] = L(ar(.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"])), sprite[k.SHOW_TEAM_BUTTON] = [], sprite[k.SHOW_TEAM_BUTTON].push(L(Ar(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1))), sprite[k.SHOW_TEAM_BUTTON].push(L(Ar(.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1))), sprite[k.SHOW_TEAM_BUTTON].push(L(Ar(.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1))), sprite[k.HOOD] = [], sprite[k.HOOD][k.DAY] = L(Kr(.37, 0, ["#2a2938", "#242330", "#313041"])), sprite[k.HOOD][k.NIGHT] = L(Kr(.37, 0, ["#1b1e30", "#161921", "#252f3e"])), sprite[k.WINTER_HOOD] = [], sprite[k.WINTER_HOOD][k.DAY] = L(wr(.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"])), sprite[k.WINTER_HOOD][k.NIGHT] = L(wr(.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"])), sprite[k.WINTER_PEASANT] = [], sprite[k.WINTER_PEASANT][k.DAY] = L(Ur(.55, !0, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1)), sprite[k.WINTER_PEASANT][k.NIGHT] = L(Ur(.55, !0, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1)), sprite[k.PEASANT] = [], sprite[k.PEASANT][k.DAY] = L(Ur(.55, !0, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0)), sprite[k.PEASANT][k.NIGHT] = L(Ur(.55, !0, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0)), sprite[k.CROWN_GREEN] = [], sprite[k.CROWN_GREEN][k.DAY] = L(tn(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"])), sprite[k.CROWN_GREEN][k.NIGHT] = L(tn(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"])), sprite[k.CROWN_ORANGE] = [], sprite[k.CROWN_ORANGE][k.DAY] = L(tn(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"])), sprite[k.CROWN_ORANGE][k.NIGHT] = L(tn(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"])), sprite[k.CROWN_BLUE] = [], sprite[k.CROWN_BLUE][k.DAY] = L(tn(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"])), sprite[k.CROWN_BLUE][k.NIGHT] = L(tn(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"])), sprite[k.CROWN_CRAB] = [], sprite[k.CROWN_CRAB][k.DAY] = L(Tt(.24, !0, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"])), sprite[k.CROWN_CRAB][k.NIGHT] = L(Tt(.24, !0, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"])), sprite[k.DRAGON_HELMET] = [], sprite[k.DRAGON_HELMET][k.DAY] = L(yt(.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"])), sprite[k.DRAGON_HELMET][k.NIGHT] = L(yt(.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"])), sprite[k.DRAGON_SWORD] = [], sprite[k.DRAGON_SWORD][k.DAY] = L(Se(3, gr(.9, !0, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"]))), sprite[k.DRAGON_SWORD][k.NIGHT] = L(Se(3, gr(.9, !0, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"]))), sprite[k.DRAGON_SWORD_HALO] = [], sprite[k.DRAGON_SWORD_HALO][k.DAY] = L(Se(3, gr(1, !0, [void 0, void 0, void 0, "#c8efef", "#c8efef"]))), sprite[k.DRAGON_SWORD_HALO][k.NIGHT] = L(Se(3, gr(1, !0, [void 0, void 0, void 0, "#87d2e6", "#87d2e6"]))), sprite[k.QUEST_BUTTON] = [], sprite[k.QUEST_BUTTON].push(L(Zr(.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0))), sprite[k.QUEST_BUTTON].push(L(Zr(.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1))), sprite[k.QUEST_BUTTON].push(L(Zr(.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1))), sprite[k.MARKET_BUTTON] = [], sprite[k.MARKET_BUTTON].push(L(Qr(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0))), sprite[k.MARKET_BUTTON].push(L(Qr(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))), sprite[k.MARKET_BUTTON].push(L(Qr(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))), sprite[k.SOUND_BUTTON_ON] = [], sprite[k.SOUND_BUTTON_ON].push(L(ui(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1))), sprite[k.SOUND_BUTTON_ON].push(L(ui(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1))), sprite[k.SOUND_BUTTON_ON].push(L(ui(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1))), sprite[k.SOUND_BUTTON_OFF] = [], sprite[k.SOUND_BUTTON_OFF].push(L(ui(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0))), sprite[k.SOUND_BUTTON_OFF].push(L(ui(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0))), sprite[k.SOUND_BUTTON_OFF].push(L(ui(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0))), sprite[k.SHOVEL] = [], sprite[k.SHOVEL][k.DAY] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]))), sprite[k.SHOVEL][k.NIGHT] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"]))), sprite[k.SHOVEL_GOLD] = [], sprite[k.SHOVEL_GOLD][k.DAY] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"]))), sprite[k.SHOVEL_GOLD][k.NIGHT] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"]))), sprite[k.SHOVEL_DIAMOND] = [], sprite[k.SHOVEL_DIAMOND][k.DAY] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]))), sprite[k.SHOVEL_DIAMOND][k.NIGHT] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"]))), sprite[k.SHOVEL_AMETHYST] = [], sprite[k.SHOVEL_AMETHYST][k.DAY] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"]))), sprite[k.SHOVEL_AMETHYST][k.NIGHT] = L(Se(3, Xr(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"]))), sprite[k.SHOP] = [], sprite[k.SHOP].push(L(Nr(.7, ["#3b330d", "#b5a118", "#c8ac16"]))), sprite[k.SHOP].push(L(Nr(.7, ["#524712", "#c7b11c", "#d9ba18"]))), sprite[k.SHOP].push(L(Nr(.7, ["#2a2409", "#9f8e14", "#ad9511"]))), sprite[k.HURT_WOLF] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 188 * e, t.height = 190 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), Ce(r, i[0], i[0], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(51.00567626953125 * e, 72.53409576416016 * e), r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e), r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e), r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e), r.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e), r.closePath(), Ce(r, i[0], i[0], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.00567626953125 * e, 50.53410339355469 * e), r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e), r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e), r.closePath(), Ce(r, i[0], i[0], 2 * e), t
        }(1.1, ["#BB0000"])), sprite[k.HURT_SPIDER] = L(Se(Math.PI, function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 238 * e, t.height = 230 * e, r.translate(-93 * e, -110 * e), Ne(r, 213.5 * e, 256.75 * e, 75 * e), Ce(r, i), Ne(r, 213.5 * e, 175.75 * e, 25 * e), Ce(r, i), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 17 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(219.5 * e, 158.75 * e), r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = i, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.5 * e, 160.75 * e), r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = i, r.stroke(), t
        }(.9, "#BB0000"))), sprite[k.EXPLORER_HAT] = [], sprite[k.EXPLORER_HAT][k.DAY] = L(er(.55, !0, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"])), sprite[k.EXPLORER_HAT][k.NIGHT] = L(er(.55, !0, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"])), sprite[k.WOOD_HELMET] = [], sprite[k.WOOD_HELMET][k.DAY] = L(ir(.55, !0, ["#252525", "#73583e", "#573f29", "#7d6144"])), sprite[k.WOOD_HELMET][k.NIGHT] = L(ir(.55, !0, ["#0d3b39", "#144642", "#0b3230", "#154f4b"])), sprite[k.STONE_HELMET] = [], sprite[k.STONE_HELMET][k.DAY] = L(tr(.6, !0, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"])), sprite[k.STONE_HELMET][k.NIGHT] = L(tr(.6, !0, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"])), sprite[k.GOLD_HELMET] = [], sprite[k.GOLD_HELMET][k.DAY] = L(rr(.58, 0, ["#dbce71", "#b29c32", "#c4bc51"])), sprite[k.GOLD_HELMET][k.NIGHT] = L(rr(.58, 0, ["#2b7c57", "#15543c", "#1a7961"])), sprite[k.DIAMOND_HELMET] = [], sprite[k.DIAMOND_HELMET][k.DAY] = L(nr(.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"])), sprite[k.DIAMOND_HELMET][k.NIGHT] = L(nr(.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"])), sprite[k.FIR] = [], sprite[k.FIR][k.DAY] = [], sprite[k.FIR][k.NIGHT] = [], sprite[k.FIR][k.DAY].push(L(Wt(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"]))), sprite[k.FIR][k.DAY].push(L(Bt(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"]))), sprite[k.FIR][k.DAY].push(L(zt(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"]))), sprite[k.FIR][k.NIGHT].push(L(Wt(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"]))), sprite[k.FIR][k.NIGHT].push(L(Bt(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"]))), sprite[k.FIR][k.NIGHT].push(L(zt(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"]))), sprite[k.DRAGON] = [], sprite[k.DRAGON][k.DAY] = L(Zt(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"])), sprite[k.DRAGON][k.NIGHT] = L(Zt(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"])), sprite[k.WING_LEFT] = [], sprite[k.WING_LEFT][k.DAY] = L(Qt(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])), sprite[k.WING_LEFT][k.NIGHT] = L(Qt(1, ["#050505", "#327570", "#021724", "#200333"])), sprite[k.WING_RIGHT] = [], sprite[k.WING_RIGHT][k.DAY] = L($t(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])), sprite[k.WING_RIGHT][k.NIGHT] = L($t(1, ["#050505", "#327570", "#021724", "#200333"])), sprite[k.DECORATION] = [], sprite[k.DECORATION][k.DAY] = [], sprite[k.DECORATION][k.NIGHT] = [], sprite[k.DECORATION][k.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D], sprite[k.DECORATION][k.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N], sprite[k.CAVE_STONES] = [], sprite[k.CAVE_STONES][k.DAY] = [], sprite[k.CAVE_STONES][k.NIGHT] = [], sprite[k.CAVE_STONES][k.DAY].push(L(Wi(1.1, !1, ["#252B28", "#747471", "#83827e"], 0))), sprite[k.CAVE_STONES][k.DAY].push(L(Wi(.9, !1, ["#252B28", "#747471", "#83827e"], 1))), sprite[k.CAVE_STONES][k.DAY].push(L(Wi(1, !1, ["#252B28", "#747471", "#83827e"], 2))), sprite[k.CAVE_STONES][k.DAY].push(L(Wi(.9, !1, ["#252B28", "#747471", "#83827e"], 2))), sprite[k.CAVE_STONES][k.NIGHT].push(L(Wi(1.1, !1, ["#030d14", "#123335", "#183f3f"], 0))), sprite[k.CAVE_STONES][k.NIGHT].push(L(Wi(.9, !1, ["#030d14", "#123335", "#183f3f"], 1))), sprite[k.CAVE_STONES][k.NIGHT].push(L(Wi(1, !1, ["#030d14", "#123335", "#183f3f"], 2))), sprite[k.CAVE_STONES][k.NIGHT].push(L(Wi(.9, !1, ["#030d14", "#123335", "#183f3f"], 2))), sprite[k.SHADOW_CAVE_STONES] = [], sprite[k.SHADOW_CAVE_STONES][k.DAY] = [], sprite[k.SHADOW_CAVE_STONES][k.NIGHT] = [], sprite[k.SHADOW_CAVE_STONES][k.DAY].push(L(Wi(1.1, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[k.SHADOW_CAVE_STONES][k.DAY].push(L(Wi(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[k.SHADOW_CAVE_STONES][k.DAY].push(L(Wi(1, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[k.SHADOW_CAVE_STONES][k.DAY].push(L(Wi(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[k.SHADOW_CAVE_STONES][k.NIGHT].push(L(Wi(1.1, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[k.SHADOW_CAVE_STONES][k.NIGHT].push(L(Wi(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[k.SHADOW_CAVE_STONES][k.NIGHT].push(L(Wi(1, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[k.SHADOW_CAVE_STONES][k.NIGHT].push(L(Wi(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[k.GOLD_WINTER] = [], sprite[k.GOLD_WINTER][k.DAY] = [], sprite[k.GOLD_WINTER][k.NIGHT] = [], sprite[k.GOLD_WINTER][k.DAY].push(L(Vi(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[k.GOLD_WINTER][k.DAY].push(L(Vi(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[k.GOLD_WINTER][k.DAY].push(L(Vi(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[k.GOLD_WINTER][k.NIGHT].push(L(Vi(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"]))), sprite[k.GOLD_WINTER][k.NIGHT].push(L(Vi(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"]))), sprite[k.GOLD_WINTER][k.NIGHT].push(L(Vi(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"]))), sprite[k.DIAMOND_WINTER] = [], sprite[k.DIAMOND_WINTER][k.DAY] = [], sprite[k.DIAMOND_WINTER][k.NIGHT] = [], sprite[k.DIAMOND_WINTER][k.DAY].push(L(Ki(1.1, 0, ["#123d38", "#70e0dd", "#95efea"]))), sprite[k.DIAMOND_WINTER][k.DAY].push(L(Ki(.9, 0, ["#123d38", "#70e0dd", "#95efea"]))), sprite[k.DIAMOND_WINTER][k.DAY].push(L(Ki(.7, 0, ["#123d38", "#70e0dd", "#95efea"]))), sprite[k.DIAMOND_WINTER][k.NIGHT].push(L(Ki(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"]))), sprite[k.DIAMOND_WINTER][k.NIGHT].push(L(Ki(.9, 0, ["#123d38", "#47b2ac", "#5cccc4"]))), sprite[k.DIAMOND_WINTER][k.NIGHT].push(L(Ki(.7, 0, ["#123d38", "#47b2ac", "#5cccc4"]))), sprite[k.AMETHYST] = [], sprite[k.AMETHYST][k.DAY] = [], sprite[k.AMETHYST][k.NIGHT] = [], sprite[k.AMETHYST][k.DAY].push(L(Vt(1.7, !0, ["#1d051e", "#c27add", "#cd98e5"]))), sprite[k.AMETHYST][k.DAY].push(L(Vt(1.5, !0, ["#1d051e", "#c27add", "#cd98e5"]))), sprite[k.AMETHYST][k.DAY].push(L(Vt(1.3, !0, ["#1d051e", "#c27add", "#cd98e5"]))), sprite[k.AMETHYST][k.NIGHT].push(L(Vt(1.7, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))), sprite[k.AMETHYST][k.NIGHT].push(L(Vt(1.5, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))), sprite[k.AMETHYST][k.NIGHT].push(L(Vt(1.3, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))), sprite[k.WATERBLOCK] = [], sprite[k.WATERBLOCK][k.DAY] = [], sprite[k.WATERBLOCK][k.NIGHT] = [], sprite[k.WATERBLOCK][k.DAY].push(L(Kt(1, ["#2d53c4"]))), sprite[k.WATERBLOCK][k.NIGHT].push(L(Kt(1, ["#2d53c4"]))), sprite[k.ISLAND_BLOCK] = [], sprite[k.ISLAND_BLOCK][k.DAY] = [], sprite[k.ISLAND_BLOCK][k.NIGHT] = [], sprite[k.ISLAND_BLOCK][k.DAY].push(L(Kt(1, ["#c4912d"]))), sprite[k.ISLAND_BLOCK][k.NIGHT].push(L(Kt(1, ["#c4912d"]))), sprite[k.CAVE_STEP] = [], sprite[k.CAVE_STEP][k.DAY] = L(Xt(1, ["#414040"])), sprite[k.CAVE_STEP][k.NIGHT] = L(Xt(1, ["#153635"])), sprite[k.DOOR_WOOD_OPEN_WINTER] = [], sprite[k.DOOR_WOOD_OPEN_WINTER][k.DAY] = L(rt(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[k.DOOR_WOOD_OPEN_WINTER][k.NIGHT] = L(rt(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[k.DOOR_STONE_OPEN_WINTER] = [], sprite[k.DOOR_STONE_OPEN_WINTER][k.DAY] = L(nt(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[k.DOOR_STONE_OPEN_WINTER][k.NIGHT] = L(nt(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[k.DOOR_AMETHYST_OPEN_WINTER] = [], sprite[k.DOOR_AMETHYST_OPEN_WINTER][k.DAY] = L(nt(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[k.DOOR_AMETHYST_OPEN_WINTER][k.NIGHT] = L(nt(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[k.DOOR_DIAMOND_OPEN_WINTER] = [], sprite[k.DOOR_DIAMOND_OPEN_WINTER][k.DAY] = L(_t(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[k.DOOR_DIAMOND_OPEN_WINTER][k.NIGHT] = L(_t(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[k.DOOR_GOLD_OPEN_WINTER] = [], sprite[k.DOOR_GOLD_OPEN_WINTER][k.DAY] = L(at(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[k.DOOR_GOLD_OPEN_WINTER][k.NIGHT] = L(at(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[k.FOX] = [], sprite[k.FOX][k.DAY] = L(qt(.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"])), sprite[k.FOX][k.NIGHT] = L(qt(.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"])), sprite[k.BEAR] = [], sprite[k.BEAR][k.DAY] = L(jt(.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"])), sprite[k.BEAR][k.NIGHT] = L(jt(.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"])), sprite[k.MINIMAP] = [], sprite[k.MINIMAP_CTX] = [], sprite[k.BIGMAP] = [], sprite[k.BIGMAP_CTX] = [];
        for (i = 0; i < 2; i++) sprite[k.MINIMAP][i] = document.createElement("canvas"), sprite[k.MINIMAP][i].width = 193, sprite[k.MINIMAP][i].height = 193, sprite[k.MINIMAP_CTX][i] = sprite[k.MINIMAP][i].getContext("2d"), sprite[k.BIGMAP][i] = document.createElement("canvas"), sprite[k.BIGMAP][i].width = 600, sprite[k.BIGMAP][i].height = 600, sprite[k.BIGMAP_CTX][i] = sprite[k.BIGMAP][i].getContext("2d");
        sprite[k.SNOW_STEP] = [], sprite[k.SNOW_STEP][k.DAY] = L(Xt(1, ["#c8e0de"])), sprite[k.SNOW_STEP][k.NIGHT] = L(Xt(1, ["#147071"])), sprite[k.LAVA_STEP] = [], sprite[k.LAVA_STEP][k.DAY] = L(Xt(1, ["#231912"])), sprite[k.LAVA_STEP][k.NIGHT] = L(Xt(1, ["#021719"])), sprite[k.HURT_TREASURE_CHEST] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 253 * e, t.height = 192 * e, r.save(), r.translate(37 * e, 94 * e), ge(r, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e), r.restore(), Ce(r, i[0]), r.save(), r.translate(131 * e, 94 * e), ge(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e), r.restore(), Ce(r, i[0], i[0], 13 * e), r.save(), r.translate(223 * e, 94.5 * e), ge(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e), r.restore(), Ce(r, i[0]), r.save(), r.translate(128.5 * e, 170.5 * e), ge(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e), r.restore(), Ce(r, i[0]), t
        }(.5, ["#BB0000"])), sprite[k.HURT_FOX] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 161 * e, t.height = 190 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), Ce(r, i, i, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(25 * e, 63 * e), r.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e), r.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e), r.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e), Ce(r, i, i, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(91 * e, 53 * e), r.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e), r.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e), r.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e), Ce(r, i, i, 4 * e), t
        }(.9, "#BB0000")), sprite[k.HURT_BEAR] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 147 * e, t.height = 172 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(8 * e, 50 * e), r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e), r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e), r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e), r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e), r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e), r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e), r.closePath(), Ce(r, i, i, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(14 * e, 57 * e), r.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e), r.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e), Ce(r, i, i, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 47 * e), r.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e), r.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e), Ce(r, i, i, 4 * e), t
        }(.9, "#BB0000")), sprite[k.HURT_DRAGON] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 271 * e, t.height = 366 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), Ce(r, i[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), Ce(r, i[0]), t
        }(1, ["#BB0000"])), sprite[k.HURT_WING_LEFT] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 85 * e, t.height = 145 * e, r.translate(-20 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(50 * e, 105 * e), r.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e), r.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e), r.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e), r.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e), r.closePath(), Ce(r, i), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44 * e, 106 * e), r.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e), r.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e), r.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e), r.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e), r.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e), r.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e), r.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e), r.closePath(), Ce(r, i, i, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 159 * e), r.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e), r.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e), r.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e), r.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e), r.closePath(), Ce(r, i), t
        }(.8, "#BB0000")), sprite[k.HURT_WING_RIGHT] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 85 * e, t.height = 145 * e, r.translate(-165 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217 * e, 103 * e), r.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e), r.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e), r.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e), r.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e), r.closePath(), Ce(r, i), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(231 * e, 163 * e), r.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e), r.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e), r.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e), r.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e), r.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e), r.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e), r.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e), r.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e), r.closePath(), Ce(r, i, i, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(234 * e, 154 * e), r.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e), r.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e), r.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e), r.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e), r.closePath(), Ce(r, i), t
        }(.8, "#BB0000")), sprite[k.HURT_RABBIT] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d"),
                n = 85 * e,
                a = 115 * e,
                o = 4 * e;
            return t.width = n, t.height = a, r.translate(-130 * e, -60 * e), r.globalAlpha = 1, r.beginPath(), r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e), r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e), r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e), r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e), r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e), r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e), r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e), r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e), r.closePath(), Ce(r, i, i, o), t
        }(.9, "#BB0000")), sprite[k.HURT] = L(me(.6, "#BB0000")), sprite[k.COLD] = L(me(.6, "#1CE7E0")), sprite[k.HUNGER] = L(me(.6, "#DBE71C")), sprite[k.HEAL] = L(me(.6, "#00BB00")), sprite[k.SAND_STEP] = [], sprite[k.SAND_STEP][k.DAY] = L(Xt(1, ["#dac291"])), sprite[k.SAND_STEP][k.NIGHT] = L(Xt(1, ["#0D423D"])), sprite[k.ISLAND_STEP] = [], sprite[k.ISLAND_STEP][k.DAY] = L(Xt(1, ["#dac291"])), sprite[k.ISLAND_STEP][k.NIGHT] = L(Xt(1, ["#0D423D"])), sprite[k.WELL_FULL] = [], sprite[k.WELL_FULL][k.DAY] = L(Lr(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"])), sprite[k.WELL_FULL][k.NIGHT] = L(Lr(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"])), sprite[k.WELL_EMPTY] = [], sprite[k.WELL_EMPTY][k.DAY] = L(Lr(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"])), sprite[k.WELL_EMPTY][k.NIGHT] = L(Lr(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"])), sprite[k.BOTTLE_FULL] = [L(Fr(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))], sprite[k.BOTTLE_EMPTY] = [L(Fr(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))], sprite[k.OCEAN] = [], sprite[k.OCEAN][k.DAY] = [], sprite[k.OCEAN][k.NIGHT] = [], sprite[k.OCEAN][k.DAY].push(L(wt(1, ["#0B6A84"]))), sprite[k.OCEAN][k.DAY].push(L(Ut(1, ["#0B6A84"]))), sprite[k.OCEAN][k.DAY].push(L(Yt(1, ["#0B6A84"]))), sprite[k.OCEAN][k.DAY].push(L(Ft(1, ["#0B6A84"]))), sprite[k.OCEAN][k.DAY].push(L(kt(1, ["#0B6A84"]))), sprite[k.OCEAN][k.DAY].push(L(xt(1, ["#0B6A84"]))), sprite[k.OCEAN][k.DAY].push(L(Jt(1, ["#0B6A84"]))), sprite[k.OCEAN][k.NIGHT].push(L(wt(1, ["#09373F"]))), sprite[k.OCEAN][k.NIGHT].push(L(Ut(1, ["#09373F"]))), sprite[k.OCEAN][k.NIGHT].push(L(Yt(1, ["#09373F"]))), sprite[k.OCEAN][k.NIGHT].push(L(Ft(1, ["#09373F"]))), sprite[k.OCEAN][k.NIGHT].push(L(kt(1, ["#09373F"]))), sprite[k.OCEAN][k.NIGHT].push(L(xt(1, ["#09373F"]))), sprite[k.OCEAN][k.NIGHT].push(L(Jt(1, ["#09373F"]))), sprite[k.ISLAND] = [], sprite[k.ISLAND][k.DAY] = [], sprite[k.ISLAND][k.NIGHT] = [], sprite[k.ISLAND][k.DAY].push(L(Lt(1.7, ["#FBEFBC"], 0))), sprite[k.ISLAND][k.DAY].push(L(Lt(1.9, ["#FBEFBC"], 1))), sprite[k.ISLAND][k.DAY].push(L(Lt(1.7, ["#FBEFBC"], 2))), sprite[k.ISLAND][k.NIGHT].push(L(Lt(1.7, ["#0F4C48"], 0))), sprite[k.ISLAND][k.NIGHT].push(L(Lt(1.9, ["#0F4C48"], 1))), sprite[k.ISLAND][k.NIGHT].push(L(Lt(1.7, ["#0F4C48"], 2))), sprite[k.WAVE_ONE] = [], sprite[k.WAVE_ONE][k.DAY] = [], sprite[k.WAVE_ONE][k.NIGHT] = [], sprite[k.WAVE_ONE][k.DAY].push(L(Lt(1.8, ["#A9D6D3"], 0))), sprite[k.WAVE_ONE][k.DAY].push(L(Lt(2, ["#A9D6D3"], 1))), sprite[k.WAVE_ONE][k.DAY].push(L(Lt(1.8, ["#A9D6D3"], 2))), sprite[k.WAVE_ONE][k.NIGHT].push(L(Lt(1.8, ["#115E60"], 0))), sprite[k.WAVE_ONE][k.NIGHT].push(L(Lt(2, ["#115E60"], 1))), sprite[k.WAVE_ONE][k.NIGHT].push(L(Lt(1.8, ["#115E60"], 2))), sprite[k.WAVE_TWO] = [], sprite[k.WAVE_TWO][k.DAY] = [], sprite[k.WAVE_TWO][k.NIGHT] = [], sprite[k.WAVE_TWO][k.DAY].push(L(Lt(1.9, ["#2A8B9B"], 0))), sprite[k.WAVE_TWO][k.DAY].push(L(Lt(2.1, ["#2A8B9B"], 1))), sprite[k.WAVE_TWO][k.DAY].push(L(Lt(1.9, ["#2A8B9B"], 2))), sprite[k.WAVE_TWO][k.NIGHT].push(L(Lt(1.9, ["#0F464C"], 0))), sprite[k.WAVE_TWO][k.NIGHT].push(L(Lt(2.1, ["#0F464C"], 1))), sprite[k.WAVE_TWO][k.NIGHT].push(L(Lt(1.9, ["#0F464C"], 2))), sprite[k.PALM] = [], sprite[k.PALM][k.DAY] = [], sprite[k.PALM][k.NIGHT] = [], sprite[k.PALM][k.DAY].push(L($i(.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))), sprite[k.PALM][k.DAY].push(L($i(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))), sprite[k.PALM][k.DAY].push(L($i(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))), sprite[k.PALM][k.NIGHT].push(L($i(.8, ["#041e22", "#124949", "#0e3838", "#0a4049"]))), sprite[k.PALM][k.NIGHT].push(L($i(1, ["#041e22", "#124949", "#0e3838", "#0a4049"]))), sprite[k.PALM][k.NIGHT].push(L($i(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"]))), sprite[k.KRAKEN] = [], sprite[k.KRAKEN][k.DAY] = L(Sr(.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"])), sprite[k.KRAKEN][k.NIGHT] = L(Sr(.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"])), sprite[k.HURT_KRAKEN] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 376 * e, t.height = 371 * e, r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e), r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e), r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e), r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e), r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e), r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e), r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e), r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e), r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e), r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e), r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e), r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e), r.closePath(), Ce(r, i[0], i[0], 12 * e), t
        }(.8, ["#B6222A"])), sprite[k.PIRANHA] = [], sprite[k.PIRANHA][k.DAY] = L(zr(.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"])), sprite[k.PIRANHA][k.NIGHT] = L(zr(.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"])), sprite[k.HURT_PIRANHA] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 158 * e, t.height = 201 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(96.5 * e, 76.421875 * e), r.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e), r.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e), r.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(61.5 * e, 78.421875 * e), r.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e), r.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e), r.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(116.5 * e, 127.421875 * e), r.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e), r.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e), r.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(41.5 * e, 134.421875 * e), r.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e), r.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e), r.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(78.5 * e, 51.921875 * e), r.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e), r.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e), r.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e), r.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(72.5 * e, 72.421875 * e), r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(42.5 * e, 163.421875 * e), r.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e), r.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e), r.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(79.5 * e, 61.421875 * e), r.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e), r.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e), r.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(72.5 * e, 72.421875 * e), r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), r.closePath(), Ce(r, i[0], i[0], 10 * e), t
        }(.8, ["#B6222A"])), sprite[k.FISH1] = [], sprite[k.FISH1][k.DAY] = L(We(.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0)), sprite[k.FISH1][k.NIGHT] = L(We(.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)), sprite[k.FISH2] = [], sprite[k.FISH2][k.DAY] = L(We(.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1)), sprite[k.FISH2][k.NIGHT] = L(We(.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1)), sprite[k.FISH3] = [], sprite[k.FISH3][k.DAY] = L(We(.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0)), sprite[k.FISH3][k.NIGHT] = L(We(.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)), sprite[k.HURT_FISH1] = L(Ve(.4, ["#B6222A"])), sprite[k.HURT_FISH2] = L(Ve(.4, ["#B6222A"])), sprite[k.HURT_FISH3] = L(Ve(.4, ["#B6222A"])), sprite[k.CRAB_LOOT] = L(At(.35, !0, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"])), sprite[k.CRAB_STICK] = L(mi(.35, !0, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"])), sprite[k.CRAB_ATTACK] = [], sprite[k.CRAB_ATTACK][k.DAY] = L(Di(.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1)), sprite[k.CRAB_ATTACK][k.NIGHT] = L(Di(.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1)), sprite[k.CRAB] = [], sprite[k.CRAB][k.DAY] = L(Di(.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0)), sprite[k.CRAB][k.NIGHT] = L(Di(.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0)), sprite[k.CRAB_CLAW_LEFT] = [], sprite[k.CRAB_CLAW_LEFT][k.DAY] = L(Si(.35, 0, ["#1e2021", "#e45936", "#ffffff"])), sprite[k.CRAB_CLAW_LEFT][k.NIGHT] = L(Si(.35, 0, ["#0c0c0d", "#34255d", "#563f83"])), sprite[k.CRAB_CLAW_RIGHT] = [], sprite[k.CRAB_CLAW_RIGHT][k.DAY] = L(pi(.42, 0, ["#1e2021", "#e45936", "#ffffff"])), sprite[k.CRAB_CLAW_RIGHT][k.NIGHT] = L(pi(.42, 0, ["#0c0c0d", "#34255d", "#563f83"])), sprite[k.CRAB_CLAW_LEFT_ATTACK] = [], sprite[k.CRAB_CLAW_LEFT_ATTACK][k.DAY] = L(Si(.35, 0, ["#1e2021", "#e45936", "#B6222A"])), sprite[k.CRAB_CLAW_LEFT_ATTACK][k.NIGHT] = L(Si(.35, 0, ["#0c0c0d", "#613577", "#462966"])), sprite[k.CRAB_CLAW_RIGHT_ATTACK] = [], sprite[k.CRAB_CLAW_RIGHT_ATTACK][k.DAY] = L(pi(.42, 0, ["#1e2021", "#e45936", "#B6222A"])), sprite[k.CRAB_CLAW_RIGHT_ATTACK][k.NIGHT] = L(pi(.42, 0, ["#0c0c0d", "#613577", "#462966"])), sprite[k.HURT_CRAB] = L(bi(.35, ["#B6222A"])), sprite[k.HURT_CRAB_CLAW_LEFT] = L(Si(.35, 0, [void 0, "#B6222A"])), sprite[k.HURT_CRAB_CLAW_RIGHT] = L(pi(.35, 0, [void 0, "#B6222A"])), sprite[k.HEAL_CRAB] = L(bi(.35, ["#22E066"])), sprite[k.HEAL_CRAB_CLAW_LEFT] = L(Si(.35, 0, [void 0, "#22E066"])), sprite[k.HEAL_CRAB_CLAW_RIGHT] = L(pi(.35, 0, [void 0, "#22E066"])), sprite[k.DIVING_MASK] = [], sprite[k.DIVING_MASK][k.DAY] = L(xi(.3, !0, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"])), sprite[k.DIVING_MASK][k.NIGHT] = L(xi(.3, !0, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"])), sprite[k.SUPER_DIVING_SUIT] = [], sprite[k.SUPER_DIVING_SUIT][k.DAY] = L(Ji(.45, !0, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"])), sprite[k.SUPER_DIVING_SUIT][k.NIGHT] = L(Ji(.45, !0, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"])), sprite[k.PLOT] = [], sprite[k.PLOT][k.DAY] = L(Pr(.63, !0, ["#1e2021", "#352E1E", "#4C3B19", "#574122"])), sprite[k.PLOT][k.NIGHT] = L(Pr(.63, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])), sprite[k.BRIDGE] = [], sprite[k.BRIDGE][k.DAY] = L(Gr(1, !0, ["#1e2021", "#332715", "#4C3B19", "#574122"])), sprite[k.BRIDGE][k.NIGHT] = L(Gr(1, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])), sprite[k.WOOD_TOWER] = [], sprite[k.WOOD_TOWER][k.DAY] = IMAGES.WOOD_TOWERD, sprite[k.WOOD_TOWER][k.NIGHT] = IMAGES.WOOD_TOWERN, sprite[k.ROOF] = [], sprite[k.ROOF][k.DAY] = L(Le(.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])), sprite[k.ROOF][k.NIGHT] = L(Le(.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])), sprite[k.ROOFS] = [sprite[k.ROOF]], sprite[k.ROOFS][1] = [], sprite[k.ROOFS][2] = [], sprite[k.ROOFS][1][k.DAY] = L(fe(.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])), sprite[k.ROOFS][1][k.NIGHT] = L(fe(.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])), sprite[k.ROOFS][2][k.DAY] = L(He(.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])), sprite[k.ROOFS][2][k.NIGHT] = L(He(.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])), sprite[k.WATERING_CAN_FULL] = [], sprite[k.WATERING_CAN_FULL][k.DAY] = L(Se(3 - Math.PI / 2, yr(.6, !0, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]))), sprite[k.WATERING_CAN_FULL][k.NIGHT] = L(Se(3 - Math.PI / 2, yr(.6, !0, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"]))), sprite[k.DEAD_BOX] = [], sprite[k.DEAD_BOX][k.DAY] = L(Xe(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0)), sprite[k.DEAD_BOX][k.NIGHT] = L(Xe(.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0)), sprite[k.DEAD_BOX_UI] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 650 * e, t.height = 650 * e, r.scale(1.9, 1.9), r.save(), r.translate(202.5 * e, 147.5 * e), ge(r, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e), r.restore(), Ce(r, i[4], i[1], 12 * e), r.save(), r.translate(203.5 * e, 121.5 * e), ge(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e), r.restore(), Ce(r, i[3], i[1], 12 * e), r.save(), r.translate(203.5 * e, 299 * e), ge(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e), r.restore(), Ce(r, i[3], i[1], 12 * e), r.save(), r.translate(298.5 * e, 210 * e), ge(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), Ce(r, i[3], i[1], 12 * e), r.save(), r.translate(108.5 * e, 210 * e), ge(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), Ce(r, i[3], i[1], 12 * e), r.save(), r.translate(204 * e, 121.5 * e), ge(r, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e), r.restore(), Ce(r, i[3], i[3], 10 * e), r.save(), r.translate(197 * e, 299 * e), ge(r, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e), r.restore(), Ce(r, i[3], i[3], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(94 * e, 317 * e), r.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e), r.closePath(), Ce(r, void 0, i[1], 12 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(279 * e, 142 * e), r.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e), r.closePath(), Ce(r, void 0, i[1], 12 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 106 * e), r.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e), r.closePath(), Ce(r, void 0, i[1], 12 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(281 * e, 282 * e), r.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e), r.closePath(), Ce(r, void 0, i[1], 12 * e), t
        }(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"])), sprite[k.HURT_DEAD_BOX] = L(function (e, i) {
            var t = document.createElement("canvas"),
                r = t.getContext("2d");
            return t.width = 400 * e, t.height = 400 * e, r.save(), r.translate(202.5 * e, 147.5 * e), ge(r, -96.5 * e, -21.5 * e, 193 * e, 43 * e, 0 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(202.5 * e, 190.5 * e), ge(r, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(202.5 * e, 233.5 * e), ge(r, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(202.5 * e, 275 * e), ge(r, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(203.5 * e, 121.5 * e), ge(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(203.5 * e, 299 * e), ge(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(298.5 * e, 210 * e), ge(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), r.save(), r.translate(108.5 * e, 210 * e), ge(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), Ce(r, i[0], i[0], 12 * e), t
        }(.3, ["#BB0000"])), sprite[k.WINDMILL_FLOUR] = ri(1, [{
            f: Br,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], .25, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[k.LAVA_HEART] = ri(1.5, [{
            f: Rr,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9), sprite[k.HEART_SYMBOL_HUD] = qr(.35, ["#072428", "#67A242", "#67A242"], 0), sprite[k.COLD_SYMBOL_HUD] = qr(.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1), sprite[k.FOOD_SYMBOL_HUD] = qr(.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2), sprite[k.WATER_SYMBOL_HUD] = qr(.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3), sprite[k.LEADERBOARD] = L(function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d"),
                r = 200 * e,
                n = 270 * e,
                a = 8 * e;
            i.width = r, i.height = n + 20, t.beginPath(), ge(t, 0, 0, r, n - a, a), t.globalAlpha = .5, Ce(t, "#1D6055"), t.globalAlpha = 1;
            var o = zi(e, "Leaderboard", 25, "#FFF");
            return t.drawImage(o, (r - o.width) / 2, 5 * e), i
        }(1)), sprite[k.GAUGES] = L(function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d"),
                r = 950 * e,
                n = 180 * e,
                a = 50 * e,
                o = 20 * e,
                s = 240 * e,
                _ = 35 * e,
                E = 1 * e,
                T = 4 * e,
                A = 4 * e;
            i.width = r, i.height = a, t.translate(0, 15 * e), ge(t, _, E, n, o, T), Ce(t, null, "#69A148", A);
            var d = sprite[k.HEART_SYMBOL_HUD];
            return t.drawImage(d, 17, -8), t.translate(s, 0), ge(t, _, E, n, o, T), Ce(t, null, "#AF352A", A), d = sprite[k.FOOD_SYMBOL_HUD], t.drawImage(d, 17, -9), t.translate(s, 0), ge(t, _, E, n, o, T), Ce(t, null, "#669BB1", A), d = sprite[k.COLD_SYMBOL_HUD], t.drawImage(d, 17, -8), t.translate(s, 0), ge(t, _, E, n, o, T), Ce(t, null, "#074A87", A), d = sprite[k.WATER_SYMBOL_HUD], t.drawImage(d, 17, -8), i
        }(1)), sprite[k.OXYGEN] = L(function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d"),
                r = 600 * e,
                n = 22 * e,
                a = 4 * e,
                o = 4 * e;
            return i.width = r, i.height = n, ge(t, 5 * e, 5 * e, r - 10 * e, n - 10 * e, a), Ce(t, null, "#BBE8EF", o), i
        }(1)), sprite[k.DELAY_HELMET] = L(tr(.16, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])), sprite[k.DELAY_WEAPON] = L(Se(5.8, gi(.15, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]))), sprite[k.COUNTER] = [], sprite[k.SLOT_NUMBER] = [];
        for (i = 0; i < qo.WITH_BAG + 2; i++) sprite[k.SLOT_NUMBER][i] = zi(1, "" + (i + 1), 12, "#FFF");
        sprite[k.RECIPE_BUTTON] = [], sprite[k.RECIPE_BUTTON].push(L(jr(.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"]))), sprite[k.RECIPE_BUTTON].push(L(jr(.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1))), sprite[k.RECIPE_BUTTON].push(L(jr(.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1))), sprite[k.CLOCK] = [], sprite[k.CLOCK].push(L(function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d");
            return i.width = 321 * e, i.height = 345 * e, t.translate(0, 5 * e), t.translate(0, 20 * e), Ne(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e), Ce(t, "#322413", "#322413", 4 * e), t.translate(0, -20 * e), Ne(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e), Ce(t, "#392C16", "#5E3E1A", 10 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(31.999969482421875 * e, 163.07290649414062 * e), t.bezierCurveTo(22.999969482421875 * e, 67.07290649414062 * e, 106 * e, 20.072906494140625 * e, 162 * e, 23.072906494140625 * e), t.bezierCurveTo(269.9999694824219 * e, 31.072906494140625 * e, 292.9999694824219 * e, 120.07290649414062 * e, 294.9999694824219 * e, 161.07290649414062 * e), t.bezierCurveTo(165.49996948242188 * e, 162.07290649414062 * e, 165.49996948242188 * e, 162.07290649414062 * e, 35.999969482421875 * e, 163.07290649414062 * e), t.closePath(), Ce(t, "#12432D"), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(32.999969482421875 * e, 165.07290649414062 * e), t.bezierCurveTo(16.999969482421875 * e, 221.07290649414062 * e, 85 * e, 289.0729064941406 * e, 156 * e, 294.0729064941406 * e), t.bezierCurveTo(263.9999694824219 * e, 293.0729064941406 * e, 295.9999694824219 * e, 199.07290649414062 * e, 294.9999694824219 * e, 159.07290649414062 * e), t.closePath(), Ce(t, "#3A2A0D"), Ne(t, 161 * e, 158.07290649414062 * e, 133.4053971921676 * e), Ce(t, void 0, "#5E3E1A", 10 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(31.999969482421875 * e, 161.62844848632812 * e), t.bezierCurveTo(162.49996948242188 * e, 161.62844848632812 * e, 162.49996948242188 * e, 161.62844848632812 * e, 292.9999694824219 * e, 161.62844848632812 * e), t.closePath(), Ce(t, void 0, "#5E3E1A", 12 * e), t.translate(0, 8 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(66 * e, 158.29513549804688 * e), t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(57.999969482421875 * e, 117.29513549804688 * e), t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(95 * e, 90.29513549804688 * e), t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(116 * e, 52.850677490234375 * e), t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(159 * e, 61.295135498046875 * e), t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(203 * e, 51.295135498046875 * e), t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(225 * e, 89.29513549804688 * e), t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(266.9999694824219 * e, 112.29513549804688 * e), t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(256.9999694824219 * e, 155.29513549804688 * e), t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), t.closePath(), Ce(t, void 0, "#c7a726", 12 * e), t.translate(0, -8 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(66 * e, 158.29513549804688 * e), t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(57.999969482421875 * e, 117.29513549804688 * e), t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(95 * e, 90.29513549804688 * e), t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(116 * e, 52.850677490234375 * e), t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(159 * e, 61.295135498046875 * e), t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(203 * e, 51.295135498046875 * e), t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(225 * e, 89.29513549804688 * e), t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(266.9999694824219 * e, 112.29513549804688 * e), t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(256.9999694824219 * e, 155.29513549804688 * e), t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), t.closePath(), Ce(t, void 0, "#EDCE4F", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(94.00003051757812 * e, 164.40341186523438 * e), t.bezierCurveTo(162.50003051757812 * e, 164.40341186523438 * e, 230.00003051757812 * e, 165.40341186523438 * e, 231.00003051757812 * e, 164.40341186523438 * e), t.bezierCurveTo(214.00003051757812 * e, 267.4034118652344 * e, 92.00003051757812 * e, 243.40341186523438 * e, 93.00003051757812 * e, 165.40341186523438 * e), t.closePath(), Ce(t, "#704618", "#5D3D1A", 8 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(96 * e, 166 * e), t.bezierCurveTo(88 * e, 117 * e, 129 * e, 92 * e, 161 * e, 91 * e), t.bezierCurveTo(201 * e, 90 * e, 223 * e, 121 * e, 230 * e, 161 * e), t.closePath(), Ce(t, "#ECBE35", "#EDCE4F", 8 * e), Ne(t, 160.00003051757812 * e, 166.49432373046875 * e, 28.30194339616981 * e), Ce(t, "#392C16", "#5E3E1A", 10 * e), i
        }(.22))), sprite[k.CLOCK].push(L(function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d");
            return i.width = 321 * e, i.height = 345 * e, t.translate(0, 5 * e), t.translate(0, 20 * e), Ne(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e), Ce(t, "#322413", "#322413", 4 * e), t.translate(0, -20 * e), Ne(t, 160.5 * e, 159.5 * e, 156.39595138242822 * e), Ce(t, "#392C16", "#5E3E1A", 10 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(31.999969482421875 * e, 163.07290649414062 * e), t.bezierCurveTo(22.999969482421875 * e, 67.07290649414062 * e, 106 * e, 20.072906494140625 * e, 162 * e, 23.072906494140625 * e), t.bezierCurveTo(269.9999694824219 * e, 31.072906494140625 * e, 292.9999694824219 * e, 120.07290649414062 * e, 294.9999694824219 * e, 161.07290649414062 * e), t.bezierCurveTo(165.49996948242188 * e, 162.07290649414062 * e, 165.49996948242188 * e, 162.07290649414062 * e, 35.999969482421875 * e, 163.07290649414062 * e), t.closePath(), Ce(t, "#3A2A0D"), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(32.999969482421875 * e, 165.07290649414062 * e), t.bezierCurveTo(16.999969482421875 * e, 221.07290649414062 * e, 85 * e, 289.0729064941406 * e, 156 * e, 294.0729064941406 * e), t.bezierCurveTo(263.9999694824219 * e, 293.0729064941406 * e, 295.9999694824219 * e, 199.07290649414062 * e, 294.9999694824219 * e, 159.07290649414062 * e), t.closePath(), Ce(t, "#071A1B"), Ne(t, 161 * e, 158.07290649414062 * e, 133.4053971921676 * e), Ce(t, void 0, "#5E3E1A", 10 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(31.999969482421875 * e, 161.62844848632812 * e), t.bezierCurveTo(162.49996948242188 * e, 161.62844848632812 * e, 162.49996948242188 * e, 161.62844848632812 * e, 292.9999694824219 * e, 161.62844848632812 * e), t.closePath(), Ce(t, void 0, "#5E3E1A", 12 * e), t.translate(0, 8 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(66 * e, 158.29513549804688 * e), t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(57.999969482421875 * e, 117.29513549804688 * e), t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(95 * e, 90.29513549804688 * e), t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(116 * e, 52.850677490234375 * e), t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(159 * e, 61.295135498046875 * e), t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(203 * e, 51.295135498046875 * e), t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(225 * e, 89.29513549804688 * e), t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(266.9999694824219 * e, 112.29513549804688 * e), t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(256.9999694824219 * e, 155.29513549804688 * e), t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), t.closePath(), Ce(t, void 0, "#281C08", 12 * e), t.translate(0, -8 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(66 * e, 158.29513549804688 * e), t.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(57.999969482421875 * e, 117.29513549804688 * e), t.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(95 * e, 90.29513549804688 * e), t.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(116 * e, 52.850677490234375 * e), t.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(159 * e, 61.295135498046875 * e), t.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(203 * e, 51.295135498046875 * e), t.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(225 * e, 89.29513549804688 * e), t.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(266.9999694824219 * e, 112.29513549804688 * e), t.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(256.9999694824219 * e, 155.29513549804688 * e), t.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), t.closePath(), Ce(t, void 0, "#5E3C10", 12 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(96 * e, 166 * e), t.bezierCurveTo(88 * e, 117 * e, 129 * e, 92 * e, 161 * e, 91 * e), t.bezierCurveTo(201 * e, 90 * e, 223 * e, 121 * e, 230 * e, 161 * e), t.closePath(), Ce(t, "#704618", "#5D3D1A", 8 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(94.00003051757812 * e, 164.40341186523438 * e), t.bezierCurveTo(162.50003051757812 * e, 164.40341186523438 * e, 230.00003051757812 * e, 165.40341186523438 * e, 231.00003051757812 * e, 164.40341186523438 * e), t.bezierCurveTo(214.00003051757812 * e, 267.4034118652344 * e, 92.00003051757812 * e, 243.40341186523438 * e, 93.00003051757812 * e, 165.40341186523438 * e), t.closePath(), Ce(t, "#E1DDD5", "#EAE7E4", 8 * e), Ne(t, 160.00003051757812 * e, 166.49432373046875 * e, 28.30194339616981 * e), Ce(t, "#392C16", "#5E3E1A", 10 * e), i
        }(.22))), sprite[k.ARROW_CLOCK] = L(function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d");
            return i.width = 321 * e, i.height = 345 * e, t.translate(0, 5 * e), Ne(t, 161.00003051757812 * e, 165.40341186523438 * e, 20.808652046684813 * e), Ce(t, "#C09D6F", "#A37943", 10 * e), t.beginPath(), t.lineCap = "round", t.lineJoin = "round", t.moveTo(162.00003051757812 * e, 48.403411865234375 * e), t.bezierCurveTo(172.50003051757812 * e, 67.40341186523438 * e, 172.50003051757812 * e, 67.40341186523438 * e, 183.00003051757812 * e, 86.40341186523438 * e), t.bezierCurveTo(160.50003051757812 * e, 86.40341186523438 * e, 160.50003051757812 * e, 86.40341186523438 * e, 138.00003051757812 * e, 86.40341186523438 * e), t.closePath(), Ce(t, "#C09D6F", "#A37943", 10 * e), t.save(), t.translate(161.50003051757812 * e, 117.90341186523438 * e), ge(t, -5.5 * e, -37.5 * e, 11 * e, 75 * e, 10 * e), t.restore(), Ce(t, "#C09D6F", "#A37943", 10 * e), t.save(), t.translate(162.00003051757812 * e, 78.90341186523438 * e), ge(t, -10 * e, -5.5 * e, 20 * e, 11 * e, 1 * e), t.restore(), Ce(t, "#C09D6F"), Ne(t, 161.00003051757812 * e, 163.6761474609375 * e, 17.08800749063506 * e), Ce(t, "#C09D6F"), i
        }(.22)), sprite[k.OPTION_BUTTON] = [], sprite[k.OPTION_BUTTON].push(L(Ue(1.5, ["#795026", "#654320", "#eda80d"], 0))), sprite[k.OPTION_BUTTON].push(L(Ue(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1))), sprite[k.OPTION_BUTTON].push(L(Ue(1.5, ["#67441f", "#573819", "#9c6e08"], 1))), sprite[k.AUTO_FEED] = IMAGES.AUTO_FEED, sprite[k.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED, sprite[k.STOP_REGENERATION] = IMAGES.STOP_REGENERATION, sprite[k.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD, sprite[k.SHOW_SPECTATORS] = zi(1, "Show spectators", 25, "#FFF", void 0, void 0, "#000", 5, 220), sprite[k.RECONNECT] = zi(1, "Reconnecting...", 30, "#FFF"), console.log("Load canvas", Date.now() - e)
    }

    function an() {
        var e = __.time;
        if (sprite[k.HERB] && (I.drawImage(sprite[k.HERB][e][1], R + 480, c + 190), I.drawImage(sprite[k.HERB][e][2], R + 180, c - 430), I.drawImage(sprite[k.HERB][e][1], R - 855, c + 100), I.drawImage(sprite[k.HERB][e][0], R - 550, c - 300), I.drawImage(sprite[k.HERB][e][0], R - 1020, c - 520)), sprite[k.STONES] && (I.drawImage(sprite[k.STONES][e][1], R - 80, c - 640), I.drawImage(sprite[k.STONES][e][1], R + 80, c + 490), I.drawImage(sprite[k.STONES][e][2], R - 180, c - 700), I.drawImage(sprite[k.STONES][e][0], R + 550, c + 100), I.drawImage(sprite[k.STONES][e][1], R + 450, c + 300), I.drawImage(sprite[k.STONES][e][1], R + 780, c + 300), I.drawImage(sprite[k.STONES][e][2], R + 980, c + 200), I.drawImage(sprite[k.STONES][e][2], R + 680, c + 600), I.drawImage(sprite[k.STONES][e][2], R - 380, c + 100), I.drawImage(sprite[k.STONES][e][2], R + 280, c + 250)), sprite[k.PLANT] && (I.drawImage(sprite[k.PLANT][e][0], R - 590, c), I.drawImage(sprite[k.PLANT][e][0], R + 120, c - 390), I.drawImage(sprite[k.PLANT][e][0], R - 270, c + 340)), sprite[k.TREE] && (I.drawImage(sprite[k.TREE][e][4], R - 700, c - 600), I.drawImage(sprite[k.TREE][e][2], R - 970, c - 250), I.drawImage(sprite[k.TREE][e][5], R - 720, c - 200), I.drawImage(sprite[k.TREE][e][2], R - 1020, c + 340), I.drawImage(sprite[k.TREE][e][0], R - 1120, c - 0), I.drawImage(sprite[k.TREE][e][1], R - 650, c - 330), I.drawImage(sprite[k.TREE][e][4], R - 495, c - 90), I.drawImage(sprite[k.TREE][e][3], R - 520, c + 340), I.drawImage(sprite[k.TREE][e][2], R + 830, c - 520)), sprite[k.FIR], d_ && A_) {
            var i = d_.cam.x,
                t = d_.cam.y;
            d_.cam.x = R, d_.cam.y = c;
            var r = A_.time;
            A_.time = __.time;
            var n, a = __.items;
            a[2].x = 400, a[2].y = 100, a[2].draw(k.WORKBENCH), (n = a[1]).x = -500, n.y = 100, n.fruits[0].x = n.x - 20.5, n.fruits[0].y = n.y - 22.5, n.fruits[1].x = n.x - 35.5, n.fruits[1].y = n.y + 7.5, n.fruits[2].x = n.x + 7.5, n.fruits[2].y = n.y - 30, n.fruits[3].x = n.x + 22.5, n.fruits[3].y = n.y, n.fruits[4].x = n.x - 7.5, n.fruits[4].y = n.y + 14.5;
            for (var o = 0; o < n.info; o++) n.fruits[o].draw(k.FRUIT);
            (n = a[3]).x = 210, n.y = -290, n.fruits[0].x = n.x - 20.5, n.fruits[0].y = n.y - 22.5, n.fruits[1].x = n.x - 35.5, n.fruits[1].y = n.y + 7.5, n.fruits[2].x = n.x + 7.5, n.fruits[2].y = n.y - 30, n.fruits[3].x = n.x + 22.5, n.fruits[3].y = n.y, n.fruits[4].x = n.x - 7.5, n.fruits[4].y = n.y + 14.5;
            for (o = 0; o < n.info; o++) n.fruits[o].draw(k.FRUIT);
            a[0].x = 450, a[0].y = -100, a[0].draw_bg(k.WOOD_FIRE), a[0].draw_fg(), d_.cam.x = i, d_.cam.y = t, A_.time = r
        }
    }

    function on(e, i, t, r, n, a, o, s, _, E) {
        void 0 !== i.tryLoad && 1 !== i.tryLoad() || (void 0 !== E ? e.drawImage(i, t, r, Math.max(1, n), Math.max(1, a), o, s, _, E) : void 0 !== a ? e.drawImage(i, t, r, n, a) : e.drawImage(i, t, r))
    }

    function sn() {
        var e = h_.info_box,
            i = e.id;
        1 === e.activated && 1 === e.display && (void 0 === INFO_BOX[i] && (INFO_BOX[i] = function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d"),
                r = Ie[e];
            t.font = "20px Baloo Paaji";
            var n = 0;
            for (r.length >= 1 && (n = Math.max(0, t.measureText(r[0]).width)), t.font = "17px Baloo Paaji", r.length >= 2 && (n = Math.max(n, t.measureText(r[1]).width)), t.font = "14px Baloo Paaji", he = 2; he < r.length; he++) n = Math.max(n, t.measureText(r[he]).width);
            var a = n + 35,
                o = 0;
            if (o = 1 === r.length ? 55 : 2 === r.length ? 85 : 26 * (r.length - 2) + 85, i.width = a, i.height = o, ge(t, 0, 0, a, o, 10), t.fillStyle = "#000000", t.globalAlpha = .5, t.fill(), r.length >= 1 && (t.textBaseline = "middle", t.font = "20px Baloo Paaji", t.globalAlpha = 1, t.fillStyle = "#e2c340", t.fillText(r[0], 15, 28)), r.length >= 2 && (t.font = "17px Baloo Paaji", t.fillStyle = "#ffffff", t.fillText(r[1], 15, 55), o = 55), r.length >= 3)
                for (t.font = "14px Baloo Paaji", t.globalAlpha = .7, he = 2; he < r.length; he++) t.fillText(r[he], 15, o + 28), o += 26;
            return i
        }(i)), 1 === e.craft ? on(I, INFO_BOX[i], e.x, e.y) : e.x - 80 + INFO_BOX[i].width > u ? on(I, INFO_BOX[i], u - INFO_BOX[i].width - 10, e.y - INFO_BOX[i].height - 10) : on(I, INFO_BOX[i], e.x - 80, e.y - INFO_BOX[i].height - 10))
    }

    function _n(e, i, t) {
        var r = sprite[k.SLOT_NUMBER][e],
            n = i.info.translate.x + 5 * g,
            a = i.info.translate.y + 5 * g;
        (i.info.state == Wo || t) && (a += 5 * g), on(I, r, n, a)
    }

    function En(e, i) {
        sprite[k.COUNTER][e] || (sprite[k.COUNTER][e] = zi(g, "x" + e, 17, "#FFF"));
        var t = sprite[k.COUNTER][e],
            r = i.info.translate.x + i.info.img[0].width - t.width - 14 * g,
            n = i.info.translate.y + i.info.img[0].height - t.height - 19 * g;
        i.info.state == Wo && (n += 5 * g), on(I, t, r, n)
    }

    function Tn() {
        if (!(d_.chest.open || d_.furnace.open || d_.windmill.open || d_.bread_oven.open || d_.extractor.open)) {
            d_.sign.open = !1;
            var e = A_.fast_units[d_.uid],
                i = qo.DIST_SIGN;
            if (e) {
                for (var t = 0; t < A_.units[ITEMS.SIGN].length; t++) {
                    var r = A_.units[ITEMS.SIGN][t],
                        n = _.dist(r, e);
                    n < i && 0 === r.info && r.pid === d_.id && (d_.sign.open = !0, i = n, d_.sign.iid = r.id)
                }
                if (i < qo.DIST_SIGN) h_.sign.button.draw(I)
            }
        }
    }

    function An() {
        if (!(d_.chest.open || d_.furnace.open || d_.windmill.open || d_.extractor.open)) {
            d_.bread_oven.open = !1;
            var e = A_.fast_units[d_.uid],
                i = qo.DIST_BREAD_OVEN;
            if (e) {
                for (var t = 0; t < A_.units[ITEMS.BREAD_OVEN].length; t++) {
                    var r = A_.units[ITEMS.BREAD_OVEN][t],
                        n = _.dist(r, e);
                    n < i && (i = n, d_.bread_oven.open = !0, d_.bread_oven.amount_wood = 31 & r.info, d_.bread_oven.amount_flour = (992 & r.info) >> 5, d_.bread_oven.amount_bread = (31744 & r.info) >> 10, d_.bread_oven.pid = r.pid, d_.bread_oven.iid = r.id)
                }
                if (i < qo.DIST_BREAD_OVEN) {
                    var a = sprite[k.BREAD_OVEN_UI],
                        o = (s = h_.bread_oven_wood_button).info.translate.x - 32;
                    if (on(I, a, o, 0), d_.bread_oven.amount_wood > 0) s.draw(I), (E = d_.bread_oven.amount_wood) > 1 && En(E, s);
                    var s = h_.bread_oven_bread_button;
                    if (d_.bread_oven.amount_bread > 0) s.draw(I), (E = d_.bread_oven.amount_bread) > 1 && En(E, s);
                    var E;
                    s = h_.bread_oven_flour_button;
                    if (d_.bread_oven.amount_flour > 0) s.draw(I), (E = d_.bread_oven.amount_flour) > 1 && En(E, s)
                }
            }
        }
    }

    function dn() {
        if (!d_.chest.open && !d_.furnace.open) {
            d_.extractor.open = !1;
            var e = A_.fast_units[d_.uid],
                i = qo.DIST_EXTRACTOR_MACHINE;
            if (e) {
                for (var t = 0; t < $o.length; t++)
                    for (var r = $o[t][0], n = $o[t][1], a = 0; a < A_.units[r].length; a++) {
                        var o = A_.units[r][a],
                            s = _.dist(o, e);
                        s < i && (i = s, d_.extractor.mineral = n, d_.extractor.type = r, d_.extractor.open = !0, d_.extractor.amount_wood = 255 & o.info, d_.extractor.amount_mineral = (65280 & o.info) >> 8, d_.extractor.pid = o.pid, d_.extractor.iid = o.id)
                    }
                if (i < qo.DIST_EXTRACTOR_MACHINE) {
                    var E, T = sprite[k.EXTRACTOR_CASES],
                        A = (d = h_.extractor_wood_button).info.translate.x - 33;
                    if (on(I, T, A, 0), d_.extractor.amount_wood > 0) d.draw(I), (E = d_.extractor.amount_wood) > 1 && En(E, d);
                    switch (d_.extractor.mineral) {
                    case X.STONE:
                        var d = h_.extractor_stone_button;
                        break;
                    case X.GOLD:
                        d = h_.extractor_gold_button;
                        break;
                    case X.DIAMOND:
                        d = h_.extractor_diamond_button;
                        break;
                    case X.AMETHYST:
                        d = h_.extractor_amethyst_button;
                        break;
                    case X.REIDITE:
                        d = h_.extractor_reidite_button
                    }
                    if (d_.extractor.amount_mineral > 0) d.draw(I), (E = d_.extractor.amount_mineral) > 1 && En(E, d)
                }
            }
        }
    }

    function In() {
        if (!d_.chest.open && !d_.furnace.open) {
            d_.windmill.open = !1;
            var e = A_.fast_units[d_.uid],
                i = qo.DIST_WINDMILL;
            if (e) {
                for (var t = 0; t < A_.units[ITEMS.WINDMILL].length; t++) {
                    var r = A_.units[ITEMS.WINDMILL][t],
                        n = _.dist(r, e);
                    n < i && (i = n, d_.windmill.open = !0, d_.windmill.amount_wheat = 255 & r.info, d_.windmill.amount_flour = (65280 & r.info) >> 8, d_.windmill.pid = r.pid, d_.windmill.iid = r.id)
                }
                if (i < qo.DIST_WINDMILL) {
                    var a = sprite[k.WINDMILL_CASES],
                        o = (E = h_.windmill_wheat_button).info.translate.x - 33;
                    if (on(I, a, o, 0), d_.windmill.amount_wheat > 0) E.draw(I), (s = d_.windmill.amount_wheat) > 1 && En(s, E);
                    var s, E = h_.windmill_flour_button;
                    if (d_.windmill.amount_flour > 0) E.draw(I), (s = d_.windmill.amount_flour) > 1 && En(s, E)
                }
            }
        }
    }

    function hn() {
        if (!d_.chest.open) {
            d_.furnace.amount = 0, d_.furnace.open = !1;
            var e = A_.fast_units[d_.uid],
                i = qo.DIST_FURNACE;
            if (e) {
                for (var t = 0; t < A_.units[ITEMS.FURNACE].length; t++) {
                    var r = A_.units[ITEMS.FURNACE][t],
                        n = _.dist(r, e);
                    n < i && (i = n, d_.furnace.open = !0, d_.furnace.amount = r.info, d_.furnace.pid = r.pid, d_.furnace.iid = r.id)
                }
                if (i < qo.DIST_FURNACE) {
                    var a = sprite[k.FURNACE_SLOT],
                        o = h_.furnace_button,
                        s = Math.floor(o.info.translate.x + (o.info.img[0].width - a.width) / 2),
                        E = Math.floor(o.info.translate.y + (o.info.img[0].height - a.height) / 2) + 3;
                    if (on(I, a, s, E), d_.furnace.amount > 0) {
                        o.draw(I);
                        var T = d_.furnace.amount;
                        T > 1 && En(T, o)
                    }
                }
            }
        }
    }

    function un() {
        d_.resurrection.open = !1;
        var e = A_.fast_units[d_.uid],
            i = qo.DIST_RESURRECTION;
        if (e) {
            for (var t = 0; t < A_.units[ITEMS.RESURRECTION].length; t++) {
                var r = A_.units[ITEMS.RESURRECTION][t],
                    n = _.dist(r, e);
                n < i && (i = n, d_.resurrection.open = !0, d_.resurrection.pid = r.pid, d_.resurrection.iid = r.id)
            }
            i < qo.DIST_RESURRECTION && h_.resurrection.draw(I)
        }
    }

    function On() {
        if (d_.totem.id = -1, d_.totem.pid = -1, !(d_.spectator || d_.totem.wait || d_.zombie)) {
            var e = A_.fast_units[d_.uid],
                i = qo.DIST_TOTEM;
            if (e)
                for (var t = 0; t < A_.units[ITEMS.TOTEM].length; t++) {
                    var r = A_.units[ITEMS.TOTEM][t],
                        n = _.dist(r, e);
                    n < i && (i = n, d_.totem.id = r.id, d_.totem.pid = r.pid, d_.totem.info = r.info, d_.totem.lock = r.extra)
                }
            var a = h_.team_buttons_id;
            h_.team_buttons_id = -1, -1 == d_.totem.pid || 0 != d_.team.length && d_.id != d_.totem.pid ? 0 != d_.team.length && d_.team[0] != d_.id ? h_.team_buttons_id = Jo.TEAM_LEAVE : 0 != d_.team.length && d_.team[0] == d_.id ? h_.team_buttons_id = Jo.TEAM_SHOW : 0 != d_.team.length && (h_.team_buttons_id = Jo.TEAM_JOIN) : 0 == d_.team.length && d_.totem.info >= 8 || 0 == d_.team.length && d_.totem.lock ? h_.team_buttons_id = Jo.TEAM_FULL : 0 == d_.team.length ? h_.team_buttons_id = Jo.TEAM_JOIN : h_.team_buttons_id = Jo.TEAM_MANAGE, -1 != h_.team_buttons_id && h_.team_buttons[h_.team_buttons_id].button.draw(I);
            var o = document.getElementById("team_box").style; - 1 != h_.team_buttons_id && h_.team_buttons_id != a && "inline-block" == o.display && h_.team_buttons[h_.team_buttons_id].action()
        }
    }

    function ln() {
        d_.chest.id = -1, d_.chest.lock = !1, d_.chest.locked = !1, d_.chest.lockpick = !1, d_.chest.padlock = !1, d_.chest.open = !1;
        var e = A_.fast_units[d_.uid],
            i = qo.DIST_CHEST;
        if (e) {
            for (var t = 0; t < A_.units[ITEMS.CHEST].length; t++) {
                var r = A_.units[ITEMS.CHEST][t],
                    n = _.dist(r, e);
                n < i && (i = n, d_.chest.open = !0, d_.chest.id = 1024 == r.extra ? -1 : r.extra, d_.chest.amount = r.info, d_.chest.pid = r.pid, d_.chest.iid = r.id, d_.chest.locked = r.lock, d_.chest.lock = !(!r.lock || d_.id == r.pid || d_.in_team(r.pid)), d_.chest.padlock = r.pid === d_.id && !d_.chest.locked && -1 != d_.inv.find_item(X.LOCK), d_.chest.locked && -1 != d_.inv.find_item(X.LOCKPICK) && (d_.chest.lockpick = !0))
            }
            if (i < qo.DIST_CHEST) {
                var a = sprite[k.CHEST_SLOT],
                    o = h_.chest_buttons[0],
                    s = Math.floor(o.info.translate.x + (o.info.img[0].width - a.width) / 2),
                    E = Math.floor(o.info.translate.y + (o.info.img[0].height - a.height) / 2) + 3;
                if (on(I, a, s, E), (!d_.chest.lock || d_.chest.pid === d_.id) && d_.chest.id >= 0) {
                    (o = h_.chest_buttons[d_.chest.id]).draw(I);
                    var T = d_.chest.amount;
                    T > 1 && En(T, o)
                }
                d_.chest.lock ? h_.chest_locked.draw(I) : d_.chest.padlock && h_.chest_padlock.draw(I), d_.chest.lockpick && h_.chest_lockpick.draw(I)
            }
        }
    }

    function Rn() {
        if (d_.bigmap) {
            I.globalAlpha = .5, I.fillStyle = "#000", I.fillRect(0, 0, u, O), I.globalAlpha = .8;
            var e = sprite[k.BIGMAP][A_.time],
                i = R - e.width / 2,
                t = c - e.height / 2;
            on(I, e, i, t), I.globalAlpha = 1, h_.minimap.marker.x > -1 && (I.fillStyle = "#660000", Ne(I, i + 3 * h_.minimap.marker.x * g, t + 3 * h_.minimap.marker.y * g, 14 * g), I.fill());
            for (var r = h_.minimap.players, n = 0; n < r.length; n++) {
                var a = r[n];
                I.fillStyle = (A_.time, "#ff0000"), Ne(I, i + a.x / (100 * A_.nw) * 600 * g, t + a.y / (100 * A_.nh) * 600 * g, 6 * g), I.fill()
            }
            var o = A_.fast_units[d_.uid];
            o && (I.fillStyle = A_.time ? "#fff" : "#e39716", Ne(I, i + o.x / (100 * A_.nw) * 600 * g, t + o.y / (100 * A_.nh) * 600 * g, 12 * g), I.fill())
        }
    }

    function cn() {
        if (d_.reconnect.enabled) {
            I.globalAlpha = .9, I.fillStyle = "#000", ge(I, R - 150, c - 90, 300, 180, 15), I.fill(), I.globalAlpha = 1;
            var e = sprite[k.GEAR2];
            I.save(), d_.reconnect.rotate = (d_.reconnect.rotate + 2 * R_) % (2 * Math.PI), I.translate(u / 2, O / 2 - 25), I.rotate(d_.reconnect.rotate), on(I, e, -e.width / 2, -e.height / 2), I.restore();
            e = sprite[k.RECONNECT];
            on(I, e, (u - e.width) / 2, (O - e.height) / 2 + 25)
        }
    }

    function Cn() {
        if (d_.inv.can_select.length > 0) var e = {
            x: h_.minimap.translate.x,
            y: h_.minimap.translate.y - 120 * g
        };
        else e = {
            x: h_.minimap.translate.x,
            y: h_.minimap.translate.y - 50 * g
        };
        I.globalAlpha = .8;
        var i = sprite[k.MINIMAP][A_.time];
        on(I, i, e.x, e.y), I.globalAlpha = 1, h_.minimap.marker.x > -1 && (I.fillStyle = "#660000", Ne(I, e.x + h_.minimap.marker.x * g, e.y + h_.minimap.marker.y * g, 5 * g), I.fill());
        for (var t = g, r = h_.minimap.players, n = 0; n < r.length; n++) {
            var a = r[n];
            I.fillStyle = (A_.time, "#ff0000"), Ne(I, e.x + a.x / (100 * A_.nw) * 193 * g, e.y + a.y / (100 * A_.nh) * 193 * g, 2 * g), I.fill()
        }
        var o = A_.fast_units[d_.uid];
        o && (I.fillStyle = A_.time ? "#fff" : "#e39716", Ne(I, e.x + o.x / (100 * A_.nw) * 193 * g, e.y + o.y / (100 * A_.nh) * 193 * g, 4 * g), I.fill()), g = t
    }
    render_minimap = function () {
        for (var e = 0; e < 2; e++) {
            sprite[k.MINIMAP_CTX][e].clearRect(0, 0, 193, 193), sprite[k.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 193, 193), sprite[k.BIGMAP_CTX][e].clearRect(0, 0, 600, 600), sprite[k.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 600, 600);
            for (var i = A_.biomes.length - 1; i >= 0; i--) {
                var t = A_.biomes[i],
                    r = 193 * t.x1 / (100 * A_.nw),
                    n = 193 * t.y1 / (100 * A_.nh),
                    a = 193 * t.w / (100 * A_.nw),
                    o = 193 * t.h / (100 * A_.nh),
                    s = 600 * t.x1 / (100 * A_.nw),
                    _ = 600 * t.y1 / (100 * A_.nh),
                    E = 600 * t.w / (100 * A_.nw),
                    T = 600 * t.h / (100 * A_.nh);
                t.t === A_.BIOME_FOREST && (sprite[k.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], r, n, a, o), sprite[k.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], s, _, E, T)), t.t === A_.BIOME_WINTER && (sprite[k.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], r, n, a, o), sprite[k.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], s, _, E, T)), t.t === A_.BIOME_LAVA && (sprite[k.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], r, n, a, o), sprite[k.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], s, _, E, T)), t.t === A_.BIOME_DRAGON && (sprite[k.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], r, n, a, o), sprite[k.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], s, _, E, T)), t.t === A_.BIOME_DESERT && (sprite[k.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], r, n, a, o), sprite[k.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], s, _, E, T))
            }
        }
    }, render_cosmetics = function () {
        COSMETICS = {
            SKIN: [{
                id: 0,
                day: IMAGES.PLAYER0D,
                night: IMAGES.PLAYER0N,
                dayHand: IMAGES.HAND0D,
                nightHand: IMAGES.HAND0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                day: IMAGES.PLAYER3D,
                night: IMAGES.PLAYER3N,
                dayHand: IMAGES.HAND3D,
                nightHand: IMAGES.HAND3N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                day: IMAGES.PLAYER2D,
                night: IMAGES.PLAYER2N,
                dayHand: IMAGES.HAND2D,
                nightHand: IMAGES.HAND2N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                day: IMAGES.PLAYER9D,
                night: IMAGES.PLAYER9N,
                dayHand: IMAGES.HAND9D,
                nightHand: IMAGES.HAND9N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                day: IMAGES.PLAYER1D,
                night: IMAGES.PLAYER1N,
                dayHand: IMAGES.HAND1D,
                nightHand: IMAGES.HAND1N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                day: IMAGES.PLAYER4D,
                night: IMAGES.PLAYER4N,
                dayHand: IMAGES.HAND4D,
                nightHand: IMAGES.HAND4N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                day: IMAGES.PLAYER5D,
                night: IMAGES.PLAYER5N,
                dayHand: IMAGES.HAND5D,
                nightHand: IMAGES.HAND5N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                day: IMAGES.PLAYER6D,
                night: IMAGES.PLAYER6N,
                dayHand: IMAGES.HAND6D,
                nightHand: IMAGES.HAND6N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                day: IMAGES.PLAYER7D,
                night: IMAGES.PLAYER7N,
                dayHand: IMAGES.HAND7D,
                nightHand: IMAGES.HAND7N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                day: IMAGES.PLAYER8D,
                night: IMAGES.PLAYER8N,
                dayHand: IMAGES.HAND8D,
                nightHand: IMAGES.HAND8N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                day: IMAGES.PLAYER10D,
                night: IMAGES.PLAYER10N,
                dayHand: IMAGES.HAND10D,
                nightHand: IMAGES.HAND10N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                day: IMAGES.PLAYER11D,
                night: IMAGES.PLAYER11N,
                dayHand: IMAGES.HAND11D,
                nightHand: IMAGES.HAND11N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                day: IMAGES.PLAYER12D,
                night: IMAGES.PLAYER12N,
                dayHand: IMAGES.HAND12D,
                nightHand: IMAGES.HAND12N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                day: IMAGES.PLAYER13D,
                night: IMAGES.PLAYER13N,
                dayHand: IMAGES.HAND13D,
                nightHand: IMAGES.HAND13N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                day: IMAGES.PLAYER14D,
                night: IMAGES.PLAYER14N,
                dayHand: IMAGES.HAND14D,
                nightHand: IMAGES.HAND14N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                day: IMAGES.PLAYER15D,
                night: IMAGES.PLAYER15N,
                dayHand: IMAGES.HAND15D,
                nightHand: IMAGES.HAND15N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                day: IMAGES.PLAYER16D,
                night: IMAGES.PLAYER16N,
                dayHand: IMAGES.HAND16D,
                nightHand: IMAGES.HAND16N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                day: IMAGES.PLAYER17D,
                night: IMAGES.PLAYER17N,
                dayHand: IMAGES.HAND17D,
                nightHand: IMAGES.HAND17N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                day: IMAGES.PLAYER18D,
                night: IMAGES.PLAYER18N,
                dayHand: IMAGES.HAND18D,
                nightHand: IMAGES.HAND18N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                day: IMAGES.PLAYER19D,
                night: IMAGES.PLAYER19N,
                dayHand: IMAGES.HAND19D,
                nightHand: IMAGES.HAND19N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                day: IMAGES.SKIN7D,
                night: IMAGES.SKIN7N,
                dayHand: IMAGES.HAND_SKIN7D,
                nightHand: IMAGES.HAND_SKIN7N,
                rarity: RARITY.WOOD,
                author: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                day: IMAGES.SKIN0D,
                night: IMAGES.SKIN0N,
                dayHand: IMAGES.HAND_SKIN0D,
                nightHand: IMAGES.HAND_SKIN0N,
                rarity: RARITY.WOOD,
                author: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                day: IMAGES.SKIN78D,
                night: IMAGES.SKIN78N,
                dayHand: IMAGES.HAND_SKIN78D,
                nightHand: IMAGES.HAND_SKIN78N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                day: IMAGES.SKIN80D,
                night: IMAGES.SKIN80N,
                dayHand: IMAGES.HAND_SKIN80D,
                nightHand: IMAGES.HAND_SKIN80N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                day: IMAGES.SKIN81D,
                night: IMAGES.SKIN81N,
                dayHand: IMAGES.HAND_SKIN81D,
                nightHand: IMAGES.HAND_SKIN81N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 104,
                day: IMAGES.SKIN79D,
                night: IMAGES.SKIN79N,
                dayHand: IMAGES.HAND_SKIN79D,
                nightHand: IMAGES.HAND_SKIN79N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                day: IMAGES.SKIN_VAMPIRED,
                night: IMAGES.SKIN_VAMPIREN,
                dayHand: IMAGES.HAND_VAMPIRED,
                nightHand: IMAGES.HAND_VAMPIREN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                day: IMAGES.SKIN_ZOMBIED,
                night: IMAGES.SKIN_ZOMBIEN,
                dayHand: IMAGES.HAND_ZOMBIED,
                nightHand: IMAGES.HAND_ZOMBIEN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                day: IMAGES.SKIN_DEVASTD,
                night: IMAGES.SKIN_DEVASTN,
                dayHand: IMAGES.HAND_DEVASTD,
                nightHand: IMAGES.HAND_DEVASTN,
                rarity: RARITY.STONE,
                author: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                day: IMAGES.SKIN91D,
                night: IMAGES.SKIN91N,
                dayHand: IMAGES.HAND_SKIN91D,
                nightHand: IMAGES.HAND_SKIN91N,
                rarity: RARITY.STONE,
                author: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                day: IMAGES.SKIN19D,
                night: IMAGES.SKIN19N,
                dayHand: IMAGES.HAND_SKIN19D,
                nightHand: IMAGES.HAND_SKIN19N,
                rarity: RARITY.STONE,
                author: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                day: IMAGES.SKIN20D,
                night: IMAGES.SKIN20N,
                dayHand: IMAGES.HAND_SKIN20D,
                nightHand: IMAGES.HAND_SKIN20N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                day: IMAGES.SKIN24D,
                night: IMAGES.SKIN24N,
                dayHand: IMAGES.HAND_SKIN24D,
                nightHand: IMAGES.HAND_SKIN24N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                day: IMAGES.SKIN34D,
                night: IMAGES.SKIN34N,
                dayHand: IMAGES.HAND_SKIN34D,
                nightHand: IMAGES.HAND_SKIN34N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                day: IMAGES.SKIN33D,
                night: IMAGES.SKIN33N,
                dayHand: IMAGES.HAND_SKIN33D,
                nightHand: IMAGES.HAND_SKIN33N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                day: IMAGES.SKIN69D,
                night: IMAGES.SKIN69N,
                dayHand: IMAGES.HAND_SKIN69D,
                nightHand: IMAGES.HAND_SKIN69N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                day: IMAGES.SKIN84D,
                night: IMAGES.SKIN84N,
                dayHand: IMAGES.HAND_SKIN84D,
                nightHand: IMAGES.HAND_SKIN84N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                day: IMAGES.SKIN89D,
                night: IMAGES.SKIN89N,
                dayHand: IMAGES.HAND_SKIN89D,
                nightHand: IMAGES.HAND_SKIN89N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                day: IMAGES.SKIN95D,
                night: IMAGES.SKIN95N,
                dayHand: IMAGES.HAND_SKIN95D,
                nightHand: IMAGES.HAND_SKIN95N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                day: IMAGES.SKIN109D,
                night: IMAGES.SKIN109N,
                dayHand: IMAGES.HAND_SKIN109D,
                nightHand: IMAGES.HAND_SKIN109N,
                rarity: RARITY.STONE,
                author: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                day: IMAGES.SKIN110D,
                night: IMAGES.SKIN110N,
                dayHand: IMAGES.HAND_SKIN110D,
                nightHand: IMAGES.HAND_SKIN110N,
                rarity: RARITY.STONE,
                author: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                day: IMAGES.SKIN111D,
                night: IMAGES.SKIN111N,
                dayHand: IMAGES.HAND_SKIN111D,
                nightHand: IMAGES.HAND_SKIN111N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                day: IMAGES.SKIN112D,
                night: IMAGES.SKIN112N,
                dayHand: IMAGES.HAND_SKIN112D,
                nightHand: IMAGES.HAND_SKIN112N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                day: IMAGES.SKIN114D,
                night: IMAGES.SKIN114N,
                dayHand: IMAGES.HAND_SKIN114D,
                nightHand: IMAGES.HAND_SKIN114N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                day: IMAGES.SKIN115D,
                night: IMAGES.SKIN115N,
                dayHand: IMAGES.HAND_SKIN115D,
                nightHand: IMAGES.HAND_SKIN115N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                day: IMAGES.SKIN116D,
                night: IMAGES.SKIN116N,
                dayHand: IMAGES.HAND_SKIN116D,
                nightHand: IMAGES.HAND_SKIN116N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                day: IMAGES.SKIN117D,
                night: IMAGES.SKIN117N,
                dayHand: IMAGES.HAND_SKIN117D,
                nightHand: IMAGES.HAND_SKIN117N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                day: IMAGES.SKIN118D,
                night: IMAGES.SKIN118N,
                dayHand: IMAGES.HAND_SKIN118D,
                nightHand: IMAGES.HAND_SKIN118N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                day: IMAGES.SKIN124D,
                night: IMAGES.SKIN124N,
                dayHand: IMAGES.HAND_SKIN124D,
                nightHand: IMAGES.HAND_SKIN124N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                day: IMAGES.SKIN125D,
                night: IMAGES.SKIN125N,
                dayHand: IMAGES.HAND_SKIN125D,
                nightHand: IMAGES.HAND_SKIN125N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                day: IMAGES.SKIN126D,
                night: IMAGES.SKIN126N,
                dayHand: IMAGES.HAND_SKIN126D,
                nightHand: IMAGES.HAND_SKIN126N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                day: IMAGES.SKIN127D,
                night: IMAGES.SKIN127N,
                dayHand: IMAGES.HAND_SKIN127D,
                nightHand: IMAGES.HAND_SKIN127N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                day: IMAGES.SKIN128D,
                night: IMAGES.SKIN128N,
                dayHand: IMAGES.HAND_SKIN128D,
                nightHand: IMAGES.HAND_SKIN128N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                day: IMAGES.SKIN129D,
                night: IMAGES.SKIN129N,
                dayHand: IMAGES.HAND_SKIN129D,
                nightHand: IMAGES.HAND_SKIN129N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                day: IMAGES.SKIN130D,
                night: IMAGES.SKIN130N,
                dayHand: IMAGES.HAND_SKIN130D,
                nightHand: IMAGES.HAND_SKIN130N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                day: IMAGES.SKIN131D,
                night: IMAGES.SKIN131N,
                dayHand: IMAGES.HAND_SKIN131D,
                nightHand: IMAGES.HAND_SKIN131N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                day: IMAGES.SKIN132D,
                night: IMAGES.SKIN132N,
                dayHand: IMAGES.HAND_SKIN132D,
                nightHand: IMAGES.HAND_SKIN132N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                day: IMAGES.SKIN135D,
                night: IMAGES.SKIN135N,
                dayHand: IMAGES.HAND_SKIN135D,
                nightHand: IMAGES.HAND_SKIN135N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                day: IMAGES.SKIN143D,
                night: IMAGES.SKIN143N,
                dayHand: IMAGES.HAND_SKIN143D,
                nightHand: IMAGES.HAND_SKIN143N,
                rarity: RARITY.STONE,
                author: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                day: IMAGES.SKIN146D,
                night: IMAGES.SKIN146N,
                dayHand: IMAGES.HAND_SKIN146D,
                nightHand: IMAGES.HAND_SKIN146N,
                rarity: RARITY.STONE,
                author: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                day: IMAGES.SKIN147D,
                night: IMAGES.SKIN147N,
                dayHand: IMAGES.HAND_SKIN147D,
                nightHand: IMAGES.HAND_SKIN147N,
                rarity: RARITY.STONE,
                author: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                day: IMAGES.SKIN149D,
                night: IMAGES.SKIN149N,
                dayHand: IMAGES.HAND_SKIN149D,
                nightHand: IMAGES.HAND_SKIN149N,
                rarity: RARITY.STONE,
                author: "aloner",
                name: "Machine Mask"
            }, {
                id: 29,
                day: IMAGES.SKIN2D,
                night: IMAGES.SKIN2N,
                dayHand: IMAGES.HAND_SKIN2D,
                nightHand: IMAGES.HAND_SKIN2N,
                rarity: RARITY.GOLD,
                author: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                day: IMAGES.SKIN3D,
                night: IMAGES.SKIN3N,
                dayHand: IMAGES.HAND_SKIN3D,
                nightHand: IMAGES.HAND_SKIN3N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                day: IMAGES.SKIN4D,
                night: IMAGES.SKIN4N,
                dayHand: IMAGES.HAND_SKIN4D,
                nightHand: IMAGES.HAND_SKIN4N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                day: IMAGES.SKIN5D,
                night: IMAGES.SKIN5N,
                dayHand: IMAGES.HAND_SKIN5D,
                nightHand: IMAGES.HAND_SKIN5N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                day: IMAGES.SKIN8D,
                night: IMAGES.SKIN8N,
                dayHand: IMAGES.HAND_SKIN8D,
                nightHand: IMAGES.HAND_SKIN8N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                day: IMAGES.SKIN9D,
                night: IMAGES.SKIN9N,
                dayHand: IMAGES.HAND_SKIN9D,
                nightHand: IMAGES.HAND_SKIN9N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                day: IMAGES.SKIN10D,
                night: IMAGES.SKIN10N,
                dayHand: IMAGES.HAND_SKIN10D,
                nightHand: IMAGES.HAND_SKIN10N,
                rarity: RARITY.GOLD,
                author: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                day: IMAGES.SKIN17D,
                night: IMAGES.SKIN17N,
                dayHand: IMAGES.HAND_SKIN17D,
                nightHand: IMAGES.HAND_SKIN17N,
                rarity: RARITY.GOLD,
                author: "Winter",
                name: "Owl"
            }, {
                id: 52,
                day: IMAGES.SKIN27D,
                night: IMAGES.SKIN27N,
                dayHand: IMAGES.HAND_SKIN27D,
                nightHand: IMAGES.HAND_SKIN27N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                day: IMAGES.SKIN28D,
                night: IMAGES.SKIN28N,
                dayHand: IMAGES.HAND_SKIN28D,
                nightHand: IMAGES.HAND_SKIN28N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                day: IMAGES.SKIN49D,
                night: IMAGES.SKIN49N,
                dayHand: IMAGES.HAND_SKIN49D,
                nightHand: IMAGES.HAND_SKIN49N,
                rarity: RARITY.GOLD,
                author: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                day: IMAGES.SKIN50D,
                night: IMAGES.SKIN50N,
                dayHand: IMAGES.HAND_SKIN50D,
                nightHand: IMAGES.HAND_SKIN50N,
                rarity: RARITY.GOLD,
                author: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                day: IMAGES.SKIN35D,
                night: IMAGES.SKIN35N,
                dayHand: IMAGES.HAND_SKIN35D,
                nightHand: IMAGES.HAND_SKIN35N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                day: IMAGES.SKIN36D,
                night: IMAGES.SKIN36N,
                dayHand: IMAGES.HAND_SKIN36D,
                nightHand: IMAGES.HAND_SKIN36N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                day: IMAGES.SKIN45D,
                night: IMAGES.SKIN45N,
                dayHand: IMAGES.HAND_SKIN45D,
                nightHand: IMAGES.HAND_SKIN45N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Cake"
            }, {
                id: 71,
                day: IMAGES.SKIN46D,
                night: IMAGES.SKIN46N,
                dayHand: IMAGES.HAND_SKIN46D,
                nightHand: IMAGES.HAND_SKIN46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                day: IMAGES.SKIN52D,
                night: IMAGES.SKIN52N,
                dayHand: IMAGES.HAND_SKIN52D,
                nightHand: IMAGES.HAND_SKIN52N,
                rarity: RARITY.GOLD,
                author: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                day: IMAGES.SKIN62D,
                night: IMAGES.SKIN62N,
                dayHand: IMAGES.HAND_SKIN62D,
                nightHand: IMAGES.HAND_SKIN62N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                day: IMAGES.SKIN53D,
                night: IMAGES.SKIN53N,
                dayHand: IMAGES.HAND_SKIN53D,
                nightHand: IMAGES.HAND_SKIN53N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                day: IMAGES.SKIN54D,
                night: IMAGES.SKIN54N,
                dayHand: IMAGES.HAND_SKIN54D,
                nightHand: IMAGES.HAND_SKIN54N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                day: IMAGES.SKIN71D,
                night: IMAGES.SKIN71N,
                dayHand: IMAGES.HAND_SKIN71D,
                nightHand: IMAGES.HAND_SKIN71N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                day: IMAGES.SKIN77D,
                night: IMAGES.SKIN77N,
                dayHand: IMAGES.HAND_SKIN77D,
                nightHand: IMAGES.HAND_SKIN77N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                day: IMAGES.SKIN82D,
                night: IMAGES.SKIN82N,
                dayHand: IMAGES.HAND_SKIN82D,
                nightHand: IMAGES.HAND_SKIN82N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Fox"
            }, {
                id: 132,
                day: IMAGES.SKIN107D,
                night: IMAGES.SKIN107N,
                dayHand: IMAGES.HAND_SKIN107D,
                nightHand: IMAGES.HAND_SKIN107N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                day: IMAGES.SKIN86D,
                night: IMAGES.SKIN86N,
                dayHand: IMAGES.HAND_SKIN86D,
                nightHand: IMAGES.HAND_SKIN86N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                day: IMAGES.SKIN88D,
                night: IMAGES.SKIN88N,
                dayHand: IMAGES.HAND_SKIN88D,
                nightHand: IMAGES.HAND_SKIN88N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                day: IMAGES.SKIN92D,
                night: IMAGES.SKIN92N,
                dayHand: IMAGES.HAND_SKIN92D,
                nightHand: IMAGES.HAND_SKIN92N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                day: IMAGES.SKIN93D,
                night: IMAGES.SKIN93N,
                dayHand: IMAGES.HAND_SKIN93D,
                nightHand: IMAGES.HAND_SKIN93N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                day: IMAGES.SKIN94D,
                night: IMAGES.SKIN94N,
                dayHand: IMAGES.HAND_SKIN94D,
                nightHand: IMAGES.HAND_SKIN94N,
                rarity: RARITY.GOLD,
                author: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                day: IMAGES.SKIN97D,
                night: IMAGES.SKIN97N,
                dayHand: IMAGES.HAND_SKIN97D,
                nightHand: IMAGES.HAND_SKIN97N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                day: IMAGES.SKIN102D,
                night: IMAGES.SKIN102N,
                dayHand: IMAGES.HAND_SKIN102D,
                nightHand: IMAGES.HAND_SKIN102N,
                rarity: RARITY.GOLD,
                author: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                day: IMAGES.SKIN136D,
                night: IMAGES.SKIN136N,
                dayHand: IMAGES.HAND_SKIN136D,
                nightHand: IMAGES.HAND_SKIN136N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                day: IMAGES.SKIN138D,
                night: IMAGES.SKIN138N,
                dayHand: IMAGES.HAND_SKIN138D,
                nightHand: IMAGES.HAND_SKIN138N,
                rarity: RARITY.GOLD,
                author: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                day: IMAGES.SKIN142D,
                night: IMAGES.SKIN142N,
                dayHand: IMAGES.HAND_SKIN142D,
                nightHand: IMAGES.HAND_SKIN142N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                day: IMAGES.SKIN145D,
                night: IMAGES.SKIN145N,
                dayHand: IMAGES.HAND_SKIN145D,
                nightHand: IMAGES.HAND_SKIN145N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                day: IMAGES.SKIN148D,
                night: IMAGES.SKIN148N,
                dayHand: IMAGES.HAND_SKIN148D,
                nightHand: IMAGES.HAND_SKIN148N,
                rarity: RARITY.GOLD,
                author: "aloner",
                name: "Axolotl"
            }, {
                id: 25,
                day: IMAGES.SKIN6D,
                night: IMAGES.SKIN6N,
                dayHand: IMAGES.HAND_SKIN6D,
                nightHand: IMAGES.HAND_SKIN0N,
                rarity: RARITY.DIAMOND,
                author: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                day: IMAGES.SKIN_STARD,
                night: IMAGES.SKIN_STARN,
                dayHand: IMAGES.HAND_STARD,
                nightHand: IMAGES.HAND_STARN,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                day: IMAGES.SKIN11D,
                night: IMAGES.SKIN11N,
                dayHand: IMAGES.HAND_SKIN11D,
                nightHand: IMAGES.HAND_SKIN11N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                day: IMAGES.SKIN63D,
                night: IMAGES.SKIN63N,
                dayHand: IMAGES.HAND_SKIN63D,
                nightHand: IMAGES.HAND_SKIN63N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                day: IMAGES.SKIN96D,
                night: IMAGES.SKIN96N,
                dayHand: IMAGES.HAND_SKIN96D,
                nightHand: IMAGES.HAND_SKIN96N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                day: IMAGES.SKIN22D,
                night: IMAGES.SKIN22N,
                dayHand: IMAGES.HAND_SKIN22D,
                nightHand: IMAGES.HAND_SKIN22N,
                rarity: RARITY.DIAMOND,
                author: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                day: IMAGES.SKIN23D,
                night: IMAGES.SKIN23N,
                dayHand: IMAGES.HAND_SKIN23D,
                nightHand: IMAGES.HAND_SKIN23N,
                rarity: RARITY.DIAMOND,
                author: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                day: IMAGES.SKIN16D,
                night: IMAGES.SKIN16N,
                dayHand: IMAGES.HAND_SKIN16D,
                nightHand: IMAGES.HAND_SKIN16N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                day: IMAGES.SKIN44D,
                night: IMAGES.SKIN44N,
                dayHand: IMAGES.HAND_SKIN44D,
                nightHand: IMAGES.HAND_SKIN44N,
                rarity: RARITY.DIAMOND,
                author: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                day: IMAGES.SKIN26D,
                night: IMAGES.SKIN26N,
                dayHand: IMAGES.HAND_SKIN26D,
                nightHand: IMAGES.HAND_SKIN26N,
                rarity: RARITY.DIAMOND,
                author: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                day: IMAGES.SKIN108D,
                night: IMAGES.SKIN108N,
                dayHand: IMAGES.HAND_SKIN108D,
                nightHand: IMAGES.HAND_SKIN108N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                day: IMAGES.SKIN30D,
                night: IMAGES.SKIN30N,
                dayHand: IMAGES.HAND_SKIN30D,
                nightHand: IMAGES.HAND_SKIN30N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                day: IMAGES.SKIN43D,
                night: IMAGES.SKIN43N,
                dayHand: IMAGES.HAND_SKIN43D,
                nightHand: IMAGES.HAND_SKIN43N,
                rarity: RARITY.DIAMOND,
                author: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                day: IMAGES.SKIN37D,
                night: IMAGES.SKIN37N,
                dayHand: IMAGES.HAND_SKIN37D,
                nightHand: IMAGES.HAND_SKIN37N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                day: IMAGES.SKIN31D,
                night: IMAGES.SKIN31N,
                dayHand: IMAGES.HAND_SKIN31D,
                nightHand: IMAGES.HAND_SKIN31N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                day: IMAGES.SKIN47D,
                night: IMAGES.SKIN47N,
                dayHand: IMAGES.HAND_SKIN47D,
                nightHand: IMAGES.HAND_SKIN47N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                day: IMAGES.SKIN48D,
                night: IMAGES.SKIN48N,
                dayHand: IMAGES.HAND_SKIN48D,
                nightHand: IMAGES.HAND_SKIN48N,
                rarity: RARITY.DIAMOND,
                author: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                day: IMAGES.SKIN68D,
                night: IMAGES.SKIN68N,
                dayHand: IMAGES.HAND_SKIN68D,
                nightHand: IMAGES.HAND_SKIN68N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                day: IMAGES.SKIN57D,
                night: IMAGES.SKIN57N,
                dayHand: IMAGES.HAND_SKIN57D,
                nightHand: IMAGES.HAND_SKIN57N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                day: IMAGES.SKIN58D,
                night: IMAGES.SKIN58N,
                dayHand: IMAGES.HAND_SKIN58D,
                nightHand: IMAGES.HAND_SKIN58N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                day: IMAGES.SKIN59D,
                night: IMAGES.SKIN59N,
                dayHand: IMAGES.HAND_SKIN59D,
                nightHand: IMAGES.HAND_SKIN59N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                day: IMAGES.SKIN60D,
                night: IMAGES.SKIN60N,
                dayHand: IMAGES.HAND_SKIN60D,
                nightHand: IMAGES.HAND_SKIN60N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                day: IMAGES.SKIN61D,
                night: IMAGES.SKIN61N,
                dayHand: IMAGES.HAND_SKIN61D,
                nightHand: IMAGES.HAND_SKIN61N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                day: IMAGES.SKIN72D,
                night: IMAGES.SKIN72N,
                dayHand: IMAGES.HAND_SKIN72D,
                nightHand: IMAGES.HAND_SKIN72N,
                rarity: RARITY.DIAMOND,
                author: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                day: IMAGES.SKIN73D,
                night: IMAGES.SKIN73N,
                dayHand: IMAGES.HAND_SKIN73D,
                nightHand: IMAGES.HAND_SKIN73N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                day: IMAGES.SKIN101D,
                night: IMAGES.SKIN101N,
                dayHand: IMAGES.HAND_SKIN101D,
                nightHand: IMAGES.HAND_SKIN101N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                day: IMAGES.SKIN121D,
                night: IMAGES.SKIN121N,
                dayHand: IMAGES.HAND_SKIN121D,
                nightHand: IMAGES.HAND_SKIN121N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                day: IMAGES.SKIN122D,
                night: IMAGES.SKIN122N,
                dayHand: IMAGES.HAND_SKIN122D,
                nightHand: IMAGES.HAND_SKIN122N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                day: IMAGES.SKIN123D,
                night: IMAGES.SKIN123N,
                dayHand: IMAGES.HAND_SKIN123D,
                nightHand: IMAGES.HAND_SKIN123N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                day: IMAGES.SKIN134D,
                night: IMAGES.SKIN134N,
                dayHand: IMAGES.HAND_SKIN134D,
                nightHand: IMAGES.HAND_SKIN134N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                day: IMAGES.SKIN139D,
                night: IMAGES.SKIN139N,
                dayHand: IMAGES.HAND_SKIN139D,
                nightHand: IMAGES.HAND_SKIN139N,
                rarity: RARITY.DIAMOND,
                author: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                day: IMAGES.SKIN140D,
                night: IMAGES.SKIN140N,
                dayHand: IMAGES.HAND_SKIN140D,
                nightHand: IMAGES.HAND_SKIN140N,
                rarity: RARITY.DIAMOND,
                author: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                day: IMAGES.SKIN137D,
                night: IMAGES.SKIN137N,
                dayHand: IMAGES.HAND_SKIN137D,
                nightHand: IMAGES.HAND_SKIN137N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                day: IMAGES.SKIN144D,
                night: IMAGES.SKIN144N,
                dayHand: IMAGES.HAND_SKIN144D,
                nightHand: IMAGES.HAND_SKIN144N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                day: IMAGES.SKIN150D,
                night: IMAGES.SKIN150N,
                dayHand: IMAGES.HAND_SKIN150D,
                nightHand: IMAGES.HAND_SKIN150N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Water skin"
            }, {
                id: 42,
                day: IMAGES.SKIN14D,
                night: IMAGES.SKIN14N,
                dayHand: IMAGES.HAND_SKIN14D,
                nightHand: IMAGES.HAND_SKIN14N,
                rarity: RARITY.AMETHYST,
                author: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                day: IMAGES.SKIN66D,
                night: IMAGES.SKIN66N,
                dayHand: IMAGES.HAND_SKIN66D,
                nightHand: IMAGES.HAND_SKIN66N,
                rarity: RARITY.AMETHYST,
                author: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                day: IMAGES.SKIN15D,
                night: IMAGES.SKIN15N,
                dayHand: IMAGES.HAND_SKIN15D,
                nightHand: IMAGES.HAND_SKIN15N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                day: IMAGES.SKIN18D,
                night: IMAGES.SKIN18N,
                dayHand: IMAGES.HAND_SKIN18D,
                nightHand: IMAGES.HAND_SKIN18N,
                rarity: RARITY.AMETHYST,
                author: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                day: IMAGES.SKIN25D,
                night: IMAGES.SKIN25N,
                dayHand: IMAGES.HAND_SKIN25D,
                nightHand: IMAGES.HAND_SKIN25N,
                rarity: RARITY.AMETHYST,
                author: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                day: IMAGES.SKIN29D,
                night: IMAGES.SKIN29N,
                dayHand: IMAGES.HAND_SKIN29D,
                nightHand: IMAGES.HAND_SKIN29N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                day: IMAGES.SKIN32D,
                night: IMAGES.SKIN32N,
                dayHand: IMAGES.HAND_SKIN32D,
                nightHand: IMAGES.HAND_SKIN32N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                day: IMAGES.SKIN39D,
                night: IMAGES.SKIN39N,
                dayHand: IMAGES.HAND_SKIN39D,
                nightHand: IMAGES.HAND_SKIN39N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                day: IMAGES.SKIN40D,
                night: IMAGES.SKIN40N,
                dayHand: IMAGES.HAND_SKIN40D,
                nightHand: IMAGES.HAND_SKIN40N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                day: IMAGES.SKIN67D,
                night: IMAGES.SKIN67N,
                dayHand: IMAGES.HAND_SKIN67D,
                nightHand: IMAGES.HAND_SKIN67N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                day: IMAGES.SKIN41D,
                night: IMAGES.SKIN41N,
                dayHand: IMAGES.HAND_SKIN41D,
                nightHand: IMAGES.HAND_SKIN41N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                day: IMAGES.SKIN55D,
                night: IMAGES.SKIN55N,
                dayHand: IMAGES.HAND_SKIN55D,
                nightHand: IMAGES.HAND_SKIN55N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                day: IMAGES.SKIN56D,
                night: IMAGES.SKIN56N,
                dayHand: IMAGES.HAND_SKIN56D,
                nightHand: IMAGES.HAND_SKIN56N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                day: IMAGES.SKIN74D,
                night: IMAGES.SKIN74N,
                dayHand: IMAGES.HAND_SKIN74D,
                nightHand: IMAGES.HAND_SKIN74N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                day: IMAGES.SKIN75D,
                night: IMAGES.SKIN75N,
                dayHand: IMAGES.HAND_SKIN75D,
                nightHand: IMAGES.HAND_SKIN75N,
                rarity: RARITY.AMETHYST,
                author: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                day: IMAGES.SKIN90D,
                night: IMAGES.SKIN90N,
                dayHand: IMAGES.HAND_SKIN90D,
                nightHand: IMAGES.HAND_SKIN90N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                day: IMAGES.SKIN76D,
                night: IMAGES.SKIN76N,
                dayHand: IMAGES.HAND_SKIN76D,
                nightHand: IMAGES.HAND_SKIN76N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                day: IMAGES.SKIN106D,
                night: IMAGES.SKIN106N,
                dayHand: IMAGES.HAND_SKIN106D,
                nightHand: IMAGES.HAND_SKIN106N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                day: IMAGES.SKIN119D,
                night: IMAGES.SKIN119N,
                dayHand: IMAGES.HAND_SKIN119D,
                nightHand: IMAGES.HAND_SKIN119N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                day: IMAGES.SKIN120D,
                night: IMAGES.SKIN120N,
                dayHand: IMAGES.HAND_SKIN120D,
                nightHand: IMAGES.HAND_SKIN120N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Momo"
            }, {
                id: 95,
                day: IMAGES.SKIN70D,
                night: IMAGES.SKIN70N,
                dayHand: IMAGES.HAND_SKIN70D,
                nightHand: IMAGES.HAND_SKIN70N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                day: IMAGES.SKIN51D,
                night: IMAGES.SKIN51N,
                dayHand: IMAGES.HAND_SKIN51D,
                nightHand: IMAGES.HAND_SKIN51N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                day: IMAGES.SKIN1D,
                night: IMAGES.SKIN1N,
                dayHand: IMAGES.HAND_SKIN1D,
                nightHand: IMAGES.HAND_SKIN1N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                day: IMAGES.SKIN65D,
                night: IMAGES.SKIN65N,
                dayHand: IMAGES.HAND_SKIN65D,
                nightHand: IMAGES.HAND_SKIN65N,
                rarity: RARITY.REIDITE,
                author: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                day: IMAGES.SKIN99D,
                night: IMAGES.SKIN99N,
                dayHand: IMAGES.HAND_SKIN99D,
                nightHand: IMAGES.HAND_SKIN99N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                day: IMAGES.SKIN12D,
                night: IMAGES.SKIN12N,
                dayHand: IMAGES.HAND_SKIN12D,
                nightHand: IMAGES.HAND_SKIN12N,
                rarity: RARITY.REIDITE,
                author: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                day: IMAGES.SKIN13D,
                night: IMAGES.SKIN13N,
                dayHand: IMAGES.HAND_SKIN13D,
                nightHand: IMAGES.HAND_SKIN13N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                day: IMAGES.SKIN83D,
                night: IMAGES.SKIN83N,
                dayHand: IMAGES.HAND_SKIN83D,
                nightHand: IMAGES.HAND_SKIN83N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                day: IMAGES.SKIN98D,
                night: IMAGES.SKIN98N,
                dayHand: IMAGES.HAND_SKIN98D,
                nightHand: IMAGES.HAND_SKIN98N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                day: IMAGES.SKIN103D,
                night: IMAGES.SKIN103N,
                dayHand: IMAGES.HAND_SKIN103D,
                nightHand: IMAGES.HAND_SKIN103N,
                rarity: RARITY.REIDITE,
                author: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                day: IMAGES.SKIN100D,
                night: IMAGES.SKIN100N,
                dayHand: IMAGES.HAND_SKIN100D,
                nightHand: IMAGES.HAND_SKIN100N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                day: IMAGES.SKIN21D,
                night: IMAGES.SKIN21N,
                dayHand: IMAGES.HAND_SKIN21D,
                nightHand: IMAGES.HAND_SKIN21N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                day: IMAGES.SKIN104D,
                night: IMAGES.SKIN104N,
                dayHand: IMAGES.HAND_SKIN104D,
                nightHand: IMAGES.HAND_SKIN104N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                day: IMAGES.SKIN38D,
                night: IMAGES.SKIN38N,
                dayHand: IMAGES.HAND_SKIN38D,
                nightHand: IMAGES.HAND_SKIN38N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                day: IMAGES.SKIN42D,
                night: IMAGES.SKIN42N,
                dayHand: IMAGES.HAND_SKIN42D,
                nightHand: IMAGES.HAND_SKIN42N,
                rarity: RARITY.REIDITE,
                author: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                day: IMAGES.SKIN105D,
                night: IMAGES.SKIN105N,
                dayHand: IMAGES.HAND_SKIN105D,
                nightHand: IMAGES.HAND_SKIN105N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                day: IMAGES.SKIN64D,
                night: IMAGES.SKIN64N,
                dayHand: IMAGES.HAND_SKIN64D,
                nightHand: IMAGES.HAND_SKIN64N,
                rarity: RARITY.REIDITE,
                author: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                day: IMAGES.SKIN87D,
                night: IMAGES.SKIN87N,
                dayHand: IMAGES.HAND_SKIN87D,
                nightHand: IMAGES.HAND_SKIN87N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Starver"
            }, {
                id: 48,
                day: IMAGES.SKIN_ROBOTD,
                night: IMAGES.SKIN_ROBOTN,
                dayHand: IMAGES.HAND_ROBOTD,
                nightHand: IMAGES.HAND_ROBOTN,
                rarity: RARITY.SPECIAL,
                author: "eogito",
                name: "Robot"
            }, {
                id: 110,
                day: IMAGES.SKIN85D,
                night: IMAGES.SKIN85N,
                dayHand: IMAGES.HAND_SKIN85D,
                nightHand: IMAGES.HAND_SKIN85N,
                rarity: RARITY.SPECIAL,
                author: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                day: IMAGES.SKIN133D,
                night: IMAGES.SKIN133N,
                dayHand: IMAGES.HAND_SKIN133D,
                nightHand: IMAGES.HAND_SKIN133N,
                rarity: RARITY.SPECIAL,
                author: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                day: IMAGES.SKIN141D,
                night: IMAGES.SKIN141N,
                dayHand: IMAGES.HAND_SKIN141D,
                nightHand: IMAGES.HAND_SKIN141N,
                rarity: RARITY.SPECIAL,
                author: "OmarJr13",
                name: "Blob Skin"
            }],
            BAG: [{
                id: 0,
                day: IMAGES.BAGD,
                night: IMAGES.BAGN,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                day: IMAGES.BAG0D,
                night: IMAGES.BAG0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                day: IMAGES.BAG4D,
                night: IMAGES.BAG4N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                day: IMAGES.BAG5D,
                night: IMAGES.BAG5N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                day: IMAGES.BAG6D,
                night: IMAGES.BAG6N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                day: IMAGES.BAG7D,
                night: IMAGES.BAG7N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                day: IMAGES.BAG23D,
                night: IMAGES.BAG23N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                day: IMAGES.BAG16D,
                night: IMAGES.BAG16N,
                rarity: RARITY.WOOD,
                author: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                day: IMAGES.BAG36D,
                night: IMAGES.BAG36N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                day: IMAGES.BAG38D,
                night: IMAGES.BAG38N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                day: IMAGES.BAG43D,
                night: IMAGES.BAG43N,
                rarity: RARITY.WOOD,
                author: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                day: IMAGES.BAG14D,
                night: IMAGES.BAG14N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                day: IMAGES.BAG_EASTERD,
                night: IMAGES.BAG_EASTERN,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                day: IMAGES.BAG_STARD,
                night: IMAGES.BAG_STARN,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                day: IMAGES.BAG9D,
                night: IMAGES.BAG9N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                day: IMAGES.BAG17D,
                night: IMAGES.BAG17N,
                rarity: RARITY.STONE,
                author: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                day: IMAGES.BAG24D,
                night: IMAGES.BAG24N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                day: IMAGES.BAG13D,
                night: IMAGES.BAG13N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                day: IMAGES.BAG37D,
                night: IMAGES.BAG37N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                day: IMAGES.BAG53D,
                night: IMAGES.BAG53N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                day: IMAGES.BAG58D,
                night: IMAGES.BAG58N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                day: IMAGES.BAG61D,
                night: IMAGES.BAG61N,
                rarity: RARITY.STONE,
                author: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 13,
                day: IMAGES.BAG10D,
                night: IMAGES.BAG10N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                day: IMAGES.BAG18D,
                night: IMAGES.BAG18N,
                rarity: RARITY.GOLD,
                author: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                day: IMAGES.BAG25D,
                night: IMAGES.BAG25N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                day: IMAGES.BAG31D,
                night: IMAGES.BAG31N,
                rarity: RARITY.GOLD,
                author: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                day: IMAGES.BAG40D,
                night: IMAGES.BAG40N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                day: IMAGES.BAG46D,
                night: IMAGES.BAG46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                day: IMAGES.BAG50D,
                night: IMAGES.BAG50N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                day: IMAGES.BAG52D,
                night: IMAGES.BAG52N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                day: IMAGES.BAG57D,
                night: IMAGES.BAG57N,
                rarity: RARITY.GOLD,
                author: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                day: IMAGES.BAG59D,
                night: IMAGES.BAG60N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                day: IMAGES.BAG60D,
                night: IMAGES.BAG59N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                day: IMAGES.BAG63D,
                night: IMAGES.BAG63N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                day: IMAGES.BAG68D,
                night: IMAGES.BAG68N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 14,
                day: IMAGES.BAG1D,
                night: IMAGES.BAG1N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                day: IMAGES.BAG2D,
                night: IMAGES.BAG2N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                day: IMAGES.BAG3D,
                night: IMAGES.BAG3N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                day: IMAGES.BAG8D,
                night: IMAGES.BAG8N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                day: IMAGES.BAG19D,
                night: IMAGES.BAG19N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                day: IMAGES.BAG22D,
                night: IMAGES.BAG22N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                day: IMAGES.BAG26D,
                night: IMAGES.BAG26N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                day: IMAGES.BAG39D,
                night: IMAGES.BAG39N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                day: IMAGES.BAG44D,
                night: IMAGES.BAG44N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                day: IMAGES.BAG45D,
                night: IMAGES.BAG45N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                day: IMAGES.BAG51D,
                night: IMAGES.BAG51N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                day: IMAGES.BAG64D,
                night: IMAGES.BAG64N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                day: IMAGES.BAG66D,
                night: IMAGES.BAG66N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 48,
                day: IMAGES.BAG47D,
                night: IMAGES.BAG47N,
                rarity: RARITY.AMETHYST,
                author: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                day: IMAGES.BAG20D,
                night: IMAGES.BAG20N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                day: IMAGES.BAG27D,
                night: IMAGES.BAG27N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                day: IMAGES.BAG30D,
                night: IMAGES.BAG30N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                day: IMAGES.BAG32D,
                night: IMAGES.BAG32N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                day: IMAGES.BAG42D,
                night: IMAGES.BAG42N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                day: IMAGES.BAG34D,
                night: IMAGES.BAG34N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                day: IMAGES.BAG49D,
                night: IMAGES.BAG49N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                day: IMAGES.BAG55D,
                night: IMAGES.BAG55N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                day: IMAGES.BAG56D,
                night: IMAGES.BAG56N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                day: IMAGES.BAG65D,
                night: IMAGES.BAG65N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                day: IMAGES.BAG67D,
                night: IMAGES.BAG67N,
                rarity: RARITY.AMETHYST,
                author: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 31,
                day: IMAGES.BAG21D,
                night: IMAGES.BAG21N,
                rarity: RARITY.REIDITE,
                author: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                day: IMAGES.BAG11D,
                night: IMAGES.BAG11N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                day: IMAGES.BAG48D,
                night: IMAGES.BAG48N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                day: IMAGES.BAG35D,
                night: IMAGES.BAG35N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                day: IMAGES.BAG54D,
                night: IMAGES.BAG54N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                day: IMAGES.BAG28D,
                night: IMAGES.BAG28N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                day: IMAGES.BAG29D,
                night: IMAGES.BAG29N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                day: IMAGES.BAG33D,
                night: IMAGES.BAG33N,
                rarity: RARITY.REIDITE,
                author: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                day: IMAGES.BAG41D,
                night: IMAGES.BAG41N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                day: IMAGES.BAG62D,
                night: IMAGES.BAG62N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Bag"
            }],
            CRATE: [{
                id: 0,
                day: IMAGES.CRATE7D,
                night: IMAGES.CRATE7N,
                rarity: RARITY.FREE,
                author: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                day: IMAGES.CRATE6D,
                night: IMAGES.CRATE6N,
                rarity: RARITY.FREE,
                author: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                day: IMAGES.CRATE1D,
                night: IMAGES.CRATE1N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                day: IMAGES.CRATE2D,
                night: IMAGES.CRATE2N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                day: IMAGES.CRATE3D,
                night: IMAGES.CRATE3N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                day: IMAGES.CRATE4D,
                night: IMAGES.CRATE4N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                day: IMAGES.CRATE5D,
                night: IMAGES.CRATE5N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                day: IMAGES.CRATE8D,
                night: IMAGES.CRATE8N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                day: IMAGES.CRATE9D,
                night: IMAGES.CRATE9N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                day: IMAGES.CRATE10D,
                night: IMAGES.CRATE10N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                day: IMAGES.CRATE11D,
                night: IMAGES.CRATE11N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                day: IMAGES.CRATE12D,
                night: IMAGES.CRATE12N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                day: IMAGES.CRATE39D,
                night: IMAGES.CRATE39N,
                rarity: RARITY.WOOD,
                author: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                day: IMAGES.CRATE13D,
                night: IMAGES.CRATE13N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                day: IMAGES.CRATE19D,
                night: IMAGES.CRATE19N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                day: IMAGES.CRATE20D,
                night: IMAGES.CRATE20N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                day: IMAGES.CRATE29D,
                night: IMAGES.CRATE29N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                day: IMAGES.CRATE47D,
                night: IMAGES.CRATE47N,
                rarity: RARITY.STONE,
                author: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 19,
                day: IMAGES.CRATE21D,
                night: IMAGES.CRATE21N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                day: IMAGES.CRATE14D,
                night: IMAGES.CRATE14N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                day: IMAGES.CRATE22D,
                night: IMAGES.CRATE22N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                day: IMAGES.CRATE26D,
                night: IMAGES.CRATE26N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                day: IMAGES.CRATE30D,
                night: IMAGES.CRATE30N,
                rarity: RARITY.GOLD,
                author: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                day: IMAGES.CRATE35D,
                night: IMAGES.CRATE35N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                day: IMAGES.CRATE36D,
                night: IMAGES.CRATE36N,
                rarity: RARITY.GOLD,
                author: "Communist",
                name: "Glass Crate"
            }, {
                id: 16,
                day: IMAGES.CRATE15D,
                night: IMAGES.CRATE15N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                day: IMAGES.CRATE18D,
                night: IMAGES.CRATE18N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                day: IMAGES.CRATE27D,
                night: IMAGES.CRATE27N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                day: IMAGES.CRATE32D,
                night: IMAGES.CRATE32N,
                rarity: RARITY.DIAMOND,
                author: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                day: IMAGES.CRATE33D,
                night: IMAGES.CRATE33N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                day: IMAGES.CRATE34D,
                night: IMAGES.CRATE34N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                day: IMAGES.CRATE37D,
                night: IMAGES.CRATE37N,
                rarity: RARITY.DIAMOND,
                author: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                day: IMAGES.CRATE43D,
                night: IMAGES.CRATE43N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 22,
                day: IMAGES.CRATE23D,
                night: IMAGES.CRATE23N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                day: IMAGES.CRATE16D,
                night: IMAGES.CRATE16N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                day: IMAGES.CRATE25D,
                night: IMAGES.CRATE25N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                day: IMAGES.CRATE28D,
                night: IMAGES.CRATE28N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                day: IMAGES.CRATE41D,
                night: IMAGES.CRATE41N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                day: IMAGES.CRATE42D,
                night: IMAGES.CRATE42N,
                rarity: RARITY.AMETHYST,
                author: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                day: IMAGES.CRATE40D,
                night: IMAGES.CRATE40N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                day: IMAGES.CRATE44D,
                night: IMAGES.CRATE44N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                day: IMAGES.CRATE48D,
                night: IMAGES.CRATE48N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                day: IMAGES.CRATE49D,
                night: IMAGES.CRATE49N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 45,
                day: IMAGES.CRATE46D,
                night: IMAGES.CRATE46N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                day: IMAGES.CRATE45D,
                night: IMAGES.CRATE45N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                day: IMAGES.CRATE17D,
                night: IMAGES.CRATE17N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                day: IMAGES.CRATE24D,
                night: IMAGES.CRATE24N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                day: IMAGES.CRATE31D,
                night: IMAGES.CRATE31N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                day: IMAGES.CRATE38D,
                night: IMAGES.CRATE38N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                day: IMAGES.CRATE50D,
                night: IMAGES.CRATE50N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                day: IMAGES.CRATE51D,
                night: IMAGES.CRATE51N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                day: IMAGES.CRATE52D,
                night: IMAGES.CRATE52N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                day: IMAGES.CRATE53D,
                night: IMAGES.CRATE53N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                day: IMAGES.CRATE54D,
                night: IMAGES.CRATE54N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                day: IMAGES.CRATE55D,
                night: IMAGES.CRATE55N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                day: IMAGES.CRATE56D,
                night: IMAGES.CRATE56N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                day: IMAGES.CRATE57D,
                night: IMAGES.CRATE57N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                day: IMAGES.CRATE58D,
                night: IMAGES.CRATE58N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                day: IMAGES.CRATE59D,
                night: IMAGES.CRATE59N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                day: IMAGES.CRATE60D,
                night: IMAGES.CRATE60N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                day: IMAGES.CRATE61D,
                night: IMAGES.CRATE61N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                day: IMAGES.CRATE62D,
                night: IMAGES.CRATE62N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                day: IMAGES.CRATE63D,
                night: IMAGES.CRATE63N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                day: IMAGES.CRATE64D,
                night: IMAGES.CRATE64N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                day: IMAGES.CRATE65D,
                night: IMAGES.CRATE65N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                day: IMAGES.CRATE66D,
                night: IMAGES.CRATE66N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                day: IMAGES.CRATE67D,
                night: IMAGES.CRATE67N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                day: IMAGES.CRATE68D,
                night: IMAGES.CRATE68N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                day: IMAGES.CRATE69D,
                night: IMAGES.CRATE69N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                day: IMAGES.CRATE70D,
                night: IMAGES.CRATE70N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 70,
                day: IMAGES.CRATE71D,
                night: IMAGES.CRATE71N,
                rarity: RARITY.GOLD,
                author: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 71,
                day: IMAGES.CRATE72D,
                night: IMAGES.CRATE72N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Box"
            }],
            BOOK: [{
                id: 0,
                day: IMAGES.BOOK0D,
                night: IMAGES.BOOK0N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                day: IMAGES.BOOK3D,
                night: IMAGES.BOOK3N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                day: IMAGES.BOOK4D,
                night: IMAGES.BOOK4N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                day: IMAGES.BOOK5D,
                night: IMAGES.BOOK5N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                day: IMAGES.BOOK6D,
                night: IMAGES.BOOK6N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                day: IMAGES.BOOK18D,
                night: IMAGES.BOOK18N,
                rarity: RARITY.WOOD,
                author: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                day: IMAGES.BOOK1D,
                night: IMAGES.BOOK1N,
                rarity: RARITY.STONE,
                author: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                day: IMAGES.BOOK2D,
                night: IMAGES.BOOK2N,
                rarity: RARITY.STONE,
                author: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                day: IMAGES.BOOK7D,
                night: IMAGES.BOOK7N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                day: IMAGES.BOOK20D,
                night: IMAGES.BOOK20N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                day: IMAGES.BOOK24D,
                night: IMAGES.BOOK24N,
                rarity: RARITY.STONE,
                author: "Communist",
                name: "Stone Tablet"
            }, {
                id: 10,
                day: IMAGES.BOOK13D,
                night: IMAGES.BOOK13N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                day: IMAGES.BOOK9D,
                night: IMAGES.BOOK9N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                day: IMAGES.BOOK15D,
                night: IMAGES.BOOK15N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                day: IMAGES.BOOK17D,
                night: IMAGES.BOOK17N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                day: IMAGES.BOOK25D,
                night: IMAGES.BOOK25N,
                rarity: RARITY.GOLD,
                author: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                day: IMAGES.BOOK32D,
                night: IMAGES.BOOK32N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                day: IMAGES.BOOK39D,
                night: IMAGES.BOOK39N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                day: IMAGES.BOOK38D,
                night: IMAGES.BOOK38N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                day: IMAGES.BOOK40D,
                night: IMAGES.BOOK40N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                day: IMAGES.BOOK10D,
                night: IMAGES.BOOK10N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                day: IMAGES.BOOK8D,
                night: IMAGES.BOOK8N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                day: IMAGES.BOOK16D,
                night: IMAGES.BOOK16N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                day: IMAGES.BOOK22D,
                night: IMAGES.BOOK22N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                day: IMAGES.BOOK23D,
                night: IMAGES.BOOK23N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                day: IMAGES.BOOK30D,
                night: IMAGES.BOOK30N,
                rarity: RARITY.DIAMOND,
                author: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                day: IMAGES.BOOK31D,
                night: IMAGES.BOOK31N,
                rarity: RARITY.DIAMOND,
                author: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 13,
                day: IMAGES.BOOK11D,
                night: IMAGES.BOOK11N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                day: IMAGES.BOOK28D,
                night: IMAGES.BOOK28N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                day: IMAGES.BOOK29D,
                night: IMAGES.BOOK29N,
                rarity: RARITY.AMETHYST,
                author: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                day: IMAGES.BOOK27D,
                night: IMAGES.BOOK27N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                day: IMAGES.BOOK35D,
                night: IMAGES.BOOK35N,
                rarity: RARITY.AMETHYST,
                author: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                day: IMAGES.BOOK36D,
                night: IMAGES.BOOK36N,
                rarity: RARITY.AMETHYST,
                author: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                day: IMAGES.BOOK41D,
                night: IMAGES.BOOK41N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                day: IMAGES.BOOK42D,
                night: IMAGES.BOOK42N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 33,
                day: IMAGES.BOOK33D,
                night: IMAGES.BOOK33N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                day: IMAGES.BOOK34D,
                night: IMAGES.BOOK34N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                day: IMAGES.BOOK12D,
                night: IMAGES.BOOK12N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                day: IMAGES.BOOK14D,
                night: IMAGES.BOOK14N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                day: IMAGES.BOOK26D,
                night: IMAGES.BOOK26N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                day: IMAGES.BOOK19D,
                night: IMAGES.BOOK19N,
                rarity: RARITY.REIDITE,
                author: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                day: IMAGES.BOOK21D,
                night: IMAGES.BOOK21N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                day: IMAGES.BOOK43D,
                night: IMAGES.BOOK43N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                day: IMAGES.BOOK44D,
                night: IMAGES.BOOK44N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                day: IMAGES.BOOK45D,
                night: IMAGES.BOOK45N,
                rarity: RARITY.REIDITE,
                author: "aloner",
                name: "Mystery Book"
            }],
            ACCESSORY: [{
                id: 0,
                day: IMAGES.ACCESSORY0D,
                night: IMAGES.ACCESSORY0D,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                day: IMAGES.ACCESSORY4D,
                night: IMAGES.ACCESSORY4N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                day: IMAGES.ACCESSORY5D,
                night: IMAGES.ACCESSORY5N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                day: IMAGES.ACCESSORY3D,
                night: IMAGES.ACCESSORY3N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                day: IMAGES.ACCESSORY6D,
                night: IMAGES.ACCESSORY6N,
                rarity: RARITY.FREE,
                author: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                day: IMAGES.ACCESSORY8D,
                night: IMAGES.ACCESSORY8N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                day: IMAGES.ACCESSORY9D,
                night: IMAGES.ACCESSORY9N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                day: IMAGES.ACCESSORY15D,
                night: IMAGES.ACCESSORY15N,
                rarity: RARITY.WOOD,
                author: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                day: IMAGES.ACCESSORY10D,
                night: IMAGES.ACCESSORY10N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                day: IMAGES.ACCESSORY36D,
                night: IMAGES.ACCESSORY36N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                day: IMAGES.ACCESSORY47D,
                night: IMAGES.ACCESSORY47N,
                rarity: RARITY.WOOD,
                author: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                day: IMAGES.ACCESSORY55D,
                night: IMAGES.ACCESSORY55N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                day: IMAGES.ACCESSORY56D,
                night: IMAGES.ACCESSORY56N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                day: IMAGES.ACCESSORY57D,
                night: IMAGES.ACCESSORY57N,
                rarity: RARITY.WOOD,
                author: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                day: IMAGES.ACCESSORY17D,
                night: IMAGES.ACCESSORY17N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                day: IMAGES.ACCESSORY7D,
                night: IMAGES.ACCESSORY7N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                day: IMAGES.ACCESSORY13D,
                night: IMAGES.ACCESSORY13N,
                rarity: RARITY.STONE,
                author: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                day: IMAGES.ACCESSORY11D,
                night: IMAGES.ACCESSORY11N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                day: IMAGES.ACCESSORY44D,
                night: IMAGES.ACCESSORY44N,
                rarity: RARITY.STONE,
                author: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                day: IMAGES.ACCESSORY23D,
                night: IMAGES.ACCESSORY23N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                day: IMAGES.ACCESSORY2D,
                night: IMAGES.ACCESSORY2N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                day: IMAGES.ACCESSORY30D,
                night: IMAGES.ACCESSORY30N,
                rarity: RARITY.STONE,
                author: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                day: IMAGES.ACCESSORY38D,
                night: IMAGES.ACCESSORY38N,
                rarity: RARITY.STONE,
                author: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                day: IMAGES.ACCESSORY62D,
                night: IMAGES.ACCESSORY62N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                day: IMAGES.ACCESSORY63D,
                night: IMAGES.ACCESSORY63N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                day: IMAGES.ACCESSORY67D,
                night: IMAGES.ACCESSORY67N,
                rarity: RARITY.STONE,
                author: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                day: IMAGES.ACCESSORY77D,
                night: IMAGES.ACCESSORY77N,
                rarity: RARITY.STONE,
                author: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                day: IMAGES.ACCESSORY78D,
                night: IMAGES.ACCESSORY78N,
                rarity: RARITY.STONE,
                author: "Ant",
                name: "Hero Mask"
            }, {
                id: 15,
                day: IMAGES.ACCESSORY16D,
                night: IMAGES.ACCESSORY16N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                day: IMAGES.ACCESSORY21D,
                night: IMAGES.ACCESSORY21N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                day: IMAGES.ACCESSORY24D,
                night: IMAGES.ACCESSORY24N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                day: IMAGES.ACCESSORY22D,
                night: IMAGES.ACCESSORY22N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                day: IMAGES.ACCESSORY14D,
                night: IMAGES.ACCESSORY14N,
                rarity: RARITY.GOLD,
                author: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                day: IMAGES.ACCESSORY29D,
                night: IMAGES.ACCESSORY29N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Horns"
            }, {
                id: 31,
                day: IMAGES.ACCESSORY31D,
                night: IMAGES.ACCESSORY31N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                day: IMAGES.ACCESSORY40D,
                night: IMAGES.ACCESSORY40N,
                rarity: RARITY.GOLD,
                author: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                day: IMAGES.ACCESSORY50D,
                night: IMAGES.ACCESSORY50N,
                rarity: RARITY.GOLD,
                author: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                day: IMAGES.ACCESSORY46D,
                night: IMAGES.ACCESSORY46N,
                rarity: RARITY.GOLD,
                author: "eogito",
                name: "Rose"
            }, {
                id: 91,
                day: IMAGES.ACCESSORY80D,
                night: IMAGES.ACCESSORY80N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                day: IMAGES.ACCESSORY81D,
                night: IMAGES.ACCESSORY81N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                day: IMAGES.ACCESSORY82D,
                night: IMAGES.ACCESSORY82N,
                rarity: RARITY.GOLD,
                author: "upfiz",
                name: "Skull Mask"
            }, {
                id: 9,
                day: IMAGES.ACCESSORY1D,
                night: IMAGES.ACCESSORY1N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                day: IMAGES.ACCESSORY25D,
                night: IMAGES.ACCESSORY25N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                day: IMAGES.ACCESSORY12D,
                night: IMAGES.ACCESSORY12N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                day: IMAGES.ACCESSORY19D,
                night: IMAGES.ACCESSORY19N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                day: IMAGES.ACCESSORY28D,
                night: IMAGES.ACCESSORY28N,
                rarity: RARITY.DIAMOND,
                author: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                day: IMAGES.ACCESSORY37D,
                night: IMAGES.ACCESSORY37N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Berry"
            }, {
                id: 39,
                day: IMAGES.ACCESSORY39D,
                night: IMAGES.ACCESSORY39N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Flake"
            }, {
                id: 43,
                day: IMAGES.ACCESSORY43D,
                night: IMAGES.ACCESSORY43N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                day: IMAGES.ACCESSORY49D,
                night: IMAGES.ACCESSORY49N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                day: IMAGES.ACCESSORY51D,
                night: IMAGES.ACCESSORY51N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                day: IMAGES.ACCESSORY53D,
                night: IMAGES.ACCESSORY53N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                day: IMAGES.ACCESSORY54D,
                night: IMAGES.ACCESSORY54N,
                rarity: RARITY.DIAMOND,
                author: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                day: IMAGES.ACCESSORY58D,
                night: IMAGES.ACCESSORY58N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                day: IMAGES.ACCESSORY59D,
                night: IMAGES.ACCESSORY59N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                day: IMAGES.ACCESSORY60D,
                night: IMAGES.ACCESSORY60N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                day: IMAGES.ACCESSORY61D,
                night: IMAGES.ACCESSORY61N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                day: IMAGES.ACCESSORY64D,
                night: IMAGES.ACCESSORY64N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                day: IMAGES.ACCESSORY65D,
                night: IMAGES.ACCESSORY65N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                day: IMAGES.ACCESSORY66D,
                night: IMAGES.ACCESSORY66N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                day: IMAGES.ACCESSORY68D,
                night: IMAGES.ACCESSORY68N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                day: IMAGES.ACCESSORY69D,
                night: IMAGES.ACCESSORY69N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                day: IMAGES.ACCESSORY70D,
                night: IMAGES.ACCESSORY70N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                day: IMAGES.ACCESSORY71D,
                night: IMAGES.ACCESSORY71N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                day: IMAGES.ACCESSORY72D,
                night: IMAGES.ACCESSORY72N,
                rarity: RARITY.DIAMOND,
                author: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                day: IMAGES.ACCESSORY79D,
                night: IMAGES.ACCESSORY79N,
                rarity: RARITY.DIAMOND,
                author: "aloner",
                name: "Blood"
            }, {
                id: 27,
                day: IMAGES.ACCESSORY27D,
                night: IMAGES.ACCESSORY27N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                day: IMAGES.ACCESSORY20D,
                night: IMAGES.ACCESSORY20N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                day: IMAGES.ACCESSORY32D,
                night: IMAGES.ACCESSORY32N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                day: IMAGES.ACCESSORY33D,
                night: IMAGES.ACCESSORY33N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                day: IMAGES.ACCESSORY34D,
                night: IMAGES.ACCESSORY34N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                day: IMAGES.ACCESSORY41D,
                night: IMAGES.ACCESSORY41N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                day: IMAGES.ACCESSORY42D,
                night: IMAGES.ACCESSORY42N,
                rarity: RARITY.AMETHYST,
                author: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                day: IMAGES.ACCESSORY73D,
                night: IMAGES.ACCESSORY73N,
                rarity: RARITY.AMETHYST,
                author: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 60,
                day: IMAGES.ACCESSORY48D,
                night: IMAGES.ACCESSORY48N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                day: IMAGES.ACCESSORY26D,
                night: IMAGES.ACCESSORY26N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                day: IMAGES.ACCESSORY18D,
                night: IMAGES.ACCESSORY18N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                day: IMAGES.ACCESSORY35D,
                night: IMAGES.ACCESSORY35N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                day: IMAGES.ACCESSORY52D,
                night: IMAGES.ACCESSORY52N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                day: IMAGES.ACCESSORY45D,
                night: IMAGES.ACCESSORY45N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                day: IMAGES.ACCESSORY74D,
                night: IMAGES.ACCESSORY74N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                day: IMAGES.ACCESSORY75D,
                night: IMAGES.ACCESSORY75N,
                rarity: RARITY.REIDITE,
                author: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                day: IMAGES.ACCESSORY76D,
                night: IMAGES.ACCESSORY76N,
                rarity: RARITY.REIDITE,
                author: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 45,
                day: IMAGES.LEVEL5D,
                night: IMAGES.LEVEL5N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                day: IMAGES.LEVEL10D,
                night: IMAGES.LEVEL10N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                day: IMAGES.LEVEL15D,
                night: IMAGES.LEVEL15N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                day: IMAGES.LEVEL20D,
                night: IMAGES.LEVEL20N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                day: IMAGES.LEVEL25D,
                night: IMAGES.LEVEL25N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                day: IMAGES.LEVEL30D,
                night: IMAGES.LEVEL30N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                day: IMAGES.LEVEL35D,
                night: IMAGES.LEVEL35N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                day: IMAGES.LEVEL40D,
                night: IMAGES.LEVEL40N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                day: IMAGES.LEVEL45D,
                night: IMAGES.LEVEL45N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                day: IMAGES.LEVEL50D,
                night: IMAGES.LEVEL50N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                day: IMAGES.LEVEL55D,
                night: IMAGES.LEVEL55N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                day: IMAGES.LEVEL60D,
                night: IMAGES.LEVEL60N,
                rarity: RARITY.LEVEL,
                author: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        }, qo.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21), qo.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20), sprite[k.BODY] = [], sprite[k.HAND] = [], sprite[k.CRATE] = [], sprite[k.BOOK] = [], sprite[k.BAG] = [], sprite[k.ACCESSORY] = [];
        for (var e = 0; e < COSMETICS.SKIN.length; e++) sprite[k.BODY][e] = [COSMETICS.SKIN[e].day, COSMETICS.SKIN[e].night], sprite[k.HAND][e] = [COSMETICS.SKIN[e].dayHand, COSMETICS.SKIN[e].nightHand];
        for (e = 0; e < COSMETICS.BOOK.length; e++) sprite[k.BOOK][e] = [COSMETICS.BOOK[e].day, COSMETICS.BOOK[e].night];
        for (e = 0; e < COSMETICS.CRATE.length; e++) sprite[k.CRATE][e] = [COSMETICS.CRATE[e].day, COSMETICS.CRATE[e].night];
        for (e = 0; e < COSMETICS.BAG.length; e++) sprite[k.BAG][e] = [COSMETICS.BAG[e].day, COSMETICS.BAG[e].night];
        for (e = 0; e < COSMETICS.ACCESSORY.length; e++) sprite[k.ACCESSORY][e] = [COSMETICS.ACCESSORY[e].day, COSMETICS.ACCESSORY[e].night]
    }, INFO_BOX = [], PLAYER_LEVEL = [];
    var gn = [];

    function Nn() {
        var e = -8;
        if (d_.auto_feed.enabled) {
            var i = sprite[k.AUTO_FEED];
            on(I, i, d_.auto_feed.translate.x, d_.auto_feed.translate.y + e), e += 70
        }
        if (1 === d_.blizzard) {
            i = sprite[k.STOP_REGENERATION_BLIZZARD];
            on(I, i, d_.auto_feed.translate.x, d_.auto_feed.translate.y + e), e += 70
        } else if (d_.gauges.cold.x < .25 || d_.gauges.hunger.x < .25 || d_.gauges.thirst.x < .25 || d_.gauges.oxygen.x < .25 || d_.gauges.warm.x < .25) {
            i = sprite[k.STOP_REGENERATION];
            on(I, i, d_.auto_feed.translate.x, d_.auto_feed.translate.y + e), e += 70
        }
        if (d_.bandage > 0) {
            i = sprite[k.BANDAGE_ACTIVATED];
            on(I, i, d_.auto_feed.translate.x, d_.auto_feed.translate.y + e);
            var t = gn[d_.bandage];
            void 0 === t && (t = zi(g, d_.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6), gn[d_.bandage] = t), d_.bandage < 9 ? on(I, t, d_.auto_feed.translate.x - 39, d_.auto_feed.translate.y + e + 20) : on(I, t, d_.auto_feed.translate.x - 46, d_.auto_feed.translate.y + e + 20)
        }
    }

    function Dn() {
        var e = d_.ldb,
            i = h_.leaderboard;
        if (e.update) {
            e.update = !1;
            var t = e.ids,
                r = i.can.width,
                n = i.can.height,
                a = i.ctx,
                o = A_.players,
                s = !1;
            a.clearRect(0, 0, r, n), a.drawImage(i.img, 0, 0);
            for (var E = 0; E < t.length; E++) {
                var T = o[t[E]];
                A_.mode === qo.MODE_HUNGER_GAMES && "spectator" === T.nickname || (A_.mode === qo.MODE_ZOMBIES && T.skin === qo.ZOMBIE_SKIN || (t[E] == d_.id ? (s = !0, A_.mode === qo.MODE_VAMPIRES && T.skin === qo.VAMPIRE_SKIN ? color = "#FF0000" : color = "#FFF") : A_.mode === qo.MODE_VAMPIRES && T.skin === qo.VAMPIRE_SKIN ? color = "#990000" : color = "#A1BDCD", a.drawImage(zi(g, "" + (E + 1), 15 * g, color), 20 * g, (40 + 22 * E) * g), T.ldb_label || (T.ldb_label = zi(g, T.nickname, 15 * g, color, void 0, void 0, void 0, void 0, 110 * g)), a.drawImage(T.ldb_label, 39 * g, (40 + 22 * E) * g), a.drawImage(zi(g, _.simplify_number(T.score), 15 * g, color), 156 * g, (40 + 22 * E) * g)))
            }
            s || (A_.mode === qo.MODE_PVP || A_.mode === qo.MODE_VAMPIRES || A_.mode === qo.MODE_LEGACY || A_.mode === qo.MODE_BR || A_.mode === qo.MODE_EXPERIMENTAL || A_.mode === qo.MODE_HUNGER_GAMES && !d_.spectator || A_.mode === qo.MODE_ZOMBIES && !d_.zombie) && (a.drawImage(sprite[k.YOUR_SCORE], 15 * g, (46 + 22 * E) * g), a.drawImage(zi(g, _.simplify_number(A_.players[d_.id].score), 15 * g, "#FFF"), 100 * g, (46 + 22 * E) * g))
        }
        on(I, i.can, i.translate.x, i.translate.y)
    }

    function bn() {
        var e = d_.totem;
        if (e.wait) {
            var i = e.timeout.update();
            I.save();
            var t = sprite[k.DELAY_TEAM],
                r = sprite[k.DELAY_WEAPON].height + 25 * g;
            I.translate(t.width, h_.gauges.translate.y - 188 * g - r);
            var n = -t.width / 2 - 2,
                a = -t.height / 2 - 4;
            on(I, t, n + 2, a), I.beginPath(), I.lineWidth = 5 * g, I.strokeStyle = k.WEAPON_LOADING[A_.time], I.lineCap = "round", I.arc(0, a + t.height / 2, 25 * g, 0, 2 * Math.PI * e.timeout.v), I.stroke(), I.restore(), i && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
        }
    }

    function Sn() {
        var e = A_.clock,
            i = sprite[k.CLOCK][A_.time];
        on(I, i, e.translate.x, e.translate.y), I.save(), I.translate(e.translate.x + i.width / 2, e.translate.y + i.height / 2), A_.clock.now = ((new Date).getTime() - e.init + e.hour) % qo.DAY;
        var t = 2 * Math.PI * A_.clock.now / qo.DAY - Math.PI / 2;
        I.rotate(t), on(I, sprite[k.ARROW_CLOCK], -i.width / 2, -i.height / 2), I.restore()
    }

    function pn() {
        var e = d_.build;
        if (e.wait) {
            var i = e.timeout.update();
            I.save();
            var t = sprite[k.DELAY_WALL];
            I.translate(t.width - 12 * g, h_.gauges.translate.y - 190 * g);
            var r = -t.width / 2 + 9,
                n = -t.height / 2 - 4;
            on(I, t, r, n), I.beginPath(), I.lineWidth = 5 * g, I.strokeStyle = k.HELMET_LOADING[A_.time], I.lineCap = "round", I.arc(9, n + t.height / 2, 25 * g, 0, 2 * Math.PI * e.timeout.v), I.stroke(), I.restore(), i && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
        }
    }

    function mn() {
        var e = d_.helmet;
        if (e.wait) {
            var i = e.timeout.update();
            I.save();
            var t = sprite[k.DELAY_HELMET];
            I.translate(t.width - 2 * g, h_.gauges.translate.y - 125 * g);
            var r = -t.width / 2 + 10,
                n = -t.height / 2 - 4;
            on(I, t, r, n), I.beginPath(), I.lineWidth = 5 * g, I.strokeStyle = k.HELMET_LOADING[A_.time], I.lineCap = "round", I.arc(9, n + t.height / 2, 25 * g, 0, 2 * Math.PI * e.timeout.v), I.stroke(), I.restore(), i && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
        }
    }

    function vn() {
        var e = d_.weapon;
        if (e.wait) {
            var i = e.timeout.update();
            I.save();
            var t = sprite[k.DELAY_WEAPON];
            I.translate(t.width - 2 * g, h_.gauges.translate.y - 60 * g);
            var r = -t.width / 2 - 2,
                n = -t.height / 2 - 4;
            on(I, t, r, n), I.beginPath(), I.lineWidth = 5 * g, I.strokeStyle = k.WEAPON_LOADING[A_.time], I.lineCap = "round", I.arc(0, n + t.height / 2, 25 * g, 0, 2 * Math.PI * e.timeout.v), I.stroke(), I.restore(), i && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
        }
    }

    function Mn() {
        var e = d_.craft;
        if (e.crafting) {
            var i = A_.fast_units[d_.uid];
            I.save(), I.translate(d_.cam.x + i.x, d_.cam.y + i.y);
            var t = sprite[k.GEAR],
                r = -t.width / 2,
                n = -t.height / 2 - 125 * g;
            on(I, t, r, n), I.beginPath(), I.lineWidth = 5 * g, I.strokeStyle = k.CRAFT_LOADING[A_.time], I.lineCap = "round", I.arc(0, n + t.height / 2, 25 * g, 0, 2 * Math.PI * e.timeout.v), I.stroke(), I.restore()
        }
    }

    function Gn() {
        var e = d_.craft;
        if (!e.crafting && e.preview > 0) {
            var i = A_.fast_units[d_.uid];
            if (!i) return;
            if (I.save(), 0 === re[e.preview].grid && 0 === e.mode) I.translate(d_.cam.x + i.x, d_.cam.y + i.y), I.rotate(i.angle), I.translate(120, 0);
            else {
                var t = Math.floor(i.x + 120 * Math.cos(i.angle)),
                    r = Math.floor(i.y + 120 * Math.sin(i.angle));
                t = d_.cam.x + (t - t % 100 + 50), r = d_.cam.y + (r - r % 100 + 50), I.translate(t, r)
            }
            var n = sprite[e.preview][A_.time];
            if (I.globalAlpha = .5, on(I, n, -n.width / 2, -n.height / 2), I.globalAlpha = 1, I.restore(), 0 === re[e.preview].grid) {
                e.label[e.mode] || (0 === e.mode ? e.label[0] = zi(g, Ie[TEXT.MODE_FREE], 20, "#e2c340") : e.label[1] = zi(g, Ie[TEXT.MODE_GRID], 20, "#e2c340"));
                n = e.label[e.mode];
                on(I, n, R + -n.width / 2, h_.gauges.y - 26)
            }
        }
        if (e.crafting) {
            for (var a = e.timeout.update(), o = 0; o < e.can_craft.length; o++) {
                var s = e.can_craft[o];
                if (e.id == s.id) {
                    var _ = 42 * g,
                        E = 17 * g;
                    ge(I, s.info.translate.x, s.info.translate.y + _ * (1 - e.timeout.v), s.info.width, _ * e.timeout.v + E, 10 * g), I.fillStyle = "#55B973", I.fill(), I.globalAlpha = .8, s.draw(I)
                } else I.globalAlpha = .5, s.draw(I);
                I.globalAlpha = 1
            }
            return a && (e.crafting = !1, e.timeout.v = 0, e.timeout.o = !1, d_.craft.id = -1), !0
        }
        for (o = 0; o < e.can_craft.length; o++) e.can_craft[o].draw(I);
        return !1
    }

    function Ln() {
        for (var e = d_.inv, i = A_.fast_units[d_.uid], t = 0; t < e.can_select.length; t++) {
            var r = e.can_select[t],
                n = !1;
            (i = A_.fast_units[d_.uid]) && (i.right == r.id || i.clothe == r.id && i.clothe > 0) ? (n = !0, on(I, r.info.img[2], r.info.translate.x, r.info.translate.y, r.info.width, r.info.height)) : r.draw(I);
            var a = d_.inv.n[r.id];
            a > 1 && En(a, r), a > 0 && _n(t, r, n);
            var o = d_.chest;
            !o.open || !(o.id < 0 || o.id == r.id) || o.lock && o.pid != d_.id || h_.plus_buttons[r.id].draw(I), d_.furnace.open && X.WOOD == r.id && h_.plus_buttons[r.id].draw(I), d_.well.open && X.BUCKET_FULL == r.id && h_.plus_buttons[r.id].draw(I), d_.windmill.open && X.WILD_WHEAT == r.id && h_.plus_buttons[r.id].draw(I), d_.extractor.open && X.WOOD == r.id && h_.plus_buttons[r.id].draw(I), !d_.bread_oven.open || X.WOOD != r.id && X.FLOUR != r.id || h_.plus_buttons[r.id].draw(I)
        }
        if (r && t < e.max) {
            var s = sprite[k.EMPTY_SLOT][2];
            for (x = r.info.translate.x, y = r.info.translate.y, j = 1; t < e.max; t++, j++) on(I, s, x + j * (s.width + 5), y)
        }
    }

    function fn() {
        I.save();
        var e = g;
        d_.gauges.life.x < .25 && (I.globalAlpha = d_.gauges.warn_life.v);
        var i = d_.inv.can_select.length > 0 ? -70 : 0;
        if ((d_.chest.open || d_.furnace.open && -1 != d_.inv.find_item(X.WOOD) || d_.windmill.open && -1 != d_.inv.find_item(X.WILD_WHEAT) || d_.extractor.open && -1 != d_.inv.find_item(X.WOOD) || d_.well.open && -1 != d_.inv.find_item(X.BUCKET_FULL) || d_.bread_oven.open && (-1 != d_.inv.find_item(X.WOOD) || -1 != d_.inv.find_item(X.FLOUR))) && (i -= 50 * g), I.translate((u - 950 * g) / 2, i), I.fillStyle = "#69A148", I.fillRect(this.translate.x + 37 * g, this.translate.y + 17 * g, 178 * d_.gauges.life.x * g, 18 * g), I.globalAlpha = 1, d_.gauges.hunger.x < .35 && (I.fillStyle = "#8F050A", I.globalAlpha = d_.gauges.warn_hunger.v, I.fillRect(this.translate.x + 277 * g, this.translate.y + 17 * g, 178 * g, 18 * g), I.globalAlpha = 1), I.fillStyle = "#AF352A", I.fillRect(this.translate.x + 277 * g, this.translate.y + 17 * g, 178 * d_.gauges.hunger.x * g, 18 * g), d_.gauges.cold.x < .35 && (I.fillStyle = "#366B91", I.globalAlpha = d_.gauges.warn_cold.v, I.fillRect(this.translate.x + 517 * g, this.translate.y + 17 * g, 178 * g, 18 * g), I.globalAlpha = 1), I.fillStyle = "#669BB1", I.fillRect(this.translate.x + 517 * g, this.translate.y + 17 * g, 178 * d_.gauges.cold.x * g, 18 * g), d_.gauges.cold.x > .99 && (d_.gauges.warm.x < .35 && (I.fillStyle = "#6C4036", I.globalAlpha = d_.gauges.warn_warm.v, I.fillRect(this.translate.x + 517 * g, this.translate.y + 17 * g, 178 * g, 18 * g), I.globalAlpha = 1), I.fillStyle = "#9C4036", I.fillRect(this.translate.x + 517 * g, this.translate.y + 17 * g, 178 * (1 - d_.gauges.warm.x) * g, 18 * g)), d_.gauges.thirst.x < .35 && (I.fillStyle = "#001A57", I.globalAlpha = d_.gauges.warn_thirst.v, I.fillRect(this.translate.x + 757 * g, this.translate.y + 17 * g, 178 * g, 18 * g), I.globalAlpha = 1), I.fillStyle = "#074A87", I.fillRect(this.translate.x + 757 * g, this.translate.y + 17 * g, 178 * d_.gauges.thirst.x * g, 18 * g), g = e, on(I, this.img, this.translate.x, this.translate.y), this.y = this.translate.y + i, I.restore(), d_.gauges.oxygen.x < .99) {
            var t = Math.floor(R - sprite[k.OXYGEN].width / 2);
            i += this.translate.y - sprite[k.OXYGEN].height - 5 * g, I.fillStyle = "#BBE8EF", I.fillRect(t + 5, i + 5 * g, 588 * g * d_.gauges.oxygen.x, 10 * g), d_.gauges.oxygen.x < .35 && (I.fillStyle = "#9BA8AF", I.globalAlpha = d_.gauges.warn_oxygen.v, I.fillRect(t + 5, i + 5, 588 * g, 10 * g), I.globalAlpha = 1), on(I, sprite[k.OXYGEN], t, i), this.y = i
        }
    }

    function Hn(e) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var i = (1 - this.hit.anim.v) * R_ * 600 * g,
                t = Math.cos(this.hit.angle - this.angle) * i,
                r = Math.sin(this.hit.angle - this.angle) * i
        } else t = 0, r = 0;
        var n = sprite[e][A_.time];
        w = -n.width, h = -n.height, on(I, n, -w / 2 + t, -h / 2 + r, w, h), I.restore()
    }

    function Pn() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        img = sprite[k.CHEST][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2 + i, -h / 2 + t, w, h), this.lock && (img = sprite[k.LOCK][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2 + i - 1 * g, -h / 2 + t, w, h)), I.restore()
    }

    function yn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), img = sprite[k.THORNBUSH_SEED_MOB][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function zn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), img = sprite[k.GARLIC_SEED_MOB][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Bn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), img = sprite[k.PUMPKIN_SEED_MOB][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Wn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), img = sprite[k.ALOE_VERA][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Vn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), img = sprite[k.WHEAT_MOB][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Kn(e) {
        if (!((e = e / 100) > .8 || e <= 0)) {
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
                this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
                var i = (1 - this.hit.anim.v) * R_ * 600 * g,
                    t = Math.cos(this.hit.angle - this.angle) * i,
                    r = Math.sin(this.hit.angle - this.angle) * i
            } else t = 0, r = 0;
            I.globalAlpha = .5, De(I, t, r, 18 * g, e), Ce(I, null, "#000000", 18 * g), I.globalAlpha = 1, De(I, t, r, 18 * g, e), Ce(I, null, k.BROWN_LIFE[A_.time], 6 * g), I.restore()
        }
    }

    function wn(e) {
        if (!((e = e / 100) > .95)) {
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
                this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
                var i = (1 - this.hit.anim.v) * R_ * 600 * g,
                    t = Math.cos(this.hit.angle - this.angle) * i,
                    r = Math.sin(this.hit.angle - this.angle) * i
            } else t = 0, r = 0;
            I.globalAlpha = .5, De(I, t, r, 28 * g, e), Ce(I, null, "#000000", 18 * g), I.globalAlpha = 1, De(I, t, r, 28 * g, e), Ce(I, null, k.CRAFT_LOADING[A_.time], 6 * g), I.restore()
        }
    }

    function Un() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = sprite[k.ROOFS].length;
        img = sprite[k.ROOFS][(this.j + this.i % 2) % r][A_.time], w = -img.width, h = -img.height;
        var n = A_.fast_units[d_.uid];
        n && (d_.id === this.pid || d_.in_team(this.pid)) ? _.dist(this, n) < 550 ? this.opacity = Math.max(this.opacity - R_, .3) : this.opacity = Math.min(this.opacity + R_, 1) : n && _.dist(this, A_.fast_units[d_.uid]) < 150 ? this.opacity = Math.max(this.opacity - R_, .3) : this.opacity = Math.min(this.opacity + R_, 1);
        var a = I.globalAlpha;
        I.globalAlpha *= 0.3, on(I, img, -w / 2 + i, -h / 2 + t, w, h), I.globalAlpha = a, I.restore()
    }

    function Yn() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        this.halo.update() && (this.color += .2 + .3 * Math.random()), img = sprite[k.GARLANDS][Math.floor(this.id + this.color) % 5][A_.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, on(I, img, -w / 2 + i, -h / 2 + t, w, h), I.restore()
    }

    function Fn(e) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var i = (1 - this.hit.anim.v) * R_ * 600 * g,
                t = Math.cos(this.hit.angle - this.angle) * i,
                r = Math.sin(this.hit.angle - this.angle) * i
        } else t = 0, r = 0;
        if (e === k.BED_TOP && !A_.transition) {
            for (var n = 0, a = A_.units[ITEMS.PLAYERS], o = 0; o < a.length; o++) {
                var s = _.dist(a[o], this);
                if (s < 140 && s > 35) {
                    n = 0;
                    break
                }
                s <= 35 && (n = 1)
            }
            this.opacity = 0 === n ? Math.max(.5, this.opacity - R_ / 1.5) : Math.min(1, this.opacity + R_ / 1.5), I.globalAlpha = this.opacity
        }
        img = sprite[e][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2 + t, -h / 2 + r, w, h), I.globalAlpha = 1, I.restore()
    }

    function kn(e) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var i = (1 - this.hit.anim.v) * R_ * 600 * g,
                t = Math.cos(this.hit.angle - this.angle) * i,
                r = Math.sin(this.hit.angle - this.angle) * i
        } else t = 0, r = 0;
        img = sprite[e][A_.time], w = -img.width, h = -img.height, on(I, img, -w / 2 + t, -h / 2 + r, w, h), I.restore()
    }
    var xn = 0;

    function Jn(e, i, t, r, n, a, o, s) {
        void 0 === s && (s = 0);
        for (var _ = e; _ <= i; _++)
            for (var E = t; E <= r; E++) {
                var T = s_.tiles[_][E];
                if (void 0 !== T && void 0 !== T[a]) {
                    var A = T[a],
                        d = sprite[n][A_.time][A.river];
                    if (on(I, d, d_.cam.x + A.x - d.width / (4 * _scale_object), d_.cam.y + A.y - d.height / (4 * _scale_object), d.width / (2 * _scale_object), d.height / (2 * _scale_object)), ui.quality) {
                        var h = 2147483648,
                            u = (1103515245 * (1e3 * _ + E) + 12345) % h / h;
                        if (u < .2) {
                            u = Math.floor(sprite[k.RIVER_DECO][A_.time][A.river].length * (5 * u));
                            d = sprite[k.RIVER_DECO][A_.time][A.river][u];
                            on(I, d, d_.cam.x + A.x - d.width / (4 * _scale_object), d_.cam.y + A.y - d.height / (4 * _scale_object), d.width / (2 * _scale_object), d.height / (2 * _scale_object))
                        } else if (0 !== A.current) {
                            d = sprite[k.RIVER_WAVE][A_.time];
                            var O = (xn + _ % 2 * 30) % 60;
                            I.globalAlpha = O < 30 ? O / 30 : 1 - (O - 30) / 30, on(I, d, d_.cam.x + A.x - d.width / (4 * _scale_object), d_.cam.y + A.y - d.height / (4 * _scale_object) - 30 + O, d.width / (2 * _scale_object), d.height / (2 * _scale_object)), I.globalAlpha = 1
                        }
                    }
                }
            }
    }

    function Xn() {
        if (1 == (1 & this.info)) this.dig = Math.min(this.dig + R_, 2.2);
        else if (this.dig = Math.max(this.dig - R_, 0), this.groundTimer += R_, this.groundTimer > .1) {
            this.groundTimer = 0;
            var e = {
                x: this.x + 60 * Math.random() - 30,
                y: this.y + 60 * Math.random() - 30,
                a: 0,
                r: 30 * Math.random() + 30
            };
            this.ground.push(e)
        }
        for (var i = 0; i < this.ground.length; i++) {
            e = this.ground[i];
            I.save(), I.translate(d_.cam.x + e.x, d_.cam.y + e.y), e.a = Math.min(1, e.a + R_ / 2);
            var t = e.a;
            t < .2 ? t *= 5 : t = t > .8 ? 5 * (1 - t) : 1, I.globalAlpha = .8 * t, Ne(I, 0, 0, e.r), Ce(I, k.SAND_WORM_GROUND[A_.time]), I.restore(), 1 === e.a && (this.ground.splice(i, 1), i--)
        }
    }

    function qn() {
        var e = void 0,
            i = void 0;
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.breath.update(), this.rotate.update(), this.dig >= .1 && this.dig <= 1.1) {
            (t = Math.max(0, Math.min(1, this.dig - .1))) < .2 ? t *= 5 : t = t > .8 ? 5 * (1 - t) : 1;
            e = sprite[k.SAND_WORM1][A_.time];
            w = -e.width * this.breath.v, h = -e.height * this.breath.v, I.globalAlpha = t, on(I, e, -w / 4, -h / 4, w / 2, h / 2);
            i = sprite[k.HURT_SAND_WORM1]
        }
        if (this.dig >= .9) {
            var t;
            (t = Math.max(0, Math.min(1, this.dig - .9))) < .2 ? t *= 5 : t = 1;
            e = sprite[k.SAND_WORM2][A_.time];
            w = -e.width * this.breath.v, h = -e.height * this.breath.v, I.globalAlpha = t, on(I, e, -w / 4, -h / 4, w / 2, h / 2);
            i = sprite[k.HURT_SAND_WORM2]
        }
        this.action & ko.HURT && void 0 !== i && (this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = (.6 - this.hit.v) * t, w = -i.width * this.breath.v, h = -i.height * this.breath.v, on(I, i, -w / 4, -h / 4, w / 2, h / 2)), I.globalAlpha = 1, I.restore()
    }

    function jn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle);
        var e = _.dist(this, this.r);
        if (this.scale = e > 350 ? Math.min(this.scale + R_ / 2, 1.8) : Math.max(this.scale - R_, 1), this.breath.update(), this.rotate.update(), this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * R_) : Math.min(1, this._alpha + 2.2 * R_), i = sprite[k.VULTURE_GROUND_ATTACK][A_.time], w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, I.globalAlpha = 1 - this._alpha, on(I, i, -w / 4, -h / 4, w / 2, h / 2), i = sprite[k.VULTURE_ATTACK][A_.time], w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, I.globalAlpha = this._alpha, on(I, i, -w / 4, -h / 4, w / 2, h / 2), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
            var i = sprite[k.HURT_VULTURE_GROUND];
            w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = (.6 - this.hit.v) * this._alpha;
            i = sprite[k.HURT_VULTURE];
            w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (i = sprite[k.VULTURE_WING_LEFT_ATTACK][A_.time], w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, I.save(), I.translate(-40 * g, 80 * g), I.rotate(this.rotate.v), I.globalAlpha = this._alpha, on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = (.6 - this.hit.v) * this._alpha;
            i = sprite[k.HURT_VULTURE_WING_LEFT];
            on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (I.restore(), i = sprite[k.VULTURE_WING_RIGHT_ATTACK][A_.time], I.save(), I.translate(40 * g, 80 * g), I.rotate(-this.rotate.v), I.globalAlpha = this._alpha, on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = (.6 - this.hit.v) * this._alpha;
            i = sprite[k.HURT_VULTURE_WING_RIGHT];
            on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        I.globalAlpha = 1, I.restore(), I.restore()
    }

    function Zn() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle);
        var e = _.dist(this, this.r);
        if (this.scale = e > 350 ? Math.min(this.scale + R_ / 2, 1.8) : Math.max(this.scale - R_, 1), this.breath.update(), this.rotate.update(), this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * R_) : Math.min(1, this._alpha + 2.2 * R_), i = 0 == (1 & this.info) ? sprite[k.HAWK_GROUND][A_.time] : sprite[k.HAWK_GROUND_ATTACK][A_.time], w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, I.globalAlpha = 1 - this._alpha, on(I, i, -w / 4, -h / 4, w / 2, h / 2), i = 0 == (1 & this.info) ? sprite[k.HAWK][A_.time] : sprite[k.HAWK_ATTACK][A_.time], w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, I.globalAlpha = this._alpha, on(I, i, -w / 4, -h / 4, w / 2, h / 2), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
            var i = sprite[k.HURT_HAWK_GROUND];
            w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = (.6 - this.hit.v) * this._alpha;
            i = sprite[k.HURT_HAWK];
            w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (i = 0 == (1 & this.info) ? sprite[k.HAWK_WING_LEFT][A_.time] : sprite[k.HAWK_WING_LEFT_ATTACK][A_.time], w = -i.width * this.breath.v * this.scale, h = -i.height * this.breath.v * this.scale, I.save(), I.translate(-20 * g, 0 * g), I.rotate(this.rotate.v), I.globalAlpha = this._alpha, on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = (.6 - this.hit.v) * this._alpha;
            i = sprite[k.HURT_HAWK_WING_LEFT];
            on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (I.restore(), i = 0 == (1 & this.info) ? sprite[k.HAWK_WING_RIGHT][A_.time] : sprite[k.HAWK_WING_RIGHT_ATTACK][A_.time], I.save(), I.translate(20 * g, 0 * g), I.rotate(-this.rotate.v), I.globalAlpha = this._alpha, on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = (.6 - this.hit.v) * this._alpha;
            i = sprite[k.HURT_HAWK_WING_RIGHT];
            on(I, i, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        I.globalAlpha = 1, I.restore(), I.restore()
    }

    function Qn() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), _.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + R_ / 2, 1.8) : this.scale = Math.max(this.scale - R_, 1), this.breath.update(), this.rotate.update(), e = 0 === this.info ? sprite[k.BABY_LAVA][A_.time] : sprite[k.BABY_LAVA_ATTACK][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, on(I, e, -w / 4, -h / 4, w / 2, h / 2), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var e = sprite[k.HURT_BABY_LAVA];
            on(I, e, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (e = 0 === this.info ? sprite[k.BABY_LAVA_WING_LEFT][A_.time] : sprite[k.BABY_LAVA_WING_LEFT_ATTACK][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, I.save(), I.translate(-40 * g, 10 * g), I.rotate(this.rotate.v), on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_BABY_LAVA_WING_LEFT];
            on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (I.restore(), e = 0 === this.info ? sprite[k.BABY_LAVA_WING_RIGHT][A_.time] : sprite[k.BABY_LAVA_WING_RIGHT_ATTACK][A_.time], I.save(), I.translate(40 * g, 10 * g), I.rotate(-this.rotate.v), on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_BABY_LAVA_WING_RIGHT];
            on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        I.restore(), I.restore()
    }

    function $n() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), _.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + R_ / 2, 1.8) : this.scale = Math.max(this.scale - R_, 1), this.breath.update(), this.rotate.update(), e = 0 === this.info ? sprite[k.BABY_DRAGON][A_.time] : sprite[k.BABY_DRAGON_ATTACK][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, on(I, e, -w / 4, -h / 4, w / 2, h / 2), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var e = sprite[k.HURT_BABY_DRAGON];
            on(I, e, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (e = 0 === this.info ? sprite[k.BABY_DRAGON_WING_LEFT][A_.time] : sprite[k.BABY_DRAGON_WING_LEFT_ATTACK][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, I.save(), I.translate(-40 * g, 10 * g), I.rotate(this.rotate.v), on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_BABY_DRAGON_WING_LEFT];
            on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (I.restore(), e = 0 === this.info ? sprite[k.BABY_DRAGON_WING_RIGHT][A_.time] : sprite[k.BABY_DRAGON_WING_RIGHT_ATTACK][A_.time], I.save(), I.translate(40 * g, 10 * g), I.rotate(-this.rotate.v), on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_BABY_DRAGON_WING_RIGHT];
            on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        I.restore(), I.restore()
    }

    function ea() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), _.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + R_ / 2, 1.8) : this.scale = Math.max(this.scale - R_, 1), this.breath.update(), this.rotate.update(), e = sprite[k.LAVA_DRAGON][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, on(I, e, -w / 4, -h / 4, w / 2, h / 2), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var e = sprite[k.HURT_LAVA_DRAGON];
            on(I, e, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (e = sprite[k.LAVA_WING_LEFT][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, I.save(), I.translate(-60 * g, 20 * g), I.rotate(this.rotate.v), on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_LAVA_WING_LEFT];
            on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        if (I.restore(), e = sprite[k.LAVA_WING_RIGHT][A_.time], I.save(), I.translate(60 * g, 20 * g), I.rotate(-this.rotate.v), on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_LAVA_WING_RIGHT];
            on(I, e, -w * g / 4, -h * g / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        I.restore(), I.restore()
    }

    function ia() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), _.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + R_ / 2, 1.8) : this.scale = Math.max(this.scale - R_, 1), this.breath.update(), this.rotate.update(), e = sprite[k.DRAGON][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, on(I, e, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var e = sprite[k.HURT_DRAGON];
            on(I, e, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (e = sprite[k.WING_LEFT][A_.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, I.save(), I.translate(-30 * g, 70 * g), I.rotate(this.rotate.v), on(I, e, -10 * g, -40 * g, w, h), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_WING_LEFT];
            on(I, e, -10 * g, -40 * g, w, h), I.globalAlpha = 1
        }
        if (I.restore(), e = sprite[k.WING_RIGHT][A_.time], I.save(), I.translate(30 * g, 70 * g), I.rotate(-this.rotate.v), on(I, e, 10 * g - w, -40 * g, w, h), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            e = sprite[k.HURT_WING_RIGHT];
            on(I, e, 10 * g - w, -40 * g, w, h), I.globalAlpha = 1
        }
        I.restore(), I.restore()
    }

    function ta(e) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), e === k.GIFT && (e = k.CRATE, this.info = 36), img = sprite[e][this.info][A_.time], w = -img.width / 2, h = -img.height / 2, on(I, img, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var i = Ja(this.info, img, __EFFECT_BOX__);
            on(I, i, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function ra(e, i) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), t = sprite[e][A_.time], w = -t.width, h = -t.height, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var t = sprite[i];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function na() {
        if (this.breath.update(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), e = 0 === this.info ? sprite[k.BABY_MAMMOTH][A_.time] : sprite[k.BABY_MAMMOTH_ATTACK][A_.time], w = -e.width * this.breath.v, h = -e.height * this.breath.v, on(I, e, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var e = sprite[k.HURT_BABY_MAMMOTH];
            on(I, e, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function aa() {
        if (this.breath.update(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), e = 0 === this.info ? sprite[k.BOAR][A_.time] : sprite[k.BOAR_ATTACK][A_.time], w = -e.width * this.breath.v, h = -e.height * this.breath.v, on(I, e, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var e = sprite[k.HURT_BOAR];
            on(I, e, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function oa() {
        var e = Math.PI / 2,
            i = Math.PI / 4;
        if (this.breath.update(), this.breathl.update(), this.breathr.update(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), t = 0 === this.info ? sprite[k.CRAB_BOSS][A_.time] : sprite[k.CRAB_BOSS_ATTACK][A_.time], w = -t.width * this.breath.v, h = -t.height * this.breath.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var t = sprite[k.HURT_CRAB_BOSS];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (this.action & ko.COLD) {
            this.heal.update() && 0 == this.heal.o && (this.action -= ko.COLD), I.globalAlpha = .6 - this.heal.v;
            t = sprite[k.HEAL_CRAB_BOSS];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (I.restore(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle + i), I.translate(100, 0), I.rotate(e), t = 0 === this.info ? sprite[k.CRAB_BOSS_CLAW_LEFT][A_.time] : sprite[k.CRAB_BOSS_CLAW_LEFT_ATTACK][A_.time], w = -t.width * this.breathl.v, h = -t.height * this.breathl.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            t = sprite[k.HURT_CRAB_BOSS_CLAW_LEFT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (this.action & ko.COLD) {
            I.globalAlpha = .6 - this.heal.v;
            t = sprite[k.HEAL_CRAB_BOSS_CLAW_LEFT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (I.restore(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle + e + i), I.translate(100, 0), I.rotate(e), t = 0 === this.info ? sprite[k.CRAB_BOSS_CLAW_RIGHT][A_.time] : sprite[k.CRAB_BOSS_CLAW_RIGHT_ATTACK][A_.time], w = -t.width * this.breathr.v, h = -t.height * this.breathr.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            t = sprite[k.HURT_CRAB_BOSS_CLAW_RIGHT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (this.action & ko.COLD) {
            I.globalAlpha = .6 - this.heal.v;
            t = sprite[k.HEAL_CRAB_BOSS_CLAW_RIGHT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function sa() {
        var e = Math.PI / 2,
            i = Math.PI / 4;
        if (this.breath.update(), this.breathl.update(), this.breathr.update(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), t = 0 === this.info ? sprite[k.CRAB][A_.time] : sprite[k.CRAB_ATTACK][A_.time], w = -t.width * this.breath.v, h = -t.height * this.breath.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var t = sprite[k.HURT_CRAB];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (this.action & ko.COLD) {
            this.heal.update() && 0 == this.heal.o && (this.action -= ko.COLD), I.globalAlpha = .6 - this.heal.v;
            t = sprite[k.HEAL_CRAB];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (I.restore(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle + i), I.translate(55, 0), I.rotate(e), t = 0 === this.info ? sprite[k.CRAB_CLAW_LEFT][A_.time] : sprite[k.CRAB_CLAW_LEFT_ATTACK][A_.time], w = -t.width * this.breathl.v, h = -t.height * this.breathl.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            t = sprite[k.HURT_CRAB_CLAW_LEFT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (this.action & ko.COLD) {
            I.globalAlpha = .6 - this.heal.v;
            t = sprite[k.HEAL_CRAB_CLAW_LEFT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (I.restore(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle + e + i), I.translate(55, 0), I.rotate(e), t = 0 === this.info ? sprite[k.CRAB_CLAW_RIGHT][A_.time] : sprite[k.CRAB_CLAW_RIGHT_ATTACK][A_.time], w = -t.width * this.breathr.v, h = -t.height * this.breathr.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            I.globalAlpha = .6 - this.hit.v;
            t = sprite[k.HURT_CRAB_CLAW_RIGHT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        if (this.action & ko.COLD) {
            I.globalAlpha = .6 - this.heal.v;
            t = sprite[k.HEAL_CRAB_CLAW_RIGHT];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function _a() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.born = Math.min(1, this.born + 2 * R_), I.globalAlpha = Math.min(1, Math.max(0, _.dist(this, this.r) / 80)) * this.born, this.breath.update(), img = sprite[k.SPELL][A_.time][this.spell], this.spell < 2 ? (w = -img.width * this.breath.v, h = -img.height * this.breath.v) : 0 === this.fly ? (w = -img.width, h = -img.height) : (w = 1.35 * -img.width, h = 1.35 * -img.height), on(I, img, -w / 2, -h / 2, w, h), I.globalAlpha = 1, I.restore()
    }

    function Ea(e, i) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.breath.update(), t = sprite[e][A_.time], w = -t.width * this.breath.v, h = -t.height * this.breath.v, on(I, t, -w / 2, -h / 2, w, h), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var t = sprite[i];
            on(I, t, -w / 2, -h / 2, w, h), I.globalAlpha = 1
        }
        I.restore()
    }

    function Ta(e, i) {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.breath.update(), t = sprite[e][A_.time], w = -t.width * this.breath.v, h = -t.height * this.breath.v, on(I, t, -w / 4, -h / 4, w / 2, h / 2), this.action & ko.HURT) {
            this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v;
            var t = sprite[i];
            on(I, t, -w / 4, -h / 4, w / 2, h / 2), I.globalAlpha = 1
        }
        I.restore()
    }

    function Aa(e, i, t) {
        I.save(), I.translate(d_.cam.x + i, d_.cam.y + t), I.rotate(this.angle), I.translate(this.x - i, this.y - t), this.breath.update(), img = sprite[e][A_.time], w = -img.width * this.breath.v, h = -img.height * this.breath.v, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function da(e) {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.breath.update(), img = sprite[e][A_.time], w = -img.width * this.breath.v, h = -img.height * this.breath.v, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Ia() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.PLANT_THORNBUSH_DRIED][A_.time];
            else n = sprite[k.PLANT_THORNBUSH][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (16 & this.info) n = sprite[k.DRIED_THORNBUSH][A_.time];
            else n = sprite[k.THORNBUSH][A_.time];
            I.translate(0, n.height / 2), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function ha() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.PLANT_GARLIC_DRIED][A_.time];
            else n = sprite[k.PLANT_GARLIC][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (16 & this.info) n = sprite[k.DRIED_GARLIC][A_.time];
            else n = sprite[k.GARLIC][A_.time];
            I.translate(0, n.height / 2), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function ua() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.PLANT_ALOE_VERA_DRIED][A_.time];
            else n = sprite[k.PLANT_ALOE_VERA][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (16 & this.info) n = sprite[k.DRIED_ALOE_VERA][A_.time];
            else n = sprite[k.ALOE_VERA_GROWN][A_.time];
            I.translate(0, n.height / 2), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function Oa() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.PLANT_WATERMELON_DRIED][A_.time];
            else n = sprite[k.PLANT_WATERMELON][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (16 & this.info) n = sprite[k.DRIED_WATERMELON][A_.time];
            else n = sprite[k.WATERMELON][A_.time];
            I.translate(0, n.height / 2), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function la() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.PLANT_CARROT_DRIED][A_.time];
            else n = sprite[k.PLANT_CARROT][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (16 & this.info) n = sprite[k.DRIED_CARROT][A_.time];
            else n = sprite[k.CARROT][A_.time];
            I.translate(0, n.height / 2), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function Ra() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.PLANT_PUMPKIN_DRIED][A_.time];
            else n = sprite[k.PLANT_PUMPKIN][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (16 & this.info) n = sprite[k.DRIED_PUMPKIN][A_.time];
            else n = sprite[k.PUMPKIN][A_.time];
            I.translate(0, n.height / 2), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function ca() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        var r = 15 & this.info;
        if (10 === this.info || 0 === r) {
            if (I.rotate(this.angle), this.ground.update(), 16 & this.info) var n = sprite[k.WHEAT_SEED_DRIED][A_.time];
            else n = sprite[k.WHEAT_SEED][A_.time];
            var a = -n.width * this.ground.v,
                o = -n.height * this.ground.v;
            on(I, n, -a / 2 + i, -o / 2 + t, a, o)
        } else {
            if (this.wind.update(), 16 & this.info) n = sprite[k.DRIED_WHEAT][A_.time];
            else n = sprite[k.WILD_WHEAT][A_.time];
            I.translate(0, n.height / 2), I.rotate(this.wind.v), on(I, n, i - n.width / 2, -n.height + t)
        }
        I.restore()
    }

    function Ca() {
        if (!(this.info < 10)) {
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
                this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
                var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                    i = Math.cos(this.hit.angle - this.angle) * e,
                    t = Math.sin(this.hit.angle - this.angle) * e
            } else i = 0, t = 0;
            this.ground.update();
            var r = sprite[k.PLANT_SEED][A_.time],
                n = -r.width * this.ground.v,
                a = -r.height * this.ground.v;
            on(I, r, -n / 2 + i, -a / 2 + t, n, a), I.restore()
        }
    }

    function ga() {
        if (10 !== this.info) {
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
                this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
                var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                    i = Math.cos(this.hit.angle - this.angle) * e,
                    t = Math.sin(this.hit.angle - this.angle) * e
            } else i = 0, t = 0;
            if (16 & this.info) var r = sprite[k.DRIED_PLANT][A_.time];
            else r = sprite[k.PLANT_MINI][A_.time];
            on(I, r, -r.width / 2 + i, -r.width / 2 + t), I.restore();
            for (var n = 15 & this.info, a = 0; a < n; a++) this.fruits[a].draw(k.FRUIT)
        }
    }

    function Na() {
        if (!(this.info < 10)) {
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
                this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
                var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                    i = Math.cos(this.hit.angle - this.angle) * e,
                    t = Math.sin(this.hit.angle - this.angle) * e
            } else i = 0, t = 0;
            this.ground.update();
            var r = sprite[k.PLANT_TOMATO][A_.time],
                n = -r.width * this.ground.v,
                a = -r.height * this.ground.v;
            on(I, r, -n / 2 + i, -a / 2 + t, n, a), I.restore()
        }
    }

    function Da() {
        if (10 !== this.info) {
            for (var e = 15 & this.info, i = 0; i < e; i++) this.fruits[i].draw(k.TOMATO, this.x, this.y);
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
                this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
                var t = (1 - this.hit.anim.v) * R_ * 600 * g,
                    r = Math.cos(this.hit.angle - this.angle) * t,
                    n = Math.sin(this.hit.angle - this.angle) * t
            } else r = 0, n = 0;
            if (16 & this.info) var a = sprite[k.DRIED_TOMATO_MINI][A_.time];
            else a = sprite[k.TOMATO_MINI][A_.time];
            on(I, a, -a.width / 2 + r, -a.width / 2 + n), I.restore()
        }
    }

    function ba() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        2 == this.action ? img = sprite[k.FURNACE_ON][A_.time] : img = sprite[k.FURNACE_OFF][A_.time], on(I, img, -img.width / 2 + i, -img.height / 2 + t), I.restore()
    }

    function Sa() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.ground.update(), I.globalAlpha = .3;
        var e = sprite[k.GROUND_FIRE][A_.time],
            i = -e.width * this.ground.v,
            t = -e.height * this.ground.v;
        on(I, e, -i / 2, -t / 2, i, t), I.globalAlpha = 1, I.restore()
    }

    function pa() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), 31 & this.info && 992 & this.info && 31744 != (31744 & this.info) && (0 == this.smog.length || this.smog[this.smog.length - 1] <= k.SMOG_PUSH) && this.smog.push(k.SMOG);
        for (var e = 0; e < this.smog.length; e++) {
            this.smog[e] = Math.max(0, this.smog[e] - R_ * k.SMOG_SPEED), I.globalAlpha = this.smog[e] / 1.3;
            var i = 40 * (1 - this.smog[e]),
                t = 35 * (1 - this.smog[e]) + 10;
            Ne(I, -68 * g + Math.cos(-this.angle - Math.PI / 2) * i, -20 * g + Math.sin(-this.angle - Math.PI / 2) * i, t), Ce(I, "#333333")
        }
        I.globalAlpha = 1, this.smog.length > 0 && 0 === this.smog[0] && this.smog.shift(), I.restore()
    }

    function ma(e) {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.ground.update(), I.globalAlpha = .3;
        var i = sprite[k.GROUND_FIRE][A_.time],
            t = -i.width * this.ground.v,
            r = -i.height * this.ground.v;
        if (on(I, i, -t / 2, -r / 2, t, r), I.globalAlpha = 1, this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var n = (1 - this.hit.anim.v) * R_ * 600 * g,
                a = Math.cos(this.hit.angle - this.angle) * n,
                o = Math.sin(this.hit.angle - this.angle) * n
        } else a = 0, o = 0;
        i = sprite[e][A_.time], on(I, i, -i.width / 2 + a, -i.height / 2 + o), I.restore()
    }

    function va() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        0 === this.info ? img = sprite[k.SIGN][A_.time] : img = sprite[k.SYMBOLS][A_.time][this.info - 1], on(I, img, -img.width / 2 + i, -img.height / 2 + t), I.restore()
    }

    function Ma() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        if (31 & this.info && 992 & this.info && 31744 != (31744 & this.info)) {
            r = sprite[k.BREAD_OVEN_ON][A_.time], on(I, r, -r.width / 2 + i, -r.height / 2 + t), this.up.update();
            var r = sprite[k.BREAD_LIGHT_UP][A_.time],
                n = -r.width * this.up.v,
                a = -r.height * this.up.v;
            on(I, r, -n / 2 + 1 * g, -a / 2 + 3 * g, n, a)
        } else r = sprite[k.BREAD_OVEN_OFF][A_.time], on(I, r, -r.width / 2 + i, -r.height / 2 + t);
        I.restore()
    }

    function Ga() {
        if (this.hit.update) var e = (1 - this.hit.anim.v) * R_ * 600 * g,
            i = Math.cos(this.hit.angle - this.angle) * e,
            t = Math.sin(this.hit.angle - this.angle) * e;
        else i = 0, t = 0;
        255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + .5 * R_) % (2 * Math.PI)), I.save(), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.save(), I.rotate(this.rotate), img = sprite[k.WINDMILL_WINGS][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.save(), I.rotate(this.angl), img = sprite[k.WINDMILL_HEAD][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.restore()
    }

    function La() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        I.save(), 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, t += 2 * Math.random() - 1), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.rotate(this.angle), img = sprite[k.EXTRACTOR_MACHINE_STONE][A_.time], on(I, img, -img.width / 2, -img.height / 2), 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * R_) % (2 * Math.PI)), I.rotate(this.rotate), img = sprite[k.EXTRACTOR_MACHINE0_STONE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore()
    }

    function fa() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        I.save(), 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, t += 2 * Math.random() - 1), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.rotate(this.angle), img = sprite[k.EXTRACTOR_MACHINE_GOLD][A_.time], on(I, img, -img.width / 2, -img.height / 2), 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * R_) % (2 * Math.PI)), I.rotate(this.rotate), img = sprite[k.EXTRACTOR_MACHINE0_GOLD][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore()
    }

    function Ha() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        I.save(), 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, t += 2 * Math.random() - 1), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.rotate(this.angle), img = sprite[k.EXTRACTOR_MACHINE_DIAMOND][A_.time], on(I, img, -img.width / 2, -img.height / 2), 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * R_) % (2 * Math.PI)), I.rotate(this.rotate), img = sprite[k.EXTRACTOR_MACHINE0_DIAMOND][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore()
    }

    function Pa() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        I.save(), 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, t += 2 * Math.random() - 1), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.rotate(this.angle), img = sprite[k.EXTRACTOR_MACHINE_AMETHYST][A_.time], on(I, img, -img.width / 2, -img.height / 2), 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * R_) % (2 * Math.PI)), I.rotate(this.rotate), img = sprite[k.EXTRACTOR_MACHINE0_AMETHYST][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore()
    }

    function ya() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        I.save(), 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, t += 2 * Math.random() - 1), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.rotate(this.angle), img = sprite[k.EXTRACTOR_MACHINE_REIDITE][A_.time], on(I, img, -img.width / 2, -img.height / 2), 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * R_) % (2 * Math.PI)), I.rotate(this.rotate), img = sprite[k.EXTRACTOR_MACHINE0_REIDITE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore()
    }

    function za() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        I.save(), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.rotate(this.angle), img = sprite[k.WINDMILL][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore()
    }

    function Ba() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        this.rotate1 = (this.rotate1 + 3 * R_) % (2 * Math.PI), this.rotate2 = (this.rotate2 - 3 * R_) % (2 * Math.PI), I.save(), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.save(), I.rotate(this.angle), img = sprite[k.EMERALD_MACHINE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.save(), I.rotate(this.rotate1), img = sprite[k.EMERALD_MACHINE_ROTATE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.save(), I.rotate(this.rotate2), img = sprite[k.EMERALD_MACHINE_HOLE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.restore()
    }

    function Wa() {
        if (this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * R_ * 600 * g,
                i = Math.cos(this.hit.angle - this.angle) * e,
                t = Math.sin(this.hit.angle - this.angle) * e
        } else i = 0, t = 0;
        this.rotate1 = (this.rotate1 + 3 * R_) % (2 * Math.PI), this.rotate2 = (this.rotate2 - 3 * R_) % (2 * Math.PI), I.save(), I.translate(d_.cam.x + this.x + i, d_.cam.y + this.y + t), I.save(), I.rotate(this.angle), img = sprite[k.RESURRECTION][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.save(), I.rotate(this.rotate1), img = sprite[k.RESURRECTION_ROTATE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.save(), I.rotate(this.rotate2), img = sprite[k.RESURRECTION_HOLE][A_.time], on(I, img, -img.width / 2, -img.height / 2), I.restore(), I.restore()
    }

    function Va() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.halo.update(), img = sprite[k.EMERALD_MACHINE_GROUND][A_.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Ka() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.halo.update(), img = sprite[k.RESURRECTION_GROUND][A_.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function wa() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.halo.update(), img = sprite[k.HALO_FIRE][A_.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Ua() {
        I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.angle), this.fire.update(), img = sprite[k.FIRE][A_.time], w = -img.width * this.fire.v, h = -img.height * this.fire.v, on(I, img, -w / 2, -h / 2, w, h), this.halo.update(), img = sprite[k.HALO_FIRE][A_.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, on(I, img, -w / 2, -h / 2, w, h), I.restore()
    }

    function Ya(e, i, t) {
        if (e >= 0) switch (img = sprite[e][A_.time], e) {
        case k.WOOD_SHIELD:
        case k.STONE_SHIELD:
        case k.GOLD_SHIELD:
            lo(e, img, -img.width / 4 - g * (0 + i), -img.height / 4 + g * (t + 35));
            break;
        case k.DIAMOND_SHIELD:
            lo(e, img, -img.width / 4 - g * (1 + i), -img.height / 4 + g * (t + 45));
            break;
        case k.AMETHYST_SHIELD:
        case k.REIDITE_SHIELD:
            lo(e, img, -img.width / 4 - g * (1 + i), -img.height / 4 + g * (t + 40))
        }
    }

    function Fa(e, i, t) {
        if (e >= 0) switch (img = sprite[e][A_.time], e) {
        case k.PICK:
        case k.PICK_GOLD:
        case k.PICK_DIAMOND:
        case k.PICK_WOOD:
        case k.PICK_AMETHYST:
        case k.PICK_REIDITE:
            uo(e, img, -img.width / 2 - g * (45 + i), -img.height / 2 + g * (t + 22));
            break;
        case k.SWORD_WOOD:
        case k.SWORD:
        case k.SWORD_GOLD:
        case k.SWORD_DIAMOND:
            lo(e, img, -img.width / 4 - g * (47 + i), -img.height / 4 + g * (t + 45));
            break;
        case k.SWORD_AMETHYST:
            lo(e, img, -img.width / 4 - g * (52 + i), -img.height / 4 + g * (t + 45));
            break;
        case k.REIDITE_SWORD:
            lo(e, img, -img.width / 4 - g * (47 + i), -img.height / 4 + g * (t + 44));
            break;
        case k.PIRATE_SWORD:
            uo(e, img, -img.width / 2 - g * (47 + i), -img.height / 2 + g * (t + 44));
            break;
        case k.DRAGON_SWORD:
            uo(e, img, -img.width / 2 - g * (40 + i), -img.height / 2 + g * (t + 65));
            break;
        case k.WOOD_SPEAR:
        case k.REIDITE_SPEAR:
            lo(e, img, -img.width / 4 - g * (37 + i), -img.height / 4 + g * (t + 85));
            break;
        case k.PITCHFORK2:
        case k.PITCHFORK:
            lo(e, img, -img.width / 4 - g * (26 + i), -img.height / 4 + g * (t + 77));
            break;
        case k.LAVA_SPEAR:
            lo(e, img, -img.width / 4 - g * (37 + i), -img.height / 4 + g * (t + 85));
            break;
        case k.LAVA_SWORD:
            lo(e, img, -img.width / 4 - g * (47 + i), -img.height / 4 + g * (t + 44));
            break;
        case k.WOOD_BOW:
        case k.STONE_BOW:
        case k.GOLD_BOW:
        case k.DIAMOND_BOW:
        case k.AMETHYST_BOW:
        case k.REIDITE_BOW:
        case k.DRAGON_BOW:
            lo(e, img, -img.width / 4 - g * (37 + i), -img.height / 4 + g * (t + 30));
            break;
        case k.MACHETE:
            lo(e, img, -img.width / 4 - g * (47 + i), -img.height / 4 + g * (t + 35));
            break;
        case k.WAND1:
        case k.WAND2:
            lo(e, img, -img.width / 4 - g * (47 + i), -img.height / 4 + g * (t + 40));
            break;
        case k.SADDLE:
            lo(e, img, -img.width / 4 - g * (47 + i), -img.height / 4 + g * (t + 34));
            break;
        case k.SPEAR:
        case k.GOLD_SPEAR:
        case k.DIAMOND_SPEAR:
        case k.AMETHYST_SPEAR:
            lo(e, img, -img.width / 4 - g * (37 + i), -img.height / 4 + g * (t + 90));
            break;
        case k.CRAB_SPEAR:
            lo(e, img, -img.width / 4 - g * (40 + i), -img.height / 4 + g * (t + 85));
            break;
        case k.DRAGON_SPEAR:
            uo(e, img, -img.width / 2 - g * (39 + i), -img.height / 2 + g * (t + 90));
            break;
        case k.HAMMER:
        case k.HAMMER_GOLD:
        case k.HAMMER_DIAMOND:
        case k.HAMMER_AMETHYST:
        case k.HAMMER_REIDITE:
        case k.SUPER_HAMMER:
            uo(e, img, -img.width / 2 - g * (46 + i), -img.height / 2 + g * (t + 35));
            break;
        case k.WATERING_CAN_FULL:
            uo(e, img, -img.width / 2 - g * (47 + i), -img.height / 2 + g * (t + 54));
            break;
        case k.SHOVEL:
        case k.SHOVEL_GOLD:
        case k.SHOVEL_DIAMOND:
        case k.SHOVEL_AMETHYST:
            uo(e, img, -img.width / 2 - g * (46 + i), -img.height / 2 + g * (t + 35));
            break;
        case k.SPANNER:
            uo(e, img, -img.width / 2 - g * (47 + i), -img.height / 2 + g * (t + 20))
        }
    }
    var ka = function (e) {
        if (e > 0) {
            var i = sprite[e][A_.time];
            switch (e) {
            case k.WOOD_HELMET:
                uo(e, i, -i.width / 2 + 2 * g, -i.height / 2 - 5 * g);
                break;
            case k.EARMUFFS:
                uo(e, i, -i.width / 2, -i.height / 2 - 18 * g);
                break;
            case k.COAT:
                uo(e, i, -i.width / 2, -i.height / 2 - 10 * g);
                break;
            case k.EXPLORER_HAT:
                uo(e, i, -i.width / 2, -i.height / 2 - 19 * g);
                break;
            case k.PIRATE_HAT:
                lo(e, i, -i.width / 4, -i.height / 4 - 20 * g);
                break;
            case k.STONE_HELMET:
                uo(e, i, -i.width / 2 - 1 * g, -i.height / 2 - 23 * g);
                break;
            case k.GOLD_HELMET:
                uo(e, i, -i.width / 2, -i.height / 2 - 5 * g);
                break;
            case k.DIAMOND_HELMET:
                uo(e, i, -i.width / 2, -i.height / 2 - 2 * g);
                break;
            case k.AMETHYST_HELMET:
                uo(e, i, -i.width / 2 + 1.5 * g, -i.height / 2 - 1 * g);
                break;
            case k.REIDITE_HELMET:
            case k.DIAMOND_PROTECTION:
            case k.AMETHYST_PROTECTION:
            case k.REIDITE_PROTECTION:
            case k.TURBAN1:
            case k.TURBAN2:
            case k.PILOT_HELMET:
            case k.LAVA_HELMET:
            case k.WITCH:
            case k.FUR_HAT:
            case k.FLOWER_HAT:
                lo(e, i, -i.width / 4, -i.height / 4 + 2 * g);
                break;
            case k.CHRISTMAS_HAT:
            case k.ELF_HAT:
                uo(e, i, -i.width / 2 - 5 * g, -i.height / 2 - 2 * g);
                break;
            case k.CAP_SCARF:
            case k.WINTER_HOOD:
            case k.DIVING_MASK:
                uo(e, i, -i.width / 2, -i.height / 2 - 2 * g);
                break;
            case k.SUPER_DIVING_SUIT:
                uo(e, i, -i.width / 2 + 2 * g, -i.height / 2);
                break;
            case k.DRAGON_HELMET:
                uo(e, i, -i.width / 2, -i.height / 2 - 5 * g);
                break;
            case k.CROWN_GREEN:
            case k.CROWN_ORANGE:
            case k.CROWN_BLUE:
                uo(e, i, -i.width / 2 - 1 * g, -i.height / 2);
                break;
            case k.HOOD:
                uo(e, i, -i.width / 2, -i.height / 2 + 2 * g);
                break;
            case k.PEASANT:
            case k.WINTER_PEASANT:
                uo(e, i, -i.width / 2, -i.height / 2 + 8 * g);
                break;
            case k.CROWN_CRAB:
                uo(e, i, -i.width / 2, -i.height / 2 - 4 * g)
            }
        }
    };

    function xa() {
        if (!this.ghost && 0 !== this.vehicle) {
            if (this.x != this.r.x || this.y != this.r.y) {
                var e = (_.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (2 * Math.PI);
                this.vehicle_fx2 = _.reduceAngle(e, this.vehicle_fx2), this.vehicle_fx2 = _.lerp(this.vehicle_fx2, e, .018)
            }
            if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(this.vehicle_fx2), this.vehicle === X.BOAT) {
                if (this.speed > 50 || this.vehicle_fx1 > 0) {
                    this.speed > 50 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - R_), I.globalAlpha = this.vehicle_fx1;
                    var i = sprite[k.BOAT_WAVE][A_.time];
                    lo(k.BOAT_WAVE, i, -i.width / 4, -i.height / 4), I.globalAlpha = 1
                }
                i = sprite[k.BOAT][A_.time];
                lo(k.BOAT, i, -i.width / 4, -i.height / 4)
            } else if (this.vehicle === X.HAWK) {
                this.vehicle_fx5 = _.lerp(this.vehicle_fx5, this.speed, .018), this.vehicle_fx4.update(), this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_ / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - R_);
                i = sprite[k.HAWK_TAMED][A_.time];
                lo(k.HAWK_TAMED, i, -i.width / 4, -i.height / 4), i = sprite[k.HAWK_WING_LEFT_TAMED][A_.time], w = -i.width, h = -i.height, I.save(), I.translate(-20 * g, -20 * g), I.rotate(this.vehicle_fx4.v * this.vehicle_fx1), on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.restore(), i = sprite[k.HAWK_WING_RIGHT_TAMED][A_.time], I.save(), I.translate(20 * g, -20 * g), I.rotate(-this.vehicle_fx4.v * this.vehicle_fx1), on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.restore()
            } else if (this.vehicle === X.BABY_LAVA) {
                this.vehicle_fx5 = _.lerp(this.vehicle_fx5, this.speed, .018), this.vehicle_fx4.update(), this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_ / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - R_);
                i = sprite[k.BABY_LAVA_TAMED][A_.time];
                lo(k.BABY_LAVA_TAMED, i, -i.width / 4, -i.height / 4), i = sprite[k.BABY_LAVA_WING_LEFT_TAMED][A_.time], w = -i.width, h = -i.height, I.save(), I.translate(-40 * g, -45 * g), I.rotate(this.vehicle_fx4.v * this.vehicle_fx1), on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.restore(), i = sprite[k.BABY_LAVA_WING_RIGHT_TAMED][A_.time], I.save(), I.translate(40 * g, -45 * g), I.rotate(-this.vehicle_fx4.v * this.vehicle_fx1), on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.restore()
            } else if (this.vehicle === X.BABY_DRAGON) {
                this.vehicle_fx5 = _.lerp(this.vehicle_fx5, this.speed, .018), this.vehicle_fx4.update(), this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_ / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - R_);
                i = sprite[k.BABY_DRAGON_TAMED][A_.time];
                lo(k.BABY_DRAGON_TAMED, i, -i.width / 4, -i.height / 4), i = sprite[k.BABY_DRAGON_WING_LEFT_TAMED][A_.time], w = -i.width, h = -i.height, I.save(), I.translate(-40 * g, -45 * g), I.rotate(this.vehicle_fx4.v * this.vehicle_fx1), on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.restore(), i = sprite[k.BABY_DRAGON_WING_RIGHT_TAMED][A_.time], I.save(), I.translate(40 * g, -45 * g), I.rotate(-this.vehicle_fx4.v * this.vehicle_fx1), on(I, i, -w / 4, -h / 4, w / 2, h / 2), I.restore()
            } else if (this.vehicle === X.NIMBUS) {
                this.vehicle_fx5 = _.lerp(this.vehicle_fx5, this.speed, .018);
                i = sprite[k.NIMBUS][A_.time];
                lo(k.NIMBUS, i, -i.width / 4, -i.height / 4)
            } else if (this.vehicle === X.PLANE) {
                this.vehicle_fx5 = _.lerp(this.vehicle_fx5, this.speed, .018);
                i = sprite[k.PLANE][A_.time];
                lo(k.PLANE, i, -i.width / 4, -i.height / 4)
            } else if (this.vehicle === X.SLED) {
                i = sprite[k.SLED][A_.time];
                lo(k.SLED, i, -i.width / 4, -i.height / 4)
            } else if (this.vehicle === X.BABY_MAMMOTH) {
                i = sprite[k.BABY_MAMMOTH_TAMED][A_.time];
                this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_ / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - R_), this.vehicle_fx3 += 60 * R_, this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
                var t = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
                lo(k.BABY_MAMMOTH_TAMED, i, -i.width / 4, -i.height / 4 + t)
            } else if (this.vehicle === X.MOUNT_BOAR) {
                i = sprite[k.BOAR_TAMED][A_.time];
                this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_ / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - R_), this.vehicle_fx3 += 60 * R_, this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
                t = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
                lo(k.BOAR_TAMED, i, -i.width / 4, -i.height / 4 + t)
            } else if (this.vehicle === X.CRAB_BOSS) {
                var r = Math.PI / 2,
                    n = Math.PI / 4;
                i = sprite[k.CRAB_BOSS_TAMED][A_.time];
                this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + R_ / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - R_), this.vehicle_fx3 += 60 * R_, this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
                t = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
                lo(k.CRAB_BOSS_TAMED, i, -i.width / 4 + t, -i.height / 4), I.restore(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(Math.PI + this.vehicle_fx2 + n), I.translate(120, t), I.rotate(r), i = sprite[k.CRAB_BOSS_CLAW_LEFT][A_.time], w = -i.width, h = -i.height, on(I, i, -w / 2, -h / 2, w, h), I.restore(), I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), I.rotate(Math.PI + this.vehicle_fx2 + r + n), I.translate(120, t), I.rotate(r), i = sprite[k.CRAB_BOSS_CLAW_RIGHT][A_.time], w = -i.width, h = -i.height, on(I, i, -w / 2, -h / 2, w, h)
            }
            I.restore()
        }
    }

    function Ja(e, i, t) {
        if (1 !== i.tryLoad()) return i;
        var r = __IMAGE_EFFECT__[t][e];
        if (void 0 === r) {
            var n = (r = document.createElement("canvas")).getContext("2d"),
                a = i.width,
                o = i.height;
            r.width = a, r.height = o, n.drawImage(i, 0, 0), n.globalCompositeOperation = "source-in", n.fillStyle = __IMAGE_EFFECT_COLOR__[t], n.fillRect(0, 0, a, o), __IMAGE_EFFECT__[t][e] = r
        }
        return r
    }

    function Xa() {
        var e = 0;
        switch (this.right) {
        case k.WOOD_SHIELD:
        case k.STONE_SHIELD:
        case k.GOLD_SHIELD:
        case k.DIAMOND_SHIELD:
        case k.AMETHYST_SHIELD:
        case k.REIDITE_SHIELD:
            e = 1
        }
        if (this.ghost)
            for (var i = 0; i < this.bubbles.length; i++) {
                var t = this.bubbles[i];
                if (t.life > .5) var r = 1 - 2 * (t.life - .5);
                else r = 2 * t.life;
                I.globalAlpha = r;
                var n = sprite[k.BUBBLES][A_.time][t.id];
                on(I, n, d_.cam.x + t.x - n.width / 2, d_.cam.y + t.y - n.height / 2), I.globalAlpha = 1
            } else {
                I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), A_.dist_from_biomes(this), this.action & ko.ATTACK && function (e) {
                    if (e.right >= 0) switch (e.right) {
                    case k.WATERING_CAN_FULL:
                        I.save();
                        var i = -3 * e.attack.v / Math.PI;
                        if (e.attack.o) var t = -Math.PI / 3 - (Math.PI / 3 + e.attack.v) / 3;
                        else t = e.attack.v;
                        I.rotate(e.angle - Math.PI / 2 + t), I.globalAlpha = i / 1.2, Ne(I, -40 * g, 90 * g, 5 * g), Ce(I, "#0B6A84"), I.globalAlpha = i / 1.2, Ne(I, -52 * g, 100 * g, 8 * g), Ce(I, "#0B6A84"), I.globalAlpha = i / 1.2, Ne(I, -30 * g, 95 * g, 4 * g), Ce(I, "#0B6A84"), I.globalAlpha = 1, I.restore();
                        break;
                    case k.SHOVEL:
                    case k.SHOVEL_GOLD:
                    case k.SHOVEL_DIAMOND:
                    case k.SHOVEL_AMETHYST:
                        if (1 === e.fly) break;
                        if (e.dist_winter > 0) var r = k.ICE_SHOVEL_CO[A_.time];
                        else r = e.dist_sand > 0 || e.dist_desert > 0 ? k.SAND_SHOVEL_CO[A_.time] : k.GRD_SHOVEL_CO[A_.time];
                        i = -3 * e.attack.v / Math.PI, 0 === (t = e.attack.o ? Math.max(.5 - i / 2 + .5, 0) : Math.max(i / 2, 0)) && (e.angle_init = e.angle), I.save(), I.rotate(e.angle_init - Math.PI / 2), I.globalAlpha = i;
                        var n = 25 * g + 25 * t;
                        Ne(I, n, 80 * g, 15 * g), Ce(I, r), Ne(I, -n, 80 * g, 15 * g), Ce(I, r), I.globalAlpha = 1, I.restore()
                    }
                }(this), I.save(), I.rotate(this.angle - Math.PI / 2), this.action & ko.ATTACK || (this.action & ko.IDLE || 0 !== this.vehicle ? this.idle.update() : this.action & ko.WALK && this.walk.update());
                var a, o = this.idle.v,
                    s = this.walk.v;
                this.clothe === k.WINTER_HOOD ? (n = sprite[k.GLOVES_HOOD][A_.time], a = k.GLOVES_HOOD) : this.clothe === k.DIAMOND_PROTECTION ? (n = sprite[k.GLOVES_DIAMOND_PROTECTION][A_.time], a = k.GLOVES_DIAMOND_PROTECTION) : this.clothe === k.AMETHYST_PROTECTION ? (n = sprite[k.GLOVES_AMETHYST_PROTECTION][A_.time], a = k.GLOVES_AMETHYST_PROTECTION) : this.clothe === k.REIDITE_PROTECTION ? (n = sprite[k.GLOVES_REIDITE_PROTECTION][A_.time], a = k.GLOVES_REIDITE_PROTECTION) : this.superzombie ? (n = sprite[k.ZOMBIE_HAND][A_.time], a = k.ZOMBIE_HAND) : (n = sprite[k.HAND][this.skin][A_.time], a = k.HAND), shadow = sprite[k.HAND_SHADOW][A_.time];
                var E = n,
                    T = a;
                if (this.action & ko.ATTACK) {
                    this.attack.update() && 0 == this.attack.o && (this.hand = !this.hand, this.action -= ko.ATTACK, this.uid == d_.uid && (d_.control.mouse = 0)), this.right >= 0 && (this.hand = !0);
                    var A = this.hand ? this.attack.v : -this.attack.v / 3,
                        d = this.hand ? this.attack.v / 3 : -this.attack.v;
                    if (this.superzombie) I.save(), I.rotate(A), uo(a, n, -n.width / 2 - g * (66 + o), -n.height / 2 + (5 + s) * g), I.restore(), I.save(), I.rotate(d), uo(a, n, -n.width / 2 + g * (66 + o), -n.height / 2 + (5 + s) * g), I.restore();
                    else if (0 === e) {
                        if (this.right === k.WOOD_BOW && (A = -_.ease_out_quad(-A)), I.save(), I.rotate(A), uo(k.HAND_SHADOW, shadow, -shadow.width / 2 - g * (49 + o), -shadow.height / 2 + (15 + s) * g), this.right === k.BOOK) {
                            var h = sprite[this.right][this.book][A_.time];
                            Oo(this.right, this.book, h, -h.width / 4 - g * (62 + o), -h.height / 4 + g * (s + 18))
                        } else Fa(this.right, o, s);
                        a >= k.GLOVES_DIAMOND_PROTECTION ? lo(a, n, -n.width / 4 - g * (49 + o), -n.height / 4 + (11 + s) * g) : a !== k.GLOVES_HOOD ? Oo(a, this.skin, n, -n.width / 4 - g * (49 + o), -n.height / 4 + (11 + s) * g) : uo(a, n, -n.width / 2 - g * (49 + o), -n.height / 2 + (11 + s) * g), I.restore(), I.save(), I.rotate(d), uo(k.HAND_SHADOW, shadow, -shadow.width / 2 + g * (49 + o), -shadow.height / 2 + (15 + s) * g), a >= k.GLOVES_DIAMOND_PROTECTION ? lo(a, n, -n.width / 4 + g * (49 + o), -n.height / 4 + (11 + s) * g) : a !== k.GLOVES_HOOD ? Oo(a, this.skin, n, -n.width / 4 + g * (49 + o), -n.height / 4 + (11 + s) * g) : uo(a, n, -n.width / 2 + g * (49 + o), -n.height / 2 + (11 + s) * g), I.restore()
                    }
                } else if (this.superzombie) uo(a, n, -n.width / 2 - g * (66 + o), -n.height / 2 + (5 + s) * g), uo(a, n, -n.width / 2 + g * (66 + o), -n.height / 2 + (5 + s) * g);
                else if (0 === e) {
                    if (uo(k.HAND_SHADOW, shadow, -shadow.width / 2 - g * (49 + o), -shadow.height / 2 + (15 + s) * g), this.right === k.BOOK) {
                        h = sprite[this.right][this.book][A_.time];
                        Oo(this.right, this.book, h, -h.width / 4 - g * (62 + o), -h.height / 4 + g * (s + 18))
                    } else Fa(this.right, o, s);
                    a >= k.GLOVES_DIAMOND_PROTECTION ? lo(a, n, -n.width / 4 - g * (49 + o), -n.height / 4 + (11 + s) * g) : a !== k.GLOVES_HOOD ? Oo(a, this.skin, n, -n.width / 4 - g * (49 + o), -n.height / 4 + (11 + s) * g) : uo(a, n, -n.width / 2 - g * (49 + o), -n.height / 2 + (11 + s) * g), uo(k.HAND_SHADOW, shadow, -shadow.width / 2 + g * (49 + o), -shadow.height / 2 + (15 + s) * g), a >= k.GLOVES_DIAMOND_PROTECTION ? lo(a, n, -n.width / 4 + g * (49 + o), -n.height / 4 + (11 + s) * g) : a !== k.GLOVES_HOOD ? Oo(a, this.skin, n, -n.width / 4 + g * (49 + o), -n.height / 4 + (11 + s) * g) : uo(a, n, -n.width / 2 + g * (49 + o), -n.height / 2 + (11 + s) * g)
                }
                if (this.bag && this.clothe < 1) {
                    n = sprite[k.BAG][this.baglook][A_.time];
                    Oo(k.BAG, this.baglook, n, -n.width / 4, -n.height / 4 - 39 * g)
                }
                if (this.superzombie) {
                    n = sprite[k.ZOMBIE_BODY][A_.time];
                    uo(k.ZOMBIE_BODY, n, -n.width / 2, -n.height / 2), this.move_head.update(), n = sprite[k.ZOMBIE_HEAD][A_.time], uo(k.ZOMBIE_HEAD, n, -n.width / 2, -n.height / 2 + this.move_head.v)
                } else {
                    n = sprite[k.BODY][this.skin][A_.time];
                    if (this.clothe !== k.WINTER_HOOD && (Oo(k.BODY, this.skin, n, -n.width / 4, -n.height / 4), this.accessory > 0)) {
                        n = sprite[k.ACCESSORY][this.accessory][A_.time];
                        Oo(k.ACCESSORY, this.accessory, n, -n.width / 4, -n.height / 4)
                    }
                }
                if (this.action & ko.HEAL) {
                    if (this.heal.update() && 0 == this.heal.o && (this.action -= ko.HEAL), I.globalAlpha = .6 - this.heal.v, this.superzombie) {
                        n = sprite[k.ZOMBIE_HEAL];
                        on(I, n, -n.width / 2, -n.height / 2)
                    } else {
                        n = Ja(this.skin, sprite[k.BODY][this.skin][0], __EFFECT_HEAL__);
                        on(I, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2)
                    }
                    I.globalAlpha = 1
                }
                if (this.action & ko.WEB) {
                    this.web.update() && 0 == this.web.o && (this.action -= ko.WEB), I.globalAlpha = .6 - this.web.v;
                    n = sprite[k.WEB];
                    on(I, n, -n.width / 2, -n.height / 2), I.globalAlpha = 1
                }
                if (this.action & ko.HURT) {
                    if (this.hit && this.hit.update() && 0 == this.hit.o && (this.action -= ko.HURT), I.globalAlpha = .6 - this.hit.v, this.superzombie) {
                        n = sprite[k.ZOMBIE_HURT];
                        on(I, n, -n.width / 2, -n.height / 2)
                    } else {
                        n = Ja(this.skin, sprite[k.BODY][this.skin][0], __EFFECT_HURT__);
                        on(I, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2)
                    }
                    I.globalAlpha = 1
                }
                if (this.action & ko.COLD) {
                    this.freeze.update() && 0 == this.freeze.o && (this.action -= ko.COLD), I.globalAlpha = .6 - this.freeze.v;
                    n = Ja(this.skin, sprite[k.BODY][this.skin][0], __EFFECT_COLD__);
                    on(I, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2), I.globalAlpha = 1
                }
                if (this.action & ko.HUNGER) {
                    if (this.starve.update() && 0 == this.starve.o && (this.action -= ko.HUNGER), I.globalAlpha = .6 - this.starve.v, this.superzombie) {
                        n = sprite[k.ZOMBIE_HUNGER];
                        on(I, n, -n.width / 2, -n.height / 2)
                    } else {
                        n = Ja(this.skin, sprite[k.BODY][this.skin][0], __EFFECT_HUNGER__);
                        on(I, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2)
                    }
                    I.globalAlpha = 1
                }
                if (ka(this.clothe), 1 === e && (this.action & ko.ATTACK && (o += 15 * this.attack.v), uo(k.HAND_SHADOW, shadow, -shadow.width / 2 - 26 * g, -shadow.height / 2 + (31 + s + o) * g), T >= k.GLOVES_DIAMOND_PROTECTION ? lo(T, E, -E.width / 4 - 26 * g, -E.height / 4 + (27 + s + o) * g) : T !== k.GLOVES_HOOD ? Oo(T, this.skin, E, -E.width / 4 - 26 * g, -E.height / 4 + (27 + s + o) * g) : uo(T, E, -E.width / 2 - 26 * g, -E.height / 2 + (27 + s + o) * g), uo(k.HAND_SHADOW, shadow, -shadow.width / 2 + 26 * g, -shadow.height / 2 + (31 + s + o) * g), T >= k.GLOVES_DIAMOND_PROTECTION ? lo(T, E, -E.width / 4 + 26 * g, -E.height / 4 + (27 + s + o) * g) : T !== k.GLOVES_HOOD ? Oo(T, this.skin, E, -E.width / 4 + 26 * g, -E.height / 4 + (27 + s + o) * g) : uo(T, E, -E.width / 2 + 26 * g, -E.height / 2 + (27 + s + o) * g), Ya(this.right, 0, s + o)), I.restore(), this.clothe !== k.HOOD && this.clothe !== k.WINTER_HOOD) {
                    if (this.dist_winter > 0) {
                        this.player.label_winter || (this.player.label_winter = zi(g, this.player.nickname, 20, "#187484", "#000", 2, null, null, 300 * g));
                        n = this.player.label_winter
                    } else {
                        this.player.label || (this.player.label = zi(g, this.player.nickname, 20, "#FFF", "#000", 2, null, null, 300 * g));
                        n = this.player.label
                    }
                    A_.day == k.NIGHT && (I.globalAlpha = .5);
                    o = Math.floor(-n.width / 2), s = Math.floor(-n.height / 2 - 70 * g);
                    if (on(I, n, o, s), this.player.level > 0) {
                        var u = o + n.width + 5;
                        n = sprite[k.VERIFIED], void 0 === PLAYER_LEVEL[this.player.level] && (PLAYER_LEVEL[this.player.level] = zi(g, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, 50 * g)), on(I, PLAYER_LEVEL[this.player.level], u, s)
                    }
                    I.globalAlpha = 1
                } else s = Math.floor(-70 * g), o = Math.floor(sprite[k.ICON_MEMBER].width / 1.5);
                if (d_.in_team(this.pid)) {
                    if (this.pid == d_.team[0]) n = sprite[k.ICON_LEADER];
                    else n = sprite[k.ICON_MEMBER];
                    on(I, n, o - n.width - 5, s - 6)
                }
                I.restore(), I.restore()
            }
    }

    function qa() {
        if (this.enabled && this.delay >= 0) {
            var e = (new Date).getTime() - this.delay,
                i = e % 1e3 / 1e3;
            i > .5 ? i = 1 - 2 * (i - .5) : i *= 2, (e = Math.floor(e / 1e3)) < qo.GHOST_DELAY && (e = qo.GHOST_DELAY - e, this.label || (this.label = zi(g, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10)), this.now == e && this.sec || (this.now = e, this.sec = zi(g, "" + e, 40, "#660000", null, null, null, null, null, "#000", 10)), on(I, this.label, (u - this.label.width) / 2, 100 * g), I.globalAlpha = i, on(I, this.sec, (u - this.label.width) / 2 - this.sec.width + 15 * g, 100 * g), I.globalAlpha = 1)
        }
    }

    function ja() {
        if (void 0 !== this.message) {
            var e = d_.inv.can_select.length > 0 ? -95 : 0;
            on(I, this.message, 0, O - this.message.height + e)
        }
    }

    function Za(e, i) {
        this.text && (this.timeout.o ? I.globalAlpha = 1 - this.timeout.v : I.globalAlpha = 1, this.label || (this.label = zi(g, this.text, 40, e, null, null, null, null, null, i, 10)), on(I, this.label, (u - this.label.width) / 2, 50 * g), I.globalAlpha = 1, this.timeout.update() && 0 == this.timeout.o && (this.text = this.list.shift(), this.label = null))
    }

    function Qa() {
        if (I.save(), I.translate(d_.cam.x + this.x, d_.cam.y + this.y), this.text.length > 0) {
            for (var e = 0; e < this.text.length && e < 2; e++) this.label[e] || (this.label[e] = pe(g, this.text[e]), this.text_effect[e] = 0, this.text_move[e] = 0), 1 === e && (this.text_move[0] = 30 * _.ease_in_out_quad(this.text_ease));
            this.text_effect[0] += R_, this.text.length > 1 && (this.text_ease = Math.min(this.text_ease + R_, 1), this.text_effect[0] > 1 && this.text_ease > .5 && (this.text_effect[1] += R_));
            for (e = 0; e < this.text.length && e < 2; e++) {
                var i = this.text_effect[e];
                i > 0 && (I.globalAlpha = i < .25 ? 4 * i : i > 3.75 ? Math.max(4 * (4 - i), 0) : 1, on(I, this.label[e], -this.label[e].width / 2, -this.text_move[e] + -this.label[e].height / 2 - 110 * g))
            }
            this.text_effect[0] > 4 && (this.text_effect.shift(), this.text.shift(), this.text_move.shift(), this.label.shift(), this.text_ease = 0)
        }
        I.restore()
    }
    __EFFECT_HURT__ = 0, __EFFECT_HEAL__ = 1, __EFFECT_COLD__ = 2, __EFFECT_HUNGER__ = 3, __EFFECT_BOX__ = 4, __IMAGE_EFFECT__ = [
        [],
        [],
        [],
        [],
        []
    ], __IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var $a = 0;

    function eo(e, i, t, r, n, a, o, s) {
        void 0 === s && (s = 0);
        for (var _ = o; _ >= s; _--)
            for (var E = e; E <= i; E++)
                for (var T = t; T <= r; T++) {
                    var A = s_.tiles[E][T];
                    if (A && A[a]) {
                        var d = A[a][_];
                        if (void 0 !== d)
                            for (var h = 0; h < d.length; h++) {
                                var u = d[h],
                                    O = sprite[n][A_.time][_],
                                    l = ($a + 3 * (E + T)) % 60,
                                    R = l < 30 ? l / 30 : 1 - (l - 30) / 30,
                                    c = -O.width * (1 + .9 * R / 30),
                                    C = -O.height * (1 + .9 * R / 30);
                                R = (l = ($a + 7 * (E + T)) % 60) < 30 ? l / 30 : 1 - (l - 30) / 30;
                                var g = I.globalAlpha;
                                I.globalAlpha = (.9 + .1 * R) * g, on(I, O, d_.cam.x + u.x - c / 2, d_.cam.y + u.y - C / 2, c, C), I.globalAlpha = g
                            }
                    }
                }
    }

    function io(e, i, t, r, n, a, o, s) {
        void 0 === s && (s = 0), A_.breath[n].update();
        for (var _ = o; _ >= s; _--)
            for (var E = e; E <= i; E++)
                for (var T = t; T <= r; T++) {
                    var A = s_.tiles[E][T];
                    if (A && A[a]) {
                        var d = A[a][_];
                        if (void 0 !== d)
                            for (var h = 0; h < d.length; h++) {
                                var u = d[h];
                                if (u.update) {
                                    u.hit.update() && 0 == u.hit.o && (u.update = !1);
                                    var O = (1 - u.hit.v) * R_ * 600 * g,
                                        l = Math.cos(u.angle) * O,
                                        R = Math.sin(u.angle) * O
                                } else l = 0, R = 0;
                                var c = sprite[n][A_.time][_],
                                    C = -c.width * A_.breath[n].v,
                                    N = -c.height * A_.breath[n].v;
                                on(I, c, d_.cam.x + u.x - C / 2 + l, d_.cam.y + u.y - N / 2 + R, C, N)
                            }
                    }
                }
    }
    var to = [];
    for (he = 0; he < 100; he++) {
        var ro = 1;
        Math.random() < .25 && (ro = 0), to.push(ro)
    }

    function no(e, i, t, r, n, a, o, s, _) {
        void 0 === s && (s = 0);
        for (var E = o; E >= s; E--)
            for (var T = e; T <= i; T++)
                for (var A = t; A <= r; A++)
                    if (!(_ > 0 && 1 === to[(T + A * _) % to.length])) {
                        var d = s_.tiles[T][A];
                        if (void 0 !== d && void 0 !== d[a]) {
                            var h = d[a][E];
                            if (void 0 !== h)
                                for (var u = 0; u < h.length; u++) {
                                    var O = h[u];
                                    if (O.update) {
                                        O.hit.update() && 0 == O.hit.o && (O.update = !1);
                                        var l = (1 - O.hit.v) * R_ * 600 * g,
                                            R = Math.cos(O.angle) * l,
                                            c = Math.sin(O.angle) * l
                                    } else R = 0, c = 0;
                                    var C = sprite[n][A_.time][E];
                                    on(I, C, d_.cam.x + O.x - C.width / (2 * _scale_object) + R, d_.cam.y + O.y - C.height / (2 * _scale_object) + c, C.width / _scale_object, C.height / _scale_object)
                                }
                        }
                    }
    }

    function ao(e, i, t, r, n, a, o, s) {
        void 0 === s && (s = 0);
        for (var _ = e; _ <= i; _++)
            for (var E = t; E <= r; E++) {
                var T = s_.tiles[_][E];
                if (void 0 !== T && void 0 !== T[a]) {
                    var A = T[a];
                    if (void 0 !== A)
                        if (1 === A.scale) {
                            var d = sprite[n][A_.time][A._id];
                            I.save(), I.translate(d_.cam.x + A.x, d_.cam.y + A.y), I.rotate(A.angle), on(I, d, -d.width / 4, -d.height / 4, d.width / 2, d.height / 2), I.restore()
                        } else if (3 === A.scale)
                        for (var h = 0; h < A.p.length; h++) {
                            I.save(), I.translate(d_.cam.x + A.x, d_.cam.y + A.y), I.rotate(A.p[h].angle);
                            d = sprite[n][A_.time][A.p[h]._id];
                            on(I, d, -d.width / 3 + A.p[h].x, -d.height / 3 + A.p[h].y, d.width / 1.5, d.height / 1.5), I.restore()
                        } else {
                            d = sprite[n][A_.time][A._id];
                            I.save(), I.translate(d_.cam.x + A.x, d_.cam.y + A.y), I.rotate(A.angle), on(I, d, -d.width / 2, -d.height / 2, d.width, d.height), I.restore()
                        }
                }
            }
    }

    function oo(e, i, t, r, n, a, o, s) {
        void 0 === s && (s = 0);
        for (var _ = o; _ >= s; _--)
            for (var E = e; E <= i; E++)
                for (var T = t; T <= r; T++) {
                    var A = s_.tiles[E][T];
                    if (void 0 !== A && void 0 !== A[a]) {
                        var d = A[a][_];
                        if (void 0 !== d)
                            for (var h = 0; h < d.length; h++) {
                                var u = d[h];
                                if (u.update) {
                                    u.hit.update() && 0 == u.hit.o && (u.update = !1);
                                    var O = (1 - u.hit.v) * R_ * 600 * g,
                                        l = Math.cos(u.angle) * O,
                                        R = Math.sin(u.angle) * O
                                } else l = 0, R = 0;
                                for (var c = 0; c < _bubble[_].amount; c++) {
                                    A_.lava[c].last !== c_ && (A_.lava[c].update(), A_.lava[c].last = c_);
                                    var C = sprite[k.LAVA_BUBBLE][A_.time][_bubble[_].pos[c].t],
                                        N = -C.width * A_.lava[c].v,
                                        D = -C.height * A_.lava[c].v;
                                    on(I, C, d_.cam.x + u.x - N / 4 + l + _bubble[_].pos[c].x, d_.cam.y + u.y - D / 4 + R + _bubble[_].pos[c].y, N / 2, D / 2)
                                }
                            }
                    }
                }
    }
    _scale_object = 1, _bubble = [{
        amount: 10,
        pos: [{
            x: -128,
            y: -20,
            t: 0
        }, {
            x: -86,
            y: -4,
            t: 1
        }, {
            x: -60,
            y: -74,
            t: 2
        }, {
            x: -22,
            y: -144,
            t: 0
        }, {
            x: -58,
            y: 86,
            t: 0
        }, {
            x: 3,
            y: -30,
            t: 0
        }, {
            x: 65,
            y: -115,
            t: 1
        }, {
            x: 118,
            y: -50,
            t: 0
        }, {
            x: 73,
            y: 15,
            t: 1
        }, {
            x: 67,
            y: 79,
            t: 0
        }]
    }, {
        amount: 5,
        pos: [{
            x: -45,
            y: -26,
            t: 0
        }, {
            x: -45,
            y: 20,
            t: 2
        }, {
            x: 10,
            y: -60,
            t: 1
        }, {
            x: 52,
            y: -17,
            t: 1
        }, {
            x: 14,
            y: 45,
            t: 0
        }]
    }, {
        amount: 3,
        pos: [{
            x: -30,
            y: 3,
            t: 2
        }, {
            x: 7,
            y: -38,
            t: 2
        }, {
            x: 37,
            y: 5,
            t: 2
        }]
    }, {
        amount: 11,
        pos: [{
            x: -74,
            y: -87,
            t: 2
        }, {
            x: -11,
            y: -10,
            t: 1
        }, {
            x: -99,
            y: 17,
            t: 1
        }, {
            x: -66,
            y: 84,
            t: 0
        }, {
            x: -55,
            y: 123,
            t: 1
        }, {
            x: 10,
            y: 81,
            t: 2
        }, {
            x: 52,
            y: 50,
            t: 0
        }, {
            x: 138,
            y: 9,
            t: 1
        }, {
            x: 104,
            y: -28,
            t: 0
        }, {
            x: 67,
            y: -56,
            t: 2
        }, {
            x: 5,
            y: -112,
            t: 0
        }]
    }, {
        amount: 6,
        pos: [{
            x: -33,
            y: -66,
            t: 2
        }, {
            x: -58,
            y: 10,
            t: 0
        }, {
            x: -19,
            y: 44,
            t: 1
        }, {
            x: 44,
            y: 20,
            t: 0
        }, {
            x: 53,
            y: -36,
            t: 2
        }, {
            x: 7,
            y: -62,
            t: 0
        }]
    }, {
        amount: 3,
        pos: [{
            x: -19,
            y: -25,
            t: 1
        }, {
            x: -29,
            y: 13,
            t: 2
        }, {
            x: 12,
            y: 12,
            t: 0
        }]
    }];
    var so = 0,
        _o = 0,
        Eo = 0,
        To = 0;

    function Ao() { //draw units
        var e = so,
            i = _o,
            t = Eo,
            r = To;
        ui.quality && No(no, t, r, e, i, k.LAKE_EDGE, "l", 2), ui.quality && No(no, t, r, e, i, k.LAVA_GROUND, "la", 5), No(no, t, r, e, i, k.MAGMA, "la", 5), No(io, t, r, e, i, k.LAKE, "l", 2), ui.quality && (No(oo, t, r, e, i, k.MAGMA, "la", 5), No(io, t, r, e, i, k.LAKE_DEEP, "l", 2)), No(no, t, r, e, i, k.MARKER, "ma", 3);
        for (var n = A_.units[ITEMS.SAND_WORM], a = 0; a < n.length; a++) n[a].draw_ground();
        var o = A_.units[ITEMS.PLAYERS];
        for (a = 0; a < o.length; a++)
            for (var s = o[a], E = 0; E < s.swim.length; E++) Ro(s.swim[E]);
        var T = A_.units[ITEMS.BRIDGE];
        for (a = 0; a < T.length; a++) go(T[a], k.BRIDGE), T[a].draw_life(T[a].info);
        var A = A_.units[ITEMS.FURNACE];
        for (a = 0; a < A.length; a++) 2 == A[a].action && Io(A[a]);
        var d = A_.units[ITEMS.FIRE];
        for (a = 0; a < d.length; a++) Io(d[a], k.WOOD_FIRE);
        var h = A_.units[ITEMS.RESURRECTION];
        for (a = 0; a < h.length; a++) Io(h[a]);
        var u = A_.units[ITEMS.EMERALD_MACHINE];
        for (a = 0; a < u.length; a++) Io(u[a]);
        var O = A_.units[ITEMS.BIG_FIRE];
        for (a = 0; a < O.length; a++) Io(O[a], k.BIG_FIRE_WOOD);
        var l = A_.units[ITEMS.SIGN];
        for (a = 0; a < l.length; a++) go(l[a]);
        var R = A_.units[ITEMS.PLOT];
        for (a = 0; a < R.length; a++) go(R[a], k.PLOT);
        var c = A_.units[ITEMS.SEED];
        for (a = 0; a < c.length; a++) Io(c[a]);
        for (c = A_.units[ITEMS.TOMATO_SEED], a = 0; a < c.length; a++) Io(c[a]);
        for (c = A_.units[ITEMS.SEED], a = 0; a < c.length; a++) ho(c[a]);
        var C = A_.units[ITEMS.CARROT_SEED];
        for (a = 0; a < C.length; a++) 0 != (15 & C[a].info) && 10 !== C[a].info || go(C[a]);
        var g = A_.units[ITEMS.WATERMELON_SEED];
        for (a = 0; a < g.length; a++) 0 != (15 & g[a].info) && 10 !== g[a].info || go(g[a]);
        var N = A_.units[ITEMS.ALOE_VERA_SEED];
        for (a = 0; a < N.length; a++) 0 != (15 & N[a].info) && 10 !== N[a].info || go(N[a]);
        var D = A_.units[ITEMS.WHEAT_MOB];
        for (a = 0; a < D.length; a++) go(D[a], k.WHEAT_SEED);
        var b = A_.units[ITEMS.GARLIC_SEED];
        for (a = 0; a < b.length; a++) 0 != (15 & b[a].info) && 10 !== b[a].info || go(b[a]);
        var S = A_.units[ITEMS.THORNBUSH_SEED];
        for (a = 0; a < S.length; a++) 0 != (15 & S[a].info) && 10 !== S[a].info || go(S[a]);
        var p = A_.units[ITEMS.PUMPKIN_SEED];
        for (a = 0; a < p.length; a++) 0 != (15 & p[a].info) && 10 !== p[a].info || go(p[a]);
        for (D = A_.units[ITEMS.WHEAT_SEED], a = 0; a < D.length; a++) go(D[a]);
        var m = A_.units[ITEMS.CRATE];
        for (a = 0; a < m.length; a++) go(m[a], k.CRATE, k.HURT_DEAD_BOX);
        var v = A_.units[ITEMS.DEAD_BOX];
        for (a = 0; a < v.length; a++) go(v[a], k.CRATE, k.HURT_DEAD_BOX);
        var M = A_.units[ITEMS.GIFT];
        for (a = 0; a < M.length; a++) go(M[a], k.GIFT, k.HURT_GIFT);
        var G = A_.units[ITEMS.WOOD_DOOR_SPIKE];
        for (a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_WOOD_OPEN);
        for (G = A_.units[ITEMS.STONE_DOOR_SPIKE], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_STONE_OPEN);
        for (G = A_.units[ITEMS.GOLD_DOOR_SPIKE], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_GOLD_OPEN);
        for (G = A_.units[ITEMS.DIAMOND_DOOR_SPIKE], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_DIAMOND_OPEN);
        for (G = A_.units[ITEMS.AMETHYST_DOOR_SPIKE], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_AMETHYST_OPEN);
        for (G = A_.units[ITEMS.REIDITE_DOOR_SPIKE], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_GOLD_OPEN);
        for (G = A_.units[ITEMS.WOOD_DOOR], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_WOOD_OPEN);
        for (G = A_.units[ITEMS.STONE_DOOR], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_STONE_OPEN);
        for (G = A_.units[ITEMS.GOLD_DOOR], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_GOLD_OPEN);
        for (G = A_.units[ITEMS.DIAMOND_DOOR], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_DIAMOND_OPEN);
        for (G = A_.units[ITEMS.AMETHYST_DOOR], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_AMETHYST_OPEN);
        for (G = A_.units[ITEMS.REIDITE_DOOR], a = 0; a < G.length; a++) 1 == G[a].extra && go(G[a], k.DOOR_GOLD_OPEN);
        var L = A_.units[ITEMS.RABBIT];
        for (a = 0; a < L.length; a++) go(L[a], k.RABBIT, k.HURT_RABBIT);
        var f = A_.units[ITEMS.BED];
        for (a = 0; a < f.length; a++) go(f[a], k.BED);
        for (n = A_.units[ITEMS.SAND_WORM], a = 0; a < n.length; a++) go(n[a], k.SAND_WORM, k.HURT_SAND_WORM);
        var H = A_.units[ITEMS.SPELL];
        for (a = 0; a < H.length; a++) 0 === H[a].fly && go(H[a]);
        if (!HackSettings.DrawPlayerOnTop.enabled) {
            for (o = A_.units[ITEMS.PLAYERS], a = 0; a < o.length; a++) {
                s = o[a];
                if (o[a].vehicle !== X.BABY_DRAGON && o[a].vehicle !== X.BABY_LAVA && o[a].vehicle !== X.HAWK && o[a].vehicle !== X.PLANE && o[a].vehicle !== X.NIMBUS) {
                    if (0 === s.tower)
                        if (s.tower_fx > .001) {
                            s.tower_fx = _.lerp(s.tower_fx, 0, .018);
                            var P = 1 + .18 * Math.min(1, Math.max(s.tower_fx, 0) / 100);
                            I.save(), I.scale(P, P), d_.cam.x /= P, d_.cam.y /= P, s.x /= P, s.y /= P, s.r.x /= P, s.r.y /= P, s.draw_vehicle(), s.draw(), d_.cam.x *= P, d_.cam.y *= P, s.x *= P, s.y *= P, s.r.x *= P, s.r.y *= P, I.restore()
                        } else s.fly = 0, s.draw_vehicle(), s.draw()
                } else if (s.speed <= 180) {
                    I.save();
                    P = 1 + .35 * Math.min(1, Math.max(s.vehicle_fx5 - 30, 0) / 180);
                    I.scale(P, P), d_.cam.x /= P, d_.cam.y /= P, s.x /= P, s.y /= P, s.r.x /= P, s.r.y /= P, s.fly = 0, s.draw_vehicle(), s.draw(), d_.cam.x *= P, d_.cam.y *= P, s.x *= P, s.y *= P, s.r.x *= P, s.r.y *= P, I.restore()
                }
            }
        }
        for (f = A_.units[ITEMS.BED], a = 0; a < f.length; a++) go(f[a], k.BED_TOP);
        var y = A_.units[ITEMS.CRAB];
        for (a = 0; a < y.length; a++) go(y[a]);
        var z = A_.units[ITEMS.FOX];
        for (a = 0; a < z.length; a++) go(z[a], k.FOX, k.HURT_FOX);
        var B = A_.units[ITEMS.BOAR];
        for (a = 0; a < B.length; a++) go(B[a]);
        var W = A_.units[ITEMS.WOLF];
        for (a = 0; a < W.length; a++) go(W[a], k.WOLF, k.HURT_WOLF);
        var V = A_.units[ITEMS.BABY_DRAGON];
        for (a = 0; a < V.length; a++) go(V[a], k.BABY_DRAGON, k.HURT_BABY_DRAGON);
        var K = A_.units[ITEMS.BABY_LAVA];
        for (a = 0; a < K.length; a++) go(K[a], k.BABY_LAVA, k.HURT_BABY_LAVA);
        for (C = A_.units[ITEMS.CARROT_SEED], a = 0; a < C.length; a++) 0 != (15 & C[a].info) && 10 !== C[a].info && go(C[a]);
        for (g = A_.units[ITEMS.WATERMELON_SEED], a = 0; a < g.length; a++) 0 != (15 & g[a].info) && 10 !== g[a].info && go(g[a]);
        for (N = A_.units[ITEMS.ALOE_VERA_MOB], a = 0; a < N.length; a++) go(N[a], k.ALOE_VERA);
        for (N = A_.units[ITEMS.ALOE_VERA_SEED], a = 0; a < N.length; a++) 0 != (15 & N[a].info) && 10 !== N[a].info && go(N[a]);
        for (c = A_.units[ITEMS.TOMATO_SEED], a = 0; a < c.length; a++) ho(c[a]);
        for (b = A_.units[ITEMS.GARLIC_SEED], a = 0; a < b.length; a++) 0 != (15 & b[a].info) && 10 !== b[a].info && go(b[a]);
        for (S = A_.units[ITEMS.THORNBUSH_SEED], a = 0; a < S.length; a++) 0 != (15 & S[a].info) && 10 !== S[a].info && go(S[a]);
        for (p = A_.units[ITEMS.PUMPKIN_SEED], a = 0; a < p.length; a++) 0 != (15 & p[a].info) && 10 !== p[a].info && go(p[a]);
        var w = A_.units[ITEMS.TREASURE_CHEST];
        for (a = 0; a < w.length; a++) go(w[a], k.TREASURE_CHEST, k.HURT_TREASURE_CHEST);
        var U = A_.units[ITEMS.KRAKEN];
        for (a = 0; a < U.length; a++) go(U[a], k.KRAKEN, k.HURT_KRAKEN);
        var Y = A_.units[ITEMS.PIRANHA];
        for (a = 0; a < Y.length; a++) go(Y[a], k.PIRANHA, k.HURT_PIRANHA);
        var F = A_.units[ITEMS.SPIDER];
        for (a = 0; a < F.length; a++) go(F[a], k.SPIDER, k.HURT_SPIDER);
        var x = A_.units[ITEMS.PENGUIN];
        for (a = 0; a < x.length; a++) go(x[a], k.PENGUIN, k.HURT_PENGUIN);
        var J = A_.units[ITEMS.BEAR];
        for (a = 0; a < J.length; a++) go(J[a], k.BEAR, k.HURT_BEAR);
        var q = A_.units[ITEMS.BABY_MAMMOTH];
        for (a = 0; a < q.length; a++) go(q[a]);
        var j = A_.units[ITEMS.FLAME];
        for (a = 0; a < j.length; a++) go(j[a], k.FIRE_MOB, k.HURT_FIRE_MOB);
        var Z = A_.units[ITEMS.CRAB_BOSS];
        for (a = 0; a < Z.length; a++) go(Z[a]);
        var Q = A_.units[ITEMS.MAMMOTH];
        for (a = 0; a < Q.length; a++) go(Q[a], k.MAMMOTH, k.HURT_MAMMOTH);
        var $ = A_.units[ITEMS.DRAGON];
        for (a = 0; a < $.length; a++) 1 === $[a].scale && go($[a], k.DRAGON, k.HURT_DRAGON);
        for ($ = A_.units[ITEMS.LAVA_DRAGON], a = 0; a < $.length; a++) 1 === $[a].scale && go($[a], k.LAVA_DRAGON, k.HURT_LAVA_DRAGON);
        var ee = A_.units[ITEMS.CHEST];
        for (a = 0; a < ee.length; a++) {
            go(ee[a]);

            let chest = ee[a];

            let myPlayer = world.fast_units[user.uid];

            if (myPlayer) {

				if (HackSettings.AutoSteal.enabled) {
					if (chest.ally || !chest.lock) {
						if (HelperFns.isInRadius(myPlayer, chest)) {
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id])
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id])
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id])
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id])
						}
					}
				}

                if (HackSettings.SwordInChest.enabled && (HelperFns.isPlayerHoldingWeapon(myPlayer, false) == 1 || HelperFns.isPlayerHoldingWeapon(myPlayer, false) == 2)) {
					if (!chest.lock || chest.ally) {
						if (HelperFns.isInRadius(myPlayer, chest)) {
							if (InventoryCounter === 0) {
								InventoryCounter++;
								OldInventory = [...user.inv.can_select];
							}
							client.asdsfdsfdsovcxcvldslv([8, myPlayer.right, 10, chest.pid, chest.id]);

							
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id]);
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id]);
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id]);
							client.asdsfdsfdsovcxcvldslv([9, chest.pid, chest.id]);

							chestDelay = Date.now();
						}
					}
				}

                if (InventoryCounter === 1 && Date.now() -  chestDelay > 200) {
					InventoryCounter = 0;
					chestDelay = Date.now();
					var n = 0;
					for (var i = 0; i < OldInventory.length; i++) {
						if (!user.inv.n[OldInventory[i].id]) {
							n++;
							continue;
						}
					user.inv.can_select[i - n] = OldInventory[i]
					}
					h_.update_inv_buttons();
				}

            }

        }
        var ie = A_.units[ITEMS.WORKBENCH];
        for (a = 0; a < ie.length; a++) go(ie[a], k.WORKBENCH);
        for (A = A_.units[ITEMS.FURNACE], a = 0; a < A.length; a++) go(A[a]);
        var te = A_.units[ITEMS.BREAD_OVEN];
        for (a = 0; a < te.length; a++) go(te[a]);
        for (G = A_.units[ITEMS.WOOD_DOOR], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10024 : 10025 : k.DOOR_WOOD_CLOSE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.STONE_DOOR], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10026 : 10027 : k.DOOR_STONE_CLOSE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.GOLD_DOOR], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10028 : 10029 : k.DOOR_GOLD_CLOSE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.DIAMOND_DOOR], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10030 : 10031 : k.DOOR_DIAMOND_CLOSE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.AMETHYST_DOOR], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10032 : 10033 : k.DOOR_AMETHYST_CLOSE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.REIDITE_DOOR], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10034 : 10035 : k.REIDITE_DOOR), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.WOOD_DOOR_SPIKE], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10012 : 10013 : k.WOOD_DOOR_SPIKE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.STONE_DOOR_SPIKE], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10014 : 10015 : k.STONE_DOOR_SPIKE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.GOLD_DOOR_SPIKE], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10016 : 10017 : k.GOLD_DOOR_SPIKE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.DIAMOND_DOOR_SPIKE], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10018 : 10019 : k.DIAMOND_DOOR_SPIKE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.AMETHYST_DOOR_SPIKE], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10020 : 10021 : k.AMETHYST_DOOR_SPIKE), G[a].draw_life(G[a].info);
        for (G = A_.units[ITEMS.REIDITE_DOOR_SPIKE], a = 0; a < G.length; a++) 0 == G[a].extra && go(G[a], HackSettings.ColoredSpikes.enabled ? G[a].ally ? 10022 : 10023 : k.REIDITE_DOOR_SPIKE), G[a].draw_life(G[a].info);
        var re = A_.units[ITEMS.WALL];
        for (a = 0; a < re.length; a++) go(re[a], k.WALL), re[a].draw_life(re[a].info);
        for (re = A_.units[ITEMS.STONE_WALL], a = 0; a < re.length; a++) go(re[a], k.STONE_WALL), re[a].draw_life(re[a].info);
        for (re = A_.units[ITEMS.GOLD_WALL], a = 0; a < re.length; a++) go(re[a], k.GOLD_WALL), re[a].draw_life(re[a].info);
        for (re = A_.units[ITEMS.DIAMOND_WALL], a = 0; a < re.length; a++) go(re[a], k.DIAMOND_WALL), re[a].draw_life(re[a].info);
        for (re = A_.units[ITEMS.AMETHYST_WALL], a = 0; a < re.length; a++) go(re[a], k.AMETHYST_WALL), re[a].draw_life(re[a].info);
        for (re = A_.units[ITEMS.REIDITE_WALL], a = 0; a < re.length; a++) go(re[a], k.REIDITE_WALL), re[a].draw_life(re[a].info);
        var ne = A_.units[ITEMS.SPIKE];
        for (a = 0; a < ne.length; a++) go(ne[a], HackSettings.ColoredSpikes.enabled ? ne[a].ally ? 10000 : 10001 : k.SPIKE), ne[a].draw_life(ne[a].info);
        for (ne = A_.units[ITEMS.STONE_SPIKE], a = 0; a < ne.length; a++) go(ne[a], HackSettings.ColoredSpikes.enabled ? ne[a].ally ? 10002 : 10003 : k.STONE_SPIKE), ne[a].draw_life(ne[a].info);
        for (ne = A_.units[ITEMS.GOLD_SPIKE], a = 0; a < ne.length; a++) go(ne[a], HackSettings.ColoredSpikes.enabled ? ne[a].ally ? 10004 : 10005 : k.GOLD_SPIKE), ne[a].draw_life(ne[a].info);
        for (ne = A_.units[ITEMS.DIAMOND_SPIKE], a = 0; a < ne.length; a++) go(ne[a], HackSettings.ColoredSpikes.enabled ? ne[a].ally ? 10006 : 10007 : k.DIAMOND_SPIKE), ne[a].draw_life(ne[a].info);
        for (ne = A_.units[ITEMS.AMETHYST_SPIKE], a = 0; a < ne.length; a++) go(ne[a], HackSettings.ColoredSpikes.enabled ? ne[a].ally ? 10008 : 10009 : k.AMETHYST_SPIKE), ne[a].draw_life(ne[a].info);
        for (ne = A_.units[ITEMS.REIDITE_SPIKE], a = 0; a < ne.length; a++) go(ne[a], HackSettings.ColoredSpikes.enabled ? ne[a].ally ? 10010 : 10011 : k.REIDITE_SPIKE), ne[a].draw_life(ne[a].info);
        var ae = A_.units[ITEMS.WELL];
        for (a = 0; a < ae.length; a++) {
            var oe = ae[a];
            oe.info > 0 ? go(oe, k.WELL_FULL) : go(oe, k.WELL_EMPTY)
        }
        var se = A_.units[ITEMS.TOTEM];
        for (a = 0; a < se.length; a++) go(se[a], k.TOTEM);
        No(no, t, r, e, i, k.GOLD, "g", 2), No(no, t, r, e, i, k.GOLD_WINTER, "gw", 2), No(no, t, r, e, i, k.DIAMOND, "d", 2), No(no, t, r, e, i, k.DIAMOND_WINTER, "dw", 2), No(no, t, r, e, i, k.PLANT, "p", 0), No(no, t, r, e, i, k.EMERALD, "m", 2), No(no, t, r, e, i, k.AMETHYST, "a", 2), No(no, t, r, e, i, k.REIDITE, "re", 2), No(no, t, r, e, i, k.SHADOW_CAVE_STONES, "cs", 3, 3), No(no, t, r, e, i, k.SHADOW_CAVE_STONES, "cs", 2, 2), No(no, t, r, e, i, k.SHADOW_CAVE_STONES, "cs", 1, 1), No(no, t, r, e, i, k.SHADOW_CAVE_STONES, "cs", 0, 0), No(no, t, r, e, i, k.CAVE_STONES, "cs", 3, 3), No(no, t, r, e, i, k.CAVE_STONES, "cs", 2, 2), No(no, t, r, e, i, k.CAVE_STONES, "cs", 1, 1), No(no, t, r, e, i, k.CAVE_STONES, "cs", 0, 0);
        var _e = A_.units[ITEMS.FRUIT];
        for (a = 0; a < _e.length; a++)
            for (E = 0; E < _e[a].info; E++) go(_e[a].fruits[E], k.FRUIT);
        No(no, t, r, e, i, k.STONES, "s", 2);
        var Ee = A_.units[ITEMS.EXTRACTOR_MACHINE_STONE];
        for (a = 0; a < Ee.length; a++) go(Ee[a]);
        for (Ee = A_.units[ITEMS.EXTRACTOR_MACHINE_GOLD], a = 0; a < Ee.length; a++) go(Ee[a]);
        for (Ee = A_.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND], a = 0; a < Ee.length; a++) go(Ee[a]);
        for (Ee = A_.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST], a = 0; a < Ee.length; a++) go(Ee[a]);
        for (Ee = A_.units[ITEMS.EXTRACTOR_MACHINE_REIDITE], a = 0; a < Ee.length; a++) go(Ee[a]);
        var Te = A_.units[ITEMS.WINDMILL];
        for (a = 0; a < Te.length; a++) Io(Te[a]);
        for (d = A_.units[ITEMS.FIRE], a = 0; a < d.length; a++) ho(d[a]);
        for (d = A_.units[ITEMS.BIG_FIRE], a = 0; a < d.length; a++) ho(d[a]);
        for (A = A_.units[ITEMS.FURNACE], a = 0; a < A.length; a++) 2 == A[a].action && ho(A[a]);
        for (te = A_.units[ITEMS.BREAD_OVEN], a = 0; a < te.length; a++) ho(te[a]);
        for (h = A_.units[ITEMS.RESURRECTION], a = 0; a < h.length; a++) ho(h[a]);
        for (u = A_.units[ITEMS.EMERALD_MACHINE], a = 0; a < u.length; a++) ho(u[a]), u[a].draw_life(u[a].info);
        No(no, t, r, e, i, k.CACTUS, "c", 0), No(no, t, r, e, i, k.TREE, "t", 5, 4), No(no, t, r, e, i, k.FIR, "f", 2, 2), No(no, t, r, e, i, k.PALM, "plm", 0, 0), No(no, t, r, e, i, k.TREE_BRANCH, "b", 3, 2), No(no, t, r, e, i, k.TREE, "t", 3, 2), No(no, t, r, e, i, k.TREE_BRANCH, "b", 1, 0), No(no, t, r, e, i, k.FIR, "f", 1, 1), No(no, t, r, e, i, k.PALM, "plm", 1, 1), No(no, t, r, e, i, k.TREE, "t", 1, 0), No(no, t, r, e, i, k.FIR, "f", 0, 0), No(no, t, r, e, i, k.PALM, "plm", 2, 2);
        for (Te = A_.units[ITEMS.WINDMILL], a = 0; a < Te.length; a++) ho(Te[a]);
        var Ae = A_.units[ITEMS.WOOD_TOWER];
        for (a = 0; a < Ae.length; a++) go(Ae[a], k.WOOD_TOWER);
        for (o = A_.units[ITEMS.PLAYERS], a = 0; a < o.length; a++) {
            if (1 === (s = o[a]).tower && (s.speed < 180 || s.vehicle !== X.BABY_DRAGON && s.vehicle !== X.BABY_LAVA && s.vehicle !== X.NIMBUS && s.vehicle !== X.HAWK && s.vehicle !== X.PLANE)) {
                s.tower_fx = _.lerp(s.tower_fx, 100, .018);
                P = 1 + .18 * Math.min(1, Math.max(s.tower_fx, 0) / 100);
                I.save(), I.scale(P, P), d_.cam.x /= P, d_.cam.y /= P, s.x /= P, s.y /= P, s.r.x /= P, s.r.y /= P, s.draw_vehicle(), s.draw(), d_.cam.x *= P, d_.cam.y *= P, s.x *= P, s.y *= P, s.r.x *= P, s.r.y *= P, I.restore()
            }
        }
        var de = A_.units[ITEMS.ROOF];
        for (a = 0; a < de.length; a++) go(de[a], k.ROOF), de[a].draw_life(de[a].info);
        var Ie = A_.units[ITEMS.FIREFLY];
        for (a = 0; a < Ie.length; a++) go(Ie[a], k.FIREFLY, k.HURT_FIREFLY);
        var he = A_.units[ITEMS.GARLAND];
        for (a = 0; a < he.length; a++) go(he[a], k.GARLAND);
        for (o = A_.units[ITEMS.PLAYERS], a = 0; a < o.length; a++) {
            if (((s = o[a]).vehicle === X.BABY_DRAGON || s.vehicle === X.BABY_LAVA || s.vehicle === X.NIMBUS || s.vehicle === X.HAWK || s.vehicle === X.PLANE) && s.speed > 180) {
                s.fly = 1, I.save();
                P = 1 + .35 * Math.min(1, Math.max(s.vehicle_fx5 - 30, 0) / 180);
                I.scale(P, P), d_.cam.x /= P, d_.cam.y /= P, s.x /= P, s.y /= P, s.r.x /= P, s.r.y /= P, s.draw_vehicle(), s.draw(), d_.cam.x *= P, d_.cam.y *= P, s.x *= P, s.y *= P, s.r.x *= P, s.r.y *= P, I.restore()
            }
        }
        for (H = A_.units[ITEMS.SPELL], a = 0; a < H.length; a++) 1 === H[a].fly && go(H[a]);
        for ($ = A_.units[ITEMS.DRAGON], a = 0; a < $.length; a++) $[a].scale > 1 && go($[a], k.DRAGON, k.HURT_DRAGON);
        for ($ = A_.units[ITEMS.LAVA_DRAGON], a = 0; a < $.length; a++) $[a].scale > 1 && go($[a], k.LAVA_DRAGON, k.HURT_LAVA_DRAGON);
        var ue = A_.units[ITEMS.HAWK];
        for (a = 0; a < ue.length; a++) go(ue[a], k.HAWK, k.HURT_HAWK);
        var Oe = A_.units[ITEMS.VULTURE];
        for (a = 0; a < Oe.length; a++) go(Oe[a], k.VULTURE, k.HURT_VULTURE);
        if (HackSettings.DrawPlayerOnTop.enabled) {
            for (o = A_.units[ITEMS.PLAYERS], a = 0; a < o.length; a++) {
                s = o[a];
                if (o[a].vehicle !== X.BABY_DRAGON && o[a].vehicle !== X.BABY_LAVA && o[a].vehicle !== X.HAWK && o[a].vehicle !== X.PLANE && o[a].vehicle !== X.NIMBUS) {
                    if (0 === s.tower)
                        if (s.tower_fx > .001) {
                            s.tower_fx = _.lerp(s.tower_fx, 0, .018);
                            var P = 1 + .18 * Math.min(1, Math.max(s.tower_fx, 0) / 100);
                            I.save(), I.scale(P, P), d_.cam.x /= P, d_.cam.y /= P, s.x /= P, s.y /= P, s.r.x /= P, s.r.y /= P, s.draw_vehicle(), s.draw(), d_.cam.x *= P, d_.cam.y *= P, s.x *= P, s.y *= P, s.r.x *= P, s.r.y *= P, I.restore()
                        } else s.fly = 0, s.draw_vehicle(), s.draw()
                } else if (s.speed <= 180) {
                    I.save();
                    P = 1 + .35 * Math.min(1, Math.max(s.vehicle_fx5 - 30, 0) / 180);
                    I.scale(P, P), d_.cam.x /= P, d_.cam.y /= P, s.x /= P, s.y /= P, s.r.x /= P, s.r.y /= P, s.fly = 0, s.draw_vehicle(), s.draw(), d_.cam.x *= P, d_.cam.y *= P, s.x *= P, s.y *= P, s.r.x *= P, s.r.y *= P, I.restore()
                }
            }
        }
        if (($a += 15 * R_) > 60 && ($a -= 60), No(eo, t, r, e, i, k.FOG, "fo", 2), No(eo, t, r, e, i, k.FOD, "fod", 2), window.drawShit)
            for (let e = 0; e < window.drawShit[0].length; e++) I.save(), I.beginPath(), I.lineWidth = 5, I.arc(window.drawShit[0][e].x + d_.cam.x, window.drawShit[0][e].y + d_.cam.y, window.drawShit[0][e].r, 0, 2 * Math.PI, !1), I.stroke(), I.restore()
    }

    function Io(e, i) {
        A_.transition ? (I.globalAlpha = 1, e.draw_bg(i), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, e.draw_bg(i), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : e.draw_bg(i)
    }

    function ho(e, i) {
        A_.transition ? (I.globalAlpha = 1, e.draw_fg(i), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, e.draw_fg(i), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : e.draw_fg(i)
    }

    function uo(e, i, t, r) {
        A_.transition ? (I.globalAlpha = 1, on(I, sprite[e][A_.time], t, r), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, on(I, sprite[e][A_.time], t, r), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : on(I, i, t, r)
    }

    function Oo(e, i, t, r, n) {
        var a = t.width,
            o = t.height,
            s = Math.floor(a / 2),
            _ = Math.floor(o / 2);
        A_.transition ? (I.globalAlpha = 1, on(I, sprite[e][i][A_.time], 0, 0, a, o, r, n, s, _), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, on(I, sprite[e][i][A_.time], 0, 0, a, o, r, n, s, _), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : on(I, sprite[e][i][A_.time], 0, 0, a, o, r, n, s, _)
    }

    function lo(e, i, t, r) {
        var n = i.width,
            a = i.height,
            o = Math.floor(n / 2),
            s = Math.floor(a / 2);
        A_.transition ? (I.globalAlpha = 1, on(I, sprite[e][A_.time], 0, 0, n, a, t, r, o, s), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, on(I, sprite[e][A_.time], 0, 0, n, a, t, r, o, s), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : on(I, i, 0, 0, n, a, t, r, o, s)
    }

    function Ro(e) {
        I.globalAlpha = e.alpha, Ne(I, e.x + d_.cam.x, e.y + d_.cam.y, e.r), Ce(I, k.SWIM_COLOR[A_.time]), I.globalAlpha = 1
    }

    function co(e) {
        I.save(), I.translate(d_.cam.x + e.x, d_.cam.y + e.y), I.rotate(e.angle), I.globalAlpha = e.alpha;
        var i = sprite[e.id][A_.time];
        on(I, i, -i.width / 2, -i.height / 2), I.globalAlpha = 1, I.restore()
    }

    function Co(e, i, t, r, n) {
        A_.transition && 1 == n ? (I.globalAlpha = 1, on(I, sprite[e][A_.time][i], t, r), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, on(I, sprite[e][A_.time][i], t, r), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : (I.globalAlpha = n, on(I, sprite[e][A_.time][i], t, r), I.globalAlpha = 1)
    }

    function go(e, i, t) {
        A_.transition ? (I.globalAlpha = 1, e.draw(i, t), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, e.draw(i, t), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : e.draw(i, t)
    }

    function No(e, i, t, r, n, a, o, s, _, E) {
        A_.transition ? (I.globalAlpha = 1, e(i, t, r, n, a, o, s, _, E), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1 - A_.shade.v, e(i, t, r, n, a, o, s, _, E), A_.time = A_.time ? 0 : 1, I.globalAlpha = 1) : e(i, t, r, n, a, o, s, _, E)
    }

    function Do(e, i, t, r, n, a, o) {
        var s, _ = "#";
        return _ += (s = Math.floor(r * o + (1 - o) * e)) < 16 ? "0" + s.toString(16) : s.toString(16), _ += (s = Math.floor(n * o + (1 - o) * i)) < 16 ? "0" + s.toString(16) : s.toString(16), _ += (s = Math.floor(a * o + (1 - o) * t)) < 16 ? "0" + s.toString(16) : s.toString(16)
    }

    function bo(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.x + e - 700,
            T = Math.max(d_.cam.y + i, 0),
            A = Math.max(-d_.cam.y + O - t - 100, 0),
            d = T,
            h = O - T - A;
        if (a) var u = r.t(o).x;
        else u = o.r.x;
        var l = E + qo.LW1SX;
        qo.W1SX, l += u + qo.W1SX - 2;
        if (a) u = r.t(s).x;
        else u = s.r.x;
        var R = E + qo.LW2SX - l + u,
            c = (l += R - 2) - 2;
        if (a) u = r.t(_).x;
        else u = _.r.x;
        if (c < l + (R = E + qo.LW3SX - l + u) - 3) l += R - 2;
        else {
            l = c
        }
        if (R = E + qo.LSANDX - l, a > 0 && 1 === n.isSand) {
            if (A_.transition) {
                var C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 77, 72, 252, 239, 187, C)
            } else I.fillStyle = k.SAND_COLOR[A_.time];
            I.fillRect(l, d, R, h)
        } else {
            if (A_.transition) {
                C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
            } else I.fillStyle = n._color[A_.time];
            I.fillRect(l, d, R, h)
        }
    }

    function So(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.x + e - 700,
            T = Math.max(d_.cam.y + i, 0),
            A = Math.max(-d_.cam.y + O - t - 100, 0),
            d = T,
            h = O - T - A;
        if (a) var u = r.t(o);
        else u = o.r;
        var l = E + qo.LW1SX,
            R = l,
            c = d,
            C = u.x + qo.W1SX,
            g = h,
            N = l += u.x + qo.W1SX - 2;
        if (a) u = r.t(s);
        else u = s.r;
        var D = E + qo.LW2SX - l + u.x,
            b = l,
            S = d,
            p = D,
            m = h,
            v = (l += D - 2) - 2;
        if (a) u = r.t(_);
        else u = _.r;
        if (v < l + (D = E + qo.LW3SX - l + u.x) - 3) var M = !0,
            G = l,
            L = d,
            f = D,
            H = h,
            P = l += D - 2;
        else {
            M = !1;
            l = v;
            P = -1
        }
        if (D = E + qo.LSANDX - l, A_.transition) {
            var y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(R, c, C, g), a)
            if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 70, 76, 42, 139, 155, y)
            } else I.fillStyle = k.WATER_2_COLOR[A_.time];
        else if (A_.transition) {
            y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(b, S, p, m), M) {
            if (a)
                if (A_.transition) {
                    y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                    I.fillStyle = Do(17, 94, 96, 169, 214, 211, y)
                } else I.fillStyle = k.WATER_1_COLOR[A_.time];
            else if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
            } else I.fillStyle = k.WATER_3_COLOR[A_.time];
            I.fillRect(G, L, f, H)
        }
        ui.quality && a && r.draw_foams_left(v, P, N, E, -d_.cam.y + c, -d_.cam.y + c + g)
    }

    function po(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.y + e - 700,
            T = Math.max(d_.cam.x + i, 0),
            A = Math.max(-d_.cam.x + u - t - 100, 0),
            d = T,
            h = u - T - A;
        if (a) var O = r.t(o).x;
        else O = o.r.x;
        var l = E + qo.LW1SX;
        qo.W1SX, l += O + qo.W1SX - 2;
        if (a) O = r.t(s).x;
        else O = s.r.x;
        var R = E + qo.LW2SX - l + O,
            c = (l += R - 2) - 2;
        if (a) O = r.t(_).x;
        else O = _.r.x;
        if (c < l + (R = E + qo.LW3SX - l + O) - 3) l += R - 2;
        else {
            l = c
        }
        if (R = E + qo.LSANDX - l, a > 0 && 1 === n.isSand) {
            if (A_.transition) {
                var C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 77, 72, 252, 239, 187, C)
            } else I.fillStyle = k.SAND_COLOR[A_.time];
            I.fillRect(d, l, h, R)
        } else {
            if (A_.transition) {
                C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
            } else I.fillStyle = n._color[A_.time];
            I.fillRect(d, l, h, R)
        }
    }

    function mo(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.y + e - 700,
            T = Math.max(d_.cam.x + i, 0),
            A = Math.max(-d_.cam.x + u - t - 100, 0),
            d = T,
            h = u - T - A;
        if (a) var O = r.t(o);
        else O = o.r;
        var l = E + qo.LW1SX,
            R = d,
            c = l,
            C = O.x + qo.W1SX,
            g = h,
            N = l += O.x + qo.W1SX - 2;
        if (a) O = r.t(s);
        else O = s.r;
        var D = E + qo.LW2SX - l + O.x,
            b = l,
            S = d,
            p = D,
            m = h,
            v = (l += D - 2) - 2;
        if (a) O = r.t(_);
        else O = _.r;
        if (v < l + (D = E + qo.LW3SX - l + O.x) - 3) var M = !0,
            G = l,
            L = d,
            f = D,
            H = h,
            P = l += D - 2;
        else {
            M = !1;
            l = v;
            P = -1
        }
        if (D = E + qo.LSANDX - l, A_.transition) {
            var y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(R, c, g, C), a)
            if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 70, 76, 42, 139, 155, y)
            } else I.fillStyle = k.WATER_2_COLOR[A_.time];
        else if (A_.transition) {
            y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(S, b, m, p), M) {
            if (a)
                if (A_.transition) {
                    y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                    I.fillStyle = Do(17, 94, 96, 169, 214, 211, y)
                } else I.fillStyle = k.WATER_1_COLOR[A_.time];
            else if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
            } else I.fillStyle = k.WATER_3_COLOR[A_.time];
            I.fillRect(L, G, H, f)
        }
        ui.quality && a && r.draw_foams_top(v, P, N, E, -d_.cam.x + R, -d_.cam.x + R + g)
    }

    function vo(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.x + e + 820,
            T = Math.max(d_.cam.y + i, 0),
            A = Math.max(-d_.cam.y + O - t - 100, 0),
            d = T,
            h = O - T - A;
        if (a) var u = r.t(o).x;
        else u = o.r.x;
        var l = E + qo.LW1SX;
        qo.W1SX, l += -u + qo.W1SX + 2;
        if (a) u = r.t(s).x;
        else u = s.r.x;
        var R = E - qo.LW2SX - l - u,
            c = (l += R + 2) - 2;
        if (a) u = r.t(_).x;
        else u = _.r.x;
        if (c > l + (R = E - qo.LW3SX - l - u)) l += R + 2;
        else {
            l = c
        }
        if (R = E - qo.LSANDX - l, a > 0 && 1 === n.isSand) {
            if (A_.transition) {
                var C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 77, 72, 252, 239, 187, C)
            } else I.fillStyle = k.SAND_COLOR[A_.time];
            I.fillRect(l, d, R, h)
        } else {
            if (A_.transition) {
                C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
            } else I.fillStyle = n._color[A_.time];
            I.fillRect(l, d, R, h)
        }
    }

    function Mo(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.x + e + 820,
            T = Math.max(d_.cam.y + i, 0),
            A = Math.max(-d_.cam.y + O - t - 100, 0),
            d = T,
            h = O - T - A;
        if (a) var u = r.t(o);
        else u = o.r;
        var l = E + qo.LW1SX,
            R = l,
            c = d,
            C = -u.x + qo.W1SX,
            g = h,
            N = l += -u.x + qo.W1SX + 2;
        if (a) u = r.t(s);
        else u = s.r;
        var D = E - qo.LW2SX - l - u.x,
            b = l,
            S = d,
            p = D,
            m = h,
            v = (l += D + 2) - 2;
        if (a) u = r.t(_);
        else u = _.r;
        if (v > l + (D = E - qo.LW3SX - l - u.x)) var M = !0,
            G = l,
            L = d,
            f = D,
            H = h,
            P = l += D + 2;
        else {
            M = !1;
            l = v;
            P = -1
        }
        if (D = E - qo.LSANDX - l, A_.transition) {
            var y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(R, c, C, g), a)
            if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 70, 76, 42, 139, 155, y)
            } else I.fillStyle = k.WATER_2_COLOR[A_.time];
        else if (A_.transition) {
            y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(b, S, p, m), M) {
            if (a)
                if (A_.transition) {
                    y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                    I.fillStyle = Do(17, 94, 96, 169, 214, 211, y)
                } else I.fillStyle = k.WATER_1_COLOR[A_.time];
            else if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
            } else I.fillStyle = k.WATER_3_COLOR[A_.time];
            I.fillRect(G, L, f, H)
        }
        ui.quality && a && r.draw_foams_right(v, P, N, E, -d_.cam.y + c, -d_.cam.y + c + g)
    }

    function Go(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.y + e + 710,
            T = Math.max(d_.cam.x + i, 0),
            A = Math.max(-d_.cam.x + u - t - 100, 0),
            d = T,
            h = u - T - A;
        if (a) var O = r.t(o).x;
        else O = o.r.x;
        var l = E + qo.LW1SX;
        qo.W1SX, l += -O + qo.W1SX + 2;
        if (a) O = r.t(s).x;
        else O = s.r.x;
        var R = E - qo.LW2SX - l - O,
            c = (l += R + 2) - 2;
        if (a) O = r.t(_).x;
        else O = _.r.x;
        if (c > l + (R = E - qo.LW3SX - l - O)) l += R + 2;
        else {
            l = c
        }
        if (R = E - qo.LSANDX - l, a > 0 && 1 === n.isSand) {
            if (A_.transition) {
                var C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 77, 72, 252, 239, 187, C)
            } else I.fillStyle = k.SAND_COLOR[A_.time];
            I.fillRect(d, l, h, R)
        } else {
            if (A_.transition) {
                C = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], C)
            } else I.fillStyle = n._color[A_.time];
            I.fillRect(d, l, h, R)
        }
    }

    function Lo(e, i, t, r, n, a) {
        var o = r.w1,
            s = r.w2,
            _ = r.w3,
            E = d_.cam.y + e + 710,
            T = Math.max(d_.cam.x + i, 0),
            A = Math.max(-d_.cam.x + u - t - 100, 0),
            d = T,
            h = u - T - A;
        if (a) var O = r.t(o);
        else O = o.r;
        var l = E + qo.LW1SX,
            R = l,
            c = d,
            C = -O.x + qo.W1SX,
            g = h,
            N = l += -O.x + qo.W1SX + 2;
        if (a) O = r.t(s);
        else O = s.r;
        var D = E - qo.LW2SX - l - O.x,
            b = l,
            S = d,
            p = D,
            m = h,
            v = (l += D + 2) - 2;
        if (a) O = r.t(_);
        else O = _.r;
        if (v > l + (D = E - qo.LW3SX - l - O.x)) var M = !0,
            G = l,
            L = d,
            f = D,
            H = h,
            P = l += D + 2;
        else {
            M = !1;
            l = v;
            P = -1
        }
        if (D = E - qo.LSANDX - l, A_.transition) {
            var y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(c, R, g, C), a)
            if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(15, 70, 76, 42, 139, 155, y)
            } else I.fillStyle = k.WATER_2_COLOR[A_.time];
        else if (A_.transition) {
            y = A_.time ? 1 - A_.shade.v : A_.shade.v;
            I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
        } else I.fillStyle = k.WATER_3_COLOR[A_.time];
        if (I.fillRect(S, b, m, p), M) {
            if (a)
                if (A_.transition) {
                    y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                    I.fillStyle = Do(17, 94, 96, 169, 214, 211, y)
                } else I.fillStyle = k.WATER_1_COLOR[A_.time];
            else if (A_.transition) {
                y = A_.time ? 1 - A_.shade.v : A_.shade.v;
                I.fillStyle = Do(9, 55, 63, 11, 106, 132, y)
            } else I.fillStyle = k.WATER_3_COLOR[A_.time];
            I.fillRect(L, G, H, f)
        }
        ui.quality && a && r.draw_foams_bottom(v, P, N, E, -d_.cam.x + c, -d_.cam.x + c + g)
    }

    function fo() {
        if (I.globalAlpha = 1, A_.transition) var e = A_.shade.update();
        A_.update_dist_from_biomes(-d_.cam.x, -d_.cam.y), so = Math.max(Math.floor(-d_.cam.x / A_.dw) - 5, 0), _o = Math.min(Math.floor((-d_.cam.x + d_.cam.w) / A_.dw) + 4, A_.nw - 1), Eo = Math.max(Math.floor(-d_.cam.y / A_.dh) - 3, 0), To = Math.min(Math.floor((-d_.cam.y + d_.cam.h) / A_.dh) + 3, A_.nh - 1),
            function () {
                for (var e = A_.biomes.length - 1; e >= 0; e--)
                    if ((l = A_.biomes[e]).t === A_.BIOME_SEA) {
                        var i = A_.BIOME[l.t];
                        if (-d_.cam.x >= l.x1 - 230 - u && -d_.cam.x <= l.x2 + 330 && -d_.cam.y >= l.y1 - O && -d_.cam.y <= l.y2 + 100) {
                            var t = l.x2;
                            l.t !== A_.BIOME_SEA && (t -= 610);
                            var r = l.x1;
                            l.t !== A_.BIOME_SEA && (r += 610);
                            var n = l.y2;
                            l.t !== A_.BIOME_SEA && (n -= 610);
                            var a = l.y1;
                            if (l.t !== A_.BIOME_SEA && (a += 610), A_.transition) {
                                var o = A_.time ? 1 - A_.shade.v : A_.shade.v;
                                I.fillStyle = Do(i.night[0], i.night[1], i.night[2], i.day[0], i.day[1], i.day[1], o)
                            } else I.fillStyle = i._color[A_.time];
                            var s = Math.max(d_.cam.x + r - 2 - 230, 0),
                                _ = Math.max(-d_.cam.x + u - t - 330 - 2, 0),
                                E = Math.max(d_.cam.y + a - 2, 0),
                                T = Math.max(-d_.cam.y + O - n - 100 - 2, 0);
                            I.beginPath(), I.fillRect(s, E, u - _ - s, O - E - T)
                        }
                    } for (e = A_.biomes.length - 1; e >= 0; e--)(l = A_.biomes[e]).t !== A_.BIOME_SEA && (t = l.x2, l.t !== A_.BIOME_SEA && (t -= 400), r = l.x1, l.t !== A_.BIOME_SEA && (r += 400), n = l.y2, l.t !== A_.BIOME_SEA && (n -= 300), a = l.y1, l.t !== A_.BIOME_SEA && (a += 300), 0 == (l.v & qo.RIGHT) && -d_.cam.x >= t - u + 120 && -d_.cam.x <= t + 820 && -d_.cam.y >= a + 88 - O && -d_.cam.y <= n + 50 && (vo(t, a + 88, n - 88, d_.beach[0], A_.BIOME[l.t], l.v & qo.RIGHT), Mo(t, a + 88, n - 88, d_.beach[0], A_.BIOME[l.t], l.v & qo.RIGHT)), 0 == (l.v & qo.LEFT) && -d_.cam.x >= r - u - 700 && -d_.cam.x <= r - 20 && -d_.cam.y >= a + 88 - O && -d_.cam.y <= n + 50 && (bo(r, a + 88, n - 88, d_.beach[1], A_.BIOME[l.t], l.v & qo.LEFT), So(r, a + 88, n - 88, d_.beach[1], A_.BIOME[l.t], l.v & qo.LEFT)), 0 == (l.v & qo.BOTTOM) && -d_.cam.x >= r - 235 - u && -d_.cam.x <= t + 350 && -d_.cam.y >= n - O - 275 && -d_.cam.y <= n + 490 && (Go(n - 230, r - 230, t + 230, d_.beach[2], A_.BIOME[l.t], l.v & qo.BOTTOM), Lo(n - 230, r - 230, t + 230, d_.beach[2], A_.BIOME[l.t], l.v & qo.BOTTOM)), 0 == (l.v & qo.TOP) && -d_.cam.x >= r - 235 - u && -d_.cam.x <= t + 350 && -d_.cam.y >= a - O - 390 && -d_.cam.y <= a + 315 && (po(a + 310, r - 230, t + 230, d_.beach[3], A_.BIOME[l.t], l.v & qo.TOP), mo(a + 310, r - 230, t + 230, d_.beach[3], A_.BIOME[l.t], l.v & qo.TOP)));
                for (e = A_.biomes.length - 1; e >= 0; e--)(l = A_.biomes[e]).t !== A_.BIOME_SEA && (t = l.x2, l.t !== A_.BIOME_SEA && (t -= 400), r = l.x1, l.t !== A_.BIOME_SEA && (r += 400), n = l.y2, l.t !== A_.BIOME_SEA && (n -= 300), a = l.y1, l.t !== A_.BIOME_SEA && (a += 300), 0 != (l.v & qo.RIGHT) && -d_.cam.x >= t - u + 120 && -d_.cam.x <= t + 820 && -d_.cam.y >= a + 88 - O && -d_.cam.y <= n + 50 && vo(t, a + 88, n - 88, d_.beach[0], A_.BIOME[l.t], l.v & qo.RIGHT), 0 != (l.v & qo.LEFT) && -d_.cam.x >= r - u - 700 && -d_.cam.x <= r - 20 && -d_.cam.y >= a + 88 - O && -d_.cam.y <= n + 50 && bo(r, a + 88, n - 88, d_.beach[1], A_.BIOME[l.t], l.v & qo.LEFT), 0 != (l.v & qo.BOTTOM) && -d_.cam.x >= r - 235 - u && -d_.cam.x <= t + 350 && -d_.cam.y >= n - O - 275 && -d_.cam.y <= n + 490 && Go(n - 230, r - 230, t + 230, d_.beach[2], A_.BIOME[l.t], l.v & qo.BOTTOM), 0 != (l.v & qo.TOP) && -d_.cam.x >= r - 235 - u && -d_.cam.x <= t + 350 && -d_.cam.y >= a - O - 390 && -d_.cam.y <= a + 315 && po(a + 310, r - 230, t + 230, d_.beach[3], A_.BIOME[l.t], l.v & qo.TOP));
                for (e = A_.biomes.length - 1; e >= 0; e--)(l = A_.biomes[e]).t !== A_.BIOME_SEA && (i = A_.BIOME[l.t], -d_.cam.x >= l.x1 - 230 - u && -d_.cam.x <= l.x2 + 330 && -d_.cam.y >= l.y1 - O && -d_.cam.y <= l.y2 + 100 && (t = l.x2, l.t !== A_.BIOME_SEA && (0 == (l.v & qo.RIGHT) ? t -= 414 : t -= 610), r = l.x1, l.t !== A_.BIOME_SEA && (0 == (l.v & qo.LEFT) ? r += 414 : r += 610), n = l.y2, l.t !== A_.BIOME_SEA && (0 == (l.v & qo.BOTTOM) ? n -= 414 : n -= 610), a = l.y1, l.t !== A_.BIOME_SEA && (0 == (l.v & qo.TOP) ? a += 414 : a += 610), A_.transition ? (o = A_.time ? 1 - A_.shade.v : A_.shade.v, I.fillStyle = Do(i.night[0], i.night[1], i.night[2], i.day[0], i.day[1], i.day[2], o)) : I.fillStyle = i._color[A_.time], s = Math.max(d_.cam.x + r - 2 - 230, 0), _ = Math.max(-d_.cam.x + u - t - 330 - 2, 0), E = Math.max(d_.cam.y + a - 2, 0), T = Math.max(-d_.cam.y + O - n - 100 - 2, 0), I.beginPath(), I.fillRect(s, E, u - _ - s, O - E - T)));
                ui.quality && (No(io, Eo, To, so, _o, k.WAVE_TWO, "isl", 2), No(io, Eo, To, so, _o, k.WAVE_ONE, "isl", 2)), No(no, Eo, To, so, _o, k.ISLAND, "isl", 2), ui.quality && No(ao, Eo, To, so, _o, k.DECORATION, "de");
                var A = A_.units[ITEMS.PLAYERS];
                for (e = 0; e < A.length; e++)
                    for (var d = A[e], h = 0; h < d.foot.length; h++) co(d.foot[h]);
                for ((xn += 40 * R_) > 60 && (xn -= 60), No(Jn, Eo, To, so, _o, k.RIVER, "r", 0), e = 0; e < A_.biomes.length; e++) {
                    var l;
                    (l = A_.biomes[e]).t !== A_.BIOME_SEA && (t = l.x2, l.t !== A_.BIOME_SEA && (t -= 400), r = l.x1, l.t !== A_.BIOME_SEA && (r += 400), n = l.y2, l.t !== A_.BIOME_SEA && (n -= 300), a = l.y1, l.t !== A_.BIOME_SEA && (a += 300), (l.v & qo.RIGHT) > 0 && -d_.cam.x >= t - u + 120 && -d_.cam.x <= t + 820 && -d_.cam.y >= a + 88 - O && -d_.cam.y <= n + 50 && Mo(t, a + 88, n - 88, d_.beach[0], A_.BIOME[l.t], l.v & qo.RIGHT), (l.v & qo.LEFT) > 0 && -d_.cam.x >= r - u - 700 && -d_.cam.x <= r - 20 && -d_.cam.y >= a + 88 - O && -d_.cam.y <= n + 50 && So(r, a + 88, n - 88, d_.beach[1], A_.BIOME[l.t], l.v & qo.LEFT), (l.v & qo.BOTTOM) > 0 && -d_.cam.x >= r - 235 - u && -d_.cam.x <= t + 350 && -d_.cam.y >= n - O - 275 && -d_.cam.y <= n + 490 && Lo(n - 230, r - 230, t + 230, d_.beach[2], A_.BIOME[l.t], l.v & qo.BOTTOM), (l.v & qo.TOP) > 0 && -d_.cam.x >= r - 235 - u && -d_.cam.x <= t + 350 && -d_.cam.y >= a - O - 390 && -d_.cam.y <= a + 315 && mo(a + 310, r - 230, t + 230, d_.beach[3], A_.BIOME[l.t], l.v & qo.TOP))
                }
            }(), Ao(), ui.quality && A_.mode !== qo.MODE_ZOMBIES && A_.mode !== qo.MODE_LEGACY && A_.mode !== qo.MODE_BR && (function () {
                var e = d_.desert;
                0 === e.tempest ? e.tempest_speed = Math.max(0, e.tempest_speed - R_ / 10) : e.tempest_speed = Math.min(1, e.tempest_speed + R_ / 10);
                for (var i = e.flakes, t = 0; t < i.length; t++) {
                    var r = i[t];
                    e.update(r), Co(k.DESERT, r.id, d_.cam.x + r.x, d_.cam.y + r.y, r.alpha)
                }
                for (t = 0; t < i.length; t++)((r = i[t]).life <= 0 || r.x > -d_.cam.x + u || r.x < -d_.cam.x - d_.cam.w / 2 || r.y > -d_.cam.y + O) && i.splice(t, 1);
                var n = -d_.cam.y;
                A_.dist_desert > -1e3 && e.add(n)
            }(), function () {
                var e = d_.winter;
                0 === e.tempest ? e.tempest_speed = Math.max(0, e.tempest_speed - R_ / 10) : e.tempest_speed = Math.min(1, e.tempest_speed + R_ / 10);
                for (var i = e.flakes, t = 0; t < i.length; t++) {
                    var r = i[t];
                    e.update(r), Co(k.FLAKES, r.id, d_.cam.x + r.x, d_.cam.y + r.y, r.alpha)
                }
                for (t = 0; t < i.length; t++)((r = i[t]).life <= 0 || r.x > -d_.cam.x + u || r.x < -d_.cam.x || r.y > -d_.cam.y + O) && i.splice(t, 1);
                var n = -d_.cam.y;
                A_.dist_winter > -1e3 && e.add(n)
            }(), function () {
                for (var e = d_.ash, i = e.flakes, t = 0; t < i.length; t++) {
                    var r = i[t];
                    e.update(r), Co(k.ASHES, r.id, d_.cam.x + r.x, d_.cam.y + r.y, r.alpha)
                }
                for (t = 0; t < i.length; t++)((r = i[t]).life <= 0 || r.x > -d_.cam.x + u || r.x < -d_.cam.x || r.y > -d_.cam.y + O) && i.splice(t, 1);
                var n = -d_.cam.y;
                A_.dist_lava > -1e3 && e.add(n)
            }()), A_.transition && e && (A_.transition = !1, A_.shade.v = 0, A_.shade.o = !1)
    }
    var Ho = 0,
        Po = 1,
        yo = 2,
        zo = 0,
        Bo = 1,
        Wo = 2;

    function Vo(e, i) {
        var t = e.getBoundingClientRect();
        return {
            x: i.clientX - t.left,
            y: i.clientY - t.top
        }
    }

    function Ko(e, i, t, r, n, a, o, s, _, E, T, A, d, I, h) {
        0 === e.length && (e = " "), void 0 === o && (o = 0), void 0 === s && (s = 0), void 0 === _ && (_ = 0), void 0 === I && (I = 0);
        var u = document.createElement("canvas"),
            O = u.getContext("2d");
        return O.textBaseline = "middle", O.font = (void 0 !== h ? h + " " : "") + r + "px " + i, n = void 0 !== n ? Math.min(O.measureText(e).width, n) : O.measureText(e).width, u.width = n + o, u.height = r + s, void 0 !== a && (void 0 !== T && (O.globalAlpha = T), O.fillStyle = a, void 0 !== A ? (roundRect(O, _ + 2, _, n + o - 2 * _ - 4, r + s - 2 * _, A), O.fill()) : O.fillRect(_, _, n + o - 2 * _, r + s - 2 * _), O.globalAlpha = 1, 0 !== _ && (O.lineWidth = _, O.strokeStyle = E, O.stroke())), O.textBaseline = "middle", O.font = (void 0 !== h ? h + " " : "") + r + "px " + i, void 0 !== d && (O.strokeStyle = d, O.lineWidth = I, O.lineJoin = "miter", O.miterLimit = 2, O.strokeText(e, Math.floor(o / 2), Math.floor(s / 2) + Math.floor(r / 2), n)), O.fillStyle = t, O.fillText(e, Math.floor(o / 2), Math.floor(s / 2) + Math.floor(r / 2), n), u.w2 = u.width / 2, u.h2 = u.height / 2, u
    }

    function wo(e, i, t, r, n, a, o, s, E, T, A) {
        if (void 0 === E && (E = 0), void 0 === s && (s = 0), void 0 === T && (T = 0), void 0 === A && (A = 1), 1 !== a && (a = 0), r) var d = r;
        var I, h = {
                width: e,
                height: i,
                img: d,
                state: zo,
                translate: {
                    x: s,
                    y: E,
                    _x: s,
                    _y: E
                },
                enable_breath: a,
                breath: 0,
                callback: o,
                position: T,
                active: A
            },
            u = function () {
                return h.img[h.state]
            },
            O = function (e) {
                var i = h.translate;
                return 0 !== h.width && 0 !== h.height || (h.width = h.img[0].width, h.height = h.img[0].height), e.x > i.x && e.x < i.x + h.width / n && e.y > i.y && e.y < i.y + h.height / n
            };
        a = function () {
            var e = 0;
            return 1 === h.enable_breath && (h.state === Bo || h.state === Wo ? h.breath = (h.breath + 1e3 * R_) % 1e3 : h.breath > 0 && (h.breath = h.breath > 500 ? h.breath + 1e3 * R_ : h.breath - 1e3 * R_, (h.breath < 0 || h.breath > 1e3) && (h.breath = 0)), e = .2 * _.ease_in_out_quad(h.breath > 500 ? (1e3 - h.breath) / 500 : h.breath / 500)), e
        };
        return 2 === (n = 3 === n ? 3 : 1 === n ? 2 : 1) ? I = function (e) {
            var i = 1 + a(),
                t = u(),
                r = h.width * i / 2,
                n = h.height * i / 2,
                o = (r - h.width / 2) / 2,
                s = (n - h.height / 2) / 2;
            on(e, t, h.translate.x - o, h.translate.y - s, r, n)
        } : 3 === n ? (I = function (e) {
            var i = u(),
                t = h.width,
                r = h.height,
                n = (t - h.width) / 2,
                a = (r - h.height) / 2;
            on(e, i, h.translate.x - n, h.translate.y - a, t, r)
        }, n = 1) : I = function (e) {
            on(e, u(), h.translate.x, h.translate.y)
        }, {
            info: h,
            trigger: function (e, i, t) {
                return O(i) ? (t == Po ? h.state = Wo : (t == yo || t == Ho && h.state != Wo) && (h.state = Bo), !0) : (h.state = zo, !1)
            },
            draw: I,
            in_button: O
        }
    }

    function Uo(e, i, t, r, n) {
        var a = {
            x: t,
            y: r,
            _x: t,
            _y: r
        };
        return {
            translate: a,
            draw: function (i) {
                on(i, e, a.x, a.y, e.width / 2, e.height / 2)
            },
            active: i,
            position: n
        }
    }
    var Yo = "1" === _.getURLData("id") ? 1 : 0,
        Fo = _.getURLData("password"),
        ko = {
            DELETE: 1,
            HURT: 2,
            COLD: 4,
            HUNGER: 8,
            ATTACK: 16,
            WALK: 32,
            IDLE: 64,
            HEAL: 128,
            WEB: 256
        },
        xo = [{
            price: 1e3,
            items: [
                [2, X.FIRE],
                [1, X.COOKED_MEAT],
                [8, X.PLANT],
                [1, X.BREAD]
            ]
        }, {
            price: 2e3,
            items: [
                [2, X.BIG_FIRE],
                [1, X.PICK_WOOD],
                [2, X.COOKED_MEAT],
                [16, X.PLANT],
                [2, X.BREAD]
            ]
        }, {
            price: 4e3,
            items: [
                [3, X.BIG_FIRE],
                [1, X.PICK],
                [4, X.COOKED_MEAT],
                [20, X.PLANT],
                [4, X.BREAD],
                [1, X.WORKBENCH],
                [80, X.STONE],
                [140, X.WOOD]
            ]
        }, {
            price: 8e3,
            items: [
                [1, X.BAG],
                [4, X.BIG_FIRE],
                [1, X.PICK_GOLD],
                [6, X.COOKED_MEAT],
                [30, X.PLANT],
                [6, X.BREAD],
                [1, X.WORKBENCH],
                [150, X.STONE],
                [200, X.WOOD],
                [60, X.GOLD],
                [2, X.BOTTLE_FULL]
            ]
        }, {
            price: 16e3,
            items: [
                [1, X.BAG],
                [1, X.PICK_DIAMOND],
                [1, X.BED],
                [7, X.CAKE],
                [2, X.BOTTLE_FULL],
                [2, X.BIG_FIRE],
                [1, X.FURNACE],
                [15, X.STONE_WALL],
                [2, X.STONE_DOOR],
                [1, X.TOTEM],
                [1, X.SPANNER],
                [200, X.STONE],
                [300, X.WOOD]
            ]
        }, {
            price: 16e3,
            items: [
                [1, X.BAG],
                [1, X.COAT],
                [1, X.SHOVEL_GOLD],
                [1, X.PICK_GOLD],
                [10, X.CAKE],
                [4, X.BOTTLE_FULL],
                [6, X.BIG_FIRE],
                [3, X.BANDAGE],
                [1, X.BOOK],
                [200, X.STONE],
                [300, X.WOOD]
            ]
        }, {
            price: 16e3,
            items: [
                [1, X.BAG],
                [1, X.HOOD],
                [1, X.HAMMER_GOLD],
                [3, X.BANDAGE],
                [1, 0],
                [1, X.PICK_GOLD],
                [7, X.CAKE],
                [2, X.BOTTLE_FULL],
                [4, X.BIG_FIRE],
                [150, X.STONE],
                [200, X.WOOD],
                [1, X.LOCKPICK]
            ]
        }, {
            price: 16e3,
            items: [
                [1, X.BAG],
                [1, X.PEASANT],
                [1, X.PICK_GOLD],
                [7, X.CAKE],
                [2, X.BOTTLE_FULL],
                [4, X.BIG_FIRE],
                [2, X.WINDMILL],
                [4, X.BREAD_OVEN],
                [10, X.PLOT],
                [6, X.WHEAT_SEED],
                [4, X.SEED],
                [1, X.WATERING_CAN_FULL],
                [500, X.WOOD]
            ]
        }, {
            price: 16e3,
            items: [
                [1, X.BAG],
                [1, X.PICK_GOLD],
                [16, X.FOODFISH_COOKED],
                [1, X.BOTTLE_FULL],
                [6, X.BIG_FIRE],
                [3, X.BANDAGE],
                [1, X.DIVING_MASK],
                [1, X.SWORD],
                [16, X.BRIDGE],
                [150, X.STONE],
                [200, X.WOOD]
            ]
        }, {
            price: 2e4,
            items: [
                [1, X.BAG],
                [1, X.PICK_GOLD],
                [1, X.CAKE],
                [1, X.BOTTLE_FULL],
                [3, X.BIG_FIRE],
                [3, X.BANDAGE],
                [1, X.GOLD_HELMET],
                [1, X.SWORD_GOLD],
                [1, X.DIAMOND_SPEAR],
                [2, X.GOLD_SPIKE],
                [50, X.STONE],
                [100, X.WOOD]
            ]
        }],
        Jo = {
            VERSION_NUMBER: 52,
            TIMEOUT_TIME: 2e3,
            TIMEOUT_NUMBER: 3,
            PING: "[13]",
            PING_DELAY: 6e4,
            ROTATE: .2,
            ATTACK: .2,
            SLOW_ATTACK: .58,
            CAM_DELAY: 50,
            MUTE_DELAY: 125e3,
            TIMEOUT_SERVER: 6e5,
            WAITING_FOR_SERVER: 8e3,
            DELAY_CONNECTION_UPDATE: 5,
            LAG_DISTANCE: 200,
            LOOSE_FOCUS: 15,
            TOKEN_LEN: 14,
            TEAM_MANAGE: 0,
            TEAM_SHOW: 1,
            TEAM_LEAVE: 2,
            TEAM_JOIN: 3,
            TEAM_FULL: 4,
            SKIN_MAX: 20,
            ACCESSORY_MAX: 14,
            SYMBOL_MAX: 4
        };

    function Xo() {
        var e = this;
        this.socket = null, this._current_id = 0, this.server_list = [], this.mode_list = [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ], this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1], this.current_mode = 0, this.privateServer = 0, this.xhttp = new XMLHttpRequest, this.xhttp.onreadystatechange = function () {
            4 == this.readyState && 200 == this.status ? e.fun_after(!0, 4) : e.fun_after(!1, this.readyState)
        }, this.xhttp_get = function (e, i) {
            this.fun_after = e, this.xhttp.open("GET", i, !0), this.xhttp.send()
        }, this.store_server_list = function (e) {
            const i = [];
            for (let t = 0; t < e.length; t++) {
                const r = e[t];
                let n = {
                    nu: r.players,
                    m: r.maxPlayers,
                    i: r.ip,
                    p: r.port ?? 80,
                    a: r.name,
                    ssl: r.ssl ?? 1,
                    mode: r.mode ?? "legacy"
                };
                i.push(n)
            }
            this.server_list = i
        }, this.geolocate_server = function (e) {
            for (var i = [], t = 0; t < e.length; t++) - 1 !== e[t].a.indexOf(U) && i.push(t);
            return 0 === i.length ? 0 : i[Math.floor(Math.random() * i.length)]
        }, this.set_server_list = function (e) {
            for (var i = 0, t = 0; t < e.length; t++) i += e[t].nu;
            var r = document.getElementById("servselect"); - 1 === E_.selected_server[E_.current_mode] ? E_.selected_server[E_.current_mode] = r.selectedIndex = E_.geolocate_server(e) : r.selectedIndex = E_.selected_server[E_.current_mode];
            var n = '<label for="ul-id"><button type="button" class="ng-binding">' + e[r.selectedIndex].a + (e[r.selectedIndex].nu > 0 ? " [" + e[r.selectedIndex].nu + " " + Ie[TEXT.PLAYERS] + "]" : "") + '</button></label><ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id"><li role="option" id="selectDisabled">' + Ie[TEXT.CHOOSE] + " (" + this.total_players + ") " + Ie[TEXT.TOTAL_PLAYERS] + "</li>";
            for (t = 0; t < e.length; t++) n += '<li role="option">' + e[t].a, n += " [" + e[t].nu + " " + Ie[TEXT.PLAYERS] + "]", n += "</li>\n";
            n += '<li role="option" id="selectDisabled">(' + i + ") " + Ie[TEXT.TOTAL_MODE] + "</li>", n += "</div>", r.innerHTML = n, $(".md-select").on("click", (function () {
                $(this).toggleClass("active")
            })), $(".md-select ul li").on("click", (function () {
                for (var e = $(this).text(), i = -1, t = E_.mode_list[E_.current_mode], r = 0; r < t.length; r++)
                    if (t[r].a + " [" + t[r].nu + " " + Ie[TEXT.PLAYERS] + "]" === e) {
                        i = r;
                        break
                    } - 1 !== i && (document.getElementById("servselect").selectedIndex = i, E_.selected_server[E_.current_mode] = i, $(".md-select ul li").removeClass("active"), $(this).addClass("active"), $(".md-select label button").text(e))
            }))
        }, this.total_players = 0, this.update_server_list = function () {
            this.total_players = 0;
            for (var e = 0; e < E_.server_list.length; e++) {
                const i = this.server_list[e];
                switch (i.mode) {
                case "com":
                    this.mode_list[6].push(i);
                    break;
                case "exp":
                    this.mode_list[7].push(i);
                    break;
                case "legacy":
                    this.mode_list[4].push(i);
                    break;
                case "normal":
                    this.mode_list[0].push(i);
                    break;
                case "vampire":
                    this.mode_list[3].push(i);
                    break;
                case "zombie":
                    this.mode_list[1].push(i);
                    break;
                default:
                    throw Error("Not found displayServer type")
                }
                this.total_players += i.nu
            }
            for (e = 0; e < this.mode_list.length; e++) 0 === this.mode_list[e].length && this.mode_list[e].push({
                a: Ie[TEXT.COMMING_SOON],
                nu: 0,
                i: "127.0.0.1",
                p: 80
            });
            this.set_server_list(this.mode_list[0]), this.select_gamemode = function (e) {
                E_.current_mode = e, E_.set_server_list(E_.mode_list[E_.current_mode]), E_.set_server_list(E_.mode_list[E_.current_mode]), document.getElementById("servselect").selectedIndex = E_.current_mode
            }
        }, this.timeout_server = 0, this.timeout_number = 0, this.timeout_handler = null, this.timeout = function () {
            e.timeout_number++, e.socket.close(), e.timeout_number > Jo.TIMEOUT_NUMBER ? (ui.error_level = Jo.ERROR_REFUSED, e.new_alert(Ie[TEXT.YOU_CANNOT_JOIN]), ui.waiting = !1, d_.reconnect.enabled && h_.quit(ui.run)) : e.connect_timeout()
        }, this.kick = function (e) {
            this._current_id == this.socket._current_id && (this._current_id++, this.new_alert(Ie[TEXT.KICKED] + e), h_.quit(ui.run))
        }, this.mute = function () {
            this.new_alert("You speak too much")
        }, this.already_used_key = function () {
            clearTimeout(this.timeout_handler), this.new_alert(Ie[TEXT.KEY_ALREADY]), ui.waiting = !1
        }, this.hide_shop_kit = function () {
            d_.shop.open = !1
        }, this.hide_recipe_book = function () {
            h_.show_recipe_book = 0
        }, this.hide_clock = function () {
            h_.show_clock = 0
        }, this.sand_tempest = function (e) {
            d_.desert.tempest = e, A_.dist_desert > -300 && (0 === e ? this.new_alert(Ie[TEXT.TEMPEST_OFF]) : this.new_alert(Ie[TEXT.TEMPEST_ON]))
        }, this.bandage = function (e) {
            d_.bandage = e
        }, this.blizzard_status = function (e) {
            d_.blizzard = e
        }, this.blizzard = function (e) {
            d_.winter.tempest = e, A_.dist_winter > -300 && (0 === e ? this.new_alert(Ie[TEXT.BLIZZARD_OFF]) : this.new_alert(Ie[TEXT.BLIZZARD_ON]))
        }, this.explorer_quest = function (e) {
            0 === e ? document.getElementById("exploreForest").src = "img/forest-leaf-ok.png" : 1 === e ? document.getElementById("exploreWinter").src = "img/winter-flake-ok.png" : 2 === e ? document.getElementById("exploreLava").src = "img/lava-volcano-ok.png" : 3 === e && (document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png")
        }, this.hide_market = function () {
            h_.show_market = 0
        }, this.hide_quest = function () {
            h_.show_quest = 0
        }, this.clean_inventory = function () {
            d_.inv.can_select = [], d_.inv.n = [], d_.inv.id = -1, d_.inv.drag.stop(), d_.craft.can_craft = [], d_.craft.crafting = !1, d_.craft.can_build = !1, d_.craft.preview = -1, d_.craft.id = -1, d_.craft.workbench = !1, d_.craft.well = !1, d_.craft.fire = !1, d_.craft.water = !1, d_.craft.timeout = new _.LinearAnimation(!1, 0, 1, 0, 1, 1)
        }, this.wrong_key = function () {
            clearTimeout(this.timeout_handler), this.new_alert(), ui.waiting = !1
        }, this.commands = function (e) {
            for (var i = 0; i < e.length; i++) "string" == typeof e[i] && (e[i] = _.escape_html(e[i]));
            d_.terminal.write_command(e[1], e[2], e[3], e[4] instanceof Array ? d_.terminal.create_array(e[4], e.length > 5 ? e[5] : []) : e[4])
        }, this.message = function (e) {
            this.new_alert(e)
        }, this.wrong_password = function () {
            clearTimeout(this.timeout_handler), this.new_alert(Ie[TEXT.WRONG_PASSWORD]), ui.waiting = !1
        }, this.new_version = function () {
            clearTimeout(this.timeout_handler), this.new_alert(Ie[TEXT.NEW_VERSION]), ui.waiting = !1
        }, this.old_version = function () {
            clearTimeout(this.timeout_handler), this.new_alert(Ie[TEXT.OLD_VERSION]), ui.waiting = !1
        }, this.denied_with_callback = function (e) {
            clearTimeout(this.timeout_handler), this.new_alert(e), ui.waiting = !1
        }, this.get_bag = function () {
            d_.inv.update_bag_size(1, 0), h_.update_inv_buttons()
        }, this.verified_account = function (e) {
            var i = e[1],
                t = A_.players[i];
            t.skin = e[2], t.accessory = e[3], t.baglook = e[4], t.book = e[5], t.crate = e[6], t.dead = e[7], t.level = e[8];
            var r = A_.fast_units[i * A_.max_units];
            r && (r.skin = e[2], r.accessory = e[3], r.baglook = e[4], r.book = e[5])
        }, this.build_stop = function (e) {
            e === X.BAG ? (d_.inv.update_bag_size(1, 0), h_.update_inv_buttons()) : this.gather([0, e, 1]), d_.craft.restart()
        }, this.recycle_ok = function (e) {
            d_.auto_feed.delay = 0, d_.craft.do_recycle(e)
        }, this.recycle_stop = function (e) {
            for (var i = ae[e].r, t = 0; t < i.length; t++)
                if (d_.inv.max > d_.inv.can_select.length || d_.inv.n[i[t][0]] > 0) {
                    var r = Math.floor(.8 * i[t][1]);
                    if (!r) continue;
                    this.gather([0, i[t][0], r])
                } d_.craft.restart()
        }, this.build_ok = function (e) {
            d_.auto_feed.delay = 0, d_.craft.do_craft(e)
        }, this.new_alert = function (e) {
            d_.alert.text ? e !== d_.alert.text && e !== d_.alert.list[d_.alert.list.length - 1] && d_.alert.list.push(e) : d_.alert.text = e
        }, this.no_resources = function () {
            this.new_alert(Ie[TEXT.NO_MORE_RESOURCES])
        }, this.survive = function () {
            var e;
            e = 0 == d_.day ? Ie[TEXT.SURVIVED_1DAY] : Ie[TEXT.SURVIVED] + (d_.day + 1) + Ie[TEXT.DAYS], this.new_alert(e), d_.day++
        }, this.fail_restore = function () {
            clearTimeout(e.timeout_handler), d_.reconnect.enabled = !1, d_.alive = !1, this.new_alert(Ie[TEXT.DEAD_SAD]), h_.quit(ui.run), this.socket.close()
        }, this.blocked = function () {
            clearTimeout(this.timeout_handler), this.new_alert(Ie[TEXT.SPAM_ME]), ui.waiting = !1
        }, this.kicked_before_join = function (e) {
            clearTimeout(this.timeout_handler), this.new_alert(e), ui.waiting = !1
        }, this.full = function () {
            clearTimeout(this.timeout_handler), this.new_alert(Ie[TEXT.SPAM_ME2]), ui.waiting = !1
        }, this.throttle = function () {
            clearTimeout(this.timeout_handler), this.new_alert("Connection throttled, spam play button!"), ui.waiting = !1
        }, this.new_player = function (e) {
            var i = e[1],
                t = A_.players;
            t[i].nickname = e[2], t[i].skin = e[3], t[i].accessory = e[4], t[i].baglook = e[5], t[i].book = e[6], t[i].crate = e[7], t[i].dead = e[8], t[i].level = e[9], t[i].score = 0, t[i].ldb_label = null, t[i].label = null, t[i].label_winter = null, t[i].alive = !0, 1 === Yo && (t[i].nickname += "|" + i)
        }, this.get_focus = function () {
            this.asdsfdsfdsovcxcvldslv([11]), console.log("[Famishs] Camera lost , restoring packet")
        }, this.empty_res = function () {
            this.new_alert(Ie[TEXT.EMPTY])
        }, this.inv_full = function () {
            this.new_alert(Ie[TEXT.INV_FULL])
        }, this.choose_kit = function (e) {
            this.asdsfdsfdsovcxcvldslv([21, e]), d_.shop.open = !1
        }, this.kit_ok = function (e) {
            for (var i = xo[e - 1].items, t = 0; t < i.length && d_.inv.max > d_.inv.can_select.length; t++) {
                var r = i[t][1],
                    n = i[t][0];
                i[t][1] === X.BAG ? d_.inv.update_bag_size(1, 0) : this.gather([0, r, n])
            }
        }, this.gather = function (e) {
            for (var i = e.length, t = d_.inv, r = 1; r < i; r += 2) {
                for (var n = e[r], a = e[r + 1], o = 0; o < t.can_select.length; o++)
                    if (t.can_select[o].id == n) {
                        t.n[n] += a;
                        break
                    } o == t.can_select.length && (t.n[n] = a, t.can_select.push(h_.inv_buttons[n]), h_.update_inv_buttons())
            }
            d_.craft.update()
        }, this.gauges = function (e, i, t, r, n, a, o) {
            d_.gauges.l = e / 100, d_.gauges.h = i / 100, d_.gauges.c = t / 100, d_.gauges.t = r / 100, d_.gauges.o = n / 100, d_.gauges.wa = a / 100, d_.bandage = o
        }, this.succeed_quest = function (e) {
            h_.quests.modify(e, 2)
        }, this.fail_quest = function (e) {
            h_.quests.modify(e, 0)
        }, this.claimed = function (e) {
            h_.quests.modify(e, 3)
        }, this.gauges_life = function (e, i) {
            d_.gauges.l = e / 100, d_.bandage = i
        }, this.gauges_water = function (e) {
            d_.gauges.t = e / 100
        }, this.gauges_food = function (e) {
            d_.gauges.h = e / 100
        }, this.gauges_warm = function (e) {
            d_.gauges.wa = e / 100
        }, this.gauges_cold = function (e) {
            d_.gauges.c = e / 100
        }, this.get_time = function (e) {
            console.log(e), A_.time = e[1], A_.transition = !0, u_.transition = 1
        }, this.change_ground = function () {
            document.getElementById("game_body").style.backgroundColor = k.GROUND[A_.time]
        }, this.kill_player = function (e) {
            A_.mode == qo.MODE_HUNGER_GAMES && "spectator" !== A_.players[e].nickname && this.new_alert(A_.players[e].nickname + Ie[TEXT.DEAD]), A_.players[e].alive = !1
        }, this.set_cam = function (e) {
            var i = new Uint16Array(e);
            player.cam.change(i[1], i[2])
        }, this.recover_focus = function (e) {
            var i = new is(0, d_.id, d_.id, e[3], e[4], e[5], e[6], e[7], e[8], e[9]);
            A_.fast_units[1e3 * d_.id] = i, d_.cam.change(x, y)
        }, this.remove_entity = function (e) {
            for (var i = new Uint16Array(e), t = (i.length - 1) / 4, r = 0; r < t; r++) {
                var n = 4 * r,
                    a = i[1 + n],
                    o = i[2 + n] * A_.max_units + a;
                A_.delete_units(o)
            }
        }, this.hitten = function (e, i = 0) {
            var t = new Uint16Array(e),
                r = (t.length - 1) / 4;
            if (0 == i)
                for (var n = 0; n < r; n++) {
                    var a, o = t[1 + (A = 4 * n)],
                        s = t[2 + A],
                        _ = (t[3 + A] >> 1) / 127 * Math.PI * 2,
                        E = t[4 + A],
                        T = s_.tiles[s][o];
                    switch (E) {
                    case 0:
                        (a = T.p[0][0]).angle = _, a.update = !0;
                        break;
                    case 1:
                        (a = T.s[0][0]).angle = _, a.update = !0;
                        break;
                    case 2:
                        (a = T.s[1][0]).angle = _, a.update = !0;
                        break;
                    case 3:
                        (a = T.s[2][0]).angle = _, a.update = !0;
                        break;
                    case 4:
                        (a = T.t[0][0]).angle = _, a.update = !0;
                        break;
                    case 5:
                        (a = T.t[1][0]).angle = _, a.update = !0;
                        break;
                    case 6:
                        (a = T.t[2][0]).angle = _, a.update = !0;
                        break;
                    case 7:
                        (a = T.t[3][0]).angle = _, a.update = !0;
                        break;
                    case 8:
                        (a = T.t[4][0]).angle = _, a.update = !0;
                        break;
                    case 9:
                        (a = T.t[5][0]).angle = _, a.update = !0;
                        break;
                    case 10:
                        (a = T.g[0][0]).angle = _, a.update = !0;
                        break;
                    case 11:
                        (a = T.g[1][0]).angle = _, a.update = !0;
                        break;
                    case 12:
                        (a = T.g[2][0]).angle = _, a.update = !0;
                        break;
                    case 13:
                        (a = T.d[0][0]).angle = _, a.update = !0;
                        break;
                    case 14:
                        (a = T.d[1][0]).angle = _, a.update = !0;
                        break;
                    case 15:
                        (a = T.d[2][0]).angle = _, a.update = !0;
                        break;
                    case 16:
                        (a = T.b[0][0]).angle = _, a.update = !0;
                        break;
                    case 17:
                        (a = T.b[1][0]).angle = _, a.update = !0;
                        break;
                    case 18:
                        (a = T.b[2][0]).angle = _, a.update = !0;
                        break;
                    case 19:
                        (a = T.b[3][0]).angle = _, a.update = !0;
                        break;
                    case 20:
                        (a = T.f[0][0]).angle = _, a.update = !0;
                        break;
                    case 21:
                        (a = T.f[1][0]).angle = _, a.update = !0;
                        break;
                    case 22:
                        (a = T.f[2][0]).angle = _, a.update = !0;
                        break;
                    case 23:
                        (a = T.sw[0][0]).angle = _, a.update = !0;
                        break;
                    case 24:
                        (a = T.sw[1][0]).angle = _, a.update = !0;
                        break;
                    case 25:
                        (a = T.sw[2][0]).angle = _, a.update = !0;
                        break;
                    case 26:
                        (a = T.gw[0][0]).angle = _, a.update = !0;
                        break;
                    case 27:
                        (a = T.gw[1][0]).angle = _, a.update = !0;
                        break;
                    case 28:
                        (a = T.gw[2][0]).angle = _, a.update = !0;
                        break;
                    case 29:
                        (a = T.dw[0][0]).angle = _, a.update = !0;
                        break;
                    case 30:
                        (a = T.dw[1][0]).angle = _, a.update = !0;
                        break;
                    case 31:
                        (a = T.dw[2][0]).angle = _, a.update = !0;
                        break;
                    case 32:
                        (a = T.a[0][0]).angle = _, a.update = !0;
                        break;
                    case 33:
                        (a = T.a[1][0]).angle = _, a.update = !0;
                        break;
                    case 34:
                        (a = T.a[2][0]).angle = _, a.update = !0;
                        break;
                    case 35:
                        (a = T.cs[0][0]).angle = _, a.update = !0;
                        break;
                    case 36:
                        (a = T.cs[1][0]).angle = _, a.update = !0;
                        break;
                    case 37:
                        (a = T.cs[2][0]).angle = _, a.update = !0;
                        break;
                    case 38:
                        (a = T.cs[3][0]).angle = _, a.update = !0;
                        break;
                    case 40:
                        (a = T.plm[0][0]).angle = _, a.update = !0;
                        break;
                    case 41:
                        (a = T.plm[1][0]).angle = _, a.update = !0;
                        break;
                    case 42:
                        (a = T.plm[2][0]).angle = _, a.update = !0;
                        break;
                    case 50:
                        (a = T.re[0][0]).angle = _, a.update = !0;
                        break;
                    case 51:
                        (a = T.re[1][0]).angle = _, a.update = !0;
                        break;
                    case 52:
                        (a = T.re[2][0]).angle = _, a.update = !0;
                        break;
                    case 55:
                        (a = T.c[0][0]).angle = _, a.update = !0;
                        break;
                    case 56:
                        (a = T.m[0][0]).angle = _, a.update = !0;
                        break;
                    case 57:
                        (a = T.m[1][0]).angle = _, a.update = !0;
                        break;
                    case 58:
                        (a = T.m[2][0]).angle = _, a.update = !0
                    }
                }
            if (1 == i)
                for (n = 0; n < r; n++) {
                    E = t[1 + (A = 4 * n)];
                    var A, d = t[2 + A],
                        I = (_ = (t[3 + A] >> 1) / 127 * Math.PI * 2, A_.fast_units[d * A_.max_units + E]);
                    I && I.hit && (I.hit.angle = _, I.hit.update = _)
                }
        }, this.resurrection = function () {
            this.asdsfdsfdsovcxcvldslv([17, d_.resurrection.pid, d_.resurrection.iid])
        }, this.give_wheat = function (e, i) {
            this.asdsfdsfdsovcxcvldslv([22, i, e.pid, e.iid])
        }, this.give_bread_oven = function (e, i, t) {
            i ? this.asdsfdsfdsovcxcvldslv([25, i, e.pid, e.iid]) : this.asdsfdsfdsovcxcvldslv([24, t, e.pid, e.iid])
        }, this.take_bread = function (e) {
            this.asdsfdsfdsovcxcvldslv(JSON.stringify.stringify([26, e.pid, e.iid]))
        }, this.claim_quest_reward = function (e) {
            this.asdsfdsfdsovcxcvldslv([27, e])
        }, this.give_well = function (e) {
            this.asdsfdsfdsovcxcvldslv([30, e.pid, e.iid])
        }, this.give_wood_extractor = function (e, i) {
            this.asdsfdsfdsovcxcvldslv([38, i, e.pid, e.iid, e.type])
        }, this.give_wood = function (e, i) {
            this.asdsfdsfdsovcxcvldslv([12, i, e.pid, e.iid])
        }, this.give_item = function (e, i, t) {
            this.asdsfdsfdsovcxcvldslv([8, i, t, e.pid, e.iid])
        }, this.take_extractor = function (e) {
            this.asdsfdsfdsovcxcvldslv([37, e.pid, e.iid, e.type])
        }, this.take_flour = function (e) {
            this.asdsfdsfdsovcxcvldslv([23, e.pid, e.iid])
        }, this.take_chest = function (e) {
            this.asdsfdsfdsovcxcvldslv([9, e.pid, e.iid])
        }, this.unlock_chest = function (e) {
            this.asdsfdsfdsovcxcvldslv([15, e.pid, e.iid])
        }, this.lock_chest = function (e) {
            this.asdsfdsfdsovcxcvldslv([16, e.iid])
        }, this.kick_team = function (i) {
            e.asdsfdsfdsovcxcvldslv([20, d_.totem.id, d_.team[i]])
        }, this.join_team = function () {
            e.asdsfdsfdsovcxcvldslv([18, d_.totem.pid, d_.totem.id])
        }, this.leave_team = function () {
            e.asdsfdsfdsovcxcvldslv([19])
        }, this.lock_team = function () {
            e.asdsfdsfdsovcxcvldslv([35, d_.totem.id]), "LOCK" == document.getElementById("lock_team").innerHTML ? (d_.totem.lock = 1, document.getElementById("lock_team").innerHTML = "UNLOCK") : (d_.totem.lock = 0, document.getElementById("lock_team").innerHTML = "LOCK")
        }, this.units = function (e, i, t) {
            var r = new Uint16Array(e);
            t && A_.delete_all_units();
            for (var n = (i.length - 2) / 18, a = 0; a < n; a++) {
                var o = 2 + 18 * a,
                    s = 1 + 9 * a,
                    E = i[o],
                    T = r[s + 1],
                    A = r[s + 5],
                    d = E * A_.max_units + A;
                if (T & ko.DELETE) A_.delete_units(d);
                else {
                    var I = r[s + 2],
                        h = r[s + 3],
                        u = r[s + 4],
                        O = r[s + 6],
                        l = r[s + 7],
                        R = r[s + 8],
                        c = i[o + 1] / 255 * Math.PI * 2;
                    if (A_.fast_units[d]) {
                        var C = A_.fast_units[d];
                        C.r.x = h, C.r.y = u, 0 != E && _.dist(C, C.r) > Jo.LAG_DISTANCE && (C.x = h, C.y = u), C.id === d_.id && 0 !== E || (C.nangle = c), C.action |= T, C.info = O, C.speed = l, C.extra = R, C.update && C.update(T)
                    } else {
                        var g = new is(I, E, A, h, u, c, T, O, l, R);
                        A_.fast_units[d] = g, A_.units[I].push(g)
                    }
                }
            }
        }, this.leaderboard = function (e) {
            this.timeout_server = c_, d_.ldb.init(e)
        }, this.new_recipes = function (e) {
            if (void 0 !== ne && (ae = ne), e.length > 0) {
                ne = JSON.parse(JSON.stringify(ae));
                for (var i = 0; i < e.length; i++) {
                    var t = e[i],
                        r = ae[t.item];
                    console.log(t, r), void 0 !== r && (r.r = t.recipe, r.w = t.workbench, r.f = t.fire, r.o = t.water, r.e = t.well, r.time = 1 / t.time)
                }
            }
        }, this.welcome = function (e) {
            e && 0 !== e.length ? d_.welcome.message = function (e) {
                var i = document.createElement("canvas"),
                    t = i.getContext("2d");
                for (t.lineJoin = "round"; - 1 !== e.indexOf("\\n");) e = e.replace("\\n", "\n");
                e = e.split("\n"), color = [];
                var r = 18 * e.length + 10,
                    n = 0;
                t.font = "14px Baloo Paaji";
                for (var a = 0; a < e.length; a++) "#" === e[a].charAt(0) ? (color[a] = e[a].substring(0, 7), e[a] = e[a].substring(8)) : color[a] = "#FFFFFF", n = Math.max(t.measureText(e[a]).width + 16, n);
                for (i.height = r, i.width = n, a = 0; a < e.length; a++) {
                    var o = zi(1, e[a], 14, color[a], null, null, null, null, null, "#000", 6);
                    t.drawImage(o, 8, 18 * a + 5)
                }
                return i
            }(e) : d_.welcome.message = void 0
        }, this.chat = function (e) {
            var i = A_.fast_units[e[1] * A_.max_units];
            i && (A_.mode === qo.MODE_ZOMBIES && i.skin === qo.ZOMBIE_SKIN ? d_.zombie ? Math.random() > .5 ? i.text.push(e[2] + " ..." + ZOMBIE_GRUMBLE) : i.text.push(ZOMBIE_GRUMBLE + "... " + e[2]) : i.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]) : i.text.push(e[2]))
        }, this.select_craft = function (e) {
            return d_.inv.max !== d_.inv.can_select.length || ae[e].id2 === X.BAG || -1 != d_.inv.find_item(ae[e].id2) || d_.inv.free_place(ae[e].r) ? (this.asdsfdsfdsovcxcvldslv([7, e]), 1) : (this.inv_full(), 0)
        }, this.workbench = function (e) {
            d_.craft.set_workbench(e)
        }, this.well = function (e) {
            d_.craft.well = e, d_.craft.update()
        }, this.fire = function (e) {
            d_.craft.fire = e, d_.craft.update()
        }, this.water = function (e) {
            d_.craft.water = e, d_.craft.update()
        }, this.dont_harvest = function () {
            this.new_alert(Ie[TEXT.WRONG_TOOL])
        }, this.cancel_craft = function () {
            d_.craft.restart()
        }, this.minimap = function (e) {
            h_.minimap.players = [];
            for (var i = A_.fast_units[d_.uid], t = 0, r = 1; r < e.length; r += 2) {
                var n = {
                    x: Math.floor(e[r] * A_.w / 250),
                    y: Math.floor(e[r + 1] * A_.h / 250)
                };
                i && !t && !d_.spectator && _.dist(n, i) < 250 ? t += 1 : h_.minimap.players.push(n)
            }
        }, this.reborn = function () {
            d_.resurrection.open = !1, d_.ghost.enabled = !1, d_.ghost.delay = -1, d_.ghost.label = null, d_.ghost.sec = null, d_.ghost.now = -1
        }, this.ghost = function (e) {
            qo.GHOST_DELAY = e, d_.ghost.enabled = !0, d_.ghost.delay = (new Date).getTime(), d_.ghost.label = null, d_.ghost.now = -1;
            for (var i = [X.SUPER_HAMMER, X.DRAGON_HEART, X.SWORD_WOOD, X.SWORD, X.SWORD_GOLD, X.SWORD_DIAMOND, X.SWORD_AMETHYST, X.REIDITE_SWORD, X.DRAGON_SWORD, X.LAVA_SWORD, X.PIRATE_SWORD, X.SPEAR, X.WOOD_SPEAR, X.GOLD_SPEAR, X.DIAMOND_SPEAR, X.AMETHYST_SPEAR, X.REIDITE_SPEAR, X.DRAGON_SPEAR, X.LAVA_SPEAR, X.CRAB_SPEAR, X.WOOD_BOW, X.STONE_BOW, X.GOLD_BOW, X.DIAMOND_BOW, X.AMETHYST_BOW, X.REIDITE_BOW, X.DRAGON_BOW, X.WOOD_SHIELD, X.STONE_SHIELD, X.GOLD_SHIELD, X.DIAMOND_SHIELD, X.AMETHYST_SHIELD, X.REIDITE_SHIELD, X.WAND1, X.WAND2, X.PICK_WOOD, X.PICK, X.PICK_GOLD, X.PICK_DIAMOND, X.PICK_AMETHYST, X.PICK_REIDITE, X.SPANNER, X.PITCHFORK, X.PITCHFORK2], t = 0; t < i.length; t++) {
                var r = d_.inv.find_item(i[t]); - 1 != r && d_.inv.delete_item(i.length[t], r)
            }
            d_.craft.restart()
        }, this.decrease_item2 = function (e, i, t) {
            this.decrease_item(e, 256 * i + t)
        }, this.decrease_item = function (e, i) {
            d_.craft.preview = -1, d_.inv.decrease(e, i, d_.inv.find_item(e)), d_.craft.update()
        }, this.accept_build = function (e) {
            d_.craft.preview = -1, d_.build.wait = !0;
            var i = d_.inv.find_item(e);
            d_.inv.decrease(e, 1, i), i >= 0 && !d_.inv.n[e] && d_.craft.update(), e == X.TOTEM && (d_.team = [d_.id])
        }, this.cancel_crafting = function () {
            this.asdsfdsfdsovcxcvldslv([31])
        }, this.buy_market = function (e) {
            this.asdsfdsfdsovcxcvldslv([32, e.val, e.id])
        }, this.update_sign = function (e, i) {
            this.asdsfdsfdsovcxcvldslv([33, e, i])
        }, this.send_build = function () {
            var e = A_.fast_units[d_.uid];
            if (e) {
                var i = 2 * Math.PI;
                this.asdsfdsfdsovcxcvldslv([108, d_.craft.preview, Math.floor((e.angle + i) % i * 255 / i), d_.craft.mode])
            }
        }, this.select_inv = function (e) {
            switch (e) {
            case X.BANDAGE:
            case X.PLANT:
            case X.MEAT:
            case X.COOKED_MEAT:
            case X.SANDWICH:
            case X.BOTTLE_FULL:
            case X.COOKIE:
            case X.CAKE:
            case X.ICE:
            case X.BREAD:
            case X.PUMPKIN:
            case X.TOMATO:
            case X.CACTUS:
            case X.CARROT:
            case X.WATERMELON:
            case X.ALOE_VERA:
            case X.GARLIC:
            case X.FOODFISH:
            case X.FOODFISH_COOKED:
            case X.CRAB_STICK:
            case X.CRAB_LOOT:
            case X.CANDY:
            case X.SUGAR_CAN:
                d_.craft.preview = -1, this.asdsfdsfdsovcxcvldslv([5, e]);
                break;
            case X.WORKBENCH:
            case X.SPIKE:
            case X.SEED:
            case X.WHEAT_SEED:
            case X.PUMPKIN_SEED:
            case X.TOMATO_SEED:
            case X.CARROT_SEED:
            case X.GARLIC_SEED:
            case X.THORNBUSH_SEED:
            case X.WATERMELON_SEED:
            case X.ALOE_VERA_SEED:
            case X.FIRE:
            case X.WALL:
            case X.STONE_WALL:
            case X.GOLD_WALL:
            case X.DIAMOND_WALL:
            case X.BIG_FIRE:
            case X.CHEST:
            case X.RESURRECTION:
            case X.EMERALD_MACHINE:
            case X.WOOD_DOOR:
            case X.STONE_DOOR:
            case X.GOLD_DOOR:
            case X.DIAMOND_DOOR:
            case X.AMETHYST_DOOR:
            case X.REIDITE_DOOR:
            case X.WOOD_DOOR_SPIKE:
            case X.STONE_DOOR_SPIKE:
            case X.GOLD_DOOR_SPIKE:
            case X.DIAMOND_DOOR_SPIKE:
            case X.AMETHYST_DOOR_SPIKE:
            case X.REIDITE_DOOR_SPIKE:
            case X.STONE_SPIKE:
            case X.GOLD_SPIKE:
            case X.DIAMOND_SPIKE:
            case X.FURNACE:
            case X.AMETHYST_WALL:
            case X.AMETHYST_SPIKE:
            case X.REIDITE_WALL:
            case X.REIDITE_SPIKE:
            case X.BRIDGE:
            case X.ROOF:
            case X.PLOT:
            case X.WINDMILL:
            case X.EXTRACTOR_MACHINE_STONE:
            case X.EXTRACTOR_MACHINE_GOLD:
            case X.EXTRACTOR_MACHINE_DIAMOND:
            case X.EXTRACTOR_MACHINE_AMETHYST:
            case X.EXTRACTOR_MACHINE_REIDITE:
            case X.BED:
            case X.GARLAND:
            case X.WELL:
            case X.SIGN:
            case X.BREAD_OVEN:
            case X.TOTEM:
            case X.WOOD_TOWER:
                d_.zombie || (d_.craft.preview === e ? d_.craft.preview = -1 : d_.craft.preview = e);
                break;
            case X.SWORD:
            case X.SWORD_WOOD:
            case X.SWORD_GOLD:
            case X.SWORD_DIAMOND:
            case X.SWORD_AMETHYST:
            case X.REIDITE_SWORD:
            case X.PIRATE_SWORD:
            case X.DRAGON_SWORD:
            case X.LAVA_SWORD:
            case X.WOOD_BOW:
            case X.STONE_BOW:
            case X.GOLD_BOW:
            case X.DIAMOND_BOW:
            case X.AMETHYST_BOW:
            case X.REIDITE_BOW:
            case X.DRAGON_BOW:
            case X.WAND1:
            case X.WAND2:
            case X.WOOD_SPEAR:
            case X.SPEAR:
            case X.GOLD_SPEAR:
            case X.DIAMOND_SPEAR:
            case X.AMETHYST_SPEAR:
            case X.AMETHYST_REIDITE:
            case X.DRAGON_SPEAR:
            case X.LAVA_SPEAR:
            case X.REIDITE_SPEAR:
            case X.CRAB_SPEAR:
                if (!d_.zombie) d_.craft.preview = -1, (i = A_.fast_units[d_.uid]) && i.right === e ? this.asdsfdsfdsovcxcvldslv([5, X.HAND]) : (d_.weapon.wait = !0, this.asdsfdsfdsovcxcvldslv([5, e]));
                break;
            case X.PICK:
            case X.PICK_WOOD:
            case X.PICK_GOLD:
            case X.PICK_DIAMOND:
            case X.HAMMER:
            case X.HAMMER_GOLD:
            case X.HAMMER_DIAMOND:
            case X.BOOK:
            case X.HAMMER_AMETHYST:
            case X.HAMMER_REIDITE:
            case X.PICK_AMETHYST:
            case X.PICK_REIDITE:
            case X.SUPER_HAMMER:
            case X.SHOVEL:
            case X.SHOVEL_GOLD:
            case X.SHOVEL_DIAMOND:
            case X.SHOVEL_AMETHYST:
            case X.SPANNER:
            case X.MACHETE:
            case X.PITCHFORK:
            case X.PITCHFORK2:
            case X.SADDLE:
            case X.WATERING_CAN_FULL:
            case X.WOOD_SHIELD:
            case X.STONE_SHIELD:
            case X.GOLD_SHIELD:
            case X.DIAMOND_SHIELD:
            case X.AMETHYST_SHIELD:
            case X.REIDITE_SHIELD:
                if (!d_.zombie) d_.craft.preview = -1, (i = A_.fast_units[d_.uid]) && i.right === e ? this.asdsfdsfdsovcxcvldslv([5, X.HAND]) : this.asdsfdsfdsovcxcvldslv([5, e]);
                break;
            case X.BOAT:
            case X.SLED:
            case X.MOUNT_BOAR:
            case X.BABY_MAMMOTH:
            case X.CRAB_BOSS:
            case X.BABY_DRAGON:
            case X.BABY_LAVA:
            case X.HAWK:
            case X.PLANE:
            case X.NIMBUS:
                if (!d_.zombie) {
                    d_.craft.preview = -1;
                    var i = A_.fast_units[d_.uid];
                    this.asdsfdsfdsovcxcvldslv([5, e])
                }
                break;
            case X.CROWN_GREEN:
            case X.CROWN_ORANGE:
            case X.CROWN_BLUE:
            case X.WOOD_HELMET:
            case X.STONE_HELMET:
            case X.GOLD_HELMET:
            case X.DIAMOND_HELMET:
            case X.AMETHYST_HELMET:
            case X.REIDITE_HELMET:
            case X.DIAMOND_PROTECTION:
            case X.AMETHYST_PROTECTION:
            case X.REIDITE_PROTECTION:
            case X.DRAGON_HELMET:
            case X.LAVA_HELMET:
            case X.WITCH:
            case X.CROWN_CRAB:
            case X.SUPER_DIVING_SUIT:
                (i = A_.fast_units[d_.uid]) && i.clothe !== e && (d_.helmet.wait = !0), this.asdsfdsfdsovcxcvldslv([5, e]);
                break;
            case X.EARMUFFS:
            case X.HOOD:
            case X.PEASANT:
            case X.WINTER_PEASANT:
            case X.COAT:
            case X.CAP_SCARF:
            case X.FUR_HAT:
            case X.PILOT_HELMET:
            case X.TURBAN1:
            case X.TURBAN2:
            case X.CHRISTMAS_HAT:
            case X.ELF_HAT:
            case X.WINTER_HOOD:
            case X.EXPLORER_HAT:
            case X.PIRATE_HAT:
            case X.DIVING_MASK:
                this.asdsfdsfdsovcxcvldslv([5, e])
            }
        }, this.delete_inv = function (e) {
            this.asdsfdsfdsovcxcvldslv([6, e])
        }, this.delete_inv_ok = function (e) {
            d_.build.wait = !0;
            var i = d_.inv.find_item(e);
            d_.inv.delete_item(e, i), d_.craft.update()
        }, this.recycle_inv = function (e) {
            this.asdsfdsfdsovcxcvldslv([29, e])
        }, this.delete_one_inv = function (e) {
            this.asdsfdsfdsovcxcvldslv([28, e])
        }, this.delete_one_inv_ok = function (e) {
            d_.build.wait = !0;
            var i = d_.inv.find_item(e);
            d_.inv.decrease(e, 1, i), d_.craft.update()
        }, this.delete_single_inv = function (e) {
            var i = e[1],
                t = e[2];
            d_.build.wait = !0;
            var r = d_.inv.find_item(i);
            d_.inv.decrease(i, t, r), d_.craft.update()
        }, this.stop_attack = function () {
            this.asdsfdsfdsovcxcvldslv([14])
        }, this.send_attack = function (e) {
            var i = 2 * Math.PI;
            this.asdsfdsfdsovcxcvldslv([4, Math.floor((e + i) % i * 255 / i)])
        }, this.send_angle = function (e) {
            var i = 2 * Math.PI;
            this.asdsfdsfdsovcxcvldslv([3, Math.floor((e + i) % i * 255 / i)])
        }, this.send_move = function (e) {
            this.asdsfdsfdsovcxcvldslv([2, e])
        }, this.send_command = function (e) {
            this.asdsfdsfdsovcxcvldslv([36, e])
        }, this.send_chat = function (e) {
            var i = A_.fast_units[d_.uid];
            d_.zombie ? Math.random() > .5 ? i.text.push(e.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE) : i.text.push(ZOMBIE_GRUMBLE + "... " + e.substring(0, 25)) : i.text.push(e), this.asdsfdsfdsovcxcvldslv([0, e])
        }, this.move_units = function (e) {
            var i = player.select.units;
            if (0 != i.length) {
                var t = [2],
                    r = [];
                _.sub_vector(e, {
                    x: player.cam.rx,
                    y: player.cam.ry
                }), t.push(e.x), t.push(e.y);
                for (var n = 0; n < i.length; n++) r.push(i[n].oid);
                t.push(r), this.asdsfdsfdsovcxcvldslv(t)
            }
        }, this.cam_delay = 0, this.last_cam = {
            i: 0,
            j: 0
        }, this.update_cam = function () {
            if (c_ - this.cam_delay > Jo.CAM_DELAY) {
                this.cam_delay = c_;
                var e = d_.cam,
                    i = Math.floor(e.x / 100),
                    t = Math.floor(e.y / 100);
                this.last_cam.i == i && this.last_cam.j == t || (this.asdsfdsfdsovcxcvldslv([1, Math.floor(-e.x), Math.floor(-e.y)]), this.last_cam.i = i, this.last_cam.j = t)
            }
        }, this.ping_delay = 0, this.try_ping = function () {
            c_ - this.ping_delay > Jo.PING_DELAY && (this.ping_delay = c_, this.ping())
        }, this.lost = function () {
            d_.reconnect.enabled = !0, this._current_id == this.socket._current_id && (this._current_id++, this.socket.close(), E_.connect())
        }, this.join_new_team = function (e) {
            this.new_alert(Ie[TEXT.JOIN_TEAM]);
            for (var i = 1; i < e.length; i++) d_.team.push(e[i])
            HelperFns.updateAllys();
        }, this.new_member_team = function (e) {
            this.new_alert(A_.players[e].nickname + Ie[TEXT.JOINED_TEAM]), d_.team.push(e);
            var i = document.getElementById("team_box"); - 1 != h_.team_buttons_id && "inline-block" == i.style.display && h_.team_buttons[h_.team_buttons_id].action()
            HelperFns.updateAllys();
        }, this.destroy_team = function () {
            this.new_alert(Ie[TEXT.TEAM_DESTROYED]), d_.totem.wait = !0, d_.team = [], document.getElementById("team_box").style.display = "none"
            HelperFns.updateAllys();
        }, this.exclude_team = function (e) {
            if (e == d_.id) this.new_alert(Ie[TEXT.LEFT_TEAM]), d_.totem.wait = !0, d_.team = [], document.getElementById("team_box").style.display = "none";
            else {
                this.new_alert(A_.players[e].nickname + Ie[TEXT.LEFT_TEAM2]);
                for (var i = 0; i < d_.team.length; i++)
                    if (d_.team[i] == e) {
                        d_.team.splice(i, 1);
                        break
                    } var t = document.getElementById("team_box"); - 1 != h_.team_buttons_id && "inline-block" == t.style.display && h_.team_buttons[h_.team_buttons_id].action()
            }
            HelperFns.updateAllys();
        }, this.steal_token = function () {
            d_.alive = !1, this.new_alert(Ie[TEXT.TOKEN]), this._current_id == this.socket._current_id && (this._current_id++, h_.quit(ui.run), this.socket.close())
        }, this.killed = function (e, i) {
            d_.alive = !1;
            var t = i[2],
                r = i[3];
            d_.die.howdie = ue[e][Math.floor(Math.random() * ue[e].length)], d_.die.score = _.simplify_number(A_.players[d_.id].score), d_.die.bank = _.simplify_number(t), d_.die.kill = r, this.new_alert(Ie[TEXT.YOU_DEAD]);

            if (!HackSettings.AutoRespawn.enabled) {
                (this._current_id == this.socket._current_id) && (this._current_id++, h_.quit(I_.run), this.socket.close())
            } else {
                this._current_id++;
                this.socket.close();
                ui.waiting = false;
                ui.play_game();
            }
            
            window.aiptag.cmd.display.push((function () {
                window.aipDisplayTag.display("MFN_starve-io_300x250")
            }))
        }, this.ping = function () {
            try {
                this.asdsfdsfdsovcxcvldslv([Jo.PING])
            } catch (e) {
                console.log("[Famishs/ConnectionException] WebSocket is not eligble"), this.lost(), console.log("[Famishs/Session] Trying to restore session..")
            }
        }, this.check_state = function () {
            3 == this.socket.readyState && (this.timeout_server -= Jo.TIMEOUT_SERVER)
        }, this.check_pong = function () {
            R_ > Jo.LOOSE_FOCUS && (this.timeout_server = c_), c_ - this.timeout_server > Jo.TIMEOUT_SERVER && (this.timeout_server = c_, this.lost())
        }, this.handshake = function (i) {
            clearTimeout(this.timeout_handler), document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a, document.getElementById("exploreForest").src = "img/forest-leaf.png", document.getElementById("exploreWinter").src = "img/winter-flake.png", document.getElementById("exploreDesert").src = "img/desert-cactus.png", document.getElementById("exploreLava").src = "img/lava-volcano.png", this.timeout_server = c_, d_.gauges.cold.ed = d_.gauges.cold.em, d_.gauges.hunger.ed = d_.gauges.hunger.em, d_.gauges.thirst.ed = d_.gauges.thirst.em, d_.gauges.oxygen.ed = d_.gauges.oxygen.em, d_.gauges.warm.ed = d_.gauges.warm.em, d_.gauges.l = 1, d_.gauges.c = 1, d_.gauges.h = 1, d_.gauges.t = 1, d_.gauges.o = 1, d_.gauges.wa = 1, d_.bigmap = !1, h_.info_box.display = 0, d_.inv.can_select = [], d_.inv.n = [], d_.inv.max = qo.WITHOUT_BAG, d_.inv.bonus = 0, d_.inv.bag = 0, d_.inv.id = -1, h_.show_recipe_book = 1, h_.show_clock = 1, h_.show_quest = 1, h_.show_market = 1, d_.alive = !0, d_.inv.drag.stop(), d_.craft.can_craft = [], d_.craft.crafting = !1, d_.craft.can_build = !1, d_.craft.preview = -1, d_.craft.id = -1, d_.craft.workbench = !1, d_.craft.well = !1, d_.craft.fire = !1, d_.craft.water = !1, d_.craft.timeout = new _.LinearAnimation(!1, 0, 1, 0, 1, 1), d_.weapon.timeout = new _.LinearAnimation(!1, 0, 1, 0, .1, 1), d_.weapon.wait = !1, d_.helmet.timeout = new _.LinearAnimation(!1, 0, 1, 0, .2, 1), d_.helmet.wait = !1, d_.build.timeout = new _.LinearAnimation(!1, 0, 1, 0, 1, 1), d_.build.wait = !1, d_.totem.id = -1, d_.totem.pid = -1, d_.totem.wait = !1, d_.totem.timeout = new _.LinearAnimation(!1, 0, 1, 0, 1 / 30, 1), h_.minimap.marker.x = -1, h_.minimap.marker.y = -1, h_.craft_list.open = !1, h_.minimap.players = [], d_.show_spectators.enabled = !1, A_.mode = i[1], void 0 !== i[20] && void 0 !== i[21] && (A_.nw = i[20], A_.nh = i[21], A_.w = A_.nw * A_.dw, A_.h = A_.nh * A_.dh), A_.islands = i[22], A_.custom_map = i[23], e.welcome(i[24]), e.new_recipes(i[25]), d_.desert.tempest = i[26], d_.blizzard = 0, d_.winter.tempest = i[27], A_.generate_world(i[19]), A_.time = i[5], A_.clock.hour = i[15], A_.clock.init = (new Date).getTime(), h_.quests.born = i[16], A_.transition = !1, d_.day = i[2], h_.quests.reset(), d_.team = i[8], A_.units[ITEMS.PLAYERS] = [], A_.units[ITEMS.FRUIT] = [], A_.units[ITEMS.WORKBENCH] = [], A_.units[ITEMS.FIRE] = [], A_.units[ITEMS.BIG_FIRE] = [], A_.units[ITEMS.SEED] = [], A_.units[ITEMS.WHEAT_SEED] = [], A_.units[ITEMS.PUMPKIN_SEED] = [], A_.units[ITEMS.TOMATO_SEED] = [], A_.units[ITEMS.CARROT_SEED] = [], A_.units[ITEMS.GARLIC_SEED] = [], A_.units[ITEMS.THORNBUSH_SEED] = [], A_.units[ITEMS.WATERMELON_SEED] = [], A_.units[ITEMS.ALOE_VERA_SEED] = [], A_.units[ITEMS.WALL] = [], A_.units[ITEMS.STONE_WALL] = [], A_.units[ITEMS.GOLD_WALL] = [], A_.units[ITEMS.DIAMOND_WALL] = [], A_.units[ITEMS.WOOD_DOOR] = [], A_.units[ITEMS.STONE_DOOR] = [], A_.units[ITEMS.GOLD_DOOR] = [], A_.units[ITEMS.DIAMOND_DOOR] = [], A_.units[ITEMS.WOOD_DOOR_SPIKE] = [], A_.units[ITEMS.STONE_DOOR_SPIKE] = [], A_.units[ITEMS.GOLD_DOOR_SPIKE] = [], A_.units[ITEMS.DIAMOND_DOOR_SPIKE] = [], A_.units[ITEMS.AMETHYST_DOOR_SPIKE] = [], A_.units[ITEMS.REIDITE_DOOR_SPIKE] = [], A_.units[ITEMS.CHEST] = [], A_.units[ITEMS.RESURRECTION] = [], A_.units[ITEMS.EMERALD_MACHINE] = [], A_.units[ITEMS.SPIKE] = [], A_.units[ITEMS.STONE_SPIKE] = [], A_.units[ITEMS.GOLD_SPIKE] = [], A_.units[ITEMS.DIAMOND_SPIKE] = [], A_.units[ITEMS.WOLF] = [], A_.units[ITEMS.BOAR] = [], A_.units[ITEMS.CRAB_BOSS] = [], A_.units[ITEMS.BABY_DRAGON] = [], A_.units[ITEMS.BABY_LAVA] = [], A_.units[ITEMS.HAWK] = [], A_.units[ITEMS.TREASURE_CHEST] = [], A_.units[ITEMS.DEAD_BOX] = [], A_.units[ITEMS.GIFT] = [], A_.units[ITEMS.CRATE] = [], A_.units[ITEMS.BREAD_OVEN] = [], A_.units[ITEMS.PIRANHA] = [], A_.units[ITEMS.KRAKEN] = [], A_.units[ITEMS.CRAB] = [], A_.units[ITEMS.FOX] = [], A_.units[ITEMS.BEAR] = [], A_.units[ITEMS.MAMMOTH] = [], A_.units[ITEMS.BABY_MAMMOTH] = [], A_.units[ITEMS.VULTURE] = [], A_.units[ITEMS.SAND_WORM] = [], A_.units[ITEMS.DRAGON] = [], A_.units[ITEMS.LAVA_DRAGON] = [], A_.units[ITEMS.FLAME] = [], A_.units[ITEMS.WHEAT_MOB] = [], A_.units[ITEMS.ALOE_VERA_MOB] = [], A_.units[ITEMS.PUMPKIN_MOB] = [], A_.units[ITEMS.GARLIC_MOB] = [], A_.units[ITEMS.THORNBUSH_MOB] = [], A_.units[ITEMS.RABBIT] = [], A_.units[ITEMS.PENGUIN] = [], A_.units[ITEMS.SPELL] = [], A_.units[ITEMS.FIREFLY] = [], A_.units[ITEMS.SPIDER] = [], A_.units[ITEMS.FURNACE] = [], A_.units[ITEMS.AMETHYST_WALL] = [], A_.units[ITEMS.AMETHYST_SPIKE] = [], A_.units[ITEMS.AMETHYST_DOOR] = [], A_.units[ITEMS.REIDITE_WALL] = [], A_.units[ITEMS.REIDITE_SPIKE] = [], A_.units[ITEMS.REIDITE_DOOR] = [], A_.units[ITEMS.TOTEM] = [], A_.units[ITEMS.WOOD_TOWER] = [], A_.units[ITEMS.BRIDGE] = [], A_.units[ITEMS.ROOF] = [], A_.units[ITEMS.PLOT] = [], A_.units[ITEMS.WINDMILL] = [], A_.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [], A_.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [], A_.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [], A_.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [], A_.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [], A_.units[ITEMS.GARLAND] = [], A_.units[ITEMS.BED] = [], A_.units[ITEMS.WELL] = [], A_.units[ITEMS.SIGN] = [], A_.fast_units = [], A_.max_units = i[7], d_.id = i[9], d_.uid = d_.id * A_.max_units, u_.loaded && (u_.players[0].uid = d_.uid, u_.players[0].free = 0), O_.clear_directionnal(), d_.cam.change(i[3], i[10]), A_.players = [];
            for (var t = A_.players, r = 0; r < 120; r++) t.push(new es);
            r = 0;
            for (var n = i[4]; r < n.length; r++) {
                var a = t[n[r].i];
                a.nickname = n[r].n, a.skin = n[r].s, a.accessory = n[r].a, a.crate = n[r].c, a.book = n[r].b, a.dead = n[r].d, a.baglook = n[r].g, a.level = n[r].l, a.score = _.restore_number(n[r].p), a.alive = !0, 1 === Yo && (a.nickname += "|" + n[r].i)
            }
            if (d_.ldb.sort(), A_.mode === qo.MODE_HUNGER_GAMES && "spectator" === A_.players[d_.id].nickname ? d_.spectator = !0 : d_.spectator = !1, A_.mode === qo.MODE_ZOMBIES && A_.players[d_.id].skin === qo.ZOMBIE_SKIN ? d_.zombie = !0 : d_.zombie = !1, A_.mode === qo.MODE_VAMPIRES && A_.players[d_.id].skin === qo.VAMPIRE_SKIN ? d_.vampire = !0 : d_.vampire = !1, Cookies.set("starve_token", d_.token), 0 === i[12]) {
                d_.shop.delay = 0, h_.quests.restore(i[17]);
                var o = i[14];
                o[X.BAG] && d_.inv.update_bag_size(1, 0);
                for (r = 0; r < o.length; r++)
                    if (o[r]) {
                        if (r == X.BAG) continue;
                        if (r == X.HAND) continue;
                        this.gather([0, r, o[r]])
                    } d_.shop.open = !1
            } else A_.mode === qo.MODE_LEGACY ? this.gather([0, X.SANDWORM_JUICE, 1]) : A_.mode === qo.MODE_VAMPIRES && (d_.vampire ? this.gather([0, X.ROOF, 4]) : this.gather([0, X.GARLIC_SEED, 3])), A_.mode === qo.MODE_PVP || A_.mode === qo.MODE_VAMPIRES || A_.mode === qo.MODE_EXPERIMENTAL || A_.mode === qo.MODE_LEGACY ? (d_.shop.delay = (new Date).getTime(), d_.shop.open = !0, d_.shop.value = i[13], h_.shop.init()) : (d_.shop.delay = 0, d_.shop.open = !1, d_.shop.value = 0), d_.token_id = i[12].toString();
            d_.ghost.enabled = i[6], d_.ghost.delay = -1, d_.ghost.label = null, d_.ghost.now = -1, Cookies.set("starve_token_id", d_.token_id), d_.reconnect.enabled ? (d_.reconnect.rotate = 0, d_.reconnect.enabled = !1) : ui.quit(h_.run)
            HelperFns.updateAllys();
        }, this.connect = function () {
            this.timeout_number = 0, this.connect_timeout()
        }, this.connect_timeout = function () {
            var i = this.selected_server[this.current_mode],
                n = this.mode_list[this.current_mode][i].i,
                a = this.mode_list[this.current_mode][i].p,
                o = this.mode_list[this.current_mode][i].ssl;
            n = n + ":" + a;
            let s = "DEV" == r ? "ws://localhost:8083" : "ws" + (1 === o ? "s" : "") + "://" + n + "/id=" + ~~(999684281 * Math.random());
            this.socket = new window.WebSocket(s), this.socket.binaryType = "arraybuffer", this.socket._current_id = this._current_id, this.socket.onmessage = function (i) {
                if (this._current_id == e._current_id)
                    if ("string" == typeof i.data) {
                        var t = JSON.parse(i.data);
                        switch (t[0]) {
                        case 0:
                            e.chat(t);
                            break;
                        case 1:
                            e.kick(t[1]);
                            break;
                        case 2:
                            e.new_player(t);
                            break;
                        case 3:
                            e.handshake(t);
                            break;
                        case 4:
                            e.message(t[1]);
                            break;
                        case 5:
                            e.commands(t);
                            break;
                        case 6:
                            e.welcome(t[1]);
                            break;
                        case 7:
                            e.kicked_before_join(t[1]);
                            break;
                        case 8:
                            e.leaderboard(t[1]);
                            break;
                        case 9:
                            e.decrease_item(t[1], t[2]);
                            break;
                        case 10:
                            e.gather([0, t[1], t[2]]);
                            break;
                        case 11:
                            window.drawShit = [t[1]];
                            break;
                        case 12:
                            window.drawShit2 = t[1];
                            break;
                        case 13:
                            e.killed(t[1], t);
                            break;
                        case 14:
                            e.mute();
                            break;
                        case 15:
                            e.throttle();
                            break;
                        case 16:
                            e.recover_focus(t[1], t[2]);
                            break;
                        case 17:
                            e.denied_with_callback(t[1]);
                            break;
                        case 18:
                            e.recreate_session()
                        }
                    } else {
                        var r = new Uint8Array(i.data);
                        switch (r[0]) {
                        case 0:
                            e.units(i.data, r, !1);
                            break;
                        case 1:
                            e.units(i.data, r, !0);
                            break;
                        case 2:
                            e.cancel_craft();
                            break;
                        case 3:
                            e.gather(new Uint16Array(i.data));
                            break;
                        case 5:
                            e.full();
                            break;
                        case 6:
                            e.dont_harvest();
                            break;
                        case 7:
                            e.hitten(i.data, 0);
                            break;
                        case 8:
                            e.build_stop(r[1]);
                            break;
                        case 9:
                            e.build_ok(r[1]);
                            break;
                        case 10:
                            e.inv_full();
                            break;
                        case 11:
                            e.decrease_item(r[1], r[2]);
                            break;
                        case 12:
                            e.workbench(r[1]);
                            break;
                        case 13:
                            e.hitten(i.data, 1);
                            break;
                        case 14:
                            e.mute();
                            break;
                        case 15:
                            e.kill_player(r[1]);
                            break;
                        case 16:
                            e.gauges(r[1], r[2], r[3], r[4], r[5], r[6], r[7]);
                            break;
                        case 18:
                            e.empty_res();
                            break;
                        case 19:
                            e.fire(r[1]);
                            break;
                        case 20:
                            e.survive();
                            break;
                        case 21:
                            e.leaderboard(i.data);
                            break;
                        case 22:
                            e.get_time(r, i.data);
                            break;
                        case 23:
                            e.set_cam(i.data);
                            break;
                        case 24:
                            e.accept_build(r[1]);
                            break;
                        case 26:
                            e.minimap(r);
                            break;
                        case 27:
                            e.fail_restore();
                            break;
                        case 28:
                            e.ghost(r[1]);
                            break;
                        case 29:
                            e.reborn();
                            break;
                        case 30:
                            e.steal_token();
                            break;
                        case 31:
                            e.join_new_team(r);
                            break;
                        case 32:
                            e.exclude_team(r[1]);
                            break;
                        case 33:
                            e.new_member_team(r[1]);
                            break;
                        case 34:
                            e.destroy_team();
                            break;
                        case 35:
                            e.kit_ok(r[1]);
                            break;
                        case 36:
                            e.water(r[1]);
                            break;
                        case 37:
                            e.gauges_life(r[1], r[2]);
                            break;
                        case 38:
                            e.gauges_food(r[1]);
                            break;
                        case 39:
                            e.gauges_water(r[1]);
                            break;
                        case 40:
                            e.get_bag();
                            break;
                        case 41:
                            e.verified_account(r);
                            break;
                        case 42:
                            e.succeed_quest(r[1]);
                            break;
                        case 43:
                            e.fail_quest(r[1]);
                            break;
                        case 44:
                            e.claimed(r[1]);
                            break;
                        case 45:
                            e.recycle_ok(r[1]);
                            break;
                        case 46:
                            e.recycle_stop(r[1]);
                            break;
                        case 47:
                            e.well(r[1]);
                            break;
                        case 48:
                            e.no_resources();
                            break;
                        case 50:
                            e.decrease_item2(r[1], r[2], r[3]);
                            break;
                        case 51:
                            e.blocked();
                            break;
                        case 52:
                            e.delete_inv_ok(r[1]);
                            break;
                        case 53:
                            e.delete_one_inv_ok(r[1]);
                            break;
                        case 54:
                            e.account_ok();
                            break;
                        case 55:
                            e.gauges_warm(r[1]);
                            break;
                        case 56:
                            e.gauges_cold(r[1]);
                            break;
                        case 57:
                            e.new_version();
                            break;
                        case 58:
                            e.wrong_password();
                            break;
                        case 59:
                            e.clean_inventory();
                            break;
                        case 60:
                            e.hide_shop_kit();
                            break;
                        case 61:
                            d_.cam.forcedDelay = .2, d_.cam.delay = 3;
                            break;
                        case 62:
                            e.delete_single_inv(new Uint16Array(i.data));
                            break;
                        case 63:
                            e.hide_clock();
                            break;
                        case 64:
                            e.hide_recipe_book();
                            break;
                        case 65:
                            e.hide_quest();
                            break;
                        case 66:
                            e.hide_market();
                            break;
                        case 67:
                            e.explorer_quest(r[1]);
                            break;
                        case 68:
                            e.sand_tempest(r[2]);
                            break;
                        case 69:
                            e.blizzard(r[2]);
                            break;
                        case 70:
                            e.blizzard_status(r[1]);
                            break;
                        case 71:
                            e.bandage(r[1]);
                            break;
                        case 72:
                            e.remove_entity(i.data)
                        }
                    }
            }, this.recreate_session = function () {
                clearTimeout(e.timeout_handler), d_.newToken = d_.newToken || _.getURLData("token"), window.threadSafe.dataSentCounter = 0, e.asdsfdsfdsovcxcvldslv([ui.nickname.input.value, screen.width + 200, screen.height + 200, t, d_.token, d_.token_id, d_.reconnect.enabled ? 1 : 0, ui.skin, ui.accessory, ui.bag, ui.book, ui.crate, ui.dead, void 0 === Xs ? 0 : Xs, void 0 === Js ? 0 : Js.substring(Js.length - 50), Fo, d_.newToken]), d_.newToken = void 0, e.timeout_handler = setTimeout(e.timeout, Jo.TIMEOUT_TIME)
            }, this.asdsfdsfdsovcxcvldslv = function (e) {
                "DEV" == window.PACKET_MODE ? this.socket.send(JSON.stringify(e)) : this.socket.send(window.UI8Wrap.encode(e)) //this is where we send
            }, this.socket.onopen = function () {
                clearTimeout(e.timeout_handler), d_.newToken = d_.newToken || _.getURLData("token"), e.asdsfdsfdsovcxcvldslv([ui.nickname.input.value, screen.width + 200, screen.height + 200, t, d_.token + "g", d_.token_id, d_.reconnect.enabled ? 1 : 0, ui.skin, ui.accessory, ui.bag, ui.book, ui.crate, ui.dead, void 0 === Xs ? 0 : Xs, void 0 === Js ? 0 : Js, Fo, d_.newToken]), d_.newToken = void 0, e.timeout_handler = setTimeout(e.timeout, Jo.TIMEOUT_TIME)
            }, this.timeout_handler = setTimeout(e.timeout, Jo.TIMEOUT_TIME)
        }
    }
    var qo = {
            DAY: 48e4,
            WITHOUT_BAG: 10,
            WITH_BAG: 16,
            BAG_SIZE: 6,
            GHOST_DELAY: 60,
            TOP: 1,
            BOTTOM: 2,
            LEFT: 4,
            RIGHT: 8,
            ROTATE: 10,
            DIST_CHEST: 100,
            DIST_FURNACE: 100,
            DIST_WINDMILL: 100,
            DIST_WELL: 100,
            DIST_BREAD_OVEN: 100,
            DIST_SIGN: 100,
            DIST_TOTEM: 100,
            DIST_SIGN: 100,
            DIST_RESURRECTION: 100,
            DIST_EXTRACTOR_MACHINE: 100,
            MODE_PVP: 0,
            MODE_HUNGER_GAMES: 1,
            MODE_ZOMBIES: 2,
            MODE_VAMPIRES: 3,
            MODE_LEGACY: 4,
            MODE_BR: 5,
            MODE_COMMUNITY: 6,
            MODE_EXPERIMENTAL: 7,
            ZOMBIE_SKIN: 0,
            VAMPIRE_SKIN: 0,
            ROBOT_SKIN: 30,
            GHOST: 2,
            GHOST_DELAY: 6e4,
            WT1SY: 0,
            LWT1SY: 0,
            WT1EY: 50,
            WT2SY: 0,
            LWT2SY: 40,
            WT2EY: 39,
            LWT2: 830,
            FLOAM_X: 25,
            FLOAM_Y: 8,
            W1SX: 0,
            LW1SX: 0,
            W1EX: 200,
            W2SX: 0,
            LW2SX: 250,
            W2EX: 150,
            W3SX: 0,
            LW3SX: 350,
            W3EX: 100,
            LSANDX: 700,
            SEED: 39879
        },
        jo = [];
    for (he = 0; he < 500; he++) jo[he] = 0;
    jo[k.SUPER_DIVING_SUIT] = 1, jo[k.SWORD_WOOD] = 1, jo[k.SWORD] = 1, jo[k.SWORD_GOLD] = 1, jo[k.SWORD_DIAMOND] = 1, jo[k.SWORD_AMETHYST] = 1, jo[k.REIDITE_SWORD] = 1, jo[k.PIRATE_SWORD] = 1, jo[k.DRAGON_SWORD] = 1, jo[k.LAVA_SWORD] = 1, jo[k.SPEAR] = 1, jo[k.GOLD_SPEAR] = 1, jo[k.DIAMOND_SPEAR] = 1, jo[k.AMETHYST_SPEAR] = 1, jo[k.REIDITE_SPEAR] = 1, jo[k.DRAGON_SPEAR] = 1, jo[k.LAVA_SPEAR] = 1, jo[k.WOOD_SPEAR] = 1, jo[k.CRAB_SPEAR] = 1;
    var Zo = [{
            time: 288e4
        }, {
            time: 144e4
        }, {
            time: 192e4
        }, {
            time: 144e4
        }, {
            time: 288e4
        }, {
            time: 24e5
        }, {
            time: 24e5
        }, {
            time: 48e5
        }, {
            time: 288e4
        }, {
            time: 336e4
        }, {
            time: 288e4
        }, {
            time: 384e4
        }, {
            time: 336e4
        }],
        ITEMS = {
            PLAYERS: 0,
            FIRE: 1,
            WORKBENCH: 2,
            SEED: 3,
            WALL: 4,
            SPIKE: 5,
            BIG_FIRE: 6,
            STONE_WALL: 7,
            GOLD_WALL: 8,
            DIAMOND_WALL: 9,
            WOOD_DOOR: 10,
            CHEST: 11,
            STONE_SPIKE: 12,
            GOLD_SPIKE: 13,
            DIAMOND_SPIKE: 14,
            STONE_DOOR: 15,
            GOLD_DOOR: 16,
            DIAMOND_DOOR: 17,
            FURNACE: 18,
            AMETHYST_WALL: 19,
            AMETHYST_SPIKE: 20,
            AMETHYST_DOOR: 21,
            RESURRECTION: 22,
            EMERALD_MACHINE: 23,
            EXTRACTOR_MACHINE_STONE: 24,
            EXTRACTOR_MACHINE_GOLD: 25,
            EXTRACTOR_MACHINE_DIAMOND: 26,
            EXTRACTOR_MACHINE_AMETHYST: 27,
            EXTRACTOR_MACHINE_REIDITE: 28,
            TOTEM: 29,
            BRIDGE: 30,
            WHEAT_SEED: 31,
            WINDMILL: 32,
            PLOT: 33,
            BREAD_OVEN: 34,
            WELL: 35,
            SIGN: 36,
            PUMPKIN_SEED: 37,
            ROOF: 38,
            GARLIC_SEED: 39,
            THORNBUSH_SEED: 40,
            BED: 41,
            GARLAND: 42,
            TOMATO_SEED: 43,
            CARROT_SEED: 44,
            WOOD_DOOR_SPIKE: 45,
            STONE_DOOR_SPIKE: 46,
            GOLD_DOOR_SPIKE: 47,
            DIAMOND_DOOR_SPIKE: 48,
            AMETHYST_DOOR_SPIKE: 49,
            REIDITE_WALL: 50,
            REIDITE_DOOR: 51,
            REIDITE_SPIKE: 52,
            REIDITE_DOOR_SPIKE: 53,
            WATERMELON_SEED: 54,
            ALOE_VERA_SEED: 55,
            WOOD_TOWER: 56,
            WOLF: 60,
            SPIDER: 61,
            FOX: 62,
            BEAR: 63,
            DRAGON: 64,
            PIRANHA: 65,
            KRAKEN: 66,
            CRAB: 67,
            FLAME: 68,
            LAVA_DRAGON: 69,
            BOAR: 70,
            CRAB_BOSS: 71,
            BABY_DRAGON: 72,
            BABY_LAVA: 73,
            HAWK: 74,
            VULTURE: 75,
            SAND_WORM: 76,
            BABY_MAMMOTH: 77,
            MAMMOTH: 78,
            WHEAT_MOB: 79,
            RABBIT: 80,
            TREASURE_CHEST: 81,
            DEAD_BOX: 82,
            PUMPKIN_MOB: 83,
            GARLIC_MOB: 84,
            THORNBUSH_MOB: 85,
            CRATE: 86,
            GIFT: 87,
            PENGUIN: 88,
            ALOE_VERA_MOB: 89,
            FIREFLY: 90,
            SPELL: 91,
            FRUIT: 100
        },
        $o = [
            [ITEMS.EXTRACTOR_MACHINE_STONE, X.STONE],
            [ITEMS.EXTRACTOR_MACHINE_GOLD, X.GOLD],
            [ITEMS.EXTRACTOR_MACHINE_DIAMOND, X.DIAMOND],
            [ITEMS.EXTRACTOR_MACHINE_AMETHYST, X.AMETHYST],
            [ITEMS.EXTRACTOR_MACHINE_REIDITE, X.REIDITE]
        ];

    function es() {
        this.nickname = "", this.skin = 0, this.accessory = 0, this.bag = 0, this.baglook = 0, this.book = 0, this.crate = 0, this.dead = 0, this.level = 0, this.label = null, this.label_winter = null, this.ldb_label = null, this.alive = !1, this.score = 0
    }

    function is(e, i, t, r, n, a, o, s, E, T) {
        switch (this.type = e, this.pid = i, this.id = t, this.x = r, this.y = n, this.angle = a, this.nangle = a, this.action = o, this.info = s, this.extra = T, this.r = {
            x: r,
            y: n
        }, this.speed = E, A_ && (this.uid = i * A_.max_units + t), e) {
        case ITEMS.PLAYERS:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid);
            this.player = A_.players[this.pid], this.skin = this.player.skin, this.baglook = this.player.baglook, this.book = this.player.book, this.accessory = this.player.accessory, this.dist_forest = -1e6, this.dist_lava = -1e6, this.dist_winter = -1e6, this.dist_desert = -1e6, this.dist_water = -1e6, this.dist_sand = -1e6, this.dist_dragon = -1e6, this.zombie = A_.mode === qo.MODE_ZOMBIES && this.skin === qo.ZOMBIE_SKIN, this.vampire = A_.mode === qo.MODE_VAMPIRES && this.skin === qo.VAMPIRE_SKIN, this.superzombie = !(!this.zombie || "  " !== this.player.nickname), this.foot = [], this.tower = 0, this.move_effect = !0, this.id_foot = 0, this.fly = 0, this.swim = [], this.r = {
                x: r,
                y: n
            }, this.draw = Xa, this.draw_vehicle = xa, this.vehicle_fx1 = 0, this.vehicle_fx2 = 0, this.vehicle_fx3 = 0, this.vehicle_fx4 = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.vehicle_fx5 = 0, this.tower_fx = 0, this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3), this.heal = new _.LinearAnimation(!1, .6, .6, 0, 5, 3), this.freeze = new _.LinearAnimation(!1, .6, .6, 0, 5, 3), this.starve = new _.LinearAnimation(!1, .6, .6, 0, 5, 3), this.idle = new _.LinearAnimation(!0, 0, 2.25, -1.5, 3.75, 7.5), this.walk = new _.LinearAnimation(!0, 0, 7.5, -3, 22.5, 33.75), this.attack = new _.LinearAnimation(!1, 0, 0, -Math.PI / 3, 6, 9), this.slow_attack = 0, this.web = new _.LinearAnimation(!1, .6, .6, 0, 1, 3), this.move_head = this.superzombie ? new _.LinearAnimation(!0, 0, 2.25, -1.5, 2.75, 5.5) : 0, this.angle_init = 0, this.text_ease = 0, this.text_effect = [], this.text_move = [], this.text = [], this.label = [], this.draw_text = Qa, this.hand = !0, this.right = -1, this.vehicle = -1, this.action = ko.IDLE, this.collide = !1, this.clothe = 0, this.ghost = !1, this.bubbles = [], this.bag = 0, this.sid = -1, this.update = function (e) {
                32768 & this.info ? (this.collide = !0, this.info = -32769 & this.info) : this.collide = !1, 16384 & this.info ? (this.info = -16385 & this.info, this.bag = 1) : this.bag = 0, this.clothe = Math.floor(this.info / 128), this.info -= 128 * this.clothe, this.info === X.HAND || this.superzombie ? this.right = -1 : this.right = this.info, this.tower = A_.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100)), this.vehicle = 255 & this.extra, this.right === qo.GHOST ? this.ghost = !0 : this.ghost = !1, jo[this.right] ? this.weapon = !0 : this.weapon = !1, e & ko.WEB ? (this.web.o = !1, this.web.v = .6) : e & ko.COLD ? (this.freeze.o = !1, this.freeze.v = .6) : e & ko.HEAL && (this.heal.o = !1, this.heal.v = .6), e & ko.HUNGER && (this.starve.o = !1, this.starve.v = .6), e & ko.HURT && (this.hit.o = !1, this.hit.v = .6), e & ko.ATTACK && (this.slow_attack = Jo.SLOW_ATTACK, u_.run && -1 !== this.sid && u_.players[this.sid].swing(Bs[this.right]))
            }, this.update();
            break;
        case ITEMS.EMERALD_MACHINE:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_bg = Va, this.draw_fg = Ba, this.halo = new _.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.rotate1 = 0, this.rotate2 = 0, this.draw_life = wn;
            break;
        case ITEMS.RESURRECTION:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_bg = Ka, this.draw_fg = Wa, this.halo = new _.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.rotate1 = 0, this.rotate2 = 0;
            break;
        case ITEMS.FIRE:
        case ITEMS.BIG_FIRE:
            this.draw_bg = ma, this.draw_fg = Ua, this.fire = new _.LinearAnimation(!1, 1, 1.03, .98, .3, .3), this.ground = new _.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.halo = new _.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.TOMATO_SEED:
            this.draw_bg = Na, this.draw_fg = Da, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2), this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.fruits = [];
            for (var A = 0; A < 3; A++) this.fruits.push({
                draw: Aa,
                breath: new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
            });
            this.fruits[0].x = this.x - 16.5, this.fruits[0].y = this.y - 15.5, this.fruits[0].angle = this.angle, this.fruits[1].x = this.x + 36, this.fruits[1].y = this.y + 17, this.fruits[1].angle = this.angle, this.fruits[2].x = this.x - 18.5, this.fruits[2].y = this.y + 39, this.fruits[2].angle = this.angle;
            break;
        case ITEMS.SEED:
            this.draw_bg = Ca, this.draw_fg = ga, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2), this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.fruits = [];
            for (A = 0; A < 3; A++) this.fruits.push({
                draw: da,
                breath: new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
            });
            this.fruits[0].x = this.x - 16.5, this.fruits[0].y = this.y - 15.5, this.fruits[1].x = this.x - 5.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 18, this.fruits[2].y = this.y - 5;
            break;
        case ITEMS.BABY_MAMMOTH:
            this.draw = na, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.BOAR:
            this.draw = aa, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.CRAB_BOSS:
            this.draw = oa, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathl = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathr = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3), this.heal = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.CRAB:
            this.draw = sa, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathl = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathr = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3), this.heal = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.FLAME:
            this.draw = Ta, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.FIREFLY:
            this.draw = Ea, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .5, .5), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.SPELL:
            this.spell = 15 & this.info, this.fly = 1 & this.extra, this.born = 0, this.x = this.info, this.y = this.extra, this.draw = _a, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .6, .6);
            break;
        case ITEMS.RABBIT:
        case ITEMS.WOLF:
        case ITEMS.SPIDER:
        case ITEMS.FOX:
        case ITEMS.BEAR:
        case ITEMS.MAMMOTH:
        case ITEMS.PIRANHA:
        case ITEMS.KRAKEN:
        case ITEMS.PENGUIN:
            this.draw = Ea, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.SIGN:
            this.draw = va, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.BREAD_OVEN:
            this.draw_fg = pa, this.draw = Ma, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.up = new _.LinearAnimation(!1, 1, 1.03, .98, .1, .1), this.smog = [];
            break;
        case ITEMS.GIFT:
            this.angle = Math.random() * Math.PI / 2;
        case ITEMS.CRATE:
        case ITEMS.DEAD_BOX:
            this.draw = ta, this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.TREASURE_CHEST:
            this.draw = ra, this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.LAVA_DRAGON:
            this.scale = 1, this.draw = ea, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.SAND_WORM:
            this.dig = 0, this.ground = [], this.groundTimer = 0, this.draw_ground = Xn, this.draw = qn, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.VULTURE:
            this.x = this.info, this.y = this.extra, this.scale = 1, this._alpha = 0, this.draw = jn, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.HAWK:
            this.x = this.info, this.y = this.extra, this.scale = 1, this._alpha = 0, this.draw = Zn, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.BABY_LAVA:
            this.scale = 1, this.draw = Qn, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.BABY_DRAGON:
            this.scale = 1, this.draw = $n, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.DRAGON:
            this.scale = 1, this.draw = ia, this.breath = new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new _.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new _.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.FRUIT:
            this.fruits = [];
            for (A = 0; A < 5; A++) this.fruits.push({
                draw: da,
                breath: new _.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
            });
            switch (this.id % 3) {
            case 0:
                this.fruits[0].x = this.x - 20.5, this.fruits[0].y = this.y - 22.5, this.fruits[1].x = this.x - 35.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 7.5, this.fruits[2].y = this.y - 30, this.fruits[3].x = this.x + 22.5, this.fruits[3].y = this.y, this.fruits[4].x = this.x - 7.5, this.fruits[4].y = this.y + 14.5;
                break;
            case 1:
                this.fruits[0].x = this.x - 30.5, this.fruits[0].y = this.y - 22.5, this.fruits[1].x = this.x - 15.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 15.5, this.fruits[2].y = this.y - 30, this.fruits[3].x = this.x + 12.5, this.fruits[3].y = this.y + 5, this.fruits[4].x = this.x - 40.5, this.fruits[4].y = this.y + 14.5;
                break;
            case 2:
                this.fruits[0].x = this.x - 20.5, this.fruits[0].y = this.y - 20.5, this.fruits[1].x = this.x - 35.5, this.fruits[1].y = this.y + 15.5, this.fruits[2].x = this.x + 7.5, this.fruits[2].y = this.y - 17, this.fruits[3].x = this.x + 22.5, this.fruits[3].y = this.y + 5, this.fruits[4].x = this.x - 7.5, this.fruits[4].y = this.y + 1.5
            }
            break;
        case ITEMS.WHEAT_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = ca, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2), this.wind = new _.LinearAnimation(!1, 0, Math.PI / 30, -Math.PI / 30, .06, .06);
            break;
        case ITEMS.THORNBUSH_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = Ia, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.GARLIC_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = ha, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.CARROT_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = la, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.ALOE_VERA_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = ua, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.WATERMELON_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = Oa, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.PUMPKIN_SEED:
            this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = Ra, this.ground = new _.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.EXTRACTOR_MACHINE_STONE:
            this.draw = La, this.rotate = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_GOLD:
            this.draw = fa, this.rotate = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
            this.draw = Ha, this.rotate = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
            this.draw = Pa, this.rotate = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_REIDITE:
            this.draw = ya, this.rotate = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.WINDMILL:
            this.draw_bg = za, this.draw_fg = Ga, this.rotate = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.ROOF:
            this.draw = Un, this.j = Math.floor(this.x / 100), this.i = Math.floor(this.y / 100), this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.opacity = 1, this.draw_life = Kn;
            break;
        case ITEMS.GARLAND:
            this.draw = Yn, this.halo = new _.LinearAnimation(!1, 1, 1.15, 1, .3, .3), this.color = 0, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.PLOT:
        case ITEMS.WORKBENCH:
        case ITEMS.WOOD_TOWER:
        case ITEMS.WELL:
        case ITEMS.TOTEM:
            this.draw = kn, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.BRIDGE:
            this.draw = kn, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_life = Kn;
            break;
        case ITEMS.WALL:
        case ITEMS.STONE_WALL:
        case ITEMS.GOLD_WALL:
        case ITEMS.DIAMOND_WALL:
        case ITEMS.AMETHYST_WALL:
        case ITEMS.REIDITE_WALL:
        case ITEMS.SPIKE:
        case ITEMS.STONE_SPIKE:
        case ITEMS.GOLD_SPIKE:
        case ITEMS.DIAMOND_SPIKE:
        case ITEMS.AMETHYST_SPIKE:
        case ITEMS.REIDITE_SPIKE:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid);
            this.draw = kn, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_life = wn;
            break;
        case ITEMS.BED:
            this.draw = Fn, this.opacity = 1, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            var d = this.angle % (Math.PI / 2);
            d < Math.PI / 4 ? this.angle -= d : this.angle += Math.PI / 2 - d;
            break;
        case ITEMS.WHEAT_MOB:
            this.draw = Vn, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.ALOE_VERA_MOB:
            this.draw = Wn, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.PUMPKIN_MOB:
            this.draw = Bn, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.GARLIC_MOB:
            this.draw = zn, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.THORNBUSH_MOB:
            this.draw = yn, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.CHEST:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid);

            this.ObjectX = Math.floor(this.x / 100);
            this.ObjectY = Math.floor(this.y / 100);

            this.Chunk = {};
            this.Chunk[`${this.ObjectX.toString() + this.ObjectY.toString()}`] = 1; //Middle square
            this.Chunk[`${(this.ObjectX - 1).toString() + this.ObjectY.toString()}`] = 1; //Middle left square
            this.Chunk[`${(this.ObjectX + 1).toString() + this.ObjectY.toString()}`] = 1; //Middle right square
            this.Chunk[`${this.ObjectX.toString() + (this.ObjectY - 1).toString()}`] = 1; //Top mid square
            this.Chunk[`${this.ObjectX.toString() + (this.ObjectY + 1).toString()}`] = 1; //Bot mid square
            this.Chunk[`${(this.ObjectX - 1).toString() + (this.ObjectY - 1).toString()}`] = 1; //Top left square
            this.Chunk[`${(this.ObjectX + 1).toString() + (this.ObjectY - 1).toString()}`] = 1; //Top right square
            this.Chunk[`${(this.ObjectX - 1).toString() + (this.ObjectY + 1).toString()}`] = 1; //Bot left square
            this.Chunk[`${(this.ObjectX + 1).toString() + (this.ObjectY + 1).toString()}`] = 1; //Bot right square
            this.update = function (e) {
                this.lock = this.info > 8e3 ? 1 : 0, this.info = this.info > 8e3 ? this.info - 8192 : this.info, this.action = e
            }, this.draw = Pn, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.lock = 0, this.update(this.action);
            break;
        case ITEMS.WOOD_DOOR_SPIKE:
        case ITEMS.STONE_DOOR_SPIKE:
        case ITEMS.GOLD_DOOR_SPIKE:
        case ITEMS.DIAMOND_DOOR_SPIKE:
        case ITEMS.AMETHYST_DOOR_SPIKE:
        case ITEMS.REIDITE_DOOR_SPIKE:
        case ITEMS.WOOD_DOOR:
        case ITEMS.STONE_DOOR:
        case ITEMS.GOLD_DOOR:
        case ITEMS.DIAMOND_DOOR:
        case ITEMS.AMETHYST_DOOR:
        case ITEMS.REIDITE_DOOR:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid);
            this.draw = Hn, this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_life = wn;
            break;
        case ITEMS.FURNACE:
            this.draw_bg = Sa, this.draw = ba, this.draw_fg = wa, this.ground = new _.LinearAnimation(!1, 1, 1.23, 1.18, .02, .02), this.halo = new _.LinearAnimation(!1, 1, 1.23, 1.18, .04, .04), this.hit = {
                anim: new _.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.update = function (e) {
                this.action = e
            }
        }
    }

    function ts(e) {
        function i(e, i, t, r, n) {
            for (var a = i + Math.floor(A_.RNG.get() * r), o = t + Math.floor(A_.RNG.get() * r), s = 10 + Math.floor(A_.RNG.get() * (A_.nw - a - 20)), E = 10 + Math.floor(A_.RNG.get() * (A_.nh - o - 20)), T = s + a, A = E + o, d = 0; d < A_.biomes.length; d++) {
                var I = A_.biomes[d];
                if (1 === _.intersect_aabb(s, T, E, A, I.x1 / 100 - n, I.x2 / 100 + n, I.y1 / 100 - n, I.y2 / 100 + n)) return 0
            }
            return A_.biomes.push(new A_.Biome(e, s, E, a, o, 15)), 1
        }

        function t(e, i, t) {
            for (var r = i, n = t; n < A_.nh; n++) {
                for (var a = i; a < A_.nw && (n === t && (r = Math.max(a, r)), !(a > r)) && 1 !== e[n][a]; a++) e[n][a] = 1;
                if (a < r) break
            }
            A_.biomes.push(new A_.Biome(A_.BIOME_SEA, i, t, r - i + 1, n - t, 15))
        }

        function r(e, t, r, n, a) {
            for (var o = 0; o < a && 1 !== i(e, t, r, n, 8); o++);
            return o === a ? 0 : 1
        }

        function a(e, i, t, r, n, a, o, s) {
            for (var _ = Math.floor(o / 2), E = Math.max(1, Math.floor(o / 2)), T = Math.floor(s / 2), A = Math.max(1, Math.floor(s / 2)), d = 0; d < t; d++) {
                for (var I = e - T; I < e + A; I++)
                    for (var h = i - _; h < i + E; h++) 1 === N(I, h, "wtb", 0, 1) && a.push([I, h, 1]);
                e += r, i += n
            }
        }

        function o(e, i) {
            for (var t = A_.biomes[e], r = Math.floor(t.y1 / 100), n = Math.floor(t.x1 / 100), o = Math.floor(t.h / 100), s = n + (u = Math.floor(t.w / 100)), _ = 2, E = o, T = r, A = n + 10 + Math.floor((u - 20) * A_.RNG.get()), d = A - 4; d < A + 4; d++) N(r - 1, d, "wtb", 0, 1);
            for (; E > 0;)
                if (2 !== _)
                    if (E < 10)
                        for (l = 1; E > 0; l++) a(T, A, 1, 1, 0, i, l, 1), E -= 1, T += 1;
                    else if (1 !== _) {
                _ = 1;
                var I = Math.floor(1 + 2 * A_.RNG.get()),
                    h = 1 + Math.floor(4 * A_.RNG.get());
                A < n + 16 ? (a(T, A, I, 0, 1, i, h, h), A += I) : A > s - 16 ? (a(T, A, I, 0, -1, i, h, h), A -= I) : A_.RNG.get() > .5 ? (a(T, A, I, 0, 1, i, h, h), A += I) : (a(T, A, I, 0, -1, i, h, h), A -= I)
            } else {
                var u, O = Math.min(E, Math.floor(1 + 4 * A_.RNG.get()));
                a(T, A, O, 1, 0, i, u = 1 + Math.floor(4 * A_.RNG.get()), u), _ = 0, E -= O, T += O
            } else {
                for (var l = 10; l > 1; l--) a(T, A, 1, 1, 0, i, l, 1), E -= 1, T += 1;
                _ = 0
            }
            for (d = A - 1; d < A + 2; d++) N(T, d, "wtb", 0, 1)
        }

        function E(e, i) {
            for (var t = 0; t < i.length; t++) {
                C(i[t][0], i[t][1], e, i[t][2])
            }
        }

        function T(e) {
            for (var i = 0; i < 3; i++) R(e, "s", i, 15);
            for (i = 0; i < 3; i++) R(e, "a", i, 1);
            for (i = 0; i < 3; i++) R(e, "d", i, 1);
            O(e)
        }

        function A(e, i) {
            for (var t = 0; t < 3; t++) R(e, "s", t, Math.floor(18 * i));
            for (t = 0; t < 3; t++) R(e, "f", t, Math.floor(24 * i));
            for (t = 0; t < 3; t++) R(e, "d", t, Math.max(1, Math.floor(2 * i)), .3);
            for (t = 0; t < 3; t++) R(e, "g", t, Math.floor(6 * i));
            O(e)
        }

        function d(e, i) {
            for (var t = 0; t < 3; t++) R(e, "s", t, Math.floor(12 * i));
            for (t = 0; t < 3; t++) R(e, "m", t, Math.max(1, Math.floor(1 * i)), .2);
            R(e, "c", 0, Math.floor(36 * i));
            var r = [];
            ! function (e, i) {
                for (var t = A_.biomes[e], r = Math.floor(t.y1 / 100), n = Math.floor(t.x1 / 100), a = Math.floor(t.h / 100), o = Math.floor(t.w / 100), s = r + Math.floor(a / 2), _ = n + Math.floor(o / 2), E = 0; E < 3; E++) N(T = Math.floor(s - 3 + 6 * A_.RNG.get()), A = Math.floor(_ - 3 + 6 * A_.RNG.get()), "plm", E, 1);
                for (E = 0; E < 80; E++) {
                    var T, A;
                    1 === N(T = Math.floor(s - 3 + 6 * A_.RNG.get()), A = Math.floor(_ - 3 + 6 * A_.RNG.get()), "wtb", 0, 1) && i.push([T, A, 0])
                }
            }(e, r), E(e, r), r = []
        }

        function I(e, i) {
            ! function (e, i) {
                for (var t = A_.biomes[i], r = 0, n = 0; r < e && n < 1e4; n++) {
                    var a = t.y1 + A_.RNG.get() * t.h,
                        o = t.x1 + A_.RNG.get() * t.w,
                        s = Math.floor(a / 100),
                        _ = Math.floor(o / 100);
                    if (!(A_.dist_from_biome(i, 100 * _ + 50, 100 * s + 50) < 600)) {
                        for (var E = 1, T = s - 4; 1 === E && T <= s + 4; T++)
                            for (var A = _ - 4; 1 === E && A <= _ + 4; A++) void 0 !== s_.tiles[T][A] && (E = 0);
                        0 !== E && (N(s, _, "la", r % 6, 0), r++)
                    }
                }
            }(80 * i, e);
            for (var t = 0; t < 3; t++) R(e, "s", t, Math.floor(12 * i));
            for (t = 0; t < 3; t++) R(e, "g", t, Math.floor(6 * i));
            for (t = 0; t < 3; t++) R(e, "re", t, Math.max(1, Math.floor(1 * i)), .2);
            for (t = 0; t < 3; t++) R(e, "a", t, Math.max(1, Math.floor(2 * i)));
            O(e)
        }

        function h(e, i) {
            for (var t = 0; t < 6; t++) R(e, "t", t, Math.floor(80 * i));
            for (t = 0; t < 4; t++) R(e, "b", t, Math.floor(80 * i));
            for (t = 0; t < 3; t++) R(e, "s", t, Math.floor(50 * i));
            var r = [];
            for (t = 0; t < 6; t++) o(e, r);
            E(e, r), r = [], R(e, "p", 0, Math.floor(28 * i));
            for (t = 0; t < 3; t++) R(e, "g", t, Math.floor(7 * i));
            for (t = 0; t < 3; t++) R(e, "d", t, Math.floor(2 * i));
            for (t = 0; t < 3; t++) R(e, "a", t, Math.floor(1 * i));
            for (t = 0; t < 3; t++) R(e, "m", t, Math.floor(1 * i));
            R(e, "a", 0, Math.floor(1 * i)), O(e)
        }

        function u(e, i) {
            for (var t = 0; t < 6; t++) R(e, "t", t, Math.floor(20 * i));
            for (t = 0; t < 4; t++) R(e, "b", t, Math.floor(20 * i));
            for (t = 0; t < 3; t++) R(e, "s", t, Math.floor(20 * i));
            var r = [];
            o(e, r), E(e, r), r = [], R(e, "p", 0, Math.floor(24 * i));
            for (t = 0; t < 3; t++) R(e, "g", t, Math.floor(5 * i));
            if (A_.mode === qo.MODE_ZOMBIES) {
                for (t = 0; t < 3; t++) R(e, "d", t, Math.floor(3 * i));
                for (t = 0; t < 3; t++) R(e, "a", t, Math.floor(2 * i))
            }
            O(e)
        }

        function O(e) {
            var i = A_.biomes[e];
            N(-3 + Math.floor(i.y2 / 100), -1 + Math.floor(i.x2 / 100), "s", 0, 0), N(3 + Math.floor(i.y1 / 100), -1 + Math.floor(i.x2 / 100), "s", 0, 0), N(-3 + Math.floor(i.y2 / 100), 1 + Math.floor(i.x1 / 100), "s", 0, 0), N(3 + Math.floor(i.y1 / 100), 1 + Math.floor(i.x1 / 100), "s", 0, 0)
        }

        function R(e, i, t, r, n) {
            var a = A_.biomes[e],
                o = Math.floor(a.x1 / 100),
                s = Math.floor(a.y1 / 100),
                _ = Math.floor(a.w / 100),
                E = Math.floor(a.h / 100);
            void 0 !== n && (n = 1 - n, o += Math.floor(_ * n / 2), s += Math.floor(E * n / 2), _ -= Math.floor(_ * n), E -= Math.floor(E * n));
            for (var T = s_.tiles, A = 0, d = 0; A < r && !(d > 5e4); d++) {
                var I, h = s + Math.floor(A_.RNG.get() * E),
                    u = o + Math.floor(A_.RNG.get() * _);
                A_.dist_from_biome(e, 100 * u + 50, 100 * h + 50) < 400 || void 0 !== (I = T[h][u + 1]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h][u - 1]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h + 1][u]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h - 1][u]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h + 1][u - 1]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h - 1][u + 1]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h + 1][u + 1]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 !== (I = T[h - 1][u - 1]) && void 0 !== I[i] && void 0 !== I[i][t] || void 0 === T[h][u] && (N(h, u, i, t, 1), A++)
            }
        }

        function c(e, i) {
            return e >= 0 && i >= 0 && e < A_.nh && i < A_.nw
        }

        function C(e, i, t, r) {
            if (c(e, i) && (tiles = s_.tiles, void 0 === tiles[e][i] && (tiles[e][i] = {}), void 0 === tiles[e][i].r)) {
                var n = 0;
                c(e - 1, i) && void 0 !== tiles[e - 1][i] && void 0 !== tiles[e - 1][i].wtb && (n += 2), c(e, i - 1) && void 0 !== tiles[e][i - 1] && void 0 !== tiles[e][i - 1].wtb && (n += 8), c(e, i + 1) && void 0 !== tiles[e][i + 1] && void 0 !== tiles[e][i + 1].wtb && (n += 16), c(e + 1, i) && void 0 !== tiles[e + 1][i] && void 0 !== tiles[e + 1][i].wtb && (n += 64), c(e - 1, i - 1) && 10 == (10 & n) && void 0 !== tiles[e - 1][i - 1] && void 0 !== tiles[e - 1][i - 1].wtb && (n += 1), c(e - 1, i + 1) && 18 == (18 & n) && void 0 !== tiles[e - 1][i + 1] && void 0 !== tiles[e - 1][i + 1].wtb && (n += 4), c(e + 1, i - 1) && 72 == (72 & n) && void 0 !== tiles[e + 1][i - 1] && void 0 !== tiles[e + 1][i - 1].wtb && (n += 32), c(e + 1, i + 1) && 80 == (80 & n) && void 0 !== tiles[e + 1][i + 1] && void 0 !== tiles[e + 1][i + 1].wtb && (n += 128), tiles[e][i].r = {}, tiles[e][i].r.river = n, tiles[e][i].r.current = r, tiles[e][i].r.dist = A_.dist_from_biome(t, 100 * i + 50, 100 * e + 50) - 400, tiles[e][i].r.x = 100 * i + 50, tiles[e][i].r.y = 100 * e + 50
            }
        }

        function N(e, i, t, r, n) {
            if (!(e < 0 || i < 0 || e >= A_.nh || i >= A_.nw)) return tiles = s_.tiles, void 0 === tiles[e][i] && (tiles[e][i] = {}), void 0 !== tiles[e][i][t] ? 0 : (tiles[e][i][t] = [], tiles[e][i][t][r] = [{
                x: 100 * i + 50,
                y: 100 * e + 50
            }], 1 === n && function (e, i, t, r) {
                le.push([e, i, t, r])
            }(t, r, e, i), 1)
        }

        function D(e, i, t) {
            if (e[i])
                for (s = 0; s < e[i].length; s++)
                    if (e[i][s])
                        for (l = 0; l < e[i][s].length; l++) e[i][s][l].hit = t, e[i][s][l].update = !1, e[i][s][l].time = 0, e[i][s][l].angle = 0
        }
        this.mode = qo.MODE_PVP, this.max_units = e, this.custom_map = 0, this.islands = 6, this.players = [], this.units = [], this.units[ITEMS.PLAYERS] = [], this.units[ITEMS.FRUIT] = [], this.units[ITEMS.RABBIT] = [], this.units[ITEMS.WOLF] = [], this.units[ITEMS.CRAB] = [], this.units[ITEMS.BOAR] = [], this.units[ITEMS.BABY_MAMMOTH] = [], this.units[ITEMS.CRAB_BOSS] = [], this.units[ITEMS.BABY_DRAGON] = [], this.units[ITEMS.BABY_LAVA] = [], this.units[ITEMS.HAWK] = [], this.units[ITEMS.PIRANHA] = [], this.units[ITEMS.KRAKEN] = [], this.units[ITEMS.FOX] = [], this.units[ITEMS.PENGUIN] = [], this.units[ITEMS.SPELL] = [], this.units[ITEMS.FIREFLY] = [], this.units[ITEMS.BEAR] = [], this.units[ITEMS.MAMMOTH] = [], this.units[ITEMS.DRAGON] = [], this.units[ITEMS.LAVA_DRAGON] = [], this.units[ITEMS.FLAME] = [], this.units[ITEMS.WHEAT_MOB] = [], this.units[ITEMS.ALOE_VERA_MOB] = [], this.units[ITEMS.PUMPKIN_MOB] = [], this.units[ITEMS.GARLIC_MOB] = [], this.units[ITEMS.THORNBUSH_MOB] = [], this.units[ITEMS.TREASURE_CHEST] = [], this.units[ITEMS.DEAD_BOX] = [], this.units[ITEMS.CRATE] = [], this.units[ITEMS.BREAD_OVEN] = [], this.units[ITEMS.SIGN] = [], this.units[ITEMS.SPIDER] = [], this.units[ITEMS.WORKBENCH] = [], this.units[ITEMS.FIRE] = [], this.units[ITEMS.BIG_FIRE] = [], this.units[ITEMS.SEED] = [], this.units[ITEMS.SPIKE] = [], this.units[ITEMS.STONE_SPIKE] = [], this.units[ITEMS.GOLD_SPIKE] = [], this.units[ITEMS.DIAMOND_SPIKE] = [], this.units[ITEMS.AMETHYST_SPIKE] = [], this.units[ITEMS.REIDITE_SPIKE] = [], this.units[ITEMS.WALL] = [], this.units[ITEMS.STONE_WALL] = [], this.units[ITEMS.GOLD_WALL] = [], this.units[ITEMS.DIAMOND_WALL] = [], this.units[ITEMS.AMETHYST_WALL] = [], this.units[ITEMS.REIDITE_WALL] = [], this.units[ITEMS.BED] = [], this.units[ITEMS.WOOD_DOOR] = [], this.units[ITEMS.STONE_DOOR] = [], this.units[ITEMS.GOLD_DOOR] = [], this.units[ITEMS.DIAMOND_DOOR] = [], this.units[ITEMS.AMETHYST_DOOR] = [], this.units[ITEMS.REIDITE_DOOR] = [], this.units[ITEMS.WOOD_DOOR_SPIKE] = [], this.units[ITEMS.STONE_DOOR_SPIKE] = [], this.units[ITEMS.GOLD_DOOR_SPIKE] = [], this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [], this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [], this.units[ITEMS.REIDITE_DOOR_SPIKE] = [], this.units[ITEMS.FURNACE] = [], this.units[ITEMS.TOTEM] = [], this.units[ITEMS.WOOD_TOWER] = [], this.units[ITEMS.CHEST] = [], this.units[ITEMS.RESURRECTION] = [], this.units[ITEMS.EMERALD_MACHINE] = [], this.units[ITEMS.BRIDGE] = [], this.units[ITEMS.ROOF] = [], this.units[ITEMS.PLOT] = [], this.units[ITEMS.WHEAT_SEED] = [], this.units[ITEMS.ALOE_VERA_SEED] = [], this.units[ITEMS.PUMPKIN_SEED] = [], this.units[ITEMS.TOMATO_SEED] = [], this.units[ITEMS.CARROT_SEED] = [], this.units[ITEMS.WATERMELON_SEED] = [], this.units[ITEMS.GARLIC_SEED] = [], this.units[ITEMS.THORNBUSH_SEED] = [], this.units[ITEMS.WINDMILL] = [], this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [], this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [], this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [], this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [], this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [], this.units[ITEMS.WELL] = [], this.units[ITEMS.GIFT] = [], this.units[ITEMS.GARLAND] = [], this.fast_units = [], this.nw = 260, this.nh = 260, this.dw = 100, this.dh = 100, this.w = this.nw * this.dw, this.h = this.nh * this.dh, this.RNG = new n.Random, this.biomes = [], this.shade = new _.LinearAnimation(!1, 0, 1, 0, 1, 1), this.transition = !1, this.BIOME = [], this.BIOME_FOREST = 0, this.BIOME_WINTER = 1, this.BIOME_LAVA = 2, this.BIOME_DRAGON = 3, this.BIOME_SEA = 4, this.BIOME_DESERT = 10, this.BIOME[this.BIOME_FOREST] = {
            isSand: 1,
            day: [19, 58, 43],
            night: [4, 43, 48],
            _color: ["#133a2b", "#042b30"]
        }, this.BIOME[this.BIOME_SEA] = {
            isSand: 0,
            day: [11, 106, 132],
            night: [9, 55, 63],
            _color: ["#0B6A84", "#09373F"]
        }, this.BIOME[this.BIOME_WINTER] = {
            isSand: 0,
            day: [235, 242, 240],
            night: [19, 97, 103],
            _color: ["#EBF2F0", "#136167"]
        }, this.BIOME[this.BIOME_LAVA] = {
            isSand: 0,
            day: [45, 32, 23],
            night: [3, 28, 30],
            _color: ["#2D2017", "#031C1E"]
        }, this.BIOME[this.BIOME_DRAGON] = {
            isSand: 0,
            day: [74, 74, 74],
            night: [24, 61, 60],
            _color: ["#4A4A4A", "#183D3C"]
        }, this.BIOME[this.BIOME_DESERT] = {
            isSand: 0,
            day: [235, 216, 166],
            night: [9, 61, 56],
            _color: ["#EBD8A6", "#093D38"]
        }, this.Biome = function (e, i, t, r, n, a) {
            this.x1 = 100 * i, this.y1 = 100 * t, this.w = 100 * r, this.h = 100 * n, this.x2 = 100 * (i + r), this.y2 = 100 * (t + n), this.t = e, this.v = void 0 === a ? 15 : a
        }, this.MAX_DIST = -1e6, this.dist_winter = this.MAX_DIST, this.dist_desert = this.MAX_DIST, this.dist_lava = this.MAX_DIST, this.dist_forest = this.MAX_DIST, this.dist_water = this.MAX_DIST, this.dist_dragon = this.MAX_DIST, this.dist_from_biomes = function (e) {
            var i = e.r.x,
                t = e.r.y,
                r = Math.floor(t / 100),
                n = Math.floor(i / 100);
            e.dist_winter = A_.MAX_DIST, e.dist_desert = A_.MAX_DIST, e.dist_lava = A_.MAX_DIST, e.dist_forest = A_.MAX_DIST, e.dist_dragon = A_.MAX_DIST, e.dist_sand = A_.MAX_DIST;
            for (var a = 0; A_.biomes[a].t !== A_.BIOME_SEA; a++)
                if (A_.biomes[a].t === A_.BIOME_FOREST) {
                    var o = A_.dist_from_biome(a, i, t);
                    e.dist_forest = Math.max(e.dist_forest, o), o > 0 && 1 === A_.dist_from_sand(a, i, t) && (e.dist_sand = 1)
                } else A_.biomes[a].t === A_.BIOME_WINTER ? e.dist_winter = Math.max(e.dist_winter, A_.dist_from_biome(a, i, t)) : A_.biomes[a].t === A_.BIOME_DESERT ? e.dist_desert = Math.max(e.dist_desert, A_.dist_from_biome(a, i, t)) : A_.biomes[a].t === A_.BIOME_LAVA ? e.dist_lava = Math.max(e.dist_lava, A_.dist_from_biome(a, i, t)) : A_.biomes[a].t === A_.BIOME_DRAGON && (e.dist_dragon = Math.max(e.dist_dragon, A_.dist_from_biome(a, i, t)));
            s_.tiles[r][n].iblk && (e.dist_sand = 1), A_.find_bridge(n, r) ? e.dist_water = e.MAX_DIST : s_.tiles[r][n].wtb || e.dist_winter < 0 && e.dist_lava < 0 && e.dist_forest < 0 && e.dist_sand < 0 && e.dist_dragon < 0 && e.dist_desert < 0 ? e.dist_water = 1 : e.dist_water = e.MAX_DIST
        }, this.update_dist_from_biomes = function (e, i) {
            A_.dist_winter = A_.MAX_DIST, A_.dist_desert = A_.MAX_DIST, A_.dist_lava = A_.MAX_DIST, A_.dist_dragon = A_.MAX_DIST, A_.dist_forest = A_.MAX_DIST;
            for (var t = 0; A_.biomes[t].t !== A_.BIOME_SEA; t++) A_.biomes[t].t === A_.BIOME_FOREST ? A_.dist_forest = Math.max(A_.dist_forest, A_.dist_from_biome(t, e, i)) : A_.biomes[t].t === A_.BIOME_WINTER ? A_.dist_winter = Math.max(A_.dist_winter, A_.dist_from_biome(t, e, i)) : A_.biomes[t].t === A_.BIOME_DESERT ? A_.dist_desert = Math.max(A_.dist_desert, A_.dist_from_biome(t, e, i)) : A_.biomes[t].t === A_.BIOME_LAVA ? A_.dist_lava = Math.max(A_.dist_lava, A_.dist_from_biome(t, e, i)) : A_.biomes[t].t === A_.BIOME_DRAGON && (A_.dist_dragon = Math.max(A_.dist_dragon, A_.dist_from_biome(t, e, i)));
            A_.dist_winter < 0 && A_.dist_dragon < 0 && A_.dist_forest < 0 && A_.dist_dragon < 0 && A_.dist_desert < 0 ? A_.dist_water = 1 : A_.dist_water = A_.MAX_DIST
        }, this.dist_from_sand = function (e, i, t) {
            var r = A_.biomes[e],
                n = 0;
            x1 = r.x1 + 30 + (0 == (r.v & qo.LEFT) ? 150 : 0);
            var a = i - x1;
            return (r.v & qo.LEFT) > 0 && a > 0 && a < 320 && (n = 1), y1 = r.y1 + 250 + (0 == (r.v & qo.TOP) ? 150 : 0), a = t - y1, (r.v & qo.TOP) > 0 && a > 0 && a < 320 && (n = 1), x2 = r.x2 + 80 + (0 == (r.v & qo.RIGHT) ? -200 : 0), a = x2 - i, (r.v & qo.RIGHT) > 0 && a > 0 && a < 320 && (n = 1), y2 = r.y2 - 200 + (0 == (r.v & qo.BOTTOM) ? -200 : 0), a = y2 - t, (r.v & qo.BOTTOM) > 0 && a > 0 && a < 320 && (n = 1), i >= x1 && i <= x2 && t >= y1 && t <= y2 ? n : 0
        }, this.dist_from_biome = function (e, i, t) {
            var r = A_.biomes[e];
            if (x1 = r.x1 + 30, y1 = r.y1 + 250, x2 = r.x2 + 80, y2 = r.y2 - 200, i >= x1 && i <= x2 && t >= y1 && t <= y2) return Math.min(i - x1, x2 - i, t - y1, y2 - t);
            var n = -1e6;
            return i - x1 < 0 ? n = Math.max(n, i - x1) : x2 - i < 0 && (n = Math.max(n, x2 - i)), distY = -1e6, (t < y1 || t > y2) && (t - y1 < 0 ? distY = Math.max(distY, t - y1) : distY = Math.max(distY, y2 - t), n = -1e6 !== n && -1e6 !== distY ? Math.min(n, distY) : distY), n
        }, this.add_island = function (e, i, t) {
            var r = t,
                n = i;
            N(r, n, "isl", e, 1);
            for (var a = 0; a < 4; a++)
                for (var o = 0; o < 3; o++) N(r - o, n - a, "iblk", 0), N(r + o, n - a, "iblk", 0), N(r + o, n + a, "iblk", 0), N(r - o, n + a, "iblk", 0);
            if (0 === e) {
                for (a = 0; a < 2; a++) N(r - a, n - 4, "iblk", 0), N(r + a, n - 4, "iblk", 0), N(r - a, n + 4, "iblk", 0), N(r + a, n + 4, "iblk", 0);
                for (a = 0; a < 3; a++) N(r - 3, n + a, "iblk", 0), N(r + 3, n + a, "iblk", 0), N(r - 3, n - a, "iblk", 0), N(r + 3, n - a, "iblk", 0);
                N(r - 2, n - 4, "iblk", 0), N(r - 3, n - 3, "iblk", 0), N(r + 2, n + 4, "iblk", 0), N(r + 3, n + 3, "iblk", 0)
            } else if (1 === e) {
                for (a = 0; a < 3; a++) N(r - a, n - 4, "iblk", 0), N(r + a, n - 4, "iblk", 0), N(r - a, n + 4, "iblk", 0), N(r + a, n + 4, "iblk", 0);
                for (a = 0; a < 4; a++) N(r - 3, n + a, "iblk", 0), N(r + 3, n + a, "iblk", 0), N(r - 3, n - a, "iblk", 0), N(r + 3, n - a, "iblk", 0)
            } else if (2 === e) {
                for (a = 0; a < 2; a++) N(r - a, n - 4, "iblk", 0), N(r + a, n - 4, "iblk", 0), N(r - a, n + 4, "iblk", 0), N(r + a, n + 4, "iblk", 0);
                for (a = 0; a < 3; a++) N(r - 3, n + a, "iblk", 0), N(r + 3, n + a, "iblk", 0), N(r - 3, n - a, "iblk", 0), N(r + 3, n - a, "iblk", 0)
            }
        }, this.add_islands = function (e) {
            for (var i = 0; i < A_.biomes.length && e > 0; i++) {
                var t = A_.biomes[i];
                if (t.t === A_.BIOME_SEA && (t.w > 1800 && t.h > 1e3)) {
                    var r = Math.floor((t.x1 + t.w / 2) / 100),
                        n = Math.floor((t.y1 + t.h / 2) / 100);
                    A_.add_island(e % 3, r, n);
                    for (var a = 0; a < 3; a++) {
                        var o = n - 2 + Math.floor(4 * A_.RNG.get()),
                            s = r - 3 + Math.floor(6 * A_.RNG.get());
                        void 0 === s_.tiles[o][s].s && N(o, s, "plm", a);
                        o = n - 2 + Math.floor(4 * A_.RNG.get()), s = r - 3 + Math.floor(6 * A_.RNG.get());
                        void 0 === s_.tiles[o][s].plm && N(o, s, "s", a)
                    }
                    o = n - 2 + Math.floor(4 * A_.RNG.get()), s = r - 3 + Math.floor(6 * A_.RNG.get());
                    void 0 === s_.tiles[o][s].plm && void 0 === s_.tiles[o][s].s && N(o, s, "p", 0, 1), e--
                }
            }
        }, this.generate_world = function (e) {
            A_.RNG.init(e);
            for (var i = 0;;) {
                if (++i > 1e4) return;
                if (A_.biomes = [], 0 !== A_.custom_map || A_.mode !== qo.MODE_VAMPIRES && A_.mode !== qo.MODE_EXPERIMENTAL && A_.mode !== qo.MODE_PVP || (A_.custom_map = Y), A_.mode === qo.MODE_ZOMBIES) A_.biomes.push(new A_.Biome(A_.BIOME_FOREST, 2, 2, 80, 80, 15));
                else if (A_.mode === qo.MODE_LEGACY) A_.biomes.push(new A_.Biome(A_.BIOME_FOREST, 2, 2, 150, 150, 15));
                else if (0 !== A_.custom_map && A_.custom_map.length > 0 && A_.custom_map[0].length > 3)
                    for (var n = 0; n < A_.custom_map.length; n++) {
                        if (0 !== (D = A_.custom_map[n])[0]) break;
                        var a = qo.BIOME_FOREST;
                        switch (D[1]) {
                        case "FOREST":
                            a = A_.BIOME_FOREST;
                            break;
                        case "WINTER":
                            a = A_.BIOME_WINTER;
                            break;
                        case "DESERT":
                            a = A_.BIOME_DESERT;
                            break;
                        case "LAVA":
                            a = A_.BIOME_LAVA;
                            break;
                        case "DRAGON":
                            a = A_.BIOME_DRAGON
                        }
                        A_.biomes.push(new A_.Biome(a, D[2], D[3], D[4], D[5], D[6], D[7]))
                    } else if (0 !== A_.custom_map) {
                        for (n = 0; n < A_.custom_map.length; n++) {
                            var o = A_.custom_map[n];
                            a = qo.BIOME_FOREST;
                            switch (o[0]) {
                            case "FOREST":
                                a = A_.BIOME_FOREST;
                                break;
                            case "WINTER":
                                a = A_.BIOME_WINTER;
                                break;
                            case "DESERT":
                                a = A_.BIOME_DESERT;
                                break;
                            case "LAVA":
                                a = A_.BIOME_LAVA;
                                break;
                            case "DRAGON":
                                a = A_.BIOME_DRAGON
                            }
                            if (0 === r(a, o[1], o[2], 0, 10 * (n + 1))) break
                        }
                        if (n !== A_.custom_map.length) continue
                    } break
            }
            render_minimap();
            for (var s = [], _ = 0; _ < A_.nh; _++) {
                s[_] = new Array(A_.nw);
                for (var O = 0; O < A_.nw; O++) s[_][O] = 0
            }
            for (_ = 0; _ < A_.biomes.length; _++)
                for (var l = (o = A_.biomes[_]).x2 / 100, R = o.y2 / 100, c = o.x1 / 100; c <= l; c++)
                    for (var C = o.y1 / 100; C <= R; C++) s[C][c] = 1;
            for (C = 0; C < A_.nh; C++)
                for (c = 0; c < A_.nw; c++) 0 === s[C][c] && t(s, c, C);
            s_ = {
                w: A_.nw,
                h: A_.nh,
                tiles: []
            };
            for (_ = 0; _ < A_.nh; _++) s_.tiles[_] = [];
            if (0 !== A_.custom_map && A_.custom_map.length > 0 && A_.custom_map[0].length > 3)
                for (n = 0; n < A_.custom_map.length; n++) {
                    "isl" === (D = A_.custom_map[n])[1] && A_.add_island(D[2], D[3], D[4])
                } else A_.add_islands(A_.islands);
            if (0 !== A_.custom_map && A_.custom_map.length > 0 && A_.custom_map[0].length > 3) {
                var g = [];
                for (n = 0; n < A_.custom_map.length; n++) {
                    var D;
                    1 === (D = A_.custom_map[n])[0] && ("r" === D[1] ? (N(D[3], D[2], "wtb", 0, 1), g.push([D[3], D[2], D[4]])) : N(D[4], D[3], D[1], D[2], D[5]))
                }
                E(0, g), g = []
            } else
                for (_ = 0; _ < A_.biomes.length; _++) {
                    o = A_.biomes[_];
                    A_.mode === qo.MODE_LEGACY ? o.t === A_.BIOME_FOREST && h(_, o.w / 1e4) : (o.t === A_.BIOME_FOREST && u(_, o.w / 1e4), o.t === A_.BIOME_LAVA && I(_, o.w / 1e4), o.t === A_.BIOME_WINTER && A(_, o.w / 1e4), o.t === A_.BIOME_DESERT && d(_, o.w / 1e4), o.t === A_.BIOME_DRAGON && T(_))
                }
            Re("isl", 1), Re("wtb", 20), Re("la", 1), Re("c", 1), Re("s", 1), Re("f", 1), Re("p", 1), Re("g", 1), Re("d", 1), Re("a", 1), Re("re", 1), Re("m", 1), le = [], A_.map_wrapper(s_)
        }, this.render_single_resource = N, this.map_wrapper = function (e) {
            for (var i = 0; i < this.nh; i++)
                for (var t = 0; t < this.nw; t++)
                    if (e.tiles[i] || (e.tiles[i] = []), e.tiles[i][t]) {
                        var r = e.tiles[i][t];
                        if (r.de && r.de.length > 0)
                            for (var n = 0; n < r.de.length; n++)
                                if (r.de[n] && r.de[n].length > 0)
                                    if (r.de = r.de[n][0], n >= 41 && n <= 49) {
                                        r.de.scale = 3;
                                        var a = Math.floor(3 * Math.random() + 1);
                                        r.de.p = [];
                                        for (var o = 0; o < a; o++) r.de.p.push({
                                            x: 120 * Math.random() - 60,
                                            y: 120 * Math.random() - 60,
                                            angle: Math.random() * Math.PI * 2,
                                            _id: 41 + Math.floor(9 * Math.random())
                                        })
                                    } else if (n >= 19 && n <= 26) {
                            r.de.scale = 3;
                            a = Math.floor(3 * Math.random() + 1);
                            r.de.p = [];
                            for (o = 0; o < a; o++) r.de.p.push({
                                x: 120 * Math.random() - 60,
                                y: 120 * Math.random() - 60,
                                angle: Math.random() * Math.PI * 2,
                                _id: 19 + Math.floor(8 * Math.random())
                            })
                        } else n <= 15 || n >= 27 && n <= 40 ? (r.de.angle = 0, r.de.scale = 2, r.de._id = n) : (r.de.angle = Math.random() * Math.PI * 2, r.de.scale = 1, r.de._id = n);
                        D(r, "p", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "t", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "s", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "g", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "d", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "b", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "f", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "sw", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "gw", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "dw", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "a", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "cs", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "plm", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "re", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "c", new _.LinearAnimation(!1, 1, 1, 0, 10, 10)), D(r, "m", new _.LinearAnimation(!1, 1, 1, 0, 10, 10))
                    } else e.tiles[i][t] = []
        }, this.time = k.DAY, this.clock = {
            translate: {
                x: 0,
                y: 0
            },
            init: 0,
            hour: 0,
            now: 0
        }, this.delete_all_units = function () {
            this.fast_units = [], this.units[ITEMS.PLAYERS] = [], this.units[ITEMS.WORKBENCH] = [], this.units[ITEMS.FIRE] = [], this.units[ITEMS.BIG_FIRE] = [], this.units[ITEMS.SEED] = [], this.units[ITEMS.SPIKE] = [], this.units[ITEMS.STONE_SPIKE] = [], this.units[ITEMS.GOLD_SPIKE] = [], this.units[ITEMS.DIAMOND_SPIKE] = [], this.units[ITEMS.AMETHYST_SPIKE] = [], this.units[ITEMS.REIDITE_SPIKE] = [], this.units[ITEMS.BRIDGE] = [], this.units[ITEMS.WOOD_TOWER] = [], this.units[ITEMS.ROOF] = [], this.units[ITEMS.PLOT] = [], this.units[ITEMS.WHEAT_SEED] = [], this.units[ITEMS.ALOE_VERA_SEED] = [], this.units[ITEMS.PUMPKIN_SEED] = [], this.units[ITEMS.TOMATO_SEED] = [], this.units[ITEMS.CARROT_SEED] = [], this.units[ITEMS.WATERMELON_SEED] = [], this.units[ITEMS.GARLIC_SEED] = [], this.units[ITEMS.THORNBUSH_SEED] = [], this.units[ITEMS.WINDMILL] = [], this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [], this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [], this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [], this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [], this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [], this.units[ITEMS.WELL] = [], this.units[ITEMS.WALL] = [], this.units[ITEMS.STONE_WALL] = [], this.units[ITEMS.GOLD_WALL] = [], this.units[ITEMS.DIAMOND_WALL] = [], this.units[ITEMS.AMETHYST_WALL] = [], this.units[ITEMS.REIDITE_WALL] = [], this.units[ITEMS.BED] = [], this.units[ITEMS.WOOD_DOOR] = [], this.units[ITEMS.STONE_DOOR] = [], this.units[ITEMS.GOLD_DOOR] = [], this.units[ITEMS.DIAMOND_DOOR] = [], this.units[ITEMS.AMETHYST_DOOR] = [], this.units[ITEMS.REIDITE_DOOR] = [], this.units[ITEMS.WOOD_DOOR_SPIKE] = [], this.units[ITEMS.STONE_DOOR_SPIKE] = [], this.units[ITEMS.GOLD_DOOR_SPIKE] = [], this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [], this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [], this.units[ITEMS.REIDITE_DOOR_SPIKE] = [], this.units[ITEMS.FURNACE] = [], this.units[ITEMS.TOTEM] = [], this.units[ITEMS.WOOD_TOWER] = [], this.units[ITEMS.CHEST] = [], this.units[ITEMS.RESURRECTION] = [], this.units[ITEMS.EMERALD_MACHINE] = [], this.units[ITEMS.FRUIT] = [], this.units[ITEMS.RABBIT] = [], this.units[ITEMS.WOLF] = [], this.units[ITEMS.CRAB] = [], this.units[ITEMS.BOAR] = [], this.units[ITEMS.BABY_MAMMOTH] = [], this.units[ITEMS.CRAB_BOSS] = [], this.units[ITEMS.BABY_DRAGON] = [], this.units[ITEMS.BABY_LAVA] = [], this.units[ITEMS.HAWK] = [], this.units[ITEMS.PIRANHA] = [], this.units[ITEMS.KRAKEN] = [], this.units[ITEMS.FOX] = [], this.units[ITEMS.PENGUIN] = [], this.units[ITEMS.SPELL] = [], this.units[ITEMS.FIREFLY] = [], this.units[ITEMS.BEAR] = [], this.units[ITEMS.MAMMOTH] = [], this.units[ITEMS.VULTURE] = [], this.units[ITEMS.SAND_WORM] = [], this.units[ITEMS.DRAGON] = [], this.units[ITEMS.LAVA_DRAGON] = [], this.units[ITEMS.FLAME] = [], this.units[ITEMS.WHEAT_MOB] = [], this.units[ITEMS.ALOE_VERA_MOB] = [], this.units[ITEMS.PUMPKIN_MOB] = [], this.units[ITEMS.GARLIC_MOB] = [], this.units[ITEMS.THORNBUSH_MOB] = [], this.units[ITEMS.TREASURE_CHEST] = [], this.units[ITEMS.DEAD_BOX] = [], this.units[ITEMS.CRATE] = [], this.units[ITEMS.BREAD_OVEN] = [], this.units[ITEMS.SIGN] = [], this.units[ITEMS.SPIDER] = [], this.units[ITEMS.GIFT] = [], this.units[ITEMS.GARLAND] = []
        }, this.delete_units = function (e) {
            if (this.fast_units[e]) {
                type = this.fast_units[e].type, this.fast_units[e] = null;
                for (var i = this.units[type], t = 0; t < i.length; t++)
                    if (i[t].uid == e) return void i.splice(t, 1)
            }
        }, this.find_tower = function (e, i) {
            for (var t = 0; t < this.units[ITEMS.WOOD_TOWER].length; t++) {
                var r = this.units[ITEMS.WOOD_TOWER][t];
                if (Math.floor(r.x / 100) === i && Math.floor(r.y / 100) === e) return 1
            }
            return 0
        }, this.find_bridge = function (e, i) {
            for (var t = 0; t < this.units[ITEMS.BRIDGE].length; t++) {
                var r = this.units[ITEMS.BRIDGE][t];
                if (Math.floor(r.x / 100) == e && Math.floor(r.y / 100) == i) return !0
            }
            return !1
        }, this.move_units = function (e) {
            for (var i = 0; i < e.length; i++) {
                if (b = e[i], b.angle != b.nangle) {
                    var t = 2 * Math.PI;
                    if (b.angle = (b.angle + t) % t, b.nangle = (b.nangle + t) % t, b.angle != b.nangle) {
                        var r = b.nangle - b.angle,
                            n = Math.abs(r);
                        n > Math.PI && (n = 2 * Math.PI - n);
                        var a = n / Math.PI * 3 * qo.ROTATE * R_;
                        r > Math.PI ? b.angle -= a : r < -Math.PI ? b.angle += a : r < 0 ? b.angle -= a : b.angle += a, b.angle = (b.angle + t) % t, Math.abs(b.angle - b.nangle) < a && (b.angle = b.nangle)
                    }
                }
                Math.floor(b.r.y / 100), Math.floor(b.r.x / 100);
                if (b.x != b.r.x || b.y != b.r.y) {
                    b.action & ko.IDLE && (b.action -= ko.IDLE), b.action |= ko.WALK;
                    var o = _.get_std_angle(b, b.r) + Math.PI,
                        s = R_ * b.speed,
                        E = _.build_vector(s, o);
                    _.norm(E) < _.norm(_.get_vector(b, b.r)) ? _.add_vector(b, E) : (b.action & ko.WALK && (b.action -= ko.WALK), b.action |= ko.IDLE, _.copy_vector(b.r, b))
                }
                if (b.ghost) {
                    var T = b.bubbles;
                    (0 === (h = T.length) || h < k.GHOST_BUBBLES && T[h - 1].life < .95) && T.push({
                        id: Math.floor(Math.random() * sprite[k.BUBBLES][0].length),
                        x: Math.floor(b.x + 80 * Math.random() - 40),
                        y: Math.floor(b.y + 80 * Math.random() - 40),
                        life: 1
                    });
                    for (var A = 0; A < h; A++) T[A].life = Math.max(0, T[A].life - R_);
                    for (A = 0; A < h; A++)
                        if (0 === T[A].life) {
                            T.splice(A, 1);
                            break
                        }
                }
                var d = 0;
                if (b.move_effect && ui.quality) {
                    var I = b.swim,
                        h = I.length;
                    if (b.dist_water > 0 && b.vehicle !== X.BABY_DRAGON && b.vehicle !== X.BABY_LAVA && b.vehicle !== X.PLANE && b.vehicle !== X.HAWK && b.vehicle !== X.NIMBUS && !b.ghost && (d = 1, 0 === h || _.dist(I[h - 1], b) > k.SWIM_SPACE)) {
                        var u = -b.angle,
                            O = 45 * Math.sin(u) * g,
                            l = 45 * Math.cos(u) * g;
                        I.push({
                            x: b.x + O,
                            y: b.y + l,
                            r: 8,
                            alpha: .8
                        }), I.push({
                            x: b.x - O,
                            y: b.y - l,
                            r: 8,
                            alpha: .8
                        }), I.push({
                            x: b.x,
                            y: b.y,
                            r: 24,
                            alpha: 1
                        })
                    }
                    for (A = 0; A < h; A++) I[A].alpha = Math.max(0, I[A].alpha - R_ / 2.2), I[A].r += 20 * R_;
                    I.length > 0 && 0 === I[0].alpha && I.splice(0, 1);
                    var R = b.foot,
                        c = (h = R.length, -1),
                        C = Math.max(0, Math.sign(b.dist_sand)),
                        N = Math.max(0, Math.sign(b.dist_winter)),
                        D = (Math.max(0, Math.sign(b.dist_desert)), Math.max(0, Math.sign(b.dist_lava))),
                        S = Math.max(0, Math.sign(b.dist_dragon));
                    if (b.dist_sand > 0 || b.dist_desert > 0) c = k.SAND_STEP;
                    else if (b.dist_dragon > 0) c = k.CAVE_STEP;
                    else if (b.dist_winter > 0) c = k.SNOW_STEP;
                    else if (b.dist_lava > 0) c = k.LAVA_STEP;
                    if (b.vehicle === X.MOUNT_BOAR && 1 == (C | N | D | S)) {
                        c = k.BOAR_STEP;
                        var p = b.vehicle_fx2 - Math.PI / 2,
                            m = 15,
                            v = 11,
                            M = k.STEP_SPACE
                    } else if (b.vehicle === X.BABY_MAMMOTH && 1 == (C | N | D | S)) {
                        c = k.BABY_MAMMOTH_STEP;
                        p = b.vehicle_fx2 - Math.PI / 2, m = 21, v = 16, M = k.STEP_SPACE
                    } else if (b.vehicle === X.CRAB_BOSS && 1 == (C | N | D | S)) {
                        c = k.CRAB_STEP;
                        p = b.vehicle_fx2 - Math.PI / 2;
                        var G = 50 * Math.random();
                        m = 10 + G, v = 0 + G, M = .9 * k.STEP_SPACE
                    } else p = b.angle, m = 15, v = 11, M = k.STEP_SPACE;
                    if (b.vehicle === X.BABY_DRAGON || b.vehicle === X.BABY_LAVA || b.vehicle === X.NIMBUS || b.vehicle === X.HAWK || b.vehicle === X.PLANE || b.ghost);
                    else if (b.vehicle === X.SLED)(0 === h || _.dist(R[h - 1], b) > k.TRAIL_SPACE) && R.push({
                        x: b.x,
                        y: b.y,
                        angle: b.vehicle_fx2,
                        alpha: 1,
                        id: k.SLED_WAVE
                    });
                    else if (-1 != c && 0 === d && (0 === h || _.dist(R[h - 1], b) > M)) {
                        if (b.id_foot++, Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1)
                            if (b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y)
                                if (b.id_foot % 2) O = -v * g, l = -v * g;
                                else l = v * g, O = v * g;
                        else if (b.id_foot % 2) O = v * g, l = -v * g;
                        else l = v * g, O = -v * g;
                        else if (b.id_foot % 2) O = Math.sin(p) * m * g, l = Math.cos(p) * m * g;
                        else O = -Math.sin(p) * m * g, l = -Math.cos(p) * m * g;
                        R.push({
                            x: b.x + O,
                            y: b.y + l,
                            angle: p + Math.PI / 2,
                            alpha: 1,
                            id: c
                        })
                    }
                    for (A = 0; A < h; A++) R[A].id === k.SLED_WAVE ? R[A].alpha = Math.max(0, R[A].alpha - 1.5 * R_) : R[A].alpha = Math.max(0, R[A].alpha - R_ / 2.85);
                    R.length > 0 && 0 === R[0].alpha && R.splice(0, 1)
                }
            }
        }, this.update = function () {
            this.move_units(this.units[ITEMS.PLAYERS]), this.move_units(this.units[ITEMS.RABBIT]), this.move_units(this.units[ITEMS.WOLF]), this.move_units(this.units[ITEMS.CRAB]), this.move_units(this.units[ITEMS.BOAR]), this.move_units(this.units[ITEMS.BABY_MAMMOTH]), this.move_units(this.units[ITEMS.CRAB_BOSS]), this.move_units(this.units[ITEMS.BABY_DRAGON]), this.move_units(this.units[ITEMS.BABY_LAVA]), this.move_units(this.units[ITEMS.HAWK]), this.move_units(this.units[ITEMS.SPIDER]), this.move_units(this.units[ITEMS.FOX]), this.move_units(this.units[ITEMS.PENGUIN]), this.move_units(this.units[ITEMS.SPELL]), this.move_units(this.units[ITEMS.FIREFLY]), this.move_units(this.units[ITEMS.BEAR]), this.move_units(this.units[ITEMS.MAMMOTH]), this.move_units(this.units[ITEMS.VULTURE]), this.move_units(this.units[ITEMS.SAND_WORM]), this.move_units(this.units[ITEMS.DRAGON]), this.move_units(this.units[ITEMS.FLAME]), this.move_units(this.units[ITEMS.PIRANHA]), this.move_units(this.units[ITEMS.KRAKEN]), this.move_units(this.units[ITEMS.LAVA_DRAGON])
        }, this.breath = [], this.breath[k.LAKE] = new _.LinearAnimation(!1, 1, 1.05, 1, .008, .008), this.breath[k.LAKE_DEEP] = new _.LinearAnimation(!1, 1, 1.08, 1, .006, .006), this.breath[k.WAVE_ONE] = new _.LinearAnimation(!1, 1, 1.02, 1, .008, .008), this.breath[k.WAVE_TWO] = new _.LinearAnimation(!1, 1, 1.08, 1, .006, .006), this.lava = [], this.lava[0] = new _.LinearAnimation(!1, .1, 1, 0, .6, .6), this.lava[1] = new _.LinearAnimation(!1, .4, 1, 0, .6, .6), this.lava[2] = new _.LinearAnimation(!1, .3, 1, 0, .6, .6), this.lava[3] = new _.LinearAnimation(!1, .8, 1, 0, .6, .6), this.lava[4] = new _.LinearAnimation(!1, .3, 1, 0, .6, .6), this.lava[5] = new _.LinearAnimation(!1, .8, 1, 0, .6, .6), this.lava[6] = new _.LinearAnimation(!1, .5, 1, 0, .6, .6), this.lava[7] = new _.LinearAnimation(!1, .9, 1, 0, .6, .6), this.lava[8] = new _.LinearAnimation(!1, .6, 1, 0, .6, .6), this.lava[9] = new _.LinearAnimation(!1, .2, 1, 0, .6, .6), this.lava[10] = new _.LinearAnimation(!1, .6, 1, 0, .6, .6), this.lava[11] = new _.LinearAnimation(!1, .4, 1, 0, .6, .6), this.lava[12] = new _.LinearAnimation(!1, .8, 1, 0, .6, .6), this.lava[13] = new _.LinearAnimation(!1, .2, 1, 0, .6, .6), this.lava[14] = new _.LinearAnimation(!1, .7, 1, 0, .6, .6)
    }

    function rs(e, i, t, r) {
        this.id = e, this.speed = 8 * (e + 5), this.life = u / 1366, this.x = i, this.y = t, this.c = Math.cos(r), this.s = Math.sin(r), this.alpha = 0
    }

    function ns() {
        this.init = function () {}, this.resurrection = {
            pid: 1,
            iid: 1,
            open: !1
        }, this.well = {
            pid: 1,
            iid: -1,
            open: !1
        }, this.windmill = {
            amount_wheat: 0,
            amount_flour: 0,
            pid: 1,
            iid: -1,
            open: !1
        }, this.extractor = {
            amount_wood: 0,
            amount_mineral: 0,
            type: 0,
            mineral: 0,
            pid: 1,
            iid: -1,
            open: !1
        }, this.bread_oven = {
            amount_wood: 0,
            amount_bread: 0,
            amount_flour: 0,
            pid: 1,
            iid: -1,
            open: !1
        }, this.sign = {
            iid: -1,
            open: !1
        }, this.furnace = {
            amount: 0,
            pid: 1,
            iid: -1,
            open: !1
        }, this.ghost = {
            enabled: !1,
            delay: -1,
            label: !1,
            now: -1,
            draw: qa
        }, this.chest = {
            id: -1,
            amount: 0,
            pid: 1,
            iid: -1,
            open: !1,
            lock: !1,
            locked: !1,
            lockpick: !1,
            padlock: !1
        }, this.alive = !0, this.reconnect = {
            enabled: !1,
            rotate: 0
        }, this.key = _.gup("key", window.location.href);
        var e = _.gup("egg", window.location.href);

        function i() {
            this.seed = 1, this.seed2 = 2, this.seed3 = 3, this.seedv = 1, this.seedv2 = 2, this.seedv3 = 3, this.new_seed = function () {
                this.seed = 2 + Math.floor(Math.random() * qo.SEED)
            }, this.new_seed2 = function () {
                this.seed2 = 2 + Math.floor(Math.random() * qo.SEED)
            }, this.new_seed3 = function () {
                this.seed3 = 2 + Math.floor(Math.random() * qo.SEED)
            }, this.new_seedv = function () {
                this.seedv = 2 + Math.floor(Math.random() * qo.SEED)
            }, this.new_seedv2 = function () {
                this.seedv2 = 2 + Math.floor(Math.random() * qo.SEED)
            }, this.new_seedv3 = function () {
                this.seedv3 = 2 + Math.floor(Math.random() * qo.SEED)
            }, this.draw_foam_vert = function (e, i, t, r, n, a, o) {
                for (var s = 1; s < o;) {
                    var _ = s * t % RAND_SIZE,
                        E = RANDOM[_];
                    if (E < .1) T += 50, s += 50;
                    else {
                        var T = Math.floor(E * r + n);
                        if (s > a && s < o) {
                            var A = Math.random() > .5 ? -10 * R_ : 10 * R_,
                                d = T * i;
                            if (this.bxv[_] = Math.max(-qo.FLOAM_X, Math.min(qo.FLOAM_X, this.bxv[_] + A)), this.byv[_] = Math.max(-qo.FLOAM_Y, Math.min(qo.FLOAM_Y, this.byv[_] + A)), d > 0) {
                                if (I.beginPath(), I.arc(s + d_.cam.x + this.byv[_], e + this.bxv[_] - .8 * qo.FLOAM_X, d, 0, 2 * Math.PI), A_.transition) {
                                    var h = A_.time ? 1 - A_.shade.v : A_.shade.v;
                                    I.fillStyle = Do(83, 156, 160, 236, 247, 249, h)
                                } else I.fillStyle = k.FLOAM_COLOR[A_.time];
                                I.fill()
                            }
                        }
                        s += 2 * T
                    }
                }
            }, this.draw_foam = function (e, i, t, r, n, a, o) {
                for (var s = 1; s < o;) {
                    var _ = s * t % RAND_SIZE,
                        E = RANDOM[_];
                    if (E < .1) T += 50, s += 50;
                    else {
                        var T = Math.floor(E * r + n);
                        if (s > a && s < o) {
                            var A = Math.random() > .5 ? -10 * R_ : 10 * R_,
                                d = T * i;
                            if (this.bx[_] = Math.max(-qo.FLOAM_X, Math.min(qo.FLOAM_X, this.bx[_] + A)), this.by[_] = Math.max(-qo.FLOAM_Y, Math.min(qo.FLOAM_Y, this.by[_] + A)), d > 0) {
                                if (I.beginPath(), I.arc(e + this.bx[_] - .8 * qo.FLOAM_X, s + d_.cam.y + this.by[_], d, 0, 2 * Math.PI), A_.transition) {
                                    var h = A_.time ? 1 - A_.shade.v : A_.shade.v;
                                    I.fillStyle = Do(83, 156, 160, 236, 247, 249, h)
                                } else I.fillStyle = k.FLOAM_COLOR[A_.time];
                                I.fill()
                            }
                        }
                        s += 2 * T
                    }
                }
            }, this.draw_foams_bottom = function (e, i, t, r, n, a) {
                var o;
                (n -= 30, a += 30, 0 === (o = -(t - qo.LW1SX - r - 2) / qo.W1EX) && this.new_seed3(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam_vert(t, o, this.seed3, 18, 16, n, a), I.globalAlpha = 1, 0 === (o = -(e - qo.LW2SX - r + 500) / qo.W2EX) && this.new_seed(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam_vert(e, o, this.seed, 12, 10, n, a), I.globalAlpha = 1, -1 !== i) && ((o = -(i - qo.LW3SX - r + 698) / qo.W3EX) <= .01 && this.new_seed2(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam_vert(i, o, this.seed2, 6, 6, n, a), I.globalAlpha = 1)
            }, this.draw_foams_top = function (e, i, t, r, n, a) {
                var o;
                (n -= 30, a += 30, 0 === (o = -(-t + qo.LW1SX + r + 2) / qo.W1EX) && this.new_seed3(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam_vert(t, o, this.seed3, 18, 16, n, a), I.globalAlpha = 1, 0 === (o = -(-e + qo.LW2SX + r) / qo.W2EX) && this.new_seed(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam_vert(e, o, this.seed, 12, 10, n, a), I.globalAlpha = 1, -1 !== i) && ((o = -(-i + qo.LW3SX + r) / qo.W3EX) <= .01 && this.new_seed2(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam_vert(i, o, this.seed2, 6, 6, n, a), I.globalAlpha = 1)
            }, this.draw_foams_left = function (e, i, t, r, n, a) {
                var o;
                (n -= 30, a += 30, 0 === (o = -(-t + qo.LW1SX + r + 2) / qo.W1EX) && this.new_seed3(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam(t, o, this.seed3, 18, 16, n, a), I.globalAlpha = 1, 0 === (o = -(-e + qo.LW2SX + r) / qo.W2EX) && this.new_seed(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam(e, o, this.seed, 12, 10, n, a), I.globalAlpha = 1, -1 !== i) && ((o = -(-i + qo.LW3SX + r) / qo.W3EX) <= .01 && this.new_seed2(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam(i, o, this.seed2, 6, 6, n, a), I.globalAlpha = 1)
            }, this.draw_foams_right = function (e, i, t, r, n, a) {
                var o;
                (n -= 30, a += 30, 0 === (o = -(t - qo.LW1SX - r - 2) / qo.W1EX) && this.new_seed3(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam(t, o, this.seed3, 18, 16, n, a), I.globalAlpha = 1, 0 === (o = -(e - qo.LW2SX - r + 500) / qo.W2EX) && this.new_seed(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam(e, o, this.seed, 12, 10, n, a), I.globalAlpha = 1, -1 !== i) && ((o = -(i - qo.LW3SX - r + 698) / qo.W3EX) <= .01 && this.new_seed2(), I.globalAlpha = _.ease_in_out_quad(o), this.draw_foam(i, o, this.seed2, 6, 6, n, a), I.globalAlpha = 1)
            }, this.w1 = {
                r: new _.Ease(_.ease_out_cubic, 0, 10, qo.W1SX, qo.W1SX, qo.W1EX),
                l: new _.Ease(_.ease_in_out_cubic, 0, 10, qo.W1EX, qo.W1EX, qo.W1SX)
            }, this.w2 = {
                r: new _.Ease(_.ease_out_quart, 0, 10, qo.W2SX, qo.W2SX, qo.W2EX),
                l: new _.Ease(_.ease_in_out_quad, 0, 10, qo.W2EX, qo.W2EX, qo.W2SX)
            }, this.w3 = {
                r: new _.Ease(_.ease_out_quint, 0, 10, qo.W3SX, qo.W3SX, qo.W3EX),
                l: new _.Ease(_.ease_in_out_quad, 0, 10, qo.W3EX, qo.W3EX, qo.W3SX)
            }, this.t_ = function (e) {
                return e.r.x === e.r.ex ? e.l.x === e.l.ex ? e.r : e.l : e.r
            }, this.t = function (e) {
                var i;
                return e.r.x === e.r.ex ? e.l.x === e.l.ex ? (e.r.restart(), e.l.restart(), i = e.r) : i = e.l : i = e.r, i.ease(i.ex), i
            }, this.bx = [], this.by = [], this.bxv = [], this.byv = [], this.init = function () {
                for (var e = 0; e < RAND_SIZE; e++) this.bx[e] = Math.floor(RANDOM[e] * qo.FLOAM_X), this.by[e] = Math.floor(RANDOM[e] * qo.FLOAM_Y), this.bxv[e] = Math.floor(RANDOM[e] * qo.FLOAM_X), this.byv[e] = Math.floor(RANDOM[e] * qo.FLOAM_Y);
                this.w1.r.x = this.w1.r.ex, this.w2.r.ed = 3.5, this.w3.r.ed = 2
            }, this.init()
        }
        e && (ui.skin = parseInt(e)), this.beta = 0 === window.location.href.indexOf("http://starve.io/beta") ? 1 : 0, this.key && this.beta ? Cookies.set("starve_beta", this.key) : this.beta && (this.key = Cookies.get("starve_beta")), this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : _.generate_token(Jo.TOKEN_LEN), this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "", this.id = 0, this.uid = 0, this.day = 0, this.die = {
            howdie: "",
            score: 0,
            bank: 0,
            kill: 0
        }, this.account = {
            connected: 0,
            last: (new Date).getTime()
        }, this.team = [], this.in_team = function (e) {
            for (var i = 0; i < this.team.length; i++)
                if (this.team[i] == e) return !0;
            return !1
        }, this.shop = {
            delay: 0,
            time: 0,
            value: 0,
            open: !1,
            draw: function () {
                if (this.open) {
                    var e = (new Date).getTime();
                    this.time = Math.floor((e - this.delay) / 1e3), this.time < 60 ? h_.shop.button.draw(I) : (document.getElementById("shop_starterkit").style.display = "none", this.open = !1)
                }
            }
        }, this.totem = {
            id: -1,
            pid: -1,
            lock: 0,
            timeout: new _.LinearAnimation(!1, 0, 1, 0, 1 / 30, 1),
            wait: !1
        }, this.helmet = {
            timeout: new _.LinearAnimation(!1, 0, 1, 0, .2, 1),
            wait: !1
        }, this.build = {
            timeout: new _.LinearAnimation(!1, 0, 1, 0, 1, 1),
            wait: !1
        }, this.weapon = {
            timeout: new _.LinearAnimation(!1, 0, 1, 0, .1, 1),
            wait: !1
        }, this.cam = new _.Ease2d(_.ease_out_quad, 0, .4, 0, 0, R, c, R, c), this.cam.delay = 0, this.cam.forcedDelay = 0, this.cam.update = function () {
            if (this.forcedDelay > 0) this.forcedDelay -= R_;
            else {
                var e = A_.fast_units[d_.uid];
                if (e) {
                    this.delay = 0;
                    var i = Math.max(Math.min(R - e.x, -2), 2 - A_.w + u),
                        t = Math.max(Math.min(c - e.y, -2), 2 - A_.h + O);
                    this.ease({
                        x: i,
                        y: t
                    })
                } else this.delay += R_, this.delay > 3 && (this.delay = 0, d_.reconnect.enabled || E_.get_focus())
            }
        }, this.cam.w = screen.width, this.cam.h = screen.height, this.cam.rw = this.cam.w, this.cam.rh = this.cam.h, this.cam.rx = 0, this.cam.ry = 0, this.cam.rdw = 0, this.cam.rdh = 0, this.cam.change = function (e, i) {
            this.x = -Math.min(Math.max(2 * -A_.dw, e - A_.dw - this.rw / 2), A_.w - this.rw), this.y = -Math.min(Math.max(2 * -A_.dh, i - (A_.dh + this.rh) / 2), A_.h - this.rh + A_.dh), this.ex = this.x, this.ey = this.y
        }, this.control = {
            angle: 0,
            timeout: 0,
            previous: 0,
            mouse: 0,
            attack: 0,
            update: function () {
                var e = A_.fast_units[d_.uid];
                if (e) var i = {
                    x: d_.cam.x + e.x,
                    y: d_.cam.y + e.y
                };
                else i = C;
                var t = _.get_std_angle(l_.pos, i),
                    r = !1;
                if (this.mouse += R_, l_.state || e && !(e.action & ko.ATTACK) && this.mouse > Jo.ATTACK && (this.attack = 1, r = !0, this.mouse = 0, E_.send_attack(t)), e && (e.angle = t, e.nangle = t), r || (this.timeout += R_, this.timeout > Jo.ROTATE && (this.timeout = 0, Math.abs(this.angle - t) > .005 && (E_.send_angle(t), this.angle = t))), !d_.chat.open && !d_.terminal.open) {
                    var n = 0;
                    O_.is_left() && (n |= 1), O_.is_right() && (n |= 2), O_.is_bottom() && (n |= 4), O_.is_top() && (n |= 8), this.previous != n && E_.send_move(n), this.previous = n
                }
            }
        }, this.gauges = {
            c: 1,
            l: 1,
            h: 1,
            t: 1,
            o: 1,
            wa: 1,
            warn_cold: new _.LinearAnimation(!0, 0, 1, 0, 3, 3),
            warn_life: new _.LinearAnimation(!0, 0, 1, 0, 2, 2),
            warn_hunger: new _.LinearAnimation(!0, 0, 1, 0, 3, 3),
            warn_thirst: new _.LinearAnimation(!0, 0, 1, 0, 3, 3),
            warn_oxygen: new _.LinearAnimation(!0, 0, 1, 0, 3, 3),
            warn_warm: new _.LinearAnimation(!0, 0, 1, 0, 3, 3),
            cold: new _.Ease(_.ease_out_quad, 0, 1, 0, 0, 1),
            life: new _.Ease(_.ease_out_quad, 0, 1, 0, 0, 1),
            hunger: new _.Ease(_.ease_out_quad, 0, 1, 0, 0, 1),
            thirst: new _.Ease(_.ease_out_quad, 0, 1, 0, 0, 1),
            oxygen: new _.Ease(_.ease_out_quad, 0, 1, 0, 0, 1),
            warm: new _.Ease(_.ease_out_quad, 0, 1, 0, 0, 1),
            update: function () {
                this.warn_cold.update(), this.warn_life.update(), this.warn_hunger.update(), this.warn_thirst.update(), this.warn_oxygen.update(), this.warn_warm.update(), this.cold.ease(this.c), this.life.ease(this.l), this.hunger.ease(this.h), this.thirst.ease(this.t), this.oxygen.ease(this.o), this.warm.ease(this.wa)
            }
        }, this.bigmap = !1, this.spectator = !1, this.zombie = !1, this.vampire = !1, this.inv = {
            max: qo.WITHOUT_BAG,
            bonus: 0,
            bag: 0,
            n: [],
            can_select: [],
            update_bag_size: function (e, i) {
                1 === e && (this.bag = qo.BAG_SIZE), this.bonus += i, this.max = qo.WITHOUT_BAG + this.bonus + this.bag
            },
            drag: {
                item: -1,
                img: null,
                _start: 0,
                _move: 0,
                _x: -1,
                _y: -1,
                move: function (e) {
                    !this._start || e.x === this._x && e.y === this._y || (this._move = 1)
                },
                start: function (e, i) {
                    this._x = i.x, this._y = i.y, this.item = e, this.img = d_.inv.can_select[e].info.img[2], this._start = 1
                },
                stop: function () {
                    this._start = 0, this._move = 0, this._x = -1, this._y = -1
                },
                release: function () {
                    var e = -1,
                        i = d_.inv.can_select,
                        t = 0;
                    if (this._start && this._move) {
                        for (var r = 0; r < i.length; r++)
                            if (i[r].info.state === Bo) {
                                e = r;
                                break
                            } if (-1 !== e && e !== this.item && i[this.item]) {
                            t = 1;
                            var n = i[e];
                            i[e] = i[this.item], i[this.item] = n, h_.update_inv_buttons()
                        }
                    }
                    return this.stop(), t
                },
                draw: function (e, i) {
                    this._start && this._move && on(I, this.img, Math.floor(e - this.img.width / 2), Math.floor(i - this.img.height / 2))
                }
            },
            free_place: function (e) {
                for (t = 0; t < e.length; t++)
                    if (this.n[e[t][0]] == e[t][1]) return !0;
                return !1
            },
            find_item: function (e) {
                for (var i = 0; i < this.can_select.length; i++)
                    if (this.can_select[i].id == e) return i;
                return -1
            },
            delete_item: function (e, i) {
                this.n[e] = 0, this.can_select.splice(i, 1), h_.update_inv_buttons()
            },
            decrease: function (e, i, t) {
                update = !0, this.n[e] = Math.max(0, this.n[e] - i), !this.n[e] && t >= 0 && this.delete_item(e, t)
            }
        }, this.show_spectators = {
            enabled: !1,
            translate: {
                x: 0,
                y: 0
            },
            invert: function () {
                A_.mode != qo.MODE_HUNGER_GAMES || d_.spectator || (d_.show_spectators.enabled = !d_.show_spectators.enabled, d_.show_spectators.enabled ? h_.options.spectator_agree.display = "inline-block" : h_.options.spectator_agree.display = "none")
            }
        }, h_.options.spectator_agree.display = "none", this.auto_feed = {
            enabled: !1,
            translate: {
                x: 0,
                y: 0
            },
            delay: 0,
            invert: function () {
                d_.auto_feed.enabled = !d_.auto_feed.enabled, d_.auto_feed.enabled ? h_.options.feed_agree.display = "inline-block" : h_.options.feed_agree.display = "none"
            },
            update: function () {
                !this.enabled || d_.craft.id >= 0 || h_.safe_delete.open || (this.delay += R_, this.delay > 2 && (this.delay = 0, d_.gauges.h < .35 ? d_.inv.n[X.PLANT] ? E_.select_inv(X.PLANT, d_.inv.find_item(X.PLANT)) : d_.inv.n[X.GARLIC] ? E_.select_inv(X.GARLIC, d_.inv.find_item(X.GARLIC)) : d_.inv.n[X.CRAB_STICK] ? E_.select_inv(X.CRAB_STICK, d_.inv.find_item(X.CRAB_STICK)) : d_.inv.n[X.PUMPKIN] ? E_.select_inv(X.PUMPKIN, d_.inv.find_item(X.PUMPKIN)) : d_.inv.n[X.TOMATO] ? E_.select_inv(X.TOMATO, d_.inv.find_item(X.TOMATO)) : d_.inv.n[X.CARROT] ? E_.select_inv(X.CARROT, d_.inv.find_item(X.CARROT)) : d_.inv.n[X.WATERMELON] ? E_.select_inv(X.WATERMELON, d_.inv.find_item(X.WATERMELON)) : d_.inv.n[X.BREAD] ? E_.select_inv(X.BREAD, d_.inv.find_item(X.BREAD)) : d_.inv.n[X.COOKED_MEAT] ? E_.select_inv(X.COOKED_MEAT, d_.inv.find_item(X.COOKED_MEAT)) : d_.inv.n[X.FOODFISH_COOKED] ? E_.select_inv(X.FOODFISH_COOKED, d_.inv.find_item(X.FOODFISH_COOKED)) : d_.inv.n[X.COOKIE] ? E_.select_inv(X.COOKIE, d_.inv.find_item(X.COOKIE)) : d_.inv.n[X.SANDWICH] ? E_.select_inv(X.SANDWICH, d_.inv.find_item(X.SANDWICH)) : d_.inv.n[X.CAKE] ? E_.select_inv(X.CAKE, d_.inv.find_item(X.CAKE)) : d_.inv.n[X.CRAB_LOOT] && E_.select_inv(X.CRAB_LOOT, d_.inv.find_item(X.CRAB_LOOT)) : d_.gauges.t < .35 && d_.inv.n[X.BOTTLE_FULL] && E_.select_inv(X.BOTTLE_FULL, d_.inv.find_item(X.BOTTLE_FULL))))
            }
        }, h_.options.feed_agree.display = "none", this.craft = {
            id: -1,
            id2: -1,
            timeout: new _.LinearAnimation(!1, 0, 1, 0, 1, 1),
            crafting: !1,
            preview: -1,
            mode: 0,
            label: [],
            can_craft: [],
            workbench: !1,
            fire: !1,
            water: !1,
            well: !1,
            change_mode: function () {
                this.mode = 0 === this.mode ? 1 : 0
            },
            set_workbench: function (e) {
                this.workbench = e;
                var i = h_.safe_delete;
                i.open && i.del(i.button), this.update()
            },
            do_recycle: function (e) {
                var i = ae[e];
                this.id = e, this.crafting = !0;
                A_.fast_units[d_.uid];
                this.timeout.max_speed = 8 * i.time, this.id2 = i.id2
            },
            do_craft: function (e) {
                var i = ae[e];
                console.log(e, i), this.id = e, this.crafting = !0;
                var t = A_.fast_units[d_.uid];
                t && t.right == X.BOOK ? this.timeout.max_speed = 3 * i.time : this.timeout.max_speed = i.time, this.id2 = i.id2;
                for (var r = 0; r < i.r.length; r++) {
                    var n = i.r[r];
                    d_.inv.decrease(n[0], n[1], d_.inv.find_item(n[0]))
                }
                h_.update_inv_buttons()
            },
            update: function () {
                for (var e in this.can_craft = [], 1 === h_.info_box.craft && (h_.info_box.display = 0), ae) {
                    var i = ae[e],
                        t = !0;
                    if (i.r) {
                        for (var r = 0; r < i.r.length; r++) {
                            if (d_.inv.max >= qo.WITH_BAG && i.id === J.BAG) {
                                t = !1;
                                break
                            }
                            if (i.w > this.workbench || i.f > this.fire || i.o > this.water || i.e > this.well) {
                                t = !1;
                                break
                            }
                            var n = i.r[r];
                            if (!d_.inv.n[n[0]] || d_.inv.n[n[0]] < n[1]) {
                                t = !1;
                                break
                            }
                        }
                        t && this.can_craft.push(h_.craft_buttons[i.id])
                    }
                }
                h_.update_craft_buttons(), h_.update_chest_buttons(), h_.update_furnace_button(), h_.update_windmill_button(), h_.update_extractor_button(), h_.update_bread_oven_button(), h_.sign.update_button()
            },
            restart: function () {
                this.id = -1, this.crafting = !1, this.timeout.v = 0, this.timeout.o = !1, this.update()
            }
        }, this.welcome = {
            message: void 0,
            draw: ja
        }, this.alert = {
            timeout: new _.LinearAnimation(!1, 1, 1, 0, 4, .3),
            text: "",
            label: null,
            draw: Za,
            list: []
        }, this.ldb = {
            can: document.createElement("canvas"),
            ids: [],
            update: !0,
            translate: {
                x: 0,
                y: 0
            },
            sort: function () {
                for (var e = [], i = A_.players, t = 0; t < i.length; t++) i[t].alive && e.push({
                    id: t,
                    s: i[t].score
                });
                e.sort((function (e, i) {
                    return i.s - e.s
                })), this.ids = [];
                for (t = 0; t < e.length && t < 10; t++) this.ids.push(e[t].id);
                this.update = !0
            },
            init: function (e) {
                e = e.sort(((e, i) => i[1] - e[1]));
                for (var i = A_.players, t = 0; t < i.length; t++) i[t].score = 0;
                this.ids = [], i[d_.id].score = _.restore_number(e.find((e => e[0] == d_.id))[1]);
                for (t = 0; t < e.length && t < 10; t++) this.ids.push(e[t][0]), i[e[t][0]].score = _.restore_number(e[t][1]);
                this.update = !0
            }
        }, this.ldb.can.width = 180 * g, this.ldb.can.height = 300 * g, this.ldb.ctx = this.ldb.can.getContext("2d"), this.terminal = {
            open: !1,
            input: document.getElementById("commandInput"),
            contentBox: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            _print: function (e) {
                this.contentBox.innerHTML += e
            },
            update: function () {
                this.style.left = Math.floor(u / 2 - 300) + "px", this.style.top = Math.floor(O / 2 - 250) + "px"
            },
            _clean: function () {
                this.contentBox.innerHTML = ""
            },
            quit: function () {
                this.open = !1, this.style.display = "none"
            },
            create_array: function (e, i = []) {
                for (var t = '<table class="tableList">', r = 0; r < e.length; r++) r % 3 == 0 && (t += "<tr>"), console.log(i[r], r, i), t += '<td class="tableList"' + (null == i[r] ? "" : 'style="color:' + i[r] + ';"') + ">" + e[r] + "</td>", (r + 1) % 3 != 0 && r + 1 !== e.length || (t += "</tr>");
                return t += "</table>"
            },
            write_command: function (e, i, t, r) {
                var n = "<div class=commandWritten>" + (e = e || "");
                n += (i = i || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>", n += (t = t || "") + "</div>" + (r = r || "") + "</div>", this._print(n), this.scroll_down()
            },
            scroll_down: function () {
                this.contentBox.scrollTop = this.contentBox.scrollHeight
            },
            commands: function (e) {
                switch (e) {
                case "clean":
                    return this._clean(), !0;
                case "list":
                    for (var i = "", t = A_.players, r = 0; r < t.length; r++) {
                        var n = t[r];
                        n.alive && (i += n.nickname + ' <span style="color:green">#' + r + "</span><br />")
                    }
                    return this.write_command("list", 1, "List all connected players", i), !0;
                case "weapon-list":
                    return this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"])), !0;
                case "tool-list":
                    return this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"])), !0;
                case "survival-list":
                    return this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"])), !0;
                case "resource-list":
                    return this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"])), !0;
                case "food-list":
                    return this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"])), !0;
                case "hat-list":
                    return this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"])), !0;
                case "building-list":
                    return this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"])), !0;
                case "biome-list":
                    return this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"])), !0;
                case "help-config":
                    return this.write_command("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.'), !0;
                case "pos":
                    for (t = A_.units[ITEMS.PLAYERS], r = 0; r < t.length; r++) {
                        var a = t[r];
                        if (a.pid === d_.id) return this.write_command("pos", 1, "Your position is " + Math.floor(a.x / 100) + ":" + Math.floor(a.y / 100)), !0
                    }
                    break;
                case "help-admin":
                    return this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"])), !0;
                case "help":
                    return this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"])), !0
                }
                return !1
            },
            _open: function () {
                this.open || (this.open = !0, this.style.display = "inline-block", this.input.focus())
            },
            _send: function () {
                var e = this.input.value;
                e && e.length > 0 && (this.commands(e) || E_.send_command(this.input.value), this.input.value = "")
            }
        }, this.chat = {
            open: !1,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            update: function () {
                this.style.left = Math.floor(u / 2 - 150) + "px", this.style.top = Math.floor(O / 2 + 80) + "px"
            },
            quit: function () {
                this.open = !1, this.style.display = "none", this.input.value = ""
            },
            prefix: "!",
            cmd: {
                hud: function (e) {
                    if ("off" === e) {
                        var i = 'Enter "!hud" without the quotes to restore the HUD';
                        d_.alert.text ? d_.alert.list.push(i) : d_.alert.text = i, h_.show_ui = 0
                    } else h_.show_ui = 1
                }
            },
            commands: function (e) {
                if (e.charAt(0) == this.prefix) {
                    for (var i = "", t = "", r = 1; r < e.length && " " != e.charAt(r); r++) i += e.charAt(r);
                    for (r++; r < e.length; r++) t += e.charAt(r);
                    var n = this.cmd[i];
                    return n && n(t), !0
                }
                return !1
            },
            run: function () {
                if (this.open) {
                    this.open = !1, this.style.display = "none";
                    var e = this.input.value;
                    e && (this.commands(e) || E_.send_chat(this.input.value), this.input.value = "")
                } else this.open = !0, this.style.display = "inline-block", this.input.focus()
            }
        }, this.ash = {
            flakes: [],
            update: function (e) {
                e.y += 80 * R_ * e.s, e.x += 80 * R_ * e.c, e.life -= R_ / 6, e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * R_, 1) : e.alpha = Math.max(e.alpha - 1 * R_, 0)
            },
            add: function () {
                var e = Math.floor(Math.min(k.ASHES_NUMBER * (u / 1366), k.ASHES_NUMBER + 10) * Math.max(Math.min(A_.dist_lava + 1e3, 3e3) / 3e3, 0));
                if (this.flakes.length < e) {
                    var i = Math.floor(Math.random() * k.ASHES_SIZES),
                        t = -d_.cam.x + Math.floor(Math.random() * d_.cam.w),
                        r = -d_.cam.y + Math.floor(Math.random() * d_.cam.h),
                        n = Math.random(Math.PI);
                    this.flakes.push(new rs(i, t, r, n))
                }
            }
        }, this.blizzard = 0, this.bandage = 0, this.desert = {
            flakes: [],
            tempest: 0,
            tempest_speed: 0,
            update: function (e) {
                e.y += R_ * (200 + 800 * this.tempest_speed) * e.s, e.x += R_ * (200 + 800 * this.tempest_speed) * e.c, e.life -= R_ / 6, e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * R_, 1) : e.alpha = Math.max(e.alpha - 1 * R_, 0)
            },
            add: function () {
                var e = Math.floor(Math.min((this.tempest_speed + .1) * k.SAND_NUMBER * (u / 1366), (this.tempest_speed + .1) * k.SAND_NUMBER + 10) * Math.max(Math.min(A_.dist_desert + 1e3, 3e3) / 3e3, 0));
                if (this.flakes.length < e) {
                    var i = Math.floor(Math.random() * k.ASHES_SIZES),
                        t = -d_.cam.x + Math.floor(Math.random() * d_.cam.w),
                        r = -d_.cam.y + Math.floor(Math.random() * d_.cam.h),
                        n = Math.random(Math.PI);
                    0 !== d_.desert.tempest && (t -= d_.cam.w / 2), this.flakes.push(new rs(i, t, r, n))
                }
            }
        }, this.winter = {
            flakes: [],
            tempest: 0,
            tempest_speed: 0,
            update: function (e) {
                O_.is_bottom() ? e.y += R_ * e.speed * (5.5 + 10 * this.tempest_speed) : e.y += R_ * e.speed * (5 + 10 * this.tempest_speed), e.life -= R_ / 2, O_.is_left() ? e.x += R_ * (100 + 400 * this.tempest_speed) : O_.is_right() ? e.x -= R_ * (130 - 400 * this.tempest_speed) : e.x -= R_ * (30 - 400 * this.tempest_speed), e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * R_, 1) : e.alpha = Math.max(e.alpha - 5 * R_, 0)
            },
            add: function () {
                var e = Math.floor(Math.min((1.5 * this.tempest_speed + .5) * k.FLAKES_NUMBER * (u / 1366), (1.5 * this.tempest_speed + .5) * k.FLAKES_NUMBER + 10) * Math.max(Math.min(A_.dist_winter + 1e3, 3e3) / 3e3, 0));
                if (this.flakes.length < e) {
                    var i = Math.floor(Math.random() * k.FLAKES_SIZES),
                        t = -d_.cam.x + Math.floor(Math.random() * d_.cam.w),
                        r = -d_.cam.y + Math.floor(400 * Math.random() * g - 200 * g);
                    this.flakes.push(new rs(i, t, r, 0))
                }
            }
        }, this.beach = [];
        for (var t = 0; t < 4; t++) this.beach.push(new i)
    }

    function as() {
        Math.random();
        return "e"
    }

    function os() {
        Math.random();
        return "t"
    }

    function ss() {
        Math.random();
        return "d"
    }

    function _s() {
        Math.random();
        return "o"
    }

    function Es() {
        Math.random();
        return "r"
    }

    function Ts() {
        Math.random();
        return "a"
    }

    function Ts() {
        Math.random();
        return "a"
    }

    function As() {
        Math.random();
        return "s"
    }

    function ds() {
        Math.random();
        return "n"
    }

    function Is() {
        Math.random();
        return "p"
    }

    function hs() {
        Math.random();
        return "g"
    }

    function _s() {
        Math.random();
        return "o"
    }

    function os() {
        Math.random();
        return "t"
    }

    function Is() {
        Math.random();
        return "p"
    }

    function us() {
        Math.random();
        return "i"
    }

    function Os() {
        Math.random();
        return "C"
    }
    mycyph1 = 1, setTimeout((function e() {
        var i = ds() + Ts() + os() + us(),
            t = (Math.random(), "W" + as() + (Math.random(), "b") + (Math.random(), "S") + _s() + (Math.random(), "c") + (Math.random(), "k") + as() + os()); - 1 === window[t].toString().indexOf(i) && (Math.floor = function () {
            return Math.round() + 1
        });
        var r = As() + as() + ds() + ss(),
            n = Is() + Es() + _s() + os() + _s() + os() + (Math.random(), "y") + Is() + as(); - 1 === window[t][n][r].toString().indexOf(i) && (Math.floor = function () {
            return Math.round() + 1
        }), t = ss() + Es() + Ts() + (Math.random(), "w") + (Math.random(), "I") + (Math.random(), "m") + Ts() + hs() + as(), r = Os() + Ts() + ds() + (Math.random(), "v") + Ts() + As() + (Math.random(), "R") + as() + ds() + ss() + as() + Es() + us() + ds() + hs() + Os() + _s() + ds() + os() + as() + (Math.random(), "x") + os() + (Math.random(), "2") + (Math.random(), "D"), -1 === window[r][n][t].toString().indexOf(i) && (Math.floor = function () {
            return Math.round() + 1
        }), setTimeout(e, 1e5)
    }), 1e5);
    var ls = {
        SERVER_INFO_URL: "DEV" == r ? "http://localhost:8082/serversBound" : "http://evelteam.su/serversBound"
    };

    function Rs(t, r) {
        this.can = t, this.ctx = r, window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default", this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default", this.cursor1 = "url('img/cursor1.png'), pointer");
        var n = this;

        function a(e, i, t, r, a) {
            for (var o = this, s = i + 9, _ = 0, E = r, T = i; T < s; T++) n.buttons[T].info.callback = d, n.buttons[T].info.cosmeticType = e;

            function A() {
                var i = e[E];
                ui.cosmetic_name = Ko(i.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, void 0, 10, 8), void 0 !== i.level ? ui.cosmetic_author = Ko("Level " + i.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8) : ui.cosmetic_author = Ko("by " + i.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8)
            }

            function d() {
                E !== this.cosmeticId && -1 !== this.cosmeticId && (this.unlocked > 0 ? i === FIRST_BUTTON_SKIN ? Z(m, oe, "none") : Z(v, oe, "none") : i === FIRST_BUTTON_SKIN ? Z(m, se, "inline-block") : Z(v, se, "inline-block"), E = this.cosmeticId, t(this.cosmeticId), A())
            }
            this.initSelector = function () {
                for (var t = i, r = 3 * _; t < s && r < e.length; t++, r++)
                    if (e[r].rarity !== RARITY.SPECIAL || 0 !== a[r]) {
                        n.buttons[t].info.cosmeticId = r;
                        for (var o = 0; o < 3; o++) n.buttons[t].info.img[o] = RARITY_BUTTON[e[r].rarity][o], n.buttons[t].info.active = se, n.buttons[t].info.unlocked = a[r]
                    } else n.buttons[t].info.cosmeticId = -1, n.buttons[t].info.active = oe;
                for (; t < s; t++) n.buttons[t].info.cosmeticId = -1, n.buttons[t].info.active = oe;
                A()
            }, n.buttons[s].info.callback = function () {
                _ > 0 && _--, o.initSelector()
            }, n.buttons[s + 1].info.callback = function () {
                3 * _ + 9 < e.length && _++, o.initSelector()
            }
        }

        function o() {
            var e = Number(Cookies.get("starve_crate")),
                i = Number(Cookies.get("starve_dead")),
                t = Number(Cookies.get("starve_book")),
                r = Number(Cookies.get("starve_bag")),
                a = Number(Cookies.get("starve_skin")),
                o = Number(Cookies.get("starve_accessory"));
            n.skin = a || 0, n.book = t || 0, n.crate = e || 1, n.accessory = o || 0, n.bag = r || 0, n.dead = i || 0
        }

        function s() {
            for (var e = COSMETICS.SKIN, i = 0; i < e.length; i++) e[i].rarity === RARITY.FREE ? n.unlock.skin[i] = 1 : n.unlock.skin[i] = 0;
            for (e = COSMETICS.ACCESSORY, i = 0; i < e.length; i++) e[i].rarity === RARITY.FREE ? n.unlock.accessory[i] = 1 : n.unlock.accessory[i] = 0;
            for (e = COSMETICS.BAG, i = 0; i < e.length; i++) e[i].rarity === RARITY.FREE ? n.unlock.bag[i] = 1 : n.unlock.bag[i] = 0;
            for (e = COSMETICS.BOOK, i = 0; i < e.length; i++) e[i].rarity === RARITY.FREE ? n.unlock.book[i] = 1 : n.unlock.book[i] = 0;
            for (e = COSMETICS.CRATE, i = 0; i < e.length; i++) e[i].rarity === RARITY.FREE ? (n.unlock.crate[i] = 1, n.unlock.dead[i] = 1) : (n.unlock.crate[i] = 0, n.unlock.dead[i] = 0)
        }
        this.waiting = !1, this.in_this_view = 0, this.current_mode_score = -1, this.loading = {
            translate: {
                x: 0,
                y: 0
            },
            angle: 0,
            img: sprite[k.GEAR2],
            draw: function () {
                this.angle += 2 * R_, r.save(), r.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2), r.rotate(this.angle), on(r, this.img, -this.img.width / 2, -this.img.height / 2), r.restore()
            }
        }, this.langselect = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = Math.floor(this.translate.x) + "px", this.style.top = Math.floor(this.translate.y) + "px"
            }
        }, this.bread = 0, this.previous_bread = -1, this.bread_img = void 0, this.new_nickname = "", this.previous_new_nickname = "", this.new_nickname_img = void 0, this.lvl = 0, this.previous_lvl = -1, this.lvl_img = void 0, this.xp = 0, this.xp_dest = 0, this.firstName = 0, this.kill = 0, this.death = 0, this.time = 0, this.score = 0, this.scoreTotal = 0, this.bestKill = 0, this.bestTime = 0, this.bestScore = 0, this.seasons = [], this.kit = -1, this.previous_kit_hour = -1, this.previous_kit_min = -1, this.kit_img_min = void 0, this.kit_img_hour = void 0, this.privateServerTime = -1, this.previous_privateServerTime_day = -1, this.previous_privateServerTime_hour = -1, this.previous_privateServerTime_min = -1, this.privateServerTime_img_min = void 0, this.privateServerTime_img_hour = void 0, this.privateServerTime_img_day = void 0, this.cosmetic_name = void 0, this.cosmetic_author = void 0, this.leaderboard_range = void 0, this.leaderboard_mode = void 0, this.leaderboard_sorted = void 0, this.leaderboard_season = void 0, this.profile_season = 3, this.breath = 0, this.settings = !1, this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high", "high" === this.quality ? (document.getElementById("high_ing").style.backgroundColor = "#B56D18", document.getElementById("low_ing").style.backgroundColor = "#3A2A0D", this.quality = 1) : (document.getElementById("low_ing").style.backgroundColor = "#B56D18", document.getElementById("high_ing").style.backgroundColor = "#3A2A0D", this.quality = 0), this.high_quality = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18", document.getElementById("low_ing").style.backgroundColor = "#3A2A0D", Cookies.set("starve_quality", "high", {
                expires: 30
            }), document.getElementById("input_ratio").value = 1, h_.change_ratio(), ui.quality = 1
        }, this.low_quality = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D", document.getElementById("low_ing").style.backgroundColor = "#B56D18", Cookies.set("starve_quality", "low", {
                expires: 30
            }), document.getElementById("input_ratio").value = .5 / (f / H), h_.change_ratio(), ui.quality = 0
        }, void 0 === Cookies.get("starve_mapping") && "FR" === B ? (O_.set_azerty(), this.mapping = "azerty") : this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty", "azerty" == this.mapping ? (O_.set_azerty(), document.getElementById("azerty_ing").style.backgroundColor = "#B56D18", document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D") : (document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18", document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D"), this.set_azerty = function () {
            O_.set_azerty(), document.getElementById("azerty_ing").style.backgroundColor = "#B56D18", document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D", Cookies.set("starve_mapping", "azerty", {
                expires: 30
            })
        }, this.set_qwerty = function () {
            O_.set_qwerty(), document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D", document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18", Cookies.set("starve_mapping", "qwerty", {
                expires: 30
            })
        }, this.all_rights_reserved = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = this.translate.x + "px", this.style.top = Math.floor(this.translate.y) + "px"
            }
        }, o(), this.unlock = {}, this.unlock.skin = [], this.unlock.bag = [], this.unlock.book = [], this.unlock.crate = [], this.unlock.dead = [], this.unlock.accessory = [], this.day_mode = 0, this.unlock_cosmetics = s, s(), this.trevda = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = this.translate.x + "px", this.style.top = Math.floor(this.translate.y) + "px"
            }
        };
        var E, T = 0,
            A = function () {
                if (n.update(), 30 == ++T) return n.add_event_listener(), n.in_this_view = !0, void n.update();
                window.setTimeout(A, 33)
            };
        this.quit = function (e) {
            E = e, n.remove_event_listener(), n.in_this_view = 0, d = -1, I()
        };
        var d = -1,
            I = function () {
                if (n.update(), 30 == ++d) return Cookies.set("starve_nickname", n.nickname.input.value, {
                    expires: 30
                }), n.nickname.style.display = "none", n.server_list.style.display = "none", n.langselect.style.display = "none", n.all_rights_reserved.style.display = "none", n.trevda.style.display = "none", n.stop(), void E();
                window.setTimeout(I, 33)
            };
        this.is_run = !1, this.stop = function () {
            this.is_run = !1
        }, this.run = function () {
            Us(), document.getElementById("game_body").style.backgroundColor = k.GROUND[__.time], n.nickname.style.display = "inline-block", n.server_list.style.display = "inline-block", n.langselect.style.display = "inline-block", n.all_rights_reserved.style.display = "inline-block", n.trevda.style.display = "inline-block", n.waiting = !1, n.is_run = !0, d = -1, T = 0, A()
        }, this.update_component = function (e, i) {
            i = i < 0 ? -i : i, (e.position & ne) === ne ? (e.position & ee) === ee ? e.translate.x = R + e.translate._x - i : (e.position & ie) === ie ? e.translate.x = R + e.translate._x + i : e.translate.x = R + e.translate._x : (e.position & ee) === ee ? e.translate.x = e.translate._x - i : (e.position & ie) === ie ? e.translate.x = u - e.translate._x + i : e.translate.x = e.translate._x, (e.position & ae) === ae ? (e.position & te) === te ? e.translate.y = c + e.translate._y - i : (e.position & re) === re ? e.translate.y = c + e.translate._y + i : e.translate.y = c + e.translate._y : (e.position & te) === te ? e.translate.y = e.translate._y - i : (e.position & re) === re ? e.translate.y = O + e.translate._y + i : e.translate.y = e.translate._y, void 0 !== e.style && (e.style.left = Math.floor(e.translate.x) + "px", e.style.top = Math.floor(e.translate.y) + "px")
        }, this.update = function () {
            var e = 0;
            if (30 != T || -1 != d) {
                if (30 != T) e = 1500 / (T + 1) - 50;
                if (-1 != d) e = -(1750 / (30 - d + 1) - 48)
            }
            for (var i = 0; i < this.bkgd.length; i++) this.update_component(this.bkgd[i], e);
            for (i = 0; i < this.buttons.length; i++) this.update_component(this.buttons[i].info, e);
            for (i = 0; i < this.css.length; i++) this.update_component(this.css[i], e);
            if (this.loading.translate.x = (u - this.loading.img.width) / 2, this.loading.translate.y = 0, this.langselect.translate.x = u - 450, this.langselect.translate.y = O - 40, this.all_rights_reserved.translate.x = u - 340, this.all_rights_reserved.translate.y = O - 25, this.trevda.translate.x = u - 320, this.trevda.translate.y = 80, 30 != T || -1 != d) {
                var t = 0;
                if (30 != T) t = 1500 / (T + 1) - 50;
                if (-1 != d) t = -(1750 / (30 - d + 1) - 48);
                this.loading.translate.y -= t > 0 ? t : -t, this.langselect.translate.y -= t < 0 ? t : -t, this.all_rights_reserved.translate.y -= t < 0 ? t : -t
            }
            this.langselect.update(), this.all_rights_reserved.update(), this.trevda.update()
        }, this.create_spin = function (e) {
            var i = document.createElement("canvas"),
                t = i.getContext("2d");
            i.width = 342, i.height = 342;
            for (var r = -Math.PI / 2, n = 0; n < e.length; n++) {
                var a = e[n][0],
                    o = e[n][1] * Math.PI / 180;
                t.beginPath(), t.arc(171, 171, 170, r, r + o, !1), t.lineTo(171, 171), t.fillStyle = a, t.fill(), r += o
            }
            return i
        }, this.generate_new_nickname = function () {
            this.new_nickname = document.getElementById("account_nickname_input").value, this.new_nickname !== this.previous_new_nickname && (this.previous_new_nickname = this.new_nickname, this.new_nickname_img = Ko(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550))
        }, this.draw = function () {
            an(), ui.xp = _.lerp(ui.xp, ui.xp_dest, .03), this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + 165 * ui.xp, this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x, this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30, this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
            for (var e = 2; e < this.bkgd.length; e++) this.bkgd[e].active === se && this.bkgd[e].draw(r);
            var i;
            if ((i = this.kit - Date.now()) > 0) {
                var t = Math.floor(i / 6e4),
                    a = Math.floor(t / 60);
                (t %= 60) !== this.previous_kit_min && (this.previous_kit_min = t, t = t < 10 ? "0" + t : "" + t, n.kit_img_min = Ko(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), a !== this.previous_kit_hour && (this.previous_kit_hour = a, a = a < 10 ? "0" + a : "" + a, n.kit_img_hour = Ko(a, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), (s = this.bkgd[BAG_REMAIN_BOX]).draw(r);
                var o = this.kit_img_hour;
                on(r, o, s.translate.x - o.width / 4 + 182, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
                o = this.kit_img_min;
                on(r, o, s.translate.x - o.width / 4 + 251, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2)
            }
            if ((i = this.privateServerTime - Date.now()) > 0) {
                t = Math.floor(i / 6e4), a = Math.floor(t / 60);
                var s, E = Math.floor(a / 24);
                a %= 24, (t %= 60) !== this.previous_privateServerTime_min && (this.previous_privateServerTime_min = t, t = t < 10 ? "0" + t : "" + t, n.privateServerTime_img_min = Ko(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), a !== this.previous_privateServerTime_hour && (this.previous_privateServerTime_hour = a, a = a < 10 ? "0" + a : "" + a, n.privateServerTime_img_hour = Ko(a, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), E !== this.previous_privateServerTime_day && (this.previous_privateServerTime_day = E, E = E < 10 ? "0" + E : "" + E, n.privateServerTime_img_day = Ko(E, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), (s = this.bkgd[SERVER_REMAIN_BOX]).draw(r);
                o = this.privateServerTime_img_day;
                on(r, o, s.translate.x - o.width / 4 + 113, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
                o = this.privateServerTime_img_hour;
                on(r, o, s.translate.x - o.width / 4 + 182, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
                o = this.privateServerTime_img_min;
                on(r, o, s.translate.x - o.width / 4 + 251, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2)
            }(this.current_view & l) === l ? this.buttons[GAME_BUTTON].info.state = Wo : (this.current_view & S) === S ? this.buttons[LEADERBOARD_BUTTON].info.state = Wo : (this.current_view & N) === N ? this.buttons[COSMETICS_BUTTON].info.state = Wo : (this.current_view & C) === C ? this.buttons[PROFILE_BUTTON].info.state = Wo : (this.current_view & b) === b ? this.buttons[TUTORIAL_BUTTON].info.state = Wo : (this.current_view & g) === g ? this.buttons[LOGIN_BUTTON].info.state = Wo : (this.current_view & D) === D || (this.current_view & M) === M || (this.current_view & G) === G || (this.current_view & L) === L || (this.current_view & P) === P || (this.current_view & y) === y || (this.current_view & z) === z ? this.buttons[SHOP_BUTTON].info.state = Wo : (this.current_view & W) === W || (this.current_view & K) === K || (this.current_view & V) === V || (this.current_view & w) === w || (this.current_view & U) === U || (this.current_view & Y) === Y ? this.buttons[COSMETICS_BUTTON].info.state = Wo : (this.current_view & J) === J || (this.current_view & X) === X || (this.current_view & q) === q ? this.buttons[SERVER_BUTTON].info.state = Wo : (this.current_view & j) === j && (this.buttons[PROFILE_BUTTON].info.state = Wo), (this.current_view & S) === S && (this.leaderboard_mode === this.LEADERBOARD_TOTAL ? (this.leaderboard_range = this.LEADERBOARD_ALL, this.buttons[this.LEADERBOARD_ALL].info.active = oe, this.buttons[this.LEADERBOARD_WEEK].info.active = oe, this.buttons[this.LEADERBOARD_TODAY].info.active = oe) : (this.buttons[this.LEADERBOARD_ALL].info.active = se, this.buttons[this.LEADERBOARD_WEEK].info.active = se, this.buttons[this.LEADERBOARD_TODAY].info.active = se), this.leaderboard_mode === this.LEADERBOARD_NORMAL ? this.buttons[this.LEADERBOARD_NORMAL].info.state = Wo : this.leaderboard_mode === this.LEADERBOARD_VAMPIRE ? this.buttons[this.LEADERBOARD_VAMPIRE].info.state = Wo : this.leaderboard_mode === this.LEADERBOARD_TOTAL ? this.buttons[this.LEADERBOARD_TOTAL].info.state = Wo : this.leaderboard_mode === this.LEADERBOARD_ZOMBIE ? this.buttons[this.LEADERBOARD_ZOMBIE].info.state = Wo : this.leaderboard_mode === this.LEADERBOARD_FOREST && (this.buttons[this.LEADERBOARD_FOREST].info.state = Wo), this.leaderboard_range === this.LEADERBOARD_ALL ? this.buttons[this.LEADERBOARD_ALL].info.state = Wo : this.leaderboard_range === this.LEADERBOARD_WEEK ? this.buttons[this.LEADERBOARD_WEEK].info.state = Wo : this.leaderboard_range === this.LEADERBOARD_TODAY && (this.buttons[this.LEADERBOARD_TODAY].info.state = Wo), this.leaderboard_sorted === this.LEADERBOARD_KILL ? this.buttons[this.LEADERBOARD_KILL].info.state = Wo : this.leaderboard_sorted === this.LEADERBOARD_SCORE ? this.buttons[this.LEADERBOARD_SCORE].info.state = Wo : this.leaderboard_sorted === this.LEADERBOARD_TIME && (this.buttons[this.LEADERBOARD_TIME].info.state = Wo), this.leaderboard_season === this.LEADERBOARD_SEASON1 ? this.buttons[this.LEADERBOARD_SEASON1].info.state = Wo : this.leaderboard_season === this.LEADERBOARD_SEASON2 ? this.buttons[this.LEADERBOARD_SEASON2].info.state = Wo : this.leaderboard_season === this.LEADERBOARD_SEASON3 ? this.buttons[this.LEADERBOARD_SEASON3].info.state = Wo : this.leaderboard_season === this.LEADERBOARD_SEASON4 ? this.buttons[this.LEADERBOARD_SEASON4].info.state = Wo : this.leaderboard_season === this.LEADERBOARD_SEASON5 && (this.buttons[this.LEADERBOARD_SEASON5].info.state = Wo)), (this.current_view & C) === C && (-1 === this.current_mode_score ? this.buttons[De].info.state = Wo : this.current_mode_score === qo.MODE_PVP ? this.buttons[be].info.state = Wo : this.current_mode_score === qo.MODE_ZOMBIES ? this.buttons[pe].info.state = Wo : this.current_mode_score === qo.MODE_VAMPIRES ? this.buttons[me].info.state = Wo : this.current_mode_score === qo.MODE_LEGACY && (this.buttons[Se].info.state = Wo), 0 === this.profile_season ? this.buttons[Re].info.state = Wo : 1 === this.profile_season ? this.buttons[ce].info.state = Wo : 2 === this.profile_season ? this.buttons[Ce].info.state = Wo : 3 === this.profile_season ? this.buttons[ge].info.state = Wo : 4 === this.profile_season && (this.buttons[Ne].info.state = Wo)), (this.current_view & l) === l && 0 === E_.privateServer && (this.buttons[Ae].in_button(l_.pos) ? this.buttons[Ae].hint = Math.min(1, this.buttons[Ae].hint + 1.5 * R_) : this.buttons[Ae].hint = Math.max(0, this.buttons[Ae].hint - 1.5 * R_), this.buttons[de].in_button(l_.pos) ? this.buttons[de].hint = Math.min(1, this.buttons[de].hint + 1.5 * R_) : this.buttons[de].hint = Math.max(0, this.buttons[de].hint - 1.5 * R_), this.buttons[Ie].in_button(l_.pos) ? this.buttons[Ie].hint = Math.min(1, this.buttons[Ie].hint + 1.5 * R_) : this.buttons[Ie].hint = Math.max(0, this.buttons[Ie].hint - 1.5 * R_), this.buttons[Oe].in_button(l_.pos) ? this.buttons[Oe].hint = Math.min(1, this.buttons[Oe].hint + 1.5 * R_) : this.buttons[Oe].hint = Math.max(0, this.buttons[Oe].hint - 1.5 * R_), this.buttons[he].in_button(l_.pos) ? this.buttons[he].hint = Math.min(1, this.buttons[he].hint + 1.5 * R_) : this.buttons[he].hint = Math.max(0, this.buttons[he].hint - 1.5 * R_), this.buttons[ue].in_button(l_.pos) ? this.buttons[ue].hint = Math.min(1, this.buttons[ue].hint + 1.5 * R_) : this.buttons[ue].hint = Math.max(0, this.buttons[ue].hint - 1.5 * R_));
            var T = 1;
            if ((this.current_view & (M | G | L | P | y | z)) > 1) {
                o = IMAGES.ARROW_SPIN;
                r.save(), r.translate(R, Te + o.height / 4), 1 === this.spin && (this.spin_effect += R_ / 3, T = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect), r.rotate(T)), on(r, o, -o.width / 4, -o.height / 4, o.width / 2, o.height / 2), r.restore()
            }
            0 === E_.privateServer && (E_.current_mode === qo.MODE_PVP ? this.buttons[Ae].info.state = Wo : E_.current_mode === qo.MODE_LEGACY ? this.buttons[de].info.state = Wo : E_.current_mode === qo.MODE_ZOMBIES ? this.buttons[he].info.state = Wo : E_.current_mode === qo.MODE_VAMPIRES ? this.buttons[ue].info.state = Wo : E_.current_mode === qo.MODE_COMMUNITY ? this.buttons[Ie].info.state = Wo : E_.current_mode === qo.MODE_EXPERIMENTAL && (this.buttons[Oe].info.state = Wo));
            for (e = 1; e < this.buttons.length; e++) this.buttons[e].info.active === se && this.buttons[e].draw(r);
            if (this.bkgd[0].draw(r), (this.current_view & (x | F)) > 0) {
                o = this.new_nickname_img;
                on(r, o, R - o.width / 4, 138, o.width / 2, o.height / 2)
            }
            var A = Math.max(1, Math.min(18, Math.floor((ui.lvl + 3) / 2)));
            if (this.bkgd[A].active = se, this.bkgd[A].draw(r), this.bkgd[A].active = oe, this.buttons[0].draw(r), (this.current_view & (N | K | w | W | U)) > 1) {
                var d = (this.current_view & (K | w | W | U)) > 1 ? -190 : 0;
                o = sprite[k.BAG][this.bag][this.day_mode];
                on(r, o, R - o.width / 4 + d, 183, o.width / 2, o.height / 2), this.breath = (this.breath + 1e3 * R_) % 2e3;
                var I = 4.5 * (this.breath < 1e3) ? this.breath / 1e3 : (2e3 - this.breath) / 1e3;
                o = sprite[k.BOOK][this.book][this.day_mode];
                on(r, o, R - o.width / 4 - 62 + I + d, 240, o.width / 2, o.height / 2);
                o = sprite[k.HAND][this.skin][this.day_mode];
                on(r, o, R - o.width / 4 - 54 + I + d, 272, o.width / 2, o.height / 2), on(r, o, R - o.width / 4 + 54 - I + d, 272, o.width / 2, o.height / 2);
                o = sprite[k.BODY][this.skin][this.day_mode];
                on(r, o, R - o.width / 4 + d, 222, o.width / 2, o.height / 2);
                o = sprite[k.ACCESSORY][this.accessory][this.day_mode];
                on(r, o, R - o.width / 4 + d, 222, o.width / 2, o.height / 2)
            }
            if ((this.current_view & N) === N) {
                o = sprite[k.CRATE][this.crate][this.day_mode];
                on(r, o, R - o.width / 4 - 61, 406 - o.height / 4, o.width / 2, o.height / 2);
                o = sprite[k.CRATE][this.dead][this.day_mode];
                on(r, o, R - o.width / 4 + 53, 406 - o.height / 4, o.width / 2, o.height / 2)
            }
            if ((this.current_view & V) === V) {
                o = sprite[k.CRATE][this.dead][this.day_mode];
                on(r, o, R - o.width / 4 - 200, 268 - o.height / 4, o.width / 2, o.height / 2)
            }
            if ((this.current_view & Y) === Y) {
                o = sprite[k.CRATE][this.crate][this.day_mode];
                on(r, o, R - o.width / 4 - 200, 268 - o.height / 4, o.width / 2, o.height / 2)
            }
            if ((this.current_view & (K | w | W | U | V | Y)) > 1) {
                for (e = 1; e < this.buttons.length; e++)
                    if (0 != (this.buttons[e].view & this.current_view)) {
                        var h = this.buttons[e].info;
                        if (h.cosmeticId >= 0) {
                            o = h.cosmeticType[h.cosmeticId].day;
                            if (on(r, o, h.translate.x - o.width / 8 + 44.5, h.translate.y - o.height / 8 + 45.5, o.width / 4, o.height / 4), 1 !== h.unlocked) {
                                o = IMAGES.RED_LOCKED;
                                on(r, o, h.translate.x - o.width / 4 + 44.5, h.translate.y - o.height / 4 + 44.5, o.width / 2, o.height / 2)
                            }
                        }
                    } o = this.cosmetic_name;
                on(r, o, R - 312, 375, o.width / 2, o.height / 2);
                o = this.cosmetic_author;
                on(r, o, R - 312, 395, o.width / 2, o.height / 2)
            }
            if (this.bread !== this.previous_bread && (this.previous_bread = this.bread, this.bread_img = Ko("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250)), on(r, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2), this.lvl !== this.previous_lvl && (this.previous_lvl = this.lvl, this.lvl_img = Ko("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, void 0, 30, 24, void 0, void 0, void 0, void 0, "#3F3019", 20)), on(r, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2), 0 === E_.privateServer) {
                var u;
                if ((u = this.buttons[Ae].hint) > 0) {
                    o = IMAGES.NORMAL_MODE_HOVER;
                    on(r, o, R - o.width / 4, -36 - o.height * _.ease_in_out_quad(1 - u) / 2, o.width / 2, o.height / 2)
                }
                if ((u = this.buttons[de].hint) > 0) {
                    o = IMAGES.FOREST_MODE_HOVER;
                    on(r, o, R - o.width / 4, -36 - o.height * _.ease_in_out_quad(1 - u) / 2, o.width / 2, o.height / 2)
                }
                if ((u = this.buttons[Ie].hint) > 0) {
                    o = IMAGES.MODE_COMMUNITY_HOVER;
                    on(r, o, R - o.width / 4, -36 - o.height * _.ease_in_out_quad(1 - u) / 2, o.width / 2, o.height / 2)
                }
                if ((u = this.buttons[Oe].hint) > 0) {
                    o = IMAGES.MODE_EXPERIMENTAL_HOVER;
                    on(r, o, R - o.width / 4, -36 - o.height * _.ease_in_out_quad(1 - u) / 2, o.width / 2, o.height / 2)
                }
                if ((u = this.buttons[ue].hint) > 0) {
                    o = IMAGES.VAMPIRE_MODE_HOVER;
                    on(r, o, R - o.width / 4, -36 - o.height * _.ease_in_out_quad(1 - u) / 2, o.width / 2, o.height / 2)
                }
                if ((u = this.buttons[he].hint) > 0) {
                    o = IMAGES.ZOMBIE_MODE_HOVER;
                    on(r, o, R - o.width / 4, -36 - o.height * _.ease_in_out_quad(1 - u) / 2, o.width / 2, o.height / 2)
                }
            }
            if (1 === this.spin && Math.abs(T - this.spin_target) < .006) {
                r.globalAlpha = Math.min(1, 3 * this.spin_win_effect);
                o = IMAGES.SPIN_LIGHT;
                r.save(), r.translate(R, 260), this.spin_win_effect += R_, r.rotate(this.spin_win_effect), on(r, o, -o.width / 2, -o.height / 2, o.width, o.height), r.restore();
                I = 1.05 + .05 * Math.sin(5 * this.spin_win_effect);
                if (0 === this.spin_type) {
                    var O = I * (o = COSMETICS.SKIN[this.spin_win].day).width,
                        c = I * o.height;
                    on(r, o, R - O / 2, 260 - c / 2, O, c)
                } else if (1 === this.spin_type) {
                    O = I * (o = COSMETICS.SKIN[0].day).width, c = I * o.height;
                    on(r, o, R - O / 2, 260 - c / 2, O, c);
                    O = I * (o = COSMETICS.ACCESSORY[this.spin_win].day).width, c = I * o.height;
                    on(r, o, R - O / 2, 260 - c / 2, O, c)
                } else if (2 === this.spin_type) {
                    O = I * (o = COSMETICS.BAG[this.spin_win].day).width, c = I * o.height;
                    on(r, o, R - O / 2, 180 - c / 2, O, c);
                    O = I * (o = COSMETICS.SKIN[0].day).width, c = I * o.height;
                    on(r, o, R - O / 2, 260 - c / 2, O, c)
                } else if (3 === this.spin_type) {
                    O = I * (o = COSMETICS.BOOK[this.spin_win].day).width, c = I * o.height;
                    r.save(), r.translate(R, 260), r.rotate(Math.PI), on(r, o, -O / 2, -c / 2, O, c), r.restore()
                } else if (4 === this.spin_type) {
                    O = I * (o = COSMETICS.CRATE[this.spin_win].day).width, c = I * o.height;
                    on(r, o, R - O / 2, 260 - c / 2, O, c)
                }
                o = this.spin_name;
                on(r, o, R - o.width / 4, 340, o.width / 2, o.height / 2);
                o = this.spin_author;
                on(r, o, R - o.width / 4, 365, o.width / 2, o.height / 2), this.spin_win_effect > 6 && (this.spin = 0, $(D)), r.globalAlpha = 1
            }
            d_.alert.draw("#FFF", "#000"), n.waiting && this.loading.draw()
        };
        var h = 0,
            l = Math.pow(2, h++),
            C = Math.pow(2, h++);
        this.__PROFILE__ = C;
        var g = Math.pow(2, h++),
            N = Math.pow(2, h++),
            D = Math.pow(2, h++),
            b = Math.pow(2, h++),
            S = Math.pow(2, h++),
            p = Math.pow(2, h++);
        this.__BUY__ = p;
        var m = Math.pow(2, h++),
            v = Math.pow(2, h++),
            M = Math.pow(2, h++),
            G = Math.pow(2, h++),
            L = Math.pow(2, h++),
            P = Math.pow(2, h++),
            y = Math.pow(2, h++),
            z = Math.pow(2, h++),
            W = Math.pow(2, h++),
            V = Math.pow(2, h++),
            K = Math.pow(2, h++),
            w = Math.pow(2, h++),
            U = Math.pow(2, h++),
            Y = Math.pow(2, h++),
            F = Math.pow(2, h++),
            x = Math.pow(2, h++),
            J = Math.pow(2, h++);
        this.__SERVER_LOCATION__ = J;
        var X = Math.pow(2, h++);
        this.__SERVER_DURATION__ = X;
        var q = Math.pow(2, h++);
        this.__SERVER_ACCESS__ = q;
        var j = Math.pow(2, h++);

        function Z(e, i, t) {
            for (var r = 0; r < n.bkgd.length; r++) 0 != (n.bkgd[r].view & e) && (n.bkgd[r].active = i);
            for (r = 0; r < n.buttons.length; r++) 0 != (n.buttons[r].view & e) && (n.buttons[r].info.active = i);
            for (r = 0; r < n.css.length; r++) 0 != (n.css[r].view & e) && (n.css[r].style.display = t)
        }
        this.current_view = l;

        function Q() {
            var e = Number(Cookies.get("starve_crate")),
                i = Number(Cookies.get("starve_dead")),
                t = Number(Cookies.get("starve_book")),
                r = Number(Cookies.get("starve_bag")),
                n = Number(Cookies.get("starve_skin")),
                a = Number(Cookies.get("starve_accessory"));
            ui.unlock.skin[ui.skin] > 0 || (ui.skin = ui.unlock.skin[n] > 0 ? n : 0), ui.unlock.book[ui.book] > 0 || (ui.book = ui.unlock.book[t] > 0 ? t : 0), ui.unlock.dead[ui.dead] > 0 || (ui.dead = ui.unlock.dead[i] > 0 ? i : 0), ui.unlock.crate[ui.crate] > 0 || (ui.crate = ui.unlock.crate[e] > 0 ? e : 0), ui.unlock.accessory[ui.accessory] > 0 || (ui.accessory = ui.unlock.accessory[a] > 0 ? a : 0), ui.unlock.bag[ui.bag] > 0 || (ui.bag = ui.unlock.bag[r] > 0 ? r : 0)
        }

        function $(e) {
            !1 !== n.in_this_view && (Z(m, oe, "none"), Z(v, oe, "none"), Q(), e === n.current_view || n.spin >= 1 || (n.trevda.style.display = e === l || e === D || e === C || e === S || e === N || e === b ? "inline-block" : "none", Z(n.current_view, oe, "none"), n.current_view = e, Z(n.current_view, se, "inline-block")))
        }
        this.select_subview = $, this.play_game = function () {
            !1 === n.waiting && (d_.reconnect.enabled = !1, n.waiting = !0, Q(), E_.connect())
        };
        var ee = 1,
            ie = 2,
            te = 4,
            re = 8,
            ne = 16,
            ae = 32,
            oe = 0,
            se = 1;
        window.innerWidth < 1300 ? this.nickname = {
            id: document.getElementById("nickname_block"),
            style: document.getElementById("nickname_block").style,
            input: document.getElementById("nickname_input"),
            active: se,
            position: te | ee,
            view: l,
            translate: {
                x: 0,
                y: 0,
                _x: 200,
                _y: 184
            }
        } : this.nickname = {
            id: document.getElementById("nickname_block"),
            style: document.getElementById("nickname_block").style,
            input: document.getElementById("nickname_input"),
            active: se,
            position: te | ne,
            view: l,
            translate: {
                x: 0,
                y: 0,
                _x: -180,
                _y: 184
            }
        }, this.nickname.id.addEventListener("keyup", (function (e) {
            e.preventDefault(), 13 != e.keyCode || n.waiting || n.settings || n.play_game()
        })), this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "", this.account_nickname = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: oe,
            position: te | ne,
            view: C,
            translate: {
                x: 0,
                y: 0,
                _x: -122,
                _y: 110
            }
        }, window.innerWidth < 1300 ? this.server_list = {
            id: document.getElementById("servselect"),
            style: document.getElementById("servselect").style,
            active: se,
            position: te | ee,
            view: l,
            translate: {
                x: 0,
                y: 0,
                _x: 208,
                _y: 225
            }
        } : this.server_list = {
            id: document.getElementById("servselect"),
            style: document.getElementById("servselect").style,
            active: se,
            position: te | ne,
            view: l,
            translate: {
                x: 0,
                y: 0,
                _x: -180,
                _y: 225
            }
        }, this.leaderboard = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: oe,
            position: te | ne,
            view: S,
            translate: {
                x: 0,
                y: 0,
                _x: -294.5,
                _y: 190
            }
        }, this.stats_box = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: oe,
            position: te | ne,
            view: C,
            translate: {
                x: 0,
                y: 0,
                _x: 125,
                _y: 187
            }
        }, this.serverAddressBlock = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: oe,
            position: te | ne,
            view: q,
            translate: {
                x: 0,
                y: 0,
                _x: -220,
                _y: 350
            }
        }, h = 0, this.css = [], this.css[h++] = this.nickname, this.css[h++] = this.server_list, this.css[h++] = this.leaderboard, this.css[h++] = this.account_nickname, this.css[h++] = this.stats_box, this.css[h++] = this.serverAddressBlock, h = 0, this.bkgd = [], this.bkgd[h++] = Uo(IMAGES.AVATAR_RESUME, se, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL1, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL2, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL3, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL4, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL5, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL6, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL7, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL8, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL9, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL10, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL11, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL12, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL13, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL14, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL15, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL16, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL17, oe, 0, 0, ee), this.bkgd[h++] = Uo(IMAGES.AVATAR_LVL18, oe, 0, 0, ee), window.innerWidth < 1300 ? this.bkgd[h] = Uo(IMAGES.LOGO_INTERFACE, se, 200, 100, te | ee) : this.bkgd[h] = Uo(IMAGES.LOGO_INTERFACE, se, -753 / 4, 100, te | ne), this.bkgd[h++].view = l, this.bkgd[h++] = Uo(IMAGES.LINKS_BG, se, 353, -10, ie), window.innerWidth > 1300 && (this.bkgd[h] = Uo(IMAGES.CHANGELOG_BOX, se, -885 / 4, -159.5, re | ne), this.bkgd[h++].view = l), this.bkgd[h] = Uo(IMAGES.PROFILE_BOX, oe, -323.25, 100, te | ne), this.bkgd[h++].view = C, this.bkgd[h] = Uo(IMAGES.SKINS_BOX, oe, -356.25, 100, te | ne), this.bkgd[h++].view = N, this.bkgd[h] = Uo(IMAGES.ACCOUNT_BOX, oe, -905 / 4, 50, te | ne), this.bkgd[h++].view = g, this.bkgd[h] = Uo(IMAGES.SHOP_BOX, oe, -402, 130, te | ne), this.bkgd[h++].view = D, this.bkgd[h] = Uo(IMAGES.SERVER_LOCATION_BOX, oe, -279.25, 130, te | ne), this.bkgd[h++].view = J, this.bkgd[h] = Uo(IMAGES.SERVER_DURATION_BOX, oe, -305.5, 130, te | ne), this.bkgd[h++].view = X, this.bkgd[h] = Uo(IMAGES.SERVER_ACCESS_BOX, oe, -305.5, 100, te | ne), this.bkgd[h++].view = q, this.bkgd[h] = Uo(IMAGES.SEASON5_BOX, oe, -IMAGES.SEASON5_BOX.width / 4 - 350, -15, te | ne), this.bkgd[h++].view = j, this.bkgd[h] = Uo(IMAGES.TUTORIAL_BOX, oe, -374.25, 110, te | ne), this.bkgd[h++].view = b, this.bkgd[h] = Uo(IMAGES.LEADERBOARD_BOX, oe, -306.5, 100, te | ne), this.bkgd[h++].view = S, this.bkgd[h] = Uo(IMAGES.BUY_BREAD_BOX, oe, -345.25, 80, te | ne), this.bkgd[h++].view = p, this.bkgd[h] = Uo(IMAGES.SPIN1, oe, -385.5, 150, te | ne), this.bkgd[h++].view = M;
        var _e = 3.6,
            Ee = this.create_spin([
                ["#25c5d6", 10.8],
                ["#e2cf27", 36],
                ["#afac98", 108],
                ["#d88e23", 57 * _e]
            ]);
        this.bkgd[h] = Uo(Ee, oe, -Ee.width / 4, 178, te | ne), this.bkgd[h++].view = M, this.play_spin = function (e, i, t) {
            var r;
            n.spin = 1, n.spin_effect = 0, n.spin_win_effect = 0, n.spin_target = e, n.spin_type = i;
            var a = 0;
            if (0 === i) {
                for (a = 0; a < COSMETICS.SKIN.length && t !== COSMETICS.SKIN[a].id; a++);
                r = COSMETICS.SKIN[a], n.unlock.skin[a] = 1
            } else if (1 === i) {
                for (a = 0; a < COSMETICS.ACCESSORY.length && t !== COSMETICS.ACCESSORY[a].id; a++);
                r = COSMETICS.ACCESSORY[a], n.unlock.accessory[a] = 1
            } else if (2 === i) {
                for (a = 0; a < COSMETICS.BAG.length && t !== COSMETICS.BAG[a].id; a++);
                r = COSMETICS.BAG[a], n.unlock.bag[a] = 1
            } else if (3 === i) {
                for (a = 0; a < COSMETICS.BOOK.length && t !== COSMETICS.BOOK[a].id; a++);
                r = COSMETICS.BOOK[a], n.unlock.book[a] = 1
            } else if (4 === i) {
                for (a = 0; a < COSMETICS.CRATE.length && t !== COSMETICS.CRATE[a].id; a++);
                r = COSMETICS.CRATE[a], n.unlock.crate[a] = 1, n.unlock.dead[a] = 1
            }
            n.spin_win = a, n.spin_author = Ko("by " + r.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 24), n.spin_name = Ko(r.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 20)
        }, this.spin = 0, this.spin_effect = 0, this.spin_target = 0, this.spin_type = 0, this.spin_win_effect = 0, this.spin_author = void 0, this.spin_name = void 0;
        var Te = 197;
        this.bkgd[h] = Uo(IMAGES.SPIN2, oe, -385.5, 150, te | ne), this.bkgd[h++].view = y;
        Ee = this.create_spin([
            ["#d45ce5", 10.8],
            ["#25c5d6", 36],
            ["#e2cf27", 108],
            ["#afac98", 57 * _e]
        ]);
        this.bkgd[h] = Uo(Ee, oe, -Ee.width / 4, 178, te | ne), this.bkgd[h++].view = y, this.bkgd[h] = Uo(IMAGES.SPIN3, oe, -385.5, 150, te | ne), this.bkgd[h++].view = L;
        Ee = this.create_spin([
            ["#d33a2a", 10.8],
            ["#d45ce5", 36],
            ["#25c5d6", 108],
            ["#e2cf27", 57 * _e]
        ]);
        this.bkgd[h] = Uo(Ee, oe, -Ee.width / 4, 178, te | ne), this.bkgd[h++].view = L, this.bkgd[h] = Uo(IMAGES.SPIN4, oe, -385.5, 150, te | ne), this.bkgd[h++].view = P;
        Ee = this.create_spin([
            ["#25c5d6", 10.8],
            ["#e2cf27", 36],
            ["#afac98", 108],
            ["#d88e23", 57 * _e]
        ]);
        this.bkgd[h] = Uo(Ee, oe, -Ee.width / 4, 178, te | ne), this.bkgd[h++].view = P, this.bkgd[h] = Uo(IMAGES.SPIN5, oe, -385.5, 150, te | ne), this.bkgd[h++].view = G;
        Ee = this.create_spin([
            ["#d45ce5", 10.8],
            ["#25c5d6", 36],
            ["#e2cf27", 108],
            ["#afac98", 57 * _e]
        ]);
        this.bkgd[h] = Uo(Ee, oe, -Ee.width / 4, 178, te | ne), this.bkgd[h++].view = G, this.bkgd[h] = Uo(IMAGES.SPIN6, oe, -385.5, 150, te | ne), this.bkgd[h++].view = z;
        Ee = this.create_spin([
            ["#d33a2a", 10.8],
            ["#d45ce5", 36],
            ["#25c5d6", 108],
            ["#e2cf27", 57 * _e]
        ]);
        if (this.bkgd[h] = Uo(Ee, oe, -Ee.width / 4, 178, te | ne), this.bkgd[h++].view = z, this.bkgd[h] = Uo(IMAGES.CUSTOM_SKIN_BOX, oe, -341.5, 100, te | ne), this.bkgd[h++].view = W, this.bkgd[h] = Uo(IMAGES.ACCESSORIES_BOX, oe, -341.5, 100, te | ne), this.bkgd[h++].view = U, this.bkgd[h] = Uo(IMAGES.BAG_BOX, oe, -341.5, 100, te | ne), this.bkgd[h++].view = K, this.bkgd[h] = Uo(IMAGES.BOOK_BOX, oe, -341.5, 100, te | ne), this.bkgd[h++].view = w, this.bkgd[h] = Uo(IMAGES.CRATE_BOX, oe, -341.5, 100, te | ne), this.bkgd[h++].view = V, this.bkgd[h] = Uo(IMAGES.LOOT_BOX, oe, -341.5, 100, te | ne), this.bkgd[h++].view = Y, BAG_REMAIN_BOX = h++, this.bkgd[BAG_REMAIN_BOX] = Uo(IMAGES.BAG_REMAIN_BOX, oe, 484, 0, te), SERVER_REMAIN_BOX = h++, this.bkgd[SERVER_REMAIN_BOX] = Uo(IMAGES.SERVER_REMAIN_BOX, oe, 812.5, 0, te), this.bkgd[h] = Uo(IMAGES.LOCKED_CUSTOM_ALERT, oe, -189.5, -5, te | ne), this.bkgd[h++].view = v, this.bkgd[h] = Uo(IMAGES.LOCKED_SKIN_ALERT, oe, -189.5, -5, te | ne), this.bkgd[h++].view = m, LEVEL_GAUGE = h++, this.bkgd[LEVEL_GAUGE] = Uo(IMAGES.GAUGE, se, 93, 30, te), this.bkgd[h] = Uo(IMAGES.CHANGE_NICKNAME1_BOX, oe, -173, 110, te | ne), this.bkgd[h++].view = F, this.bkgd[h] = Uo(IMAGES.CHANGE_NICKNAME0_BOX, oe, -173, 110, te | ne), this.bkgd[h++].view = x, h = 0, this.buttons = [], this.buttons[h++] = wo(50, 57, 0, [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], 1, 0, (function () {
                n.isUserLogged() ? $(p) : $(g)
            }), 320, 0, ee, se), window.innerWidth < 1300 ? this.buttons[h] = wo(202, 97, 0, [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, te | ee, se) : this.buttons[h] = wo(202, 97, 0, [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, te | ne, se), this.buttons[h++].view = l, window.innerWidth > 1300 && (this.buttons[h] = wo(355, 168, 0, [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], 1, 0, (function () {
                window.open("./changelog.html", "_blank")
            }), -195, -115, re | ne, se), this.buttons[h++].view = l, this.buttons[h] = wo(355, 168, 0, [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], 1, 0, (function () {
                window.open("https://devast.io", "_blank")
            }), 20, -115, re | ne, se), this.buttons[h++].view = l), this.buttons[h++] = wo(80, 80, 0, [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], 1, 0, (function () {
                window.open("https://discord.gg/starveio", "_blank")
            }), 330, 10, ie, se), this.buttons[h++] = wo(80, 80, 0, [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], 1, 0, (function () {
                window.open("https://reddit.com/r/starveio", "_blank")
            }), 280, 10, ie, se), this.buttons[h++] = wo(80, 80, 0, [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], 1, 0, (function () {
                window.open("https://starveiopro.wikia.com/wiki/", "_blank")
            }), 230, 10, ie, se), this.buttons[h++] = wo(80, 80, 0, [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], 1, 0, (function () {
                window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank")
            }), 155, 10, ie, se), this.buttons[h++] = wo(80, 80, 0, [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], 1, 0, (function () {
                window.open("https://twitter.com/lapamauve", "_blank")
            }), 105, 10, ie, se), this.buttons[h++] = wo(80, 80, 0, [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], 1, 0, (function () {
                window.open("https://youtube.com/c/lapamauve", "_blank")
            }), 55, 10, ie, se), LEADERBOARD_BUTTON = h++, this.buttons[LEADERBOARD_BUTTON] = wo(232, 142, 0, [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, (function () {
                $(S), o_(ui.LEADERBOARD_ALL, ui.LEADERBOARD_TOTAL, ui.LEADERBOARD_SCORE, ui.LEADERBOARD_SEASON5)
            }), -5, 573, ee, se), this.buttons[h++] = wo(236, 165, 0, [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], 1, 1, (function () {
                $(S)
            }), -5, 566, ee, se), TUTORIAL_BUTTON = h++, this.buttons[TUTORIAL_BUTTON] = wo(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function () {
                $(b)
            }), -5, 494, ee, se), this.buttons[h++] = wo(236, 165, 0, [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], 1, 1, (function () {
                $(b)
            }), -5, 494, ee, se), SERVER_BUTTON = h++, this.buttons[SERVER_BUTTON] = wo(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function () {
                n.isUserLogged() ? ui.privateServerTime - Date.now() > 0 && $(q) : $(g)
            }), -5, 415, ee, se), this.buttons[h++] = wo(236, 165, 0, [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], 1, 1, (function () {
                n.isUserLogged() ? ui.privateServerTime - Date.now() > 0 && $(q) : $(g)
            }), -5, 415, ee, se), SHOP_BUTTON = h++, this.buttons[SHOP_BUTTON] = wo(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function () {
                $(D)
            }), -5, 336, ee, se), this.buttons[h++] = wo(236, 165, 0, [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], 1, 1, (function () {
                $(D)
            }), -5, 336, ee, se), COSMETICS_BUTTON = h++, this.buttons[COSMETICS_BUTTON] = wo(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function () {
                $(N)
            }), -5, 257, ee, se), this.buttons[h++] = wo(236, 165, 0, [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], 1, 1, (function () {
                $(N)
            }), -5, 257, ee, se), GAME_BUTTON = h++, this.buttons[GAME_BUTTON] = wo(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function () {
                $(l)
            }), -5, 178, ee, se), this.buttons[h++] = wo(236, 165, 0, [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], 1, 1, (function () {
                $(l)
            }), -5, 178, ee, se), LOGIN_BUTTON = h++, this.LOGIN_BUTTON = LOGIN_BUTTON, this.buttons[LOGIN_BUTTON] = wo(324, 222, 0, [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], 1, 0, (function () {
                $(g)
            }), 0, 70, ee, se), PROFILE_BUTTON = h++, PROFILE_BUTTON_2 = h++, this.PROFILE_BUTTON = PROFILE_BUTTON, this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2, this.buttons[PROFILE_BUTTON] = wo(324, 222, 0, [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], 1, 0, (function () {
                $(C), le(-1)
            }), 0, 70, ee, oe), this.buttons[PROFILE_BUTTON_2] = wo(324, 222, 0, [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], 1, 1, (function () {
                $(C), le(-1)
            }), 0, 70, ee, oe), 0 === E_.privateServer) {
            var Ae = h++;
            window.innerWidth < 1300 ? this.buttons[Ae] = wo(266, 176, 0, [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_PVP)
            }), 150, 300, ee | te, se) : this.buttons[Ae] = wo(266, 176, 0, [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_PVP)
            }), -340, 100, ne | te, se), this.buttons[Ae].view = l, this.buttons[Ae].hint = 0;
            var de = h++;
            window.innerWidth < 1300 ? this.buttons[de] = wo(266, 176, 0, [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_LEGACY)
            }), 150, 400, ee | te, se) : this.buttons[de] = wo(266, 176, 0, [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_LEGACY)
            }), -340, 200, ne | te, se), this.buttons[de].view = l, this.buttons[de].hint = 0;
            var Ie = h++;
            window.innerWidth < 1300 ? this.buttons[Ie] = wo(266, 176, 0, [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_COMMUNITY)
            }), 450, 300, ee | te, se) : this.buttons[Ie] = wo(266, 176, 0, [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_COMMUNITY)
            }), -340, 300, ne | te, se), this.buttons[Ie].view = l, this.buttons[Ie].hint = 0;
            var he = h++;
            window.innerWidth < 1300 ? this.buttons[he] = wo(266, 176, 0, [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_ZOMBIES)
            }), 300, 300, ee | te, se) : this.buttons[he] = wo(266, 176, 0, [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_ZOMBIES)
            }), 204, 100, ne | te, se), this.buttons[he].view = l, this.buttons[he].hint = 0;
            var ue = h++;
            window.innerWidth < 1300 ? this.buttons[ue] = wo(266, 176, 0, [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_VAMPIRES)
            }), 300, 400, ee | te, se) : this.buttons[ue] = wo(266, 176, 0, [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_VAMPIRES)
            }), 204, 200, ne | te, se), this.buttons[ue].view = l, this.buttons[ue].hint = 0;
            var Oe = h++;
            this.buttons[Oe] = wo(266, 176, 0, [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], 1, 0, (function () {
                E_.select_gamemode(qo.MODE_EXPERIMENTAL)
            }), window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? ee : ne) | te, se), this.buttons[Oe].view = l, this.buttons[Oe].hint = 0
        }

        function le(e, i) {
            if (void 0 !== i) {
                ui.profile_season = i;
                var t = ui.seasons[i];
                ui.score = t.score, ui.kill = t.kill, ui.death = t.death, ui.time = t.time, ui.bestScore = t.bestScore, ui.bestKill = t.bestKill, ui.bestTime = t.bestTime, ui.scoreTotal = t.scoreTotal
            }
            if (void 0 === e && (e = ui.current_mode_score), ui.current_mode_score = e, e >= 0) document.getElementById("stats_box_time").innerHTML = ui.bestTime[e], document.getElementById("stats_box_kill").innerHTML = ui.bestKill[e], document.getElementById("stats_box_score").innerHTML = ui.bestScore[e];
            else {
                for (var r = 0, n = 0; n < ui.kill.length; n++) r += ui.kill[n];
                var a = 0;
                for (n = 0; n < ui.time.length; n++) a += ui.time[n];
                document.getElementById("stats_box_time").innerHTML = a, document.getElementById("stats_box_kill").innerHTML = r, document.getElementById("stats_box_score").innerHTML = ui.score
            }
        }
        this.buttons[h] = wo(87, 78, 0, [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], 1, 0, (function () {
            ui.generate_new_nickname(), 0 === ui.firstName ? $(x) : $(F)
        }), 127, 110, ne | te, oe), this.buttons[h++].view = C, this.buttons[h] = wo(87, 78, 0, [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], 1, 0, (function () {
            ! function () {
                xs === ks && window.FB.getUserID() && window.FB.logout();
                xs === Fs && void 0 !== Qs && (window.gapi.auth2.getAuthInstance().signOut(), Qs = void 0);
                Xs = void 0, Js = void 0, xs = void 0, ui.kit = 0, ui.bread = 0, ui.score = 0, ui.unlock_cosmetics(), onUserLogout()
            }()
        }), 255, 110, ne | te, oe), this.buttons[h++].view = C, this.buttons[h] = wo(58, 64, 0, [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, (function () {
            $(l)
        }), 189, 118, ne | te, oe), this.buttons[h++].view = g, this.buttons[h] = wo(497, 72, 0, [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], 1, 0, (function () {
            i.loginWithGoogle()
        }), -130, 390, ne | te, oe), this.buttons[h++].view = g, this.buttons[h] = wo(497, 72, 0, [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], 1, 0, (function () {
            d_.alert.list.push("Soon")
        }), -130, 430, ne | te, oe), this.buttons[h++].view = g, __LEVEL_FACTOR__ = 2e4, this.xp_formula = function (e) {
            var i = ui.level_formula(e),
                t = i * i * __LEVEL_FACTOR__;
            return (e -= t) / ((i + 1) * (i + 1) * __LEVEL_FACTOR__ - t)
        }, this.level_formula = function (e) {
            return Math.floor(Math.sqrt(e / __LEVEL_FACTOR__))
        }, this.update_score = function (e) {
            ui.lvl = ui.level_formula(e), ui.xp_dest = ui.xp_formula(e), ui.xp = 0, ui.score = e
        }, this.login_restore_data = function (e) {
            ui.buttons[ui.LOGIN_BUTTON].info.active = 0, ui.buttons[ui.PROFILE_BUTTON].info.active = 1, ui.buttons[ui.PROFILE_BUTTON_2].info.active = 1, o(), -1 === e.name.indexOf("Starver#") ? document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(e.name))) : document.getElementById("account_nickname_input").value = e.name, ui.bread = e.bread;
            var i = e.seasons,
                t = i[i.length - 1];
            ui.seasons = i, n.update_score(t.score), ui.score = t.score, ui.kill = t.kill, ui.death = t.death, ui.time = t.time, ui.bestScore = t.bestScore, ui.bestKill = t.bestKill, ui.bestTime = t.bestTime, ui.scoreTotal = t.scoreTotal, ui.firstName = e.firstName, document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + e.privateServer, void 0 === ui.firstName && (ui.firstName = 0), ui.privateServerTime = Date.now() + e.privateServerTime, Number(e.privateServerTime) > 0 && (ui.privateServerTime = Date.now() + Number(e.privateServerTime)), ui.kit = Date.now() + e.kit, Number(e.kit) > 0 && (ui.kit = Date.now() + Number(e.kit));
            for (var r = COSMETICS.SKIN, a = 0; a < e.skins.length; a++) {
                if (e.skins[a] > 0)
                    for (var s = 0; s < r.length; s++) r[s].id === a && (n.unlock.skin[s] = 1)
            }
            for (r = COSMETICS.ACCESSORY, a = 0; a < e.accessories.length; a++) {
                if (e.accessories[a] > 0)
                    for (s = 0; s < r.length; s++) r[s].id === a && (n.unlock.accessory[s] = 1)
            }
            for (r = COSMETICS.BOOK, a = 0; a < e.books.length; a++) {
                if (e.books[a] > 0)
                    for (s = 0; s < r.length; s++) r[s].id === a && (n.unlock.book[s] = 1)
            }
            for (r = COSMETICS.BAG, a = 0; a < e.bags.length; a++) {
                if (e.bags[a] > 0)
                    for (s = 0; s < r.length; s++) r[s].id === a && (n.unlock.bag[s] = 1)
            }
            for (r = COSMETICS.CRATE, a = 0; a < e.crates.length; a++) {
                if (e.crates[a] > 0)
                    for (s = 0; s < r.length; s++) r[s].id === a && (n.unlock.crate[s] = 1, n.unlock.dead[s] = 1)
            }
        }, this.login_after = function () {
            window.onUserLogin = function () {
                $(l),
                    function (i) {
                        var t = new XMLHttpRequest;
                        t.open("GET", e + "login?token=" + Js + "&type=" + xs), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function () {
                            4 === this.readyState && 200 === this.status && "0" !== t.responseText && i(JSON.parse(t.responseText))
                        }, t.send()
                    }(n.login_restore_data)
            }, 1 === qs && window.onUserLogin()
        }, window.onUserLogout = function () {
            ui.buttons[ui.LOGIN_BUTTON].info.active = 1, ui.buttons[ui.PROFILE_BUTTON].info.active = 0, ui.buttons[ui.PROFILE_BUTTON_2].info.active = 0, $(l), window.location = "https://starve.io"
        }, this.isUserLogged = function () {
            return ui.buttons[ui.PROFILE_BUTTON].info.active
        }, this.buttons[h] = wo(461, 105, 0, [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], 1, 0, (function () {
            n.isUserLogged() ? $(p) : $(g)
        }), -100, 80, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(157, 158, 0, [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], 1, 0, (function () {
            window.open("https://starveiopro.wikia.com/wiki/", "_blank")
        }), -35, 125, ne | te, oe), this.buttons[h++].view = b, this.buttons[h] = wo(66, 73, 0, [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], 1, 0, void 0, -68, 340, ne | te, oe), this.buttons[h++].view = b, this.buttons[h] = wo(66, 73, 0, [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], 1, 0, void 0, -30, 340, ne | te, oe), this.buttons[h++].view = b, this.buttons[h] = wo(97, 66, 0, [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], 1, 0, void 0, -14, 151, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_KILL = h, this.buttons[h] = wo(135, 66, 0, [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, ui.LEADERBOARD_KILL)
        }), 37.5, 151, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_TIME = h, this.buttons[h] = wo(160, 66, 0, [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, ui.LEADERBOARD_TIME)
        }), 107.5, 151, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_SCORE = h, this.buttons[h] = wo(207, 66, 0, [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, ui.LEADERBOARD_SCORE)
        }), 190.5, 151, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_TODAY = h, this.buttons[h] = wo(144, 66, 0, [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(ui.LEADERBOARD_TODAY)
        }), 103.5, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_WEEK = h, this.buttons[h] = wo(124, 66, 0, [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(ui.LEADERBOARD_WEEK)
        }), 177.5, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_ALL = h, this.buttons[h] = wo(104, 66, 0, [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(ui.LEADERBOARD_ALL)
        }), 242, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_SEASON1 = h, this.buttons[h] = wo(183, 66, 0, [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, void 0, ui.LEADERBOARD_SEASON1)
        }), -290, 521, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_SEASON2 = h, this.buttons[h] = wo(183, 66, 0, [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, void 0, ui.LEADERBOARD_SEASON2)
        }), -185, 521, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_SEASON3 = h, this.buttons[h] = wo(183, 66, 0, [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, void 0, ui.LEADERBOARD_SEASON3)
        }), -80, 521, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_SEASON4 = h, this.buttons[h] = wo(183, 66, 0, [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, void 0, ui.LEADERBOARD_SEASON4)
        }), 25, 521, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_SEASON5 = h, this.buttons[h] = wo(183, 66, 0, [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], 1, 0, (function () {
            o_(void 0, void 0, void 0, ui.LEADERBOARD_SEASON5)
        }), 130, 521, ne | te, oe), this.buttons[h++].view = S, this.buttons[h] = wo(232, 352, 0, [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], 1, 0, (function () {
            e_(300)
        }), -330, 135, ne | te, oe), this.buttons[h++].view = p, this.buttons[h] = wo(232, 352, 0, [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], 1, 0, (function () {
            e_(600)
        }), -195, 135, ne | te, oe), this.buttons[h++].view = p, this.buttons[h] = wo(243, 374, 0, [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], 1, 0, (function () {
            e_(2600)
        }), -60, 130, ne | te, oe), this.buttons[h++].view = p, this.buttons[h] = wo(232, 352, 0, [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], 1, 0, (function () {
            e_(7e3)
        }), 78, 135, ne | te, oe), this.buttons[h++].view = p, this.buttons[h] = wo(243, 374, 0, [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], 1, 0, (function () {
            e_(2e4)
        }), 213, 130, ne | te, oe), this.buttons[h++].view = p, this.buttons[h] = wo(58, 64, 0, [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 300, 88, ne | te, oe), this.buttons[h++].view = p, this.buttons[h] = wo(323, 112, 0, [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], 1, 0, (function () {
            $(W), ve.initSelector()
        }), -315, 185, ne | te, oe), this.buttons[h++].view = N, this.buttons[h] = wo(323, 112, 0, [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], 1, 0, (function () {
            $(U), He.initSelector()
        }), -315, 321, ne | te, oe), this.buttons[h++].view = N, this.buttons[h] = wo(323, 112, 0, [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], 1, 0, (function () {
            $(K), Me.initSelector()
        }), 153, 185, ne | te, oe), this.buttons[h++].view = N, this.buttons[h] = wo(323, 112, 0, [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], 1, 0, (function () {
            $(w), Ge.initSelector()
        }), 153, 321, ne | te, oe), this.buttons[h++].view = N, this.buttons[h] = wo(323, 112, 0, [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], 1, 0, (function () {
            $(V), Le.initSelector()
        }), 153, 463, ne | te, oe), this.buttons[h++].view = N, this.buttons[h] = wo(323, 112, 0, [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], 1, 0, (function () {
            $(Y), fe.initSelector()
        }), -315, 463, ne | te, oe), this.buttons[h++].view = N, this.buttons[h] = wo(327, 117, 0, [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], 1, 0, (function () {
            $(j)
        }), 155, 70, ee, se), this.buttons[h++].view = l, this.buttons[h] = wo(130, 129, 0, [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, (function () {
            Z(m, oe, "none"), $(D)
        }), 10, 40, ne | te, oe), this.buttons[h++].view = m, this.buttons[h] = wo(130, 129, 0, [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, (function () {
            Z(v, oe, "none"), $(D)
        }), 10, 40, ne | te, oe), this.buttons[h++].view = v, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 200, 140, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], 1, 0, (function () {
            i_("Atlanta")
        }), -265, 300, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], 1, 0, (function () {
            i_("Dallas")
        }), -130, 300, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], 1, 0, (function () {
            i_("Fremont")
        }), 5, 300, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], 1, 0, (function () {
            i_("Newark")
        }), 140, 300, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], 1, 0, (function () {
            i_("London")
        }), -265, 365, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], 1, 0, (function () {
            i_("Frankfurt")
        }), -130, 365, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], 1, 0, (function () {
            i_("Singapore")
        }), 5, 365, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], 1, 0, (function () {
            i_("Tokyo")
        }), 140, 365, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], 1, 0, (function () {
            i_("Toronto")
        }), -265, 430, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(253, 110, 0, [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], 1, 0, (function () {
            i_("Mumbai")
        }), -130, 430, ne | te, oe), this.buttons[h++].view = J, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(J)
        }), 230, 140, ne | te, oe), this.buttons[h++].view = X, this.buttons[h] = wo(230, 352, 0, [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], 1, 0, (function () {
            e_(350)
        }), -280, 240, ne | te, oe), this.buttons[h++].view = X, this.buttons[h] = wo(230, 352, 0, [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], 1, 0, (function () {
            e_(700)
        }), -130, 240, ne | te, oe), this.buttons[h++].view = X, this.buttons[h] = wo(230, 352, 0, [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], 1, 0, (function () {
            e_(1400)
        }), 20, 240, ne | te, oe), this.buttons[h++].view = X, this.buttons[h] = wo(230, 352, 0, [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], 1, 0, (function () {
            e_(3e3)
        }), 170, 240, ne | te, oe), this.buttons[h++].view = X, this.buttons[h] = wo(105, 119, 0, [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], 1, 0, (function () {
            document.getElementById("serverAddressInput").select(), document.execCommand("copy")
        }), 170, 310, ne | te, oe), this.buttons[h++].view = q, this.buttons[h] = wo(105, 119, 0, [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], 1, 0, (function () {
            ! function () {
                var i = new XMLHttpRequest;
                i.open("GET", e + "rebootServer?token=" + Js + "&userid=" + Xs), i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), i.onreadystatechange = function () {
                    4 === this.readyState && 200 === this.status && "0" !== i.responseText && (location.href = document.getElementById("serverAddressInput").value)
                }, i.send()
            }()
        }), 235, 310, ne | te, oe), this.buttons[h++].view = q, this.buttons[h] = wo(204, 115, 0, [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], 1, 0, (function () {
            window.open("./commands.html", "_blank")
        }), -265, 490, ne | te, oe), this.buttons[h++].view = q, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], 1, 0, (function () {
            $(M)
        }), -210, 170, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], 1, 0, (function () {
            $(P)
        }), 70, 170, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], 1, 0, (function () {
            $(G)
        }), 70, 204, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function () {
            $(y)
        }), -210, 204, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function () {
            $(z)
        }), 70, 238, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function () {
            n.isUserLogged() ? n_(0, 300) : $(g)
        }), 307, 205, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, (function () {
            $(L)
        }), -210, 238, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(145, 69, 0, [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, (function () {
            n.isUserLogged() ? n_(1, 600) : $(g)
        }), 307, 239, ne | te, oe), this.buttons[h++].view = D, this.buttons[h] = wo(192, 101, 0, [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], 1, 0, (function () {
            r_()
        }), -100, 250, ne | te, oe), this.buttons[h++].view = x, this.buttons[h] = wo(192, 104, 0, [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], 1, 0, (function () {
            r_()
        }), -100, 239, ne | te, oe), this.buttons[h++].view = F, this.buttons[h] = wo(192, 101, 0, [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], 1, 0, (function () {
            $(C)
        }), 10, 250, ne | te, oe), this.buttons[h++].view = x, this.buttons[h] = wo(192, 104, 0, [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], 1, 0, (function () {
            $(C)
        }), 10, 239, ne | te, oe), this.buttons[h++].view = F, RARITY_BUTTON = [], RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK], RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK], RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK], RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK], RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK], RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK], RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK], RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK], FIRST_BUTTON_SKIN = h, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, ne | te, oe), this.buttons[h++].view = W, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(N)
        }), -320, 470, ne | te, oe), this.buttons[h++].view = W, FIRST_BUTTON_ACCESSORY = h, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, ne | te, oe), this.buttons[h++].view = U, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(N)
        }), -320, 470, ne | te, oe), this.buttons[h++].view = U, FIRST_BUTTON_LOOT = h, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, ne | te, oe), this.buttons[h++].view = Y, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(N)
        }), -320, 470, ne | te, oe), this.buttons[h++].view = Y, FIRST_BUTTON_BAG = h, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, ne | te, oe), this.buttons[h++].view = K, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(N)
        }), -320, 470, ne | te, oe), this.buttons[h++].view = K, FIRST_BUTTON_BOOK = h, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, ne | te, oe), this.buttons[h++].view = w, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(N)
        }), -320, 470, ne | te, oe), this.buttons[h++].view = w, FIRST_BUTTON_CRATE = h, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(N)
        }), -320, 470, ne | te, oe), this.buttons[h++].view = V, this.buttons[h] = wo(260, 260, 0, [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], 1, 0, (function () {
            n.isUserLogged() ? t_(3, 50) : $(g)
        }), -65, 197, ne | te, oe), this.buttons[h++].view = P, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 309, 180, ne | te, oe), this.buttons[h++].view = P, this.buttons[h] = wo(260, 260, 0, [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], 1, 0, (function () {
            n.isUserLogged() ? t_(0, 100) : $(g)
        }), -65, 197, ne | te, oe), this.buttons[h++].view = M, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 309, 180, ne | te, oe), this.buttons[h++].view = M, this.buttons[h] = wo(260, 260, 0, [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], 1, 0, (function () {
            n.isUserLogged() ? t_(4, 150) : $(g)
        }), -65, 197, ne | te, oe), this.buttons[h++].view = G, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 309, 180, ne | te, oe), this.buttons[h++].view = G, this.buttons[h] = wo(260, 260, 0, [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, (function () {
            n.isUserLogged() ? t_(1, 300) : $(g)
        }), -65, 197, ne | te, oe), this.buttons[h++].view = y, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 309, 180, ne | te, oe), this.buttons[h++].view = y, this.buttons[h] = wo(260, 260, 0, [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], 1, 0, (function () {
            n.isUserLogged() ? t_(2, 600) : $(g)
        }), -65, 197, ne | te, oe), this.buttons[h++].view = L, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 309, 180, ne | te, oe), this.buttons[h++].view = L, this.buttons[h] = wo(260, 260, 0, [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, (function () {
            n.isUserLogged() ? t_(5, 300) : $(g)
        }), -65, 197, ne | te, oe), this.buttons[h++].view = z, this.buttons[h] = wo(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function () {
            $(D)
        }), 309, 180, ne | te, oe), this.buttons[h++].view = z;
        var Re = h;
        this.buttons[h] = wo(205, 67, 0, [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], 1, 0, (function () {
            le(void 0, 0)
        }), -305, 125, ne | te, oe), this.buttons[h++].view = C;
        var ce = h;
        this.buttons[h] = wo(205, 67, 0, [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], 1, 0, (function () {
            le(void 0, 1)
        }), -305, 170, ne | te, oe), this.buttons[h++].view = C;
        var Ce = h;
        this.buttons[h] = wo(205, 67, 0, [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], 1, 0, (function () {
            le(void 0, 2)
        }), -305, 215, ne | te, oe), this.buttons[h++].view = C;
        var ge = h;
        this.buttons[h] = wo(205, 67, 0, [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], 1, 0, (function () {
            le(void 0, 3)
        }), -305, 260, ne | te, oe), this.buttons[h++].view = C;
        var Ne = h;
        this.buttons[h] = wo(205, 67, 0, [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], 1, 0, (function () {
            le(void 0, 3)
        }), -305, 305, ne | te, oe), this.buttons[h++].view = C;
        var De = h;
        this.buttons[h] = wo(460, 73, 0, [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], 1, 0, (function () {
            le(-1)
        }), -180, 170, ne | te, oe), this.buttons[h++].view = C;
        var be = h;
        this.buttons[h] = wo(222, 68, 0, [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], 1, 0, (function () {
            le(qo.MODE_PVP)
        }), -180, 215, ne | te, oe), this.buttons[h++].view = C;
        var Se = h;
        this.buttons[h] = wo(222, 68, 0, [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], 1, 0, (function () {
            le(qo.MODE_LEGACY)
        }), -180, 260, ne | te, oe), this.buttons[h++].view = C;
        var pe = h;
        this.buttons[h] = wo(222, 68, 0, [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], 1, 0, (function () {
            le(qo.MODE_ZOMBIES)
        }), -60, 215, ne | te, oe), this.buttons[h++].view = C;
        var me = h;
        this.buttons[h] = wo(222, 68, 0, [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], 1, 0, (function () {
            le(qo.MODE_VAMPIRES)
        }), -60, 260, ne | te, oe), this.buttons[h++].view = C, this.LEADERBOARD_TOTAL = h, this.buttons[h] = wo(143, 66, 0, [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], 1, 0, (function () {
            o_(void 0, ui.LEADERBOARD_TOTAL)
        }), -298, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_NORMAL = h, this.buttons[h] = wo(104, 66, 0, [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], 1, 0, (function () {
            o_(void 0, ui.LEADERBOARD_NORMAL)
        }), -223, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_FOREST = h, this.buttons[h] = wo(110, 66, 0, [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], 1, 0, (function () {
            o_(void 0, ui.LEADERBOARD_FOREST)
        }), -168, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_ZOMBIE = h, this.buttons[h] = wo(88, 66, 0, [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], 1, 0, (function () {
            o_(void 0, ui.LEADERBOARD_ZOMBIE)
        }), -110, 110, ne | te, oe), this.buttons[h++].view = S, this.LEADERBOARD_VAMPIRE = h, this.buttons[h] = wo(88, 66, 0, [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], 1, 0, (function () {
            o_(void 0, ui.LEADERBOARD_VAMPIRE)
        }), -63, 110, ne | te, oe), this.buttons[h++].view = S, this.buttons[h] = wo(86, 44, 0, [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], 1, 0, (function () {
            window.open("./terms.html", "_blank")
        }), 349, 290, ne | te, oe), this.buttons[h++].view = D;
        var ve = new a(COSMETICS.SKIN, FIRST_BUTTON_SKIN, (function (e) {
                ui.skin = e, 1 === ui.unlock.skin[e] && Cookies.set("starve_skin", "" + e, {
                    expires: 30
                })
            }), this.skin, this.unlock.skin),
            Me = new a(COSMETICS.BAG, FIRST_BUTTON_BAG, (function (e) {
                ui.bag = e, 1 === ui.unlock.bag[e] && Cookies.set("starve_bag", "" + e, {
                    expires: 30
                })
            }), this.bag, this.unlock.bag),
            Ge = new a(COSMETICS.BOOK, FIRST_BUTTON_BOOK, (function (e) {
                ui.book = e, 1 === ui.unlock.book[e] && Cookies.set("starve_book", "" + e, {
                    expires: 30
                })
            }), this.book, this.unlock.book),
            Le = new a(COSMETICS.CRATE, FIRST_BUTTON_CRATE, (function (e) {
                ui.dead = e, 1 === ui.unlock.dead[e] && Cookies.set("starve_dead", "" + e, {
                    expires: 30
                })
            }), this.dead, this.unlock.dead),
            fe = new a(COSMETICS.CRATE, FIRST_BUTTON_LOOT, (function (e) {
                ui.crate = e, 1 === ui.unlock.crate[e] && Cookies.set("starve_crate", "" + e, {
                    expires: 30
                })
            }), this.crate, this.unlock.crate),
            He = new a(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, (function (e) {
                ui.accessory = e, 1 === ui.unlock.accessory[e] && Cookies.set("starve_accessory", "" + e, {
                    expires: 30
                })
            }), this.accessory, this.unlock.accessory);
        this.trigger_mousedown = function (e) {
            l_.pos = Vo(n.can, e);
            for (var i = 0; i < n.buttons.length; i++) n.buttons[i].info.active === se && n.buttons[i].trigger(n.can, l_.pos, Po)
        }, this.trigger_mouseup = function (e) {
            l_.pos = Vo(n.can, e);
            for (var i = 0; i < n.buttons.length; i++) {
                var t = n.buttons[i];
                if (t.info.active === se && t.trigger(n.can, l_.pos, yo)) return void t.info.callback()
            }
        }, this.current_cursor = !1, this.trigger_mousemove = function (e) {
            l_.pos = Vo(n.can, e);
            for (var i = !1, r = 0; r < n.buttons.length; r++) n.buttons[r].info.active === se && (i |= n.buttons[r].trigger(n.can, l_.pos, Ho));
            n.current_cursor !== i && (n.current_cursor = i, t.style.cursor = i ? n.cursor1 : n.cursor0)
        }, this.add_event_listener = function () {
            window.addEventListener("mousedown", this.trigger_mousedown, !1), window.addEventListener("mouseup", this.trigger_mouseup, !1), window.addEventListener("mousemove", this.trigger_mousemove, !1)
        }, this.remove_event_listener = function () {
            window.removeEventListener("mousedown", this.trigger_mousedown, !1), window.removeEventListener("mouseup", this.trigger_mouseup, !1), window.removeEventListener("mousemove", this.trigger_mousemove, !1)
        }
    }

    function cs(e, i) {
        var t = this;
        this.can = e, this.ctx = i, window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default", this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default", this.cursor1 = "url('img/cursor1.png'), pointer"), this.show_ui = 1, this.show_clock = 1, this.show_recipe_book = 1, this.show_quest = 1, this.team_box = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            update: function () {
                this.style.left = Math.floor(R - 125) + "px", this.style.top = "110px"
            }
        }, this.audio = {
            button_on: wo(60, 60, 0, sprite[k.SOUND_BUTTON_ON]),
            button_off: wo(60, 60, 0, sprite[k.SOUND_BUTTON_OFF])
        }, this.sign = {
            open: !1,
            breads: 0,
            symbol: document.getElementById("sign_object"),
            symbol_id: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: wo(60, 60, 0, sprite[k.SIGN_BUTTON]),
            update_button: function () {
                var e = Math.floor(Math.floor((3 + d_.craft.can_craft.length) / 4) * (10 + sprite[k.INV_WOOD][0].width) + 35);
                this.button.info.translate.x = e, this.button.info.translate.y = 22
            },
            update: function () {
                this.style.left = Math.floor(R - 150) + "px", this.style.top = Math.floor(c - 115) + "px"
            },
            quit: function () {
                h_.sign.style.display = "none", h_.sign.open = !1
            },
            select: function () {
                h_.sign.open = !h_.sign.open, h_.sign.open ? h_.sign.style.display = "inline-block" : h_.sign.style.display = "none"
            },
            ok: function () {
                E_.update_sign(d_.sign.iid, h_.sign.symbol_id), h_.sign.select()
            },
            up: function () {
                h_.sign.symbol_id = 0 === h_.sign.symbol_id ? Jo.SYMBOL_MAX - 1 : h_.sign.symbol_id - 1, h_.sign.symbol.src = "./img/sign" + h_.sign.symbol_id + ".png"
            },
            down: function () {
                h_.sign.symbol_id = (h_.sign.symbol_id + 1) % Jo.SYMBOL_MAX, h_.sign.symbol.src = "./img/sign" + h_.sign.symbol_id + ".png"
            }
        }, document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, !1), document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, !1), document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, !1), document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, !1), this.market = {
            open: !1,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                val: 1,
                b: 1,
                a: 3,
                img_item: k.INV_WOOD
            }, {
                id: 1,
                name: "stone",
                val: 1,
                b: 1,
                a: 4,
                img_item: k.INV_STONE
            }, {
                id: 2,
                name: "gold",
                val: 1,
                b: 1,
                a: 6,
                img_item: k.INV_GOLD
            }, {
                id: 3,
                name: "diamond",
                val: 4,
                b: 4,
                a: 1,
                img_item: k.INV_DIAMOND
            }, {
                id: 4,
                name: "amethyst",
                val: 8,
                b: 8,
                a: 1,
                img_item: k.INV_AMETHYST
            }, {
                id: 5,
                name: "reidite",
                val: 16,
                b: 16,
                a: 1,
                img_item: k.INV_REIDITE
            }, {
                id: 6,
                name: "pumpkin_seed",
                val: 10,
                b: 10,
                a: 1,
                img_item: k.INV_PUMPKIN_SEED
            }, {
                id: 7,
                name: "carrot_seed",
                val: 16,
                b: 16,
                a: 1,
                img_item: k.INV_CARROT_SEED
            }, {
                id: 8,
                name: "tomato_seed",
                val: 20,
                b: 20,
                a: 1,
                img_item: k.INV_TOMATO_SEED
            }, {
                id: 9,
                name: "thornbush_seed",
                val: 30,
                b: 30,
                a: 1,
                img_item: k.INV_THORNBUSH_SEED
            }, {
                id: 10,
                name: "garlic_seed",
                val: 40,
                b: 40,
                a: 1,
                img_item: k.INV_GARLIC_SEED
            }, {
                id: 11,
                name: "watermelon_seed",
                val: 60,
                b: 60,
                a: 1,
                img_item: k.INV_WATERMELON_SEED
            }],
            button: wo(60, 60, 0, sprite[k.MARKET_BUTTON]),
            update: function () {
                this.style.left = Math.floor(R - 450) + "px", this.style.top = Math.floor(c - 270) + "px"
            },
            select: function () {
                h_.market.open = !h_.market.open, h_.market.open ? h_.market.style.display = "inline-block" : h_.market.style.display = "none"
            },
            quit: function () {
                h_.market.style.display = "none", h_.market.open = !1
            },
            buy: function () {
                E_.buy_market(this.itemMarket)
            },
            change: function () {
                this.id;
                if (1 === this.itemMarket.a) {
                    var e = Math.floor(Number(this.value) * this.itemMarket.b);
                    this.itemMarket.val = e, document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
                } else {
                    e = Math.floor(Number(this.value) / this.itemMarket.a);
                    this.itemMarket.val = e, document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
                }
            }
        }, document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, !1);
        for (var r = [
                ["mouseup", this.market.buy, "buy_"],
                ["click", this.market.change, ""],
                ["change", this.market.change, ""],
                ["keypress", this.market.keypress, ""]
            ], n = 0; n < this.market.items.length; n++) {
            var a = this.market.items[n];
            document.getElementById(a.name + "_market").src = void 0 === sprite[a.img_item][0]._src ? sprite[a.img_item][0].src : sprite[a.img_item][0]._src, 1 === a.a ? (document.getElementById(a.name + "_trad_number").innerHTML = a.b, document.getElementById(a.name + "_number").value = 1, document.getElementById(a.name + "_number").step = 1, document.getElementById(a.name + "_number").min = 1, document.getElementById(a.name + "_number").max = Math.floor(255 / a.b)) : (document.getElementById(a.name + "_trad_number").innerHTML = 1, document.getElementById(a.name + "_number").value = a.a, document.getElementById(a.name + "_number").step = a.a, document.getElementById(a.name + "_number").min = a.a), document.getElementById("buy_" + a.name + "_number").itemMarket = a, document.getElementById(a.name + "_number").itemMarket = a;
            for (var o = 0; o < r.length; o++) document.getElementById(r[o][2] + a.name + "_number").addEventListener(r[o][0], r[o][1], !1)
        }
        $("[type='number']").keypress((function (e) {
            e.preventDefault()
        })), this.options = {
            open: !1,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            agree: document.getElementById("agree_ing").style,
            cancel_agree: document.getElementById("cancel_agree_ing").style,
            quests_agree: document.getElementById("quest_agree_ing").style,
            spectator_agree: document.getElementById("spectator_agree_ing").style,
            feed_agree: document.getElementById("auto_feed_agree_ing").style,
            info_box_agree: document.getElementById("info_agree_ing").style,
            aliasing_agree: document.getElementById("pixelated_agree_ing").style,
            button: wo(60, 60, 0, sprite[k.OPTION_BUTTON]),
            select_options: function () {
                h_.options.open = !h_.options.open, h_.options.open ? h_.options.style.display = "inline-block" : h_.options.style.display = "none"
            },
            azerty: function () {
                ui.set_azerty()
            },
            qwerty: function () {
                ui.set_qwerty()
            },
            high: function () {
                ui.high_quality()
            },
            low: function () {
                ui.low_quality()
            },
            checkbox: function () {
                h_.safe_delete.checkbox()
            },
            cancel_checkbox: function () {
                h_.safe_cancel.checkbox()
            },
            quest_checkbox: function () {
                h_.quests.checkbox()
            },
            spectator_checkbox: function () {
                d_.show_spectators.invert()
            },
            feed_checkbox: function () {
                d_.auto_feed.invert()
            },
            quit: function () {
                h_.options.style.display = "none", h_.options.open = !1
            },
            update: function () {
                this.style.left = Math.floor(R - 235) + "px", this.style.top = Math.floor(c - 170) + "px"
            }
        }, document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, !1), document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, !1), document.getElementById("low_ing").addEventListener("mouseup", this.options.low, !1), document.getElementById("high_ing").addEventListener("mouseup", this.options.high, !1), document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, !1), document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, !1), document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, !1), document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, !1), document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, !1), document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, !1), this.safe_cancel = {
            open: !1,
            activated: Cookies.get("starve_cancel") && "0" === Cookies.get("starve_cancel") ? 0 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            agree: document.getElementById("cancel_agree").style,
            button: 0,
            i: 0,
            quit: function () {
                h_.safe_cancel.style.display = "none", h_.safe_cancel.open = !1
            },
            yes: function () {
                d_.craft.crafting && E_.cancel_crafting(), h_.safe_cancel.quit()
            },
            checkbox: function () {
                h_.safe_cancel.activated ? (Cookies.set("starve_cancel", "0"), h_.safe_cancel.agree.display = "inline-block", h_.options.cancel_agree.display = "none") : (Cookies.set("starve_cancel", "1"), h_.safe_cancel.agree.display = "none", h_.options.cancel_agree.display = "inline-block"), h_.safe_cancel.activated = !h_.safe_cancel.activated
            },
            del: function () {
                this.activated ? (this.style.display = "inline-block", this.open = !0) : this.yes()
            },
            update: function () {
                this.style.left = Math.floor(R - 235) + "px", this.style.top = Math.floor(c - 130) + "px"
            }
        }, this.safe_cancel.id.oncontextmenu = function () {
            return !1
        }, this.safe_cancel.agree.display = "none", this.safe_cancel.activated ? this.options.cancel_agree.display = "inline-block" : this.options.cancel_agree.display = "none", document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, !1), document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, !1), document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, !1), document.addEventListener("cancel_sure_delete", (function (e) {
            e.preventDefault()
        }), !1), this.aliasing = {
            activated: Cookies.get("starve_aliasing") && "0" === Cookies.get("starve_aliasing") ? 0 : 1,
            set_aliasing: function (e) {
                document.getElementById("game_canvas").style.imageRendering = e ? "pixelated" : "auto"
            },
            checkbox: function () {
                0 === h_.aliasing.activated ? (Cookies.set("starve_aliasing", "1"), h_.aliasing.set_aliasing(1), h_.options.aliasing_agree.display = "inline-block") : (Cookies.set("starve_aliasing", "0"), h_.aliasing.set_aliasing(0), h_.options.aliasing_agree.display = "none"), h_.aliasing.activated = (h_.aliasing.activated + 1) % 2
            }
        }, 1 === this.aliasing.activated ? this.options.aliasing_agree.display = "inline-block" : (this.aliasing.set_aliasing(0), this.options.aliasing_agree.display = "none"), document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, !1), this.info_box = {
            activated: Cookies.get("starve_info_box") && "0" === Cookies.get("starve_info_box") ? 0 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            craft: 0,
            checkbox: function () {
                0 === h_.info_box.activated ? (Cookies.set("starve_info_box", "1"), h_.options.info_box_agree.display = "inline-block") : (Cookies.set("starve_info_box", "0"), h_.options.info_box_agree.display = "none"), h_.info_box.activated = (h_.info_box.activated + 1) % 2
            },
            trigger: function (e, i, t) {
                return e && this.activated && (this.display = 1, this.id = 0 === t ? i.id : ae[i.id].id2, this.x = i.info.translate.x + 80, this.y = i.info.translate.y, this.craft = t), e
            }
        }, 1 === this.info_box.activated ? this.options.info_box_agree.display = "inline-block" : this.options.info_box_agree.display = "none", document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, !1), Cookies.get("starve_scale") && (D = Number(Cookies.get("starve_scale")), document.getElementById("input_ratio").value = D, D *= f / H, P()), this.change_ratio = function () {
            Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value), D = document.getElementById("input_ratio").value * (f / H), P()
        }, document.getElementById("input_ratio").addEventListener("input", this.change_ratio, !1), this.safe_delete = {
            open: !1,
            activated: Cookies.get("starve_safe") && "0" === Cookies.get("starve_safe") ? 0 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            agree: document.getElementById("agree").style,
            button: 0,
            i: 0,
            quit: function () {
                h_.safe_delete.style.display = "none", h_.safe_delete.open = !1
            },
            all: function () {
                d_.build.wait || (d_.craft.preview < 0 && d_.craft.id < 0 && !d_.ghost.enabled && E_.delete_inv(h_.safe_delete.button), h_.safe_delete.quit())
            },
            recycle: function () {
                d_.craft.workbench && !d_.build.wait && (d_.craft.preview < 0 && d_.craft.id < 0 && !d_.ghost.enabled && E_.recycle_inv(h_.safe_delete.button), h_.safe_delete.quit())
            },
            one: function () {
                d_.build.wait || (d_.craft.preview < 0 && d_.craft.id < 0 && !d_.ghost.enabled && E_.delete_one_inv(h_.safe_delete.button), h_.safe_delete.quit())
            },
            checkbox: function () {
                h_.safe_delete.activated ? (Cookies.set("starve_safe", "0"), h_.safe_delete.agree.display = "inline-block", h_.options.agree.display = "none") : (Cookies.set("starve_safe", "1"), h_.safe_delete.agree.display = "none", h_.options.agree.display = "inline-block"), h_.safe_delete.activated = !h_.safe_delete.activated
            },
            del: function (e) {
                this.button = e, document.getElementById("item_to_del").src = void 0 === sprite[re[e].img][0]._src ? sprite[re[e].img][0].src : sprite[re[e].img][0]._src, re[e].recycle && !d_.zombie && d_.craft.workbench ? document.getElementById("recycle_delete").style.display = "inline-block" : document.getElementById("recycle_delete").style.display = "none", this.activated ? (this.style.display = "inline-block", this.open = !0) : this.all()
            },
            update: function () {
                this.style.left = Math.floor(R - 235) + "px", this.style.top = Math.floor(c - 175) + "px"
            }
        }, this.safe_delete.agree.display = "none", this.safe_delete.activated ? this.options.agree.display = "inline-block" : this.options.agree.display = "none", document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, !1), document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, !1), document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, !1), document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, !1), document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, !1), this.shop = {
            open: !1,
            kit: -1,
            button: wo(60, 60, 0, sprite[k.SHOP]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            update: function () {
                this.style.left = Math.floor(R - 300) + "px", this.style.top = Math.floor(c - 215) + "px"
            },
            quit: function () {
                h_.shop.open = !1, h_.shop.style.display = "none"
            },
            select: function () {
                h_.shop.open = !h_.shop.open, h_.shop.open ? h_.shop.style.display = "inline-block" : h_.shop.style.display = "none"
            },
            buy: function () {
                h_.shop.kit >= 0 && (E_.choose_kit(h_.shop.kit), h_.shop.quit())
            },
            init: function () {
                var e = d_.shop.value;
                document.getElementById("points_bank").innerHTML = _.simplify_number(e) + " points";
                for (var i = 0; i < xo.length; i++) xo[i].price > e ? document.getElementById("starter" + (i + 1)).style.opacity = "0.4" : document.getElementById("starter" + (i + 1)).style.opacity = "1";
                for (i = 1; i < 13; i++) document.getElementById("inv_shop" + i).src = "./img/empty-shop.png", document.getElementById("amount_shop" + i).innerHTML = "";
                document.getElementById("buy_kit").style.opacity = "0.2"
            },
            get_starter: function () {
                if (this.id.length > 8) var e = Number(this.id.charAt(7) + this.id.charAt(8));
                else e = Number(this.id.charAt(7));
                var i = xo[e - 1];
                d_.shop.value >= i.price ? (h_.shop.kit = e, document.getElementById("buy_kit").style.opacity = "1") : (h_.shop.kit = -1, document.getElementById("buy_kit").style.opacity = "0.2"), i = i.items;
                for (var t = 1, r = 1; t < i.length + 1; t++) i[t - 1][1] !== X.BAG && (document.getElementById("inv_shop" + r).style.display = "inline-block", document.getElementById("inv_shop" + r).src = void 0 === sprite[re[i[t - 1][1]].img][0]._src ? sprite[re[i[t - 1][1]].img][0].src : sprite[re[i[t - 1][1]].img][0]._src, document.getElementById("amount_shop" + r).innerHTML = "" + i[t - 1][0], r++);
                for (; r < 13; r++) document.getElementById("inv_shop" + r).src = "./img/empty-shop.png", document.getElementById("amount_shop" + r).innerHTML = ""
            }
        }, document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, !1), document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, !1);
        for (o = 1; o < 11; o++) document.getElementById("starter" + o).addEventListener("mouseup", this.shop.get_starter, !1);
        this.quests = {
            open: !1,
            activated: Cookies.get("starve_quests") && "1" === Cookies.get("starve_quests") ? 1 : 0,
            button: wo(60, 60, 0, sprite[k.QUEST_BUTTON]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            update: function () {
                this.style.left = Math.floor(R - 420) + "px", this.style.top = Math.floor(c - 270) + "px"
            },
            quit: function () {
                h_.quests.style.display = "none", h_.quests.open = !1
            },
            select: function () {
                h_.quests.open = !h_.quests.open, h_.quests.open ? h_.quests.style.display = "inline-block" : h_.quests.style.display = "none"
            },
            list: [],
            reset: function () {
                for (var e = 0; e < Zo.length; e++) this.list[e] = 1, document.getElementById("timeremain_" + e).style.display = "inline-block", document.getElementById("time_finished_" + e).style.display = "none", document.getElementById("claim_reward_" + e).style.display = "none"
            },
            timer: 0,
            born: 0,
            update_chrono: function () {
                if (h_.quests.open) {
                    var e = (new Date).getTime();
                    if (!(e - this.timer < 1e3)) {
                        this.timer = e;
                        for (var i = 0; i < Zo.length; i++)
                            if (h_.quests.list[i]) {
                                var t = Zo[i].time - (e - A_.clock.init + h_.quests.born);
                                document.getElementById("timeremain_" + i).innerHTML = t > 96e4 ? Math.floor(t / 48e4) + " days" : t > 48e4 ? Math.floor(t / 48e4) + " day" : t > 6e4 ? Math.floor(t / 6e4) + " min" : Math.floor(t / 1e3) + " sec"
                            }
                    }
                }
            },
            restore: function (e) {
                for (var i = 0; i < e.length; i++) 1 != e[i] && h_.quests.modify_simple(i, e[i])
            },
            modify_simple: function (e, i) {
                3 !== i || 11 !== e && 12 !== e || (d_.inv.update_bag_size(0, 1), h_.update_inv_buttons()), document.getElementById("timeremain_" + e).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", i > 1 ? (document.getElementById("time_finished_" + e).innerHTML = "SUCCEED", document.getElementById("timeremain_" + e).style.display = "none") : 0 === i && (document.getElementById("time_finished_" + e).innerHTML = "FAILED", document.getElementById("timeremain_" + e).style.display = "none"), document.getElementById("claim_reward_" + e).style.display = 2 === i ? "inline-block" : "none", document.getElementById("time_finished_" + e).style.display = "inline", h_.quests.list[e] = 0
            },
            modify: function (e, i) {
                h_.quests.modify_simple(e, i), h_.quests.activated && (h_.quests.open = !0, h_.quests.style.display = "inline-block")
            },
            checkbox: function () {
                h_.quests.activated ? (Cookies.set("starve_quests", "0"), h_.options.quests_agree.display = "none") : (Cookies.set("starve_quests", "1"), h_.options.quests_agree.display = "inline-block"), h_.quests.activated = !h_.quests.activated
            },
            claim: function () {
                var e = Number(this.id.charAt(13)),
                    i = Number(this.id.charAt(14));
                "" !== this.id.charAt(14) && i >= 0 && i <= 9 && (e = 10 * e + i), E_.claim_quest_reward(e)
            }
        }, this.quests.activated ? this.options.quests_agree.display = "inline-block" : this.options.quests_agree.display = "none", document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, !1);
        for (o = 0; o < Zo.length; o++) document.getElementById("claim_reward_" + o).addEventListener("mouseup", this.quests.claim, !1);
        this.craft_list = {
            open: !1,
            button: wo(60, 60, 0, sprite[k.RECIPE_BUTTON]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                recipes: [],
                category: 0,
                update: function () {
                    this.style.left = Math.floor(R - 335) + "px", this.style.top = Math.floor(c - 215) + "px"
                },
                quit: function () {
                    document.getElementById("recipe_craft").style.display = "none", h_.craft_list.open = !1
                },
                previous: function () {
                    document.getElementById("recipe_craft").style.display = "none", document.getElementById("home_craft").style.display = "inline-block"
                },
                get_recipe: function (e) {
                    (i = this.recipes[e]).o ? document.getElementById("watercraft").style.display = "inline-block" : document.getElementById("watercraft").style.display = "none", i.f ? document.getElementById("firecraft").style.display = "inline-block" : document.getElementById("firecraft").style.display = "none", i.w ? document.getElementById("workcraft").style.display = "inline-block" : document.getElementById("workcraft").style.display = "none", i.e ? document.getElementById("wellcraft").style.display = "inline-block" : document.getElementById("wellcraft").style.display = "none";
                    for (var i = i.r, t = (e = 0, 1); e < i.length; e++) document.getElementById("inv" + t).style.display = "inline-block", document.getElementById("inv" + t).src = void 0 === sprite[re[i[e][0]].img][0]._src ? sprite[re[i[e][0]].img][0].src : sprite[re[i[e][0]].img][0]._src, document.getElementById("numb" + t).innerHTML = "" + i[e][1], t++;
                    for (; t < 6; t++) document.getElementById("inv" + t).style.display = "none", document.getElementById("numb" + t).innerHTML = ""
                },
                select: function (e) {
                    this.category = e, document.getElementById("home_craft").style.display = "none", document.getElementById("workcraft").style.display = "none", document.getElementById("firecraft").style.display = "none", document.getElementById("watercraft").style.display = "none", document.getElementById("wellcraft").style.display = "none", document.getElementById("recipe_craft").style.display = "inline-block", document.getElementById("inv1").style.display = "none", document.getElementById("inv2").style.display = "none", document.getElementById("inv3").style.display = "none", document.getElementById("inv4").style.display = "none", document.getElementById("inv5").style.display = "none", document.getElementById("numb1").innerHTML = "", document.getElementById("numb2").innerHTML = "", document.getElementById("numb3").innerHTML = "", document.getElementById("numb4").innerHTML = "", document.getElementById("numb5").innerHTML = "";
                    for (var i = 0, t = 0; i < ae.length; i++) {
                        var r = ae[i];
                        e === r.t && (this.recipes[t] = r, t++, document.getElementById("img_" + t).style.display = "inline-block", document.getElementById("img_" + t).src = void 0 === sprite[re[r.id2].img][0]._src ? sprite[re[r.id2].img][0].src : sprite[re[r.id2].img][0]._src)
                    }
                    for (t++; t < 49; t++) document.getElementById("img_" + t).style.display = "none"
                }
            },
            home: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                update: function () {
                    this.style.left = Math.floor(R - 285) + "px", this.style.top = Math.floor(c - 170) + "px"
                },
                quit: function () {
                    document.getElementById("home_craft").style.display = "none", h_.craft_list.open = !1
                }
            },
            select_book: function () {
                this.open = !this.open, this.open ? document.getElementById("home_craft").style.display = "inline-block" : (document.getElementById("home_craft").style.display = "none", document.getElementById("recipe_craft").style.display = "none")
            }
        }, document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, !1), document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, !1), document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, !1), document.getElementById("hatcategory").addEventListener("mouseup", (function () {
            h_.craft_list.list.select(Q)
        }), !1), document.getElementById("weaponcategory").addEventListener("mouseup", (function () {
            h_.craft_list.list.select(Z)
        }), !1), document.getElementById("toolcategory").addEventListener("mouseup", (function () {
            h_.craft_list.list.select(q)
        }), !1), document.getElementById("foodcategory").addEventListener("mouseup", (function () {
            h_.craft_list.list.select(ee)
        }), !1), document.getElementById("placeablecategory").addEventListener("mouseup", (function () {
            h_.craft_list.list.select(ie)
        }), !1), document.getElementById("constructioncategory").addEventListener("mouseup", (function () {
            h_.craft_list.list.select(te)
        }), !1), document.getElementById("img_1").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(0)
        }), !1), document.getElementById("img_2").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(1)
        }), !1), document.getElementById("img_3").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(2)
        }), !1), document.getElementById("img_4").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(3)
        }), !1), document.getElementById("img_5").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(4)
        }), !1), document.getElementById("img_6").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(5)
        }), !1), document.getElementById("img_7").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(6)
        }), !1), document.getElementById("img_8").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(7)
        }), !1), document.getElementById("img_9").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(8)
        }), !1), document.getElementById("img_10").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(9)
        }), !1), document.getElementById("img_11").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(10)
        }), !1), document.getElementById("img_12").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(11)
        }), !1), document.getElementById("img_13").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(12)
        }), !1), document.getElementById("img_14").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(13)
        }), !1), document.getElementById("img_15").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(14)
        }), !1), document.getElementById("img_16").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(15)
        }), !1), document.getElementById("img_17").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(16)
        }), !1), document.getElementById("img_18").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(17)
        }), !1), document.getElementById("img_19").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(18)
        }), !1), document.getElementById("img_20").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(19)
        }), !1), document.getElementById("img_21").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(20)
        }), !1), document.getElementById("img_22").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(21)
        }), !1), document.getElementById("img_23").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(22)
        }), !1), document.getElementById("img_24").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(23)
        }), !1), document.getElementById("img_25").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(24)
        }), !1), document.getElementById("img_26").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(25)
        }), !1), document.getElementById("img_27").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(26)
        }), !1), document.getElementById("img_28").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(27)
        }), !1), document.getElementById("img_29").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(28)
        }), !1), document.getElementById("img_30").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(29)
        }), !1), document.getElementById("img_31").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(30)
        }), !1), document.getElementById("img_32").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(31)
        }), !1), document.getElementById("img_33").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(32)
        }), !1), document.getElementById("img_34").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(33)
        }), !1), document.getElementById("img_35").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(34)
        }), !1), document.getElementById("img_36").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(35)
        }), !1), document.getElementById("img_37").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(36)
        }), !1), document.getElementById("img_38").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(37)
        }), !1), document.getElementById("img_39").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(38)
        }), !1), document.getElementById("img_40").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(39)
        }), !1), document.getElementById("img_41").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(40)
        }), !1), document.getElementById("img_42").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(41)
        }), !1), document.getElementById("img_43").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(42)
        }), !1), document.getElementById("img_44").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(43)
        }), !1), document.getElementById("img_45").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(44)
        }), !1), document.getElementById("img_46").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(45)
        }), !1), document.getElementById("img_47").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(46)
        }), !1), document.getElementById("img_48").addEventListener("mousedown", (function () {
            h_.craft_list.list.get_recipe(47)
        }), !1), this.minimap = {
            translate: {
                x: 0,
                y: 0
            },
            marker: {
                x: -1,
                y: -1
            },
            players: [],
            focus: function (e) {
                var i = this.translate.y + (d_.inv.can_select.length > 0 ? -120 : -50);
                e.x > this.translate.x && e.x < this.translate.x + 193 && e.y > i && e.y < i + 193 && (this.marker.x = e.x - this.translate.x, this.marker.y = e.y - i)
            }
        }, this.leaderboard = {
            translate: {
                x: 0,
                y: 0
            },
            img: sprite[k.LEADERBOARD],
            can: document.createElement("canvas")
        }, this.leaderboard.can.width = this.leaderboard.img.width, this.leaderboard.can.height = this.leaderboard.img.height, this.leaderboard.ctx = this.leaderboard.can.getContext("2d"), this.gauges = {
            translate: {
                x: 0,
                y: 0
            },
            img: sprite[k.GAUGES],
            draw: fn,
            y: 0
        }, this.leave_team = function () {
            div = document.getElementById("team_box"), div.innerHTML = "", div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + A_.players[d_.team[0]].nickname + "</div";
            for (var e = 1; e < d_.team.length; e++) div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + A_.players[d_.team[e]].nickname + "</div></div>";
            div.innerHTML += '<div id="leave" style="display:inline-block;">LEAVE</div></div>', div.style.display = "inline-block", document.getElementById("leave").addEventListener("click", E_.leave_team, !1)
        }, this.show_team = function () {
            div = document.getElementById("team_box"), div.innerHTML = "", div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + A_.players[d_.team[0]].nickname + "</div";
            for (var e = 1; e < d_.team.length; e++) div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + A_.players[d_.team[e]].nickname + "</div></div>";
            div.innerHTML += "</div>", div.style.display = "inline-block"
        }, this.manage_team = function () {
            div = document.getElementById("team_box"), div.innerHTML = "", div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + A_.players[d_.team[0]].nickname + "</div";
            for (var e = 1; e < d_.team.length; e++) div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + A_.players[d_.team[e]].nickname + '</div><div class="eject_member" id="eject_member' + e + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
            0 === d_.totem.lock ? div.innerHTML += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : div.innerHTML += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>', document.getElementById("lock_team").addEventListener("click", E_.lock_team, !1), div.style.display = "inline-block";
            for (e = 1; e < d_.team.length; e++) switch (e) {
            case 1:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(1)
                }), !1);
                break;
            case 2:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(2)
                }), !1);
                break;
            case 3:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(3)
                }), !1);
                break;
            case 4:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(4)
                }), !1);
                break;
            case 5:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(5)
                }), !1);
                break;
            case 6:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(6)
                }), !1);
                break;
            case 7:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(7)
                }), !1);
                break;
            case 8:
                document.getElementById("eject_member" + e).addEventListener("click", (function () {
                    E_.kick_team(8)
                }), !1)
            }
        }, this.team_buttons = [], this.team_buttons[Jo.TEAM_LEAVE] = {
            button: wo(60, 60, 0, sprite[k.TEAM_BUTTON]),
            action: this.leave_team
        }, this.team_buttons[Jo.TEAM_JOIN] = {
            button: wo(60, 60, 0, sprite[k.TEAM_BUTTON]),
            action: E_.join_team
        }, this.team_buttons[Jo.TEAM_MANAGE] = {
            button: wo(60, 60, 0, sprite[k.MANAGE_TEAM_BUTTON]),
            action: this.manage_team
        }, this.team_buttons[Jo.TEAM_SHOW] = {
            button: wo(60, 60, 0, sprite[k.SHOW_TEAM_BUTTON]),
            action: this.show_team
        }, this.team_buttons[Jo.TEAM_FULL] = {
            button: wo(60, 60, 0, sprite[k.FULL_TEAM_BUTTON]),
            action: function () {}
        }, this.team_buttons_id = -1, this.bread_oven_wood_button = wo(60, 60, 0, sprite[k.BREAD_OVEN_WOOD]), this.bread_oven_bread_button = wo(60, 60, 0, sprite[k.BREAD_OVEN_BREAD]), this.bread_oven_flour_button = wo(60, 60, 0, sprite[k.WINDMILL_FLOUR]), this.windmill_wheat_button = wo(60, 60, 0, sprite[k.WINDMILL_WHEAT_SEED]), this.windmill_flour_button = wo(60, 60, 0, sprite[k.WINDMILL_FLOUR]), this.extractor_wood_button = wo(60, 60, 0, sprite[k.INV_WOOD]), this.extractor_stone_button = wo(60, 60, 0, sprite[k.INV_STONE]), this.extractor_gold_button = wo(60, 60, 0, sprite[k.INV_GOLD]), this.extractor_diamond_button = wo(60, 60, 0, sprite[k.INV_DIAMOND]), this.extractor_amethyst_button = wo(60, 60, 0, sprite[k.INV_AMETHYST]), this.extractor_reidite_button = wo(60, 60, 0, sprite[k.INV_REIDITE]), this.furnace_button = wo(60, 60, 0, sprite[k.FURNACE_BUTTON]), this.chest_padlock = wo(60, 60, 0, sprite[k.PADLOCK]), this.chest_lockpick = wo(60, 60, 0, sprite[k.KEY]), this.chest_locked = wo(60, 60, 0, sprite[k.LOCKED]), this.resurrection = wo(120, 120, 0, sprite[k.DRAGON_HEART]), this.resurrection.info.translate.x = 10, this.resurrection.info.translate.y = 10, this.chest_buttons = [], this.chest_buttons[X.SWORD] = wo(68, 68, 0, sprite[k.CHEST_SWORD], 3), this.chest_buttons[X.SWORD].id = X.SWORD, this.chest_buttons[X.PICK] = wo(68, 68, 0, sprite[k.CHEST_PICK], 3), this.chest_buttons[X.PICK].id = X.PICK, this.chest_buttons[X.STONE] = wo(68, 68, 0, sprite[k.CHEST_STONE], 3), this.chest_buttons[X.STONE].id = X.STONE, this.chest_buttons[X.WOOD] = wo(68, 68, 0, sprite[k.CHEST_WOOD], 3), this.chest_buttons[X.WOOD].id = X.WOOD, this.chest_buttons[X.PLANT] = wo(68, 68, 0, sprite[k.CHEST_PLANT], 3), this.chest_buttons[X.PLANT].id = X.PLANT, this.chest_buttons[X.CACTUS] = wo(68, 68, 0, sprite[k.CHEST_CACTUS], 3), this.chest_buttons[X.CACTUS].id = X.CACTUS, this.chest_buttons[X.GOLD] = wo(68, 68, 0, sprite[k.CHEST_GOLD], 3), this.chest_buttons[X.GOLD].id = X.GOLD, this.chest_buttons[X.DIAMOND] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND], 3), this.chest_buttons[X.DIAMOND].id = X.DIAMOND, this.chest_buttons[X.PICK_GOLD] = wo(68, 68, 0, sprite[k.CHEST_PICK_GOLD], 3), this.chest_buttons[X.PICK_GOLD].id = X.PICK_GOLD, this.chest_buttons[X.PICK_DIAMOND] = wo(68, 68, 0, sprite[k.CHEST_PICK_DIAMOND], 3), this.chest_buttons[X.PICK_DIAMOND].id = X.PICK_DIAMOND, this.chest_buttons[X.SWORD_GOLD] = wo(68, 68, 0, sprite[k.CHEST_SWORD_GOLD], 3), this.chest_buttons[X.SWORD_GOLD].id = X.SWORD_GOLD, this.chest_buttons[X.SWORD_WOOD] = wo(68, 68, 0, sprite[k.CHEST_SWORD_WOOD], 3), this.chest_buttons[X.SWORD_WOOD].id = X.SWORD_WOOD, this.chest_buttons[X.SWORD_DIAMOND] = wo(68, 68, 0, sprite[k.CHEST_SWORD_DIAMOND], 3), this.chest_buttons[X.SWORD_DIAMOND].id = X.SWORD_DIAMOND, this.chest_buttons[X.FIRE] = wo(68, 68, 0, sprite[k.CHEST_FIRE], 3), this.chest_buttons[X.FIRE].id = X.FIRE, this.chest_buttons[X.WORKBENCH] = wo(68, 68, 0, sprite[k.CHEST_WORKBENCH], 3), this.chest_buttons[X.WORKBENCH].id = X.WORKBENCH, this.chest_buttons[X.SEED] = wo(68, 68, 0, sprite[k.CHEST_SEED], 3), this.chest_buttons[X.SEED].id = X.SEED, this.chest_buttons[X.WALL] = wo(68, 68, 0, sprite[k.CHEST_WALL], 3), this.chest_buttons[X.WALL].id = X.WALL, this.chest_buttons[X.SPIKE] = wo(68, 68, 0, sprite[k.CHEST_SPIKE], 3), this.chest_buttons[X.SPIKE].id = X.SPIKE, this.chest_buttons[X.PICK_WOOD] = wo(68, 68, 0, sprite[k.CHEST_PICK_WOOD], 3), this.chest_buttons[X.PICK_WOOD].id = X.PICK_WOOD, this.chest_buttons[X.COOKED_MEAT] = wo(68, 68, 0, sprite[k.CHEST_COOKED_MEAT], 3), this.chest_buttons[X.COOKED_MEAT].id = X.COOKED_MEAT, this.chest_buttons[X.MEAT] = wo(68, 68, 0, sprite[k.CHEST_MEAT], 3), this.chest_buttons[X.MEAT].id = X.MEAT, this.chest_buttons[X.BIG_FIRE] = wo(68, 68, 0, sprite[k.CHEST_BIG_FIRE], 3), this.chest_buttons[X.BIG_FIRE].id = X.BIG_FIRE, this.chest_buttons[X.BANDAGE] = wo(68, 68, 0, sprite[k.CHEST_BANDAGE], 3), this.chest_buttons[X.BANDAGE].id = X.BANDAGE, this.chest_buttons[X.CORD] = wo(68, 68, 0, sprite[k.CHEST_CORD], 3), this.chest_buttons[X.CORD].id = X.CORD, this.chest_buttons[X.STONE_WALL] = wo(68, 68, 0, sprite[k.CHEST_STONE_WALL], 3), this.chest_buttons[X.STONE_WALL].id = X.STONE_WALL, this.chest_buttons[X.GOLD_WALL] = wo(68, 68, 0, sprite[k.CHEST_GOLD_WALL], 3), this.chest_buttons[X.GOLD_WALL].id = X.GOLD_WALL, this.chest_buttons[X.DIAMOND_WALL] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_WALL], 3), this.chest_buttons[X.DIAMOND_WALL].id = X.DIAMOND_WALL, this.chest_buttons[X.WOOD_DOOR] = wo(68, 68, 0, sprite[k.CHEST_DOOR_WOOD_CLOSE], 3), this.chest_buttons[X.WOOD_DOOR].id = X.WOOD_DOOR, this.chest_buttons[X.CHEST] = wo(68, 68, 0, sprite[k.CHEST_CHEST], 3), this.chest_buttons[X.CHEST].id = X.CHEST, this.chest_buttons[X.STONE_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_STONE_SPIKE], 3), this.chest_buttons[X.STONE_SPIKE].id = X.STONE_SPIKE, this.chest_buttons[X.GOLD_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_GOLD_SPIKE], 3), this.chest_buttons[X.GOLD_SPIKE].id = X.GOLD_SPIKE, this.chest_buttons[X.DIAMOND_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_SPIKE], 3), this.chest_buttons[X.DIAMOND_SPIKE].id = X.DIAMOND_SPIKE, this.chest_buttons[X.FUR] = wo(68, 68, 0, sprite[k.CHEST_FUR], 3), this.chest_buttons[X.FUR].id = X.FUR, this.chest_buttons[X.FUR_BOAR] = wo(68, 68, 0, sprite[k.CHEST_FUR_BOAR], 3), this.chest_buttons[X.FUR_BOAR].id = X.FUR_BOAR, this.chest_buttons[X.FUR_WOLF] = wo(68, 68, 0, sprite[k.CHEST_FUR_WOLF], 3), this.chest_buttons[X.FUR_WOLF].id = X.FUR_WOLF, this.chest_buttons[X.PENGUIN_FEATHER] = wo(68, 68, 0, sprite[k.CHEST_PENGUIN_FEATHER], 3), this.chest_buttons[X.PENGUIN_FEATHER].id = X.PENGUIN_FEATHER, this.chest_buttons[X.HAWK_FEATHER] = wo(68, 68, 0, sprite[k.CHEST_HAWK_FEATHER], 3), this.chest_buttons[X.HAWK_FEATHER].id = X.HAWK_FEATHER, this.chest_buttons[X.VULTURE_FEATHER] = wo(68, 68, 0, sprite[k.CHEST_VULTURE_FEATHER], 3), this.chest_buttons[X.VULTURE_FEATHER].id = X.VULTURE_FEATHER, this.chest_buttons[X.EMERALD] = wo(68, 68, 0, sprite[k.CHEST_EMERALD], 3), this.chest_buttons[X.EMERALD].id = X.EMERALD, this.chest_buttons[X.EARMUFFS] = wo(68, 68, 0, sprite[k.CHEST_EARMUFFS], 3), this.chest_buttons[X.EARMUFFS].id = X.EARMUFFS, this.chest_buttons[X.STONE_DOOR] = wo(68, 68, 0, sprite[k.CHEST_DOOR_STONE_CLOSE], 3), this.chest_buttons[X.STONE_DOOR].id = X.STONE_DOOR, this.chest_buttons[X.GOLD_DOOR] = wo(68, 68, 0, sprite[k.CHEST_DOOR_GOLD_CLOSE], 3), this.chest_buttons[X.GOLD_DOOR].id = X.GOLD_DOOR, this.chest_buttons[X.DIAMOND_DOOR] = wo(68, 68, 0, sprite[k.CHEST_DOOR_DIAMOND_CLOSE], 3), this.chest_buttons[X.DIAMOND_DOOR].id = X.DIAMOND_DOOR, this.chest_buttons[X.COAT] = wo(68, 68, 0, sprite[k.CHEST_COAT], 3), this.chest_buttons[X.COAT].id = X.COAT, this.chest_buttons[X.WOOD_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_WOOD_SPEAR], 3), this.chest_buttons[X.WOOD_SPEAR].id = X.WOOD_SPEAR, this.chest_buttons[X.SPEAR] = wo(68, 68, 0, sprite[k.CHEST_SPEAR], 3), this.chest_buttons[X.SPEAR].id = X.SPEAR, this.chest_buttons[X.GOLD_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_GOLD_SPEAR], 3), this.chest_buttons[X.GOLD_SPEAR].id = X.GOLD_SPEAR, this.chest_buttons[X.DIAMOND_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_SPEAR], 3), this.chest_buttons[X.DIAMOND_SPEAR].id = X.DIAMOND_SPEAR, this.chest_buttons[X.DRAGON_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_SPEAR], 3), this.chest_buttons[X.DRAGON_SPEAR].id = X.DRAGON_SPEAR, this.chest_buttons[X.FURNACE] = wo(68, 68, 0, sprite[k.CHEST_FURNACE], 3), this.chest_buttons[X.FURNACE].id = X.FURNACE, this.chest_buttons[X.EXPLORER_HAT] = wo(68, 68, 0, sprite[k.CHEST_EXPLORER_HAT], 3), this.chest_buttons[X.EXPLORER_HAT].id = X.EXPLORER_HAT, this.chest_buttons[X.PIRATE_HAT] = wo(68, 68, 0, sprite[k.CHEST_PIRATE_HAT], 3), this.chest_buttons[X.PIRATE_HAT].id = X.PIRATE_HAT, this.chest_buttons[X.FLOWER_HAT] = wo(68, 68, 0, sprite[k.CHEST_FLOWER_HAT], 3), this.chest_buttons[X.FLOWER_HAT].id = X.FLOWER_HAT, this.chest_buttons[X.FUR_HAT] = wo(68, 68, 0, sprite[k.CHEST_FUR_HAT], 3), this.chest_buttons[X.FUR_HAT].id = X.FUR_HAT, this.chest_buttons[X.TURBAN1] = wo(68, 68, 0, sprite[k.CHEST_TURBAN1], 3), this.chest_buttons[X.TURBAN1].id = X.TURBAN1, this.chest_buttons[X.TURBAN2] = wo(68, 68, 0, sprite[k.CHEST_TURBAN2], 3), this.chest_buttons[X.TURBAN2].id = X.TURBAN2, this.chest_buttons[X.WOOD_ARROW] = wo(68, 68, 0, sprite[k.CHEST_WOOD_ARROW], 3), this.chest_buttons[X.WOOD_ARROW].id = X.WOOD_ARROW, this.chest_buttons[X.WOOD_BOW] = wo(68, 68, 0, sprite[k.CHEST_WOOD_BOW], 3), this.chest_buttons[X.WOOD_BOW].id = X.WOOD_BOW, this.chest_buttons[X.WOOD_SHIELD] = wo(68, 68, 0, sprite[k.CHEST_WOOD_SHIELD], 3), this.chest_buttons[X.WOOD_SHIELD].id = X.WOOD_SHIELD, this.chest_buttons[X.STONE_ARROW] = wo(68, 68, 0, sprite[k.CHEST_STONE_ARROW], 3), this.chest_buttons[X.STONE_ARROW].id = X.STONE_ARROW, this.chest_buttons[X.STONE_BOW] = wo(68, 68, 0, sprite[k.CHEST_STONE_BOW], 3), this.chest_buttons[X.STONE_BOW].id = X.STONE_BOW, this.chest_buttons[X.STONE_SHIELD] = wo(68, 68, 0, sprite[k.CHEST_STONE_SHIELD], 3), this.chest_buttons[X.STONE_SHIELD].id = X.STONE_SHIELD, this.chest_buttons[X.GOLD_ARROW] = wo(68, 68, 0, sprite[k.CHEST_GOLD_ARROW], 3), this.chest_buttons[X.GOLD_ARROW].id = X.GOLD_ARROW, this.chest_buttons[X.GOLD_BOW] = wo(68, 68, 0, sprite[k.CHEST_GOLD_BOW], 3), this.chest_buttons[X.GOLD_BOW].id = X.GOLD_BOW, this.chest_buttons[X.GOLD_SHIELD] = wo(68, 68, 0, sprite[k.CHEST_GOLD_SHIELD], 3), this.chest_buttons[X.GOLD_SHIELD].id = X.GOLD_SHIELD, this.chest_buttons[X.DIAMOND_ARROW] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_ARROW], 3), this.chest_buttons[X.DIAMOND_ARROW].id = X.DIAMOND_ARROW, this.chest_buttons[X.DIAMOND_BOW] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_BOW], 3), this.chest_buttons[X.DIAMOND_BOW].id = X.DIAMOND_BOW, this.chest_buttons[X.DIAMOND_SHIELD] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_SHIELD], 3), this.chest_buttons[X.DIAMOND_SHIELD].id = X.DIAMOND_SHIELD, this.chest_buttons[X.AMETHYST_ARROW] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_ARROW], 3), this.chest_buttons[X.AMETHYST_ARROW].id = X.AMETHYST_ARROW, this.chest_buttons[X.AMETHYST_BOW] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_BOW], 3), this.chest_buttons[X.AMETHYST_BOW].id = X.AMETHYST_BOW, this.chest_buttons[X.AMETHYST_SHIELD] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_SHIELD], 3), this.chest_buttons[X.AMETHYST_SHIELD].id = X.AMETHYST_SHIELD, this.chest_buttons[X.REIDITE_ARROW] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_ARROW], 3), this.chest_buttons[X.REIDITE_ARROW].id = X.REIDITE_ARROW, this.chest_buttons[X.REIDITE_BOW] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_BOW], 3), this.chest_buttons[X.REIDITE_BOW].id = X.REIDITE_BOW, this.chest_buttons[X.REIDITE_SHIELD] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_SHIELD], 3), this.chest_buttons[X.REIDITE_SHIELD].id = X.REIDITE_SHIELD, this.chest_buttons[X.DRAGON_ARROW] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_ARROW], 3), this.chest_buttons[X.DRAGON_ARROW].id = X.DRAGON_ARROW, this.chest_buttons[X.DRAGON_BOW] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_BOW], 3), this.chest_buttons[X.DRAGON_BOW].id = X.DRAGON_BOW, this.chest_buttons[X.WOOD_HELMET] = wo(68, 68, 0, sprite[k.CHEST_WOOD_HELMET], 3), this.chest_buttons[X.WOOD_HELMET].id = X.WOOD_HELMET, this.chest_buttons[X.STONE_HELMET] = wo(68, 68, 0, sprite[k.CHEST_STONE_HELMET], 3), this.chest_buttons[X.STONE_HELMET].id = X.STONE_HELMET, this.chest_buttons[X.GOLD_HELMET] = wo(68, 68, 0, sprite[k.CHEST_GOLD_HELMET], 3), this.chest_buttons[X.GOLD_HELMET].id = X.GOLD_HELMET, this.chest_buttons[X.DIAMOND_HELMET] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_HELMET], 3), this.chest_buttons[X.DIAMOND_HELMET].id = X.DIAMOND_HELMET, this.chest_buttons[X.BOOK] = wo(68, 68, 0, sprite[k.CHEST_BOOK], 3), this.chest_buttons[X.BOOK].id = X.BOOK, this.chest_buttons[X.PAPER] = wo(68, 68, 0, sprite[k.CHEST_PAPER], 3), this.chest_buttons[X.PAPER].id = X.PAPER, this.chest_buttons[X.BAG] = wo(68, 68, 0, sprite[k.CHEST_BAG], 3), this.chest_buttons[X.BAG].id = X.BAG, this.chest_buttons[X.AMETHYST] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST], 3), this.chest_buttons[X.AMETHYST].id = X.AMETHYST, this.chest_buttons[X.SWORD_AMETHYST] = wo(68, 68, 0, sprite[k.CHEST_SWORD_AMETHYST], 3), this.chest_buttons[X.SWORD_AMETHYST].id = X.SWORD_AMETHYST, this.chest_buttons[X.PIRATE_SWORD] = wo(68, 68, 0, sprite[k.CHEST_PIRATE_SWORD], 3), this.chest_buttons[X.PIRATE_SWORD].id = X.PIRATE_SWORD, this.chest_buttons[X.PICK_AMETHYST] = wo(68, 68, 0, sprite[k.CHEST_PICK_AMETHYST], 3), this.chest_buttons[X.PICK_AMETHYST].id = X.PICK_AMETHYST, this.chest_buttons[X.PICK_REIDITE] = wo(68, 68, 0, sprite[k.CHEST_PICK_REIDITE], 3), this.chest_buttons[X.PICK_REIDITE].id = X.PICK_REIDITE, this.chest_buttons[X.AMETHYST_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_SPEAR], 3), this.chest_buttons[X.AMETHYST_SPEAR].id = X.AMETHYST_SPEAR, this.chest_buttons[X.HAMMER] = wo(68, 68, 0, sprite[k.CHEST_HAMMER], 3), this.chest_buttons[X.HAMMER].id = X.HAMMER, this.chest_buttons[X.HAMMER_GOLD] = wo(68, 68, 0, sprite[k.CHEST_HAMMER_GOLD], 3), this.chest_buttons[X.HAMMER_GOLD].id = X.HAMMER_GOLD, this.chest_buttons[X.HAMMER_DIAMOND] = wo(68, 68, 0, sprite[k.CHEST_HAMMER_DIAMOND], 3), this.chest_buttons[X.HAMMER_DIAMOND].id = X.HAMMER_DIAMOND, this.chest_buttons[X.HAMMER_AMETHYST] = wo(68, 68, 0, sprite[k.CHEST_HAMMER_AMETHYST], 3), this.chest_buttons[X.HAMMER_AMETHYST].id = X.HAMMER_AMETHYST, this.chest_buttons[X.HAMMER_REIDITE] = wo(68, 68, 0, sprite[k.CHEST_HAMMER_REIDITE], 3), this.chest_buttons[X.HAMMER_REIDITE].id = X.HAMMER_REIDITE, this.chest_buttons[X.AMETHYST_WALL] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_WALL], 3), this.chest_buttons[X.AMETHYST_WALL].id = X.AMETHYST_WALL, this.chest_buttons[X.AMETHYST_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_SPIKE], 3), this.chest_buttons[X.AMETHYST_SPIKE].id = X.AMETHYST_SPIKE, this.chest_buttons[X.AMETHYST_DOOR] = wo(68, 68, 0, sprite[k.CHEST_DOOR_AMETHYST_CLOSE], 3), this.chest_buttons[X.AMETHYST_DOOR].id = X.AMETHYST_DOOR, this.chest_buttons[X.CAP_SCARF] = wo(68, 68, 0, sprite[k.CHEST_CAP_SCARF], 3), this.chest_buttons[X.CAP_SCARF].id = X.CAP_SCARF, this.chest_buttons[X.FUR_WINTER] = wo(68, 68, 0, sprite[k.CHEST_FUR_WINTER], 3), this.chest_buttons[X.FUR_WINTER].id = X.FUR_WINTER, this.chest_buttons[X.FUR_MAMMOTH] = wo(68, 68, 0, sprite[k.CHEST_FUR_MAMMOTH], 3), this.chest_buttons[X.FUR_MAMMOTH].id = X.FUR_MAMMOTH, this.chest_buttons[X.BLUE_CORD] = wo(68, 68, 0, sprite[k.CHEST_BLUE_CORD], 3), this.chest_buttons[X.BLUE_CORD].id = X.BLUE_CORD, this.chest_buttons[X.LOCK] = wo(68, 68, 0, sprite[k.CHEST_LOCK], 3), this.chest_buttons[X.LOCK].id = X.LOCK, this.chest_buttons[X.DRAGON_HEART] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_HEART], 3), this.chest_buttons[X.DRAGON_HEART].id = X.DRAGON_HEART, this.chest_buttons[X.LAVA_HEART] = wo(68, 68, 0, sprite[k.CHEST_LAVA_HEART], 3), this.chest_buttons[X.LAVA_HEART].id = X.LAVA_HEART, this.chest_buttons[X.RESURRECTION] = wo(68, 68, 0, sprite[k.CHEST_RESURRECTION], 3), this.chest_buttons[X.RESURRECTION].id = X.RESURRECTION, this.chest_buttons[X.LOCKPICK] = wo(68, 68, 0, sprite[k.CHEST_LOCKPICK], 3), this.chest_buttons[X.LOCKPICK].id = X.LOCKPICK, this.chest_buttons[X.TOTEM] = wo(68, 68, 0, sprite[k.CHEST_TOTEM], 3), this.chest_buttons[X.TOTEM].id = X.TOTEM, this.chest_buttons[X.AMETHYST_HELMET] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_HELMET], 3), this.chest_buttons[X.AMETHYST_HELMET].id = X.AMETHYST_HELMET, this.chest_buttons[X.SUPER_HAMMER] = wo(68, 68, 0, sprite[k.CHEST_SUPER_HAMMER], 3), this.chest_buttons[X.SUPER_HAMMER].id = X.SUPER_HAMMER, this.chest_buttons[X.BRIDGE] = wo(68, 68, 0, sprite[k.CHEST_BRIDGE], 3), this.chest_buttons[X.BRIDGE].id = X.BRIDGE, this.chest_buttons[X.WOOD_TOWER] = wo(68, 68, 0, sprite[k.CHEST_WOOD_TOWER], 3), this.chest_buttons[X.WOOD_TOWER].id = X.WOOD_TOWER, this.chest_buttons[X.BOAT] = wo(68, 68, 0, sprite[k.CHEST_BOAT], 3), this.chest_buttons[X.BOAT].id = X.BOAT, this.chest_buttons[X.SLED] = wo(68, 68, 0, sprite[k.CHEST_SLED], 3), this.chest_buttons[X.SLED].id = X.SLED, this.chest_buttons[X.PLANE] = wo(68, 68, 0, sprite[k.CHEST_PLANE], 3), this.chest_buttons[X.PLANE].id = X.PLANE, this.chest_buttons[X.SADDLE] = wo(68, 68, 0, sprite[k.CHEST_SADDLE], 3), this.chest_buttons[X.SADDLE].id = X.SADDLE, this.chest_buttons[X.MOUNT_BOAR] = wo(68, 68, 0, sprite[k.CHEST_MOUNT_BOAR], 3), this.chest_buttons[X.MOUNT_BOAR].id = X.MOUNT_BOAR, this.chest_buttons[X.BABY_DRAGON] = wo(68, 68, 0, sprite[k.CHEST_BABY_DRAGON], 3), this.chest_buttons[X.BABY_DRAGON].id = X.BABY_DRAGON, this.chest_buttons[X.BABY_MAMMOTH] = wo(68, 68, 0, sprite[k.CHEST_BABY_MAMMOTH], 3), this.chest_buttons[X.BABY_MAMMOTH].id = X.BABY_MAMMOTH, this.chest_buttons[X.BABY_LAVA] = wo(68, 68, 0, sprite[k.CHEST_BABY_LAVA], 3), this.chest_buttons[X.BABY_LAVA].id = X.BABY_LAVA, this.chest_buttons[X.HAWK] = wo(68, 68, 0, sprite[k.CHEST_HAWK], 3), this.chest_buttons[X.HAWK].id = X.HAWK, this.chest_buttons[X.CRAB_BOSS] = wo(68, 68, 0, sprite[k.CHEST_CRAB_BOSS], 3), this.chest_buttons[X.CRAB_BOSS].id = X.CRAB_BOSS, this.chest_buttons[X.SAND] = wo(68, 68, 0, sprite[k.CHEST_SAND], 3), this.chest_buttons[X.SAND].id = X.SAND, this.chest_buttons[X.BOTTLE_FULL] = wo(68, 68, 0, sprite[k.CHEST_BOTTLE_FULL], 3), this.chest_buttons[X.BOTTLE_FULL].id = X.BOTTLE_FULL, this.chest_buttons[X.BOTTLE_EMPTY] = wo(68, 68, 0, sprite[k.CHEST_BOTTLE_EMPTY], 3), this.chest_buttons[X.BOTTLE_EMPTY].id = X.BOTTLE_EMPTY, this.chest_buttons[X.SHOVEL] = wo(68, 68, 0, sprite[k.CHEST_SHOVEL], 3), this.chest_buttons[X.SHOVEL].id = X.SHOVEL, this.chest_buttons[X.SHOVEL_GOLD] = wo(68, 68, 0, sprite[k.CHEST_SHOVEL_GOLD], 3), this.chest_buttons[X.SHOVEL_GOLD].id = X.SHOVEL_GOLD, this.chest_buttons[X.SHOVEL_DIAMOND] = wo(68, 68, 0, sprite[k.CHEST_SHOVEL_DIAMOND], 3), this.chest_buttons[X.SHOVEL_DIAMOND].id = X.SHOVEL_DIAMOND, this.chest_buttons[X.SHOVEL_AMETHYST] = wo(68, 68, 0, sprite[k.CHEST_SHOVEL_AMETHYST], 3), this.chest_buttons[X.SHOVEL_AMETHYST].id = X.SHOVEL_AMETHYST, this.chest_buttons[X.SPANNER] = wo(68, 68, 0, sprite[k.CHEST_SPANNER], 3), this.chest_buttons[X.SPANNER].id = X.SPANNER, this.chest_buttons[X.KRAKEN_SKIN] = wo(68, 68, 0, sprite[k.CHEST_KRAKEN_SKIN], 3), this.chest_buttons[X.KRAKEN_SKIN].id = X.KRAKEN_SKIN, this.chest_buttons[X.WATERING_CAN] = wo(68, 68, 0, sprite[k.CHEST_WATERING_CAN], 3), this.chest_buttons[X.WATERING_CAN].id = X.WATERING_CAN, this.chest_buttons[X.FLOUR] = wo(68, 68, 0, sprite[k.CHEST_FLOUR], 3), this.chest_buttons[X.FLOUR].id = X.FLOUR, this.chest_buttons[X.WHEAT_SEED] = wo(68, 68, 0, sprite[k.CHEST_WHEAT_SEED], 3), this.chest_buttons[X.WHEAT_SEED].id = X.WHEAT_SEED, this.chest_buttons[X.COOKIE] = wo(68, 68, 0, sprite[k.CHEST_COOKIE], 3), this.chest_buttons[X.COOKIE].id = X.COOKIE, this.chest_buttons[X.WILD_WHEAT] = wo(68, 68, 0, sprite[k.CHEST_WILD_WHEAT], 3), this.chest_buttons[X.WILD_WHEAT].id = X.WILD_WHEAT, this.chest_buttons[X.WINDMILL] = wo(68, 68, 0, sprite[k.CHEST_WINDMILL], 3), this.chest_buttons[X.WINDMILL].id = X.WINDMILL, this.chest_buttons[X.SUPER_DIVING_SUIT] = wo(68, 68, 0, sprite[k.CHEST_SUPER_DIVING_SUIT], 3), this.chest_buttons[X.SUPER_DIVING_SUIT].id = X.SUPER_DIVING_SUIT, this.chest_buttons[X.DIVING_MASK] = wo(68, 68, 0, sprite[k.CHEST_DIVING_MASK], 3), this.chest_buttons[X.DIVING_MASK].id = X.DIVING_MASK, this.chest_buttons[X.WATERING_CAN_FULL] = wo(68, 68, 0, sprite[k.CHEST_WATERING_CAN_FULL], 3), this.chest_buttons[X.WATERING_CAN_FULL].id = X.WATERING_CAN_FULL, this.chest_buttons[X.CAKE] = wo(68, 68, 0, sprite[k.CHEST_CAKE], 3), this.chest_buttons[X.CAKE].id = X.CAKE, this.chest_buttons[X.BREAD] = wo(68, 68, 0, sprite[k.CHEST_BREAD], 3), this.chest_buttons[X.BREAD].id = X.BREAD, this.chest_buttons[X.FOODFISH] = wo(68, 68, 0, sprite[k.CHEST_FOODFISH], 3), this.chest_buttons[X.FOODFISH].id = X.FOODFISH, this.chest_buttons[X.FOODFISH_COOKED] = wo(68, 68, 0, sprite[k.CHEST_FOODFISH_COOKED], 3), this.chest_buttons[X.FOODFISH_COOKED].id = X.FOODFISH_COOKED, this.chest_buttons[X.SCALES] = wo(68, 68, 0, sprite[k.CHEST_SCALES], 3), this.chest_buttons[X.SCALES].id = X.SCALES, this.chest_buttons[X.GROUND] = wo(68, 68, 0, sprite[k.CHEST_GROUND], 3), this.chest_buttons[X.GROUND].id = X.GROUND, this.chest_buttons[X.PLOT] = wo(68, 68, 0, sprite[k.CHEST_PLOT], 3), this.chest_buttons[X.PLOT].id = X.PLOT, this.chest_buttons[X.ICE] = wo(68, 68, 0, sprite[k.CHEST_ICE], 3), this.chest_buttons[X.ICE].id = X.ICE, this.chest_buttons[X.BREAD_OVEN] = wo(68, 68, 0, sprite[k.CHEST_BREAD_OVEN], 3), this.chest_buttons[X.BREAD_OVEN].id = X.BREAD_OVEN, this.chest_buttons[X.SANDWICH] = wo(68, 68, 0, sprite[k.CHEST_SANDWICH], 3), this.chest_buttons[X.SANDWICH].id = X.SANDWICH, this.chest_buttons[X.DRAGON_HELMET] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_HELMET], 3), this.chest_buttons[X.DRAGON_HELMET].id = X.DRAGON_HELMET, this.chest_buttons[X.DRAGON_SWORD] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_SWORD], 3), this.chest_buttons[X.DRAGON_SWORD].id = X.DRAGON_SWORD, this.chest_buttons[X.DRAGON_ORB] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_ORB], 3), this.chest_buttons[X.DRAGON_ORB].id = X.DRAGON_ORB, this.chest_buttons[X.DRAGON_CUBE] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_CUBE], 3), this.chest_buttons[X.DRAGON_CUBE].id = X.DRAGON_CUBE, this.chest_buttons[X.LAVA_ORB] = wo(68, 68, 0, sprite[k.CHEST_LAVA_ORB], 3), this.chest_buttons[X.LAVA_ORB].id = X.LAVA_ORB, this.chest_buttons[X.LAVA_CUBE] = wo(68, 68, 0, sprite[k.CHEST_LAVA_CUBE], 3), this.chest_buttons[X.LAVA_CUBE].id = X.LAVA_CUBE, this.chest_buttons[X.CROWN_GREEN] = wo(68, 68, 0, sprite[k.CHEST_CROWN_GREEN], 3), this.chest_buttons[X.CROWN_GREEN].id = X.CROWN_GREEN, this.chest_buttons[X.GEMME_GREEN] = wo(68, 68, 0, sprite[k.CHEST_GEMME_GREEN], 3), this.chest_buttons[X.GEMME_GREEN].id = X.GEMME_GREEN, this.chest_buttons[X.GEMME_ORANGE] = wo(68, 68, 0, sprite[k.CHEST_GEMME_ORANGE], 3), this.chest_buttons[X.GEMME_ORANGE].id = X.GEMME_ORANGE, this.chest_buttons[X.CROWN_ORANGE] = wo(68, 68, 0, sprite[k.CHEST_CROWN_ORANGE], 3), this.chest_buttons[X.CROWN_ORANGE].id = X.CROWN_ORANGE, this.chest_buttons[X.GEMME_BLUE] = wo(68, 68, 0, sprite[k.CHEST_GEMME_BLUE], 3), this.chest_buttons[X.GEMME_BLUE].id = X.GEMME_BLUE, this.chest_buttons[X.CROWN_BLUE] = wo(68, 68, 0, sprite[k.CHEST_CROWN_BLUE], 3), this.chest_buttons[X.CROWN_BLUE].id = X.CROWN_BLUE, this.chest_buttons[X.HOOD] = wo(68, 68, 0, sprite[k.CHEST_HOOD], 3), this.chest_buttons[X.HOOD].id = X.HOOD, this.chest_buttons[X.PEASANT] = wo(68, 68, 0, sprite[k.CHEST_PEASANT], 3), this.chest_buttons[X.PEASANT].id = X.PEASANT, this.chest_buttons[X.SPECIAL_FUR] = wo(68, 68, 0, sprite[k.CHEST_SPECIAL_FUR], 3), this.chest_buttons[X.SPECIAL_FUR].id = X.SPECIAL_FUR, this.chest_buttons[X.SPECIAL_FUR_2] = wo(68, 68, 0, sprite[k.CHEST_SPECIAL_FUR_2], 3), this.chest_buttons[X.SPECIAL_FUR_2].id = X.SPECIAL_FUR_2, this.chest_buttons[X.WINTER_PEASANT] = wo(68, 68, 0, sprite[k.CHEST_WINTER_PEASANT], 3), this.chest_buttons[X.WINTER_PEASANT].id = X.WINTER_PEASANT, this.chest_buttons[X.WINTER_HOOD] = wo(68, 68, 0, sprite[k.CHEST_WINTER_HOOD], 3), this.chest_buttons[X.WINTER_HOOD].id = X.WINTER_HOOD, this.chest_buttons[X.BUCKET_FULL] = wo(68, 68, 0, sprite[k.CHEST_BUCKET_FULL], 3), this.chest_buttons[X.BUCKET_FULL].id = X.BUCKET_FULL, this.chest_buttons[X.BUCKET_EMPTY] = wo(68, 68, 0, sprite[k.CHEST_BUCKET_EMPTY], 3), this.chest_buttons[X.BUCKET_EMPTY].id = X.BUCKET_EMPTY, this.chest_buttons[X.WELL] = wo(68, 68, 0, sprite[k.CHEST_WELL], 3), this.chest_buttons[X.WELL].id = X.WELL, this.chest_buttons[X.SIGN] = wo(68, 68, 0, sprite[k.CHEST_SIGN], 3), this.chest_buttons[X.SIGN].id = X.SIGN, this.chest_buttons[X.PUMPKIN_SEED] = wo(68, 68, 0, sprite[k.CHEST_PUMPKIN_SEED], 3), this.chest_buttons[X.PUMPKIN_SEED].id = X.PUMPKIN_SEED, this.chest_buttons[X.PUMPKIN] = wo(68, 68, 0, sprite[k.CHEST_PUMPKIN], 3), this.chest_buttons[X.PUMPKIN].id = X.PUMPKIN, this.chest_buttons[X.ROOF] = wo(68, 68, 0, sprite[k.CHEST_ROOF], 3), this.chest_buttons[X.ROOF].id = X.ROOF, this.chest_buttons[X.GARLIC_SEED] = wo(68, 68, 0, sprite[k.CHEST_GARLIC_SEED], 3), this.chest_buttons[X.GARLIC_SEED].id = X.GARLIC_SEED, this.chest_buttons[X.GARLIC] = wo(68, 68, 0, sprite[k.CHEST_GARLIC], 3), this.chest_buttons[X.GARLIC].id = X.GARLIC, this.chest_buttons[X.THORNBUSH_SEED] = wo(68, 68, 0, sprite[k.CHEST_THORNBUSH_SEED], 3), this.chest_buttons[X.THORNBUSH_SEED].id = X.THORNBUSH_SEED, this.chest_buttons[X.THORNBUSH] = wo(68, 68, 0, sprite[k.CHEST_THORNBUSH], 3), this.chest_buttons[X.THORNBUSH].id = X.THORNBUSH, this.chest_buttons[X.TOMATO_SEED] = wo(68, 68, 0, sprite[k.CHEST_TOMATO_SEED], 3), this.chest_buttons[X.TOMATO_SEED].id = X.TOMATO_SEED, this.chest_buttons[X.TOMATO] = wo(68, 68, 0, sprite[k.CHEST_TOMATO], 3), this.chest_buttons[X.TOMATO].id = X.TOMATO, this.chest_buttons[X.CARROT_SEED] = wo(68, 68, 0, sprite[k.CHEST_CARROT_SEED], 3), this.chest_buttons[X.CARROT_SEED].id = X.CARROT_SEED, this.chest_buttons[X.CARROT] = wo(68, 68, 0, sprite[k.CHEST_CARROT], 3), this.chest_buttons[X.CARROT].id = X.CARROT, this.chest_buttons[X.WATERMELON_SEED] = wo(68, 68, 0, sprite[k.CHEST_WATERMELON_SEED], 3), this.chest_buttons[X.WATERMELON_SEED].id = X.WATERMELON_SEED, this.chest_buttons[X.WATERMELON] = wo(68, 68, 0, sprite[k.CHEST_WATERMELON], 3), this.chest_buttons[X.WATERMELON].id = X.WATERMELON, this.chest_buttons[X.ALOE_VERA_SEED] = wo(68, 68, 0, sprite[k.CHEST_ALOE_VERA_SEED], 3), this.chest_buttons[X.ALOE_VERA_SEED].id = X.ALOE_VERA_SEED, this.chest_buttons[X.ALOE_VERA] = wo(68, 68, 0, sprite[k.CHEST_ALOE_VERA], 3), this.chest_buttons[X.ALOE_VERA].id = X.ALOE_VERA, this.chest_buttons[X.CHRISTMAS_HAT] = wo(68, 68, 0, sprite[k.CHEST_CHRISTMAS_HAT], 3), this.chest_buttons[X.CHRISTMAS_HAT].id = X.CHRISTMAS_HAT, this.chest_buttons[X.ELF_HAT] = wo(68, 68, 0, sprite[k.CHEST_ELF_HAT], 3), this.chest_buttons[X.ELF_HAT].id = X.ELF_HAT, this.chest_buttons[X.WOOD_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_WOOD_SPEAR], 3), this.chest_buttons[X.WOOD_SPEAR].id = X.WOOD_SPEAR, this.chest_buttons[X.DRAGON_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_DRAGON_SPEAR], 3), this.chest_buttons[X.DRAGON_SPEAR].id = X.DRAGON_SPEAR, this.chest_buttons[X.CRAB_STICK] = wo(68, 68, 0, sprite[k.CHEST_CRAB_STICK], 3), this.chest_buttons[X.CRAB_STICK].id = X.CRAB_STICK, this.chest_buttons[X.CRAB_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_CRAB_SPEAR], 3), this.chest_buttons[X.CRAB_SPEAR].id = X.CRAB_SPEAR, this.chest_buttons[X.CRAB_LOOT] = wo(68, 68, 0, sprite[k.CHEST_CRAB_LOOT], 3), this.chest_buttons[X.CRAB_LOOT].id = X.CRAB_LOOT, this.chest_buttons[X.BED] = wo(68, 68, 0, sprite[k.CHEST_BED], 3), this.chest_buttons[X.BED].id = X.BED, this.chest_buttons[X.CROWN_CRAB] = wo(68, 68, 0, sprite[k.CHEST_CROWN_CRAB], 3), this.chest_buttons[X.CROWN_CRAB].id = X.CROWN_CRAB, this.chest_buttons[X.GARLAND] = wo(68, 68, 0, sprite[k.CHEST_GARLAND], 3), this.chest_buttons[X.GARLAND].id = X.GARLAND, this.chest_buttons[X.SUGAR_CAN] = wo(68, 68, 0, sprite[k.CHEST_SUGAR_CAN], 3), this.chest_buttons[X.SUGAR_CAN].id = X.SUGAR_CAN, this.chest_buttons[X.CANDY] = wo(68, 68, 0, sprite[k.CHEST_CANDY], 3), this.chest_buttons[X.CANDY].id = X.CANDY, this.plus_buttons = [];
        for (o = 0; o < 250; o++) this.plus_buttons[o] = wo(0, 0, 0, sprite[k.CHEST_PLUS]);
        this.inv_buttons = [], this.inv_buttons[X.SWORD] = wo(60, 60, 0, sprite[k.INV_SWORD], 3), this.inv_buttons[X.SWORD].id = X.SWORD, this.inv_buttons[X.PICK] = wo(60, 60, 0, sprite[k.INV_PICK], 3), this.inv_buttons[X.PICK].id = X.PICK, this.inv_buttons[X.STONE] = wo(60, 60, 0, sprite[k.INV_STONE], 3), this.inv_buttons[X.STONE].id = X.STONE, this.inv_buttons[X.STONE].info.img[2] = this.inv_buttons[X.STONE].info.img[0], this.inv_buttons[X.WOOD] = wo(60, 60, 0, sprite[k.INV_WOOD], 3), this.inv_buttons[X.WOOD].id = X.WOOD, this.inv_buttons[X.WOOD].info.img[2] = this.inv_buttons[X.WOOD].info.img[0], this.inv_buttons[X.PLANT] = wo(60, 60, 0, sprite[k.INV_PLANT], 3), this.inv_buttons[X.PLANT].id = X.PLANT, this.inv_buttons[X.CACTUS] = wo(60, 60, 0, sprite[k.INV_CACTUS], 3), this.inv_buttons[X.CACTUS].id = X.CACTUS, this.inv_buttons[X.GOLD] = wo(60, 60, 0, sprite[k.INV_GOLD], 3), this.inv_buttons[X.GOLD].id = X.GOLD, this.inv_buttons[X.GOLD].info.img[2] = this.inv_buttons[X.GOLD].info.img[0], this.inv_buttons[X.DIAMOND] = wo(60, 60, 0, sprite[k.INV_DIAMOND], 3), this.inv_buttons[X.DIAMOND].id = X.DIAMOND, this.inv_buttons[X.DIAMOND].info.img[2] = this.inv_buttons[X.DIAMOND].info.img[0], this.inv_buttons[X.PICK_GOLD] = wo(60, 60, 0, sprite[k.INV_PICK_GOLD], 3), this.inv_buttons[X.PICK_GOLD].id = X.PICK_GOLD, this.inv_buttons[X.PICK_DIAMOND] = wo(60, 60, 0, sprite[k.INV_PICK_DIAMOND], 3), this.inv_buttons[X.PICK_DIAMOND].id = X.PICK_DIAMOND, this.inv_buttons[X.SWORD_GOLD] = wo(60, 60, 0, sprite[k.INV_SWORD_GOLD], 3), this.inv_buttons[X.SWORD_GOLD].id = X.SWORD_GOLD, this.inv_buttons[X.SWORD_WOOD] = wo(60, 60, 0, sprite[k.INV_SWORD_WOOD], 3), this.inv_buttons[X.SWORD_WOOD].id = X.SWORD_WOOD, this.inv_buttons[X.SWORD_DIAMOND] = wo(60, 60, 0, sprite[k.INV_SWORD_DIAMOND], 3), this.inv_buttons[X.SWORD_DIAMOND].id = X.SWORD_DIAMOND, this.inv_buttons[X.FIRE] = wo(60, 60, 0, sprite[k.INV_FIRE], 3), this.inv_buttons[X.FIRE].id = X.FIRE, this.inv_buttons[X.WORKBENCH] = wo(60, 60, 0, sprite[k.INV_WORK], 3), this.inv_buttons[X.WORKBENCH].id = X.WORKBENCH, this.inv_buttons[X.SEED] = wo(60, 60, 0, sprite[k.INV_SEED], 3), this.inv_buttons[X.SEED].id = X.SEED, this.inv_buttons[X.WALL] = wo(60, 60, 0, sprite[k.INV_WALL], 3), this.inv_buttons[X.WALL].id = X.WALL, this.inv_buttons[X.SPIKE] = wo(60, 60, 0, sprite[k.INV_SPIKE], 3), this.inv_buttons[X.SPIKE].id = X.SPIKE, this.inv_buttons[X.PICK_WOOD] = wo(60, 60, 0, sprite[k.INV_PICK_WOOD], 3), this.inv_buttons[X.PICK_WOOD].id = X.PICK_WOOD, this.inv_buttons[X.COOKED_MEAT] = wo(60, 60, 0, sprite[k.INV_COOKED_MEAT], 3), this.inv_buttons[X.COOKED_MEAT].id = X.COOKED_MEAT, this.inv_buttons[X.MEAT] = wo(60, 60, 0, sprite[k.INV_MEAT], 3), this.inv_buttons[X.MEAT].id = X.MEAT, this.inv_buttons[X.BIG_FIRE] = wo(60, 60, 0, sprite[k.INV_BIG_FIRE], 3), this.inv_buttons[X.BIG_FIRE].id = X.BIG_FIRE, this.inv_buttons[X.BANDAGE] = wo(60, 60, 0, sprite[k.INV_BANDAGE], 3), this.inv_buttons[X.BANDAGE].id = X.BANDAGE, this.inv_buttons[X.CORD] = wo(60, 60, 0, sprite[k.INV_CORD], 3), this.inv_buttons[X.CORD].id = X.CORD, this.inv_buttons[X.CORD].info.img[2] = this.inv_buttons[X.CORD].info.img[0], this.inv_buttons[X.STONE_WALL] = wo(60, 60, 0, sprite[k.INV_STONE_WALL], 3), this.inv_buttons[X.STONE_WALL].id = X.STONE_WALL, this.inv_buttons[X.GOLD_WALL] = wo(60, 60, 0, sprite[k.INV_GOLD_WALL], 3), this.inv_buttons[X.GOLD_WALL].id = X.GOLD_WALL, this.inv_buttons[X.DIAMOND_WALL] = wo(60, 60, 0, sprite[k.INV_DIAMOND_WALL], 3), this.inv_buttons[X.DIAMOND_WALL].id = X.DIAMOND_WALL, this.inv_buttons[X.WOOD_DOOR] = wo(60, 60, 0, sprite[k.INV_DOOR_WOOD_CLOSE], 3), this.inv_buttons[X.WOOD_DOOR].id = X.WOOD_DOOR, this.inv_buttons[X.CHEST] = wo(60, 60, 0, sprite[k.INV_CHEST], 3), this.inv_buttons[X.CHEST].id = X.CHEST, this.inv_buttons[X.STONE_SPIKE] = wo(60, 60, 0, sprite[k.INV_STONE_SPIKE], 3), this.inv_buttons[X.STONE_SPIKE].id = X.STONE_SPIKE, this.inv_buttons[X.GOLD_SPIKE] = wo(60, 60, 0, sprite[k.INV_GOLD_SPIKE], 3), this.inv_buttons[X.GOLD_SPIKE].id = X.GOLD_SPIKE, this.inv_buttons[X.DIAMOND_SPIKE] = wo(60, 60, 0, sprite[k.INV_DIAMOND_SPIKE], 3), this.inv_buttons[X.DIAMOND_SPIKE].id = X.DIAMOND_SPIKE, this.inv_buttons[X.BAG] = wo(60, 60, 0, sprite[k.INV_BAG], 3), this.inv_buttons[X.BAG].id = X.BAG, this.inv_buttons[X.EARMUFFS] = wo(60, 60, 0, sprite[k.INV_EARMUFFS], 3), this.inv_buttons[X.EARMUFFS].id = X.EARMUFFS, this.inv_buttons[X.STONE_DOOR] = wo(60, 60, 0, sprite[k.INV_DOOR_STONE_CLOSE], 3), this.inv_buttons[X.STONE_DOOR].id = X.STONE_DOOR, this.inv_buttons[X.GOLD_DOOR] = wo(60, 60, 0, sprite[k.INV_DOOR_GOLD_CLOSE], 3), this.inv_buttons[X.GOLD_DOOR].id = X.GOLD_DOOR, this.inv_buttons[X.DIAMOND_DOOR] = wo(60, 60, 0, sprite[k.INV_DOOR_DIAMOND_CLOSE], 3), this.inv_buttons[X.DIAMOND_DOOR].id = X.DIAMOND_DOOR, this.inv_buttons[X.FUR] = wo(60, 60, 0, sprite[k.INV_FUR], 3), this.inv_buttons[X.FUR].id = X.FUR, this.inv_buttons[X.FUR].info.img[2] = this.inv_buttons[X.FUR].info.img[0], this.inv_buttons[X.FUR_BOAR] = wo(60, 60, 0, sprite[k.INV_FUR_BOAR], 3), this.inv_buttons[X.FUR_BOAR].id = X.FUR_BOAR, this.inv_buttons[X.FUR_BOAR].info.img[2] = this.inv_buttons[X.FUR_BOAR].info.img[0], this.inv_buttons[X.FUR_WOLF] = wo(60, 60, 0, sprite[k.INV_FUR_WOLF], 3), this.inv_buttons[X.FUR_WOLF].id = X.FUR_WOLF, this.inv_buttons[X.FUR_WOLF].info.img[2] = this.inv_buttons[X.FUR_WOLF].info.img[0], this.inv_buttons[X.PENGUIN_FEATHER] = wo(60, 60, 0, sprite[k.INV_PENGUIN_FEATHER], 3), this.inv_buttons[X.PENGUIN_FEATHER].id = X.PENGUIN_FEATHER, this.inv_buttons[X.HAWK_FEATHER] = wo(60, 60, 0, sprite[k.INV_HAWK_FEATHER], 3), this.inv_buttons[X.HAWK_FEATHER].id = X.HAWK_FEATHER, this.inv_buttons[X.VULTURE_FEATHER] = wo(60, 60, 0, sprite[k.INV_VULTURE_FEATHER], 3), this.inv_buttons[X.VULTURE_FEATHER].id = X.VULTURE_FEATHER, this.inv_buttons[X.EMERALD] = wo(60, 60, 0, sprite[k.INV_EMERALD], 3), this.inv_buttons[X.EMERALD].id = X.EMERALD, this.inv_buttons[X.EARMUFFS] = wo(60, 60, 0, sprite[k.INV_EARMUFFS], 3), this.inv_buttons[X.EARMUFFS].id = X.EARMUFFS, this.inv_buttons[X.COAT] = wo(60, 60, 0, sprite[k.INV_COAT], 3), this.inv_buttons[X.COAT].id = X.COAT, this.inv_buttons[X.WOOD_SPEAR] = wo(60, 60, 0, sprite[k.INV_WOOD_SPEAR], 3), this.inv_buttons[X.WOOD_SPEAR].id = X.WOOD_SPEAR, this.inv_buttons[X.SPEAR] = wo(60, 60, 0, sprite[k.INV_SPEAR], 3), this.inv_buttons[X.SPEAR].id = X.SPEAR, this.inv_buttons[X.GOLD_SPEAR] = wo(60, 60, 0, sprite[k.INV_GOLD_SPEAR], 3), this.inv_buttons[X.GOLD_SPEAR].id = X.GOLD_SPEAR, this.inv_buttons[X.DIAMOND_SPEAR] = wo(60, 60, 0, sprite[k.INV_DIAMOND_SPEAR], 3), this.inv_buttons[X.DIAMOND_SPEAR].id = X.DIAMOND_SPEAR, this.inv_buttons[X.DRAGON_SPEAR] = wo(60, 60, 0, sprite[k.INV_DRAGON_SPEAR], 3), this.inv_buttons[X.DRAGON_SPEAR].id = X.DRAGON_SPEAR, this.inv_buttons[X.FURNACE] = wo(60, 60, 0, sprite[k.INV_FURNACE], 3), this.inv_buttons[X.FURNACE].id = X.FURNACE, this.inv_buttons[X.EXPLORER_HAT] = wo(60, 60, 0, sprite[k.INV_EXPLORER_HAT], 3), this.inv_buttons[X.EXPLORER_HAT].id = X.EXPLORER_HAT, this.inv_buttons[X.PIRATE_HAT] = wo(60, 60, 0, sprite[k.INV_PIRATE_HAT], 3), this.inv_buttons[X.PIRATE_HAT].id = X.PIRATE_HAT, this.inv_buttons[X.FLOWER_HAT] = wo(60, 60, 0, sprite[k.INV_FLOWER_HAT], 3), this.inv_buttons[X.FLOWER_HAT].id = X.FLOWER_HAT, this.inv_buttons[X.FUR_HAT] = wo(60, 60, 0, sprite[k.INV_FUR_HAT], 3), this.inv_buttons[X.FUR_HAT].id = X.FUR_HAT, this.inv_buttons[X.TURBAN1] = wo(60, 60, 0, sprite[k.INV_TURBAN1], 3), this.inv_buttons[X.TURBAN1].id = X.TURBAN1, this.inv_buttons[X.TURBAN2] = wo(60, 60, 0, sprite[k.INV_TURBAN2], 3), this.inv_buttons[X.TURBAN2].id = X.TURBAN2, this.inv_buttons[X.WOOD_BOW] = wo(60, 60, 0, sprite[k.INV_WOOD_BOW], 3), this.inv_buttons[X.WOOD_BOW].id = X.WOOD_BOW, this.inv_buttons[X.WOOD_ARROW] = wo(60, 60, 0, sprite[k.INV_WOOD_ARROW], 3), this.inv_buttons[X.WOOD_ARROW].id = X.WOOD_ARROW, this.inv_buttons[X.WOOD_SHIELD] = wo(60, 60, 0, sprite[k.INV_WOOD_SHIELD], 3), this.inv_buttons[X.WOOD_SHIELD].id = X.WOOD_SHIELD, this.inv_buttons[X.STONE_BOW] = wo(60, 60, 0, sprite[k.INV_STONE_BOW], 3), this.inv_buttons[X.STONE_BOW].id = X.STONE_BOW, this.inv_buttons[X.STONE_ARROW] = wo(60, 60, 0, sprite[k.INV_STONE_ARROW], 3), this.inv_buttons[X.STONE_ARROW].id = X.STONE_ARROW, this.inv_buttons[X.STONE_SHIELD] = wo(60, 60, 0, sprite[k.INV_STONE_SHIELD], 3), this.inv_buttons[X.STONE_SHIELD].id = X.STONE_SHIELD, this.inv_buttons[X.GOLD_BOW] = wo(60, 60, 0, sprite[k.INV_GOLD_BOW], 3), this.inv_buttons[X.GOLD_BOW].id = X.GOLD_BOW, this.inv_buttons[X.GOLD_ARROW] = wo(60, 60, 0, sprite[k.INV_GOLD_ARROW], 3), this.inv_buttons[X.GOLD_ARROW].id = X.GOLD_ARROW, this.inv_buttons[X.GOLD_SHIELD] = wo(60, 60, 0, sprite[k.INV_GOLD_SHIELD], 3), this.inv_buttons[X.GOLD_SHIELD].id = X.GOLD_SHIELD, this.inv_buttons[X.DIAMOND_BOW] = wo(60, 60, 0, sprite[k.INV_DIAMOND_BOW], 3), this.inv_buttons[X.DIAMOND_BOW].id = X.DIAMOND_BOW, this.inv_buttons[X.DIAMOND_ARROW] = wo(60, 60, 0, sprite[k.INV_DIAMOND_ARROW], 3), this.inv_buttons[X.DIAMOND_ARROW].id = X.DIAMOND_ARROW, this.inv_buttons[X.DIAMOND_SHIELD] = wo(60, 60, 0, sprite[k.INV_DIAMOND_SHIELD], 3), this.inv_buttons[X.DIAMOND_SHIELD].id = X.DIAMOND_SHIELD, this.inv_buttons[X.AMETHYST_BOW] = wo(60, 60, 0, sprite[k.INV_AMETHYST_BOW], 3), this.inv_buttons[X.AMETHYST_BOW].id = X.AMETHYST_BOW, this.inv_buttons[X.AMETHYST_ARROW] = wo(60, 60, 0, sprite[k.INV_AMETHYST_ARROW], 3), this.inv_buttons[X.AMETHYST_ARROW].id = X.AMETHYST_ARROW, this.inv_buttons[X.AMETHYST_SHIELD] = wo(60, 60, 0, sprite[k.INV_AMETHYST_SHIELD], 3), this.inv_buttons[X.AMETHYST_SHIELD].id = X.AMETHYST_SHIELD, this.inv_buttons[X.REIDITE_BOW] = wo(60, 60, 0, sprite[k.INV_REIDITE_BOW], 3), this.inv_buttons[X.REIDITE_BOW].id = X.REIDITE_BOW, this.inv_buttons[X.REIDITE_ARROW] = wo(60, 60, 0, sprite[k.INV_REIDITE_ARROW], 3), this.inv_buttons[X.REIDITE_ARROW].id = X.REIDITE_ARROW, this.inv_buttons[X.REIDITE_SHIELD] = wo(60, 60, 0, sprite[k.INV_REIDITE_SHIELD], 3), this.inv_buttons[X.REIDITE_SHIELD].id = X.REIDITE_SHIELD, this.inv_buttons[X.DRAGON_BOW] = wo(60, 60, 0, sprite[k.INV_DRAGON_BOW], 3), this.inv_buttons[X.DRAGON_BOW].id = X.DRAGON_BOW, this.inv_buttons[X.DRAGON_ARROW] = wo(60, 60, 0, sprite[k.INV_DRAGON_ARROW], 3), this.inv_buttons[X.DRAGON_ARROW].id = X.DRAGON_ARROW, this.inv_buttons[X.WOOD_HELMET] = wo(60, 60, 0, sprite[k.INV_WOOD_HELMET], 3), this.inv_buttons[X.WOOD_HELMET].id = X.WOOD_HELMET, this.inv_buttons[X.STONE_HELMET] = wo(60, 60, 0, sprite[k.INV_STONE_HELMET], 3), this.inv_buttons[X.STONE_HELMET].id = X.STONE_HELMET, this.inv_buttons[X.GOLD_HELMET] = wo(60, 60, 0, sprite[k.INV_GOLD_HELMET], 3), this.inv_buttons[X.GOLD_HELMET].id = X.GOLD_HELMET, this.inv_buttons[X.DIAMOND_HELMET] = wo(60, 60, 0, sprite[k.INV_DIAMOND_HELMET], 3), this.inv_buttons[X.DIAMOND_HELMET].id = X.DIAMOND_HELMET, this.inv_buttons[X.BOOK] = wo(60, 60, 0, sprite[k.INV_BOOK], 3), this.inv_buttons[X.BOOK].id = X.BOOK, this.inv_buttons[X.PAPER] = wo(60, 60, 0, sprite[k.INV_PAPER], 3), this.inv_buttons[X.PAPER].id = X.PAPER, this.inv_buttons[X.PAPER].info.img[2] = this.inv_buttons[X.PAPER].info.img[0], this.inv_buttons[X.BAG] = wo(60, 60, 0, sprite[k.INV_BAG], 3), this.inv_buttons[X.BAG].id = X.BAG, this.inv_buttons[X.AMETHYST] = wo(60, 60, 0, sprite[k.INV_AMETHYST], 3), this.inv_buttons[X.AMETHYST].id = X.AMETHYST, this.inv_buttons[X.AMETHYST].info.img[2] = this.inv_buttons[X.AMETHYST].info.img[0], this.inv_buttons[X.SWORD_AMETHYST] = wo(60, 60, 0, sprite[k.INV_SWORD_AMETHYST], 3), this.inv_buttons[X.SWORD_AMETHYST].id = X.SWORD_AMETHYST, this.inv_buttons[X.PIRATE_SWORD] = wo(60, 60, 0, sprite[k.INV_PIRATE_SWORD], 3), this.inv_buttons[X.PIRATE_SWORD].id = X.PIRATE_SWORD, this.inv_buttons[X.PICK_AMETHYST] = wo(60, 60, 0, sprite[k.INV_PICK_AMETHYST], 3), this.inv_buttons[X.PICK_AMETHYST].id = X.PICK_AMETHYST, this.inv_buttons[X.PICK_REIDITE] = wo(60, 60, 0, sprite[k.INV_PICK_REIDITE], 3), this.inv_buttons[X.PICK_REIDITE].id = X.PICK_REIDITE, this.inv_buttons[X.AMETHYST_SPEAR] = wo(60, 60, 0, sprite[k.INV_AMETHYST_SPEAR], 3), this.inv_buttons[X.AMETHYST_SPEAR].id = X.AMETHYST_SPEAR, this.inv_buttons[X.HAMMER] = wo(60, 60, 0, sprite[k.INV_HAMMER], 3), this.inv_buttons[X.HAMMER].id = X.HAMMER, this.inv_buttons[X.HAMMER_GOLD] = wo(60, 60, 0, sprite[k.INV_HAMMER_GOLD], 3), this.inv_buttons[X.HAMMER_GOLD].id = X.HAMMER_GOLD, this.inv_buttons[X.HAMMER_DIAMOND] = wo(60, 60, 0, sprite[k.INV_HAMMER_DIAMOND], 3), this.inv_buttons[X.HAMMER_DIAMOND].id = X.HAMMER_DIAMOND, this.inv_buttons[X.HAMMER_AMETHYST] = wo(60, 60, 0, sprite[k.INV_HAMMER_AMETHYST], 3), this.inv_buttons[X.HAMMER_AMETHYST].id = X.HAMMER_AMETHYST, this.inv_buttons[X.HAMMER_REIDITE] = wo(60, 60, 0, sprite[k.INV_HAMMER_REIDITE], 3), this.inv_buttons[X.HAMMER_REIDITE].id = X.HAMMER_REIDITE, this.inv_buttons[X.AMETHYST_WALL] = wo(60, 60, 0, sprite[k.INV_AMETHYST_WALL], 3), this.inv_buttons[X.AMETHYST_WALL].id = X.AMETHYST_WALL, this.inv_buttons[X.AMETHYST_SPIKE] = wo(60, 60, 0, sprite[k.INV_AMETHYST_SPIKE], 3), this.inv_buttons[X.AMETHYST_SPIKE].id = X.AMETHYST_SPIKE, this.inv_buttons[X.AMETHYST_DOOR] = wo(60, 60, 0, sprite[k.INV_DOOR_AMETHYST_CLOSE], 3), this.inv_buttons[X.AMETHYST_DOOR].id = X.AMETHYST_DOOR, this.inv_buttons[X.CAP_SCARF] = wo(60, 60, 0, sprite[k.INV_CAP_SCARF], 3), this.inv_buttons[X.CAP_SCARF].id = X.CAP_SCARF, this.inv_buttons[X.FUR_WINTER] = wo(60, 60, 0, sprite[k.INV_FUR_WINTER], 3), this.inv_buttons[X.FUR_WINTER].id = X.FUR_WINTER, this.inv_buttons[X.FUR_WINTER].info.img[2] = this.inv_buttons[X.FUR_WINTER].info.img[0], this.inv_buttons[X.FUR_MAMMOTH] = wo(60, 60, 0, sprite[k.INV_FUR_MAMMOTH], 3), this.inv_buttons[X.FUR_MAMMOTH].id = X.FUR_MAMMOTH, this.inv_buttons[X.FUR_MAMMOTH].info.img[2] = this.inv_buttons[X.FUR_MAMMOTH].info.img[0], this.inv_buttons[X.BLUE_CORD] = wo(60, 60, 0, sprite[k.INV_BLUE_CORD], 3), this.inv_buttons[X.BLUE_CORD].id = X.BLUE_CORD, this.inv_buttons[X.BLUE_CORD].info.img[2] = this.inv_buttons[X.BLUE_CORD].info.img[0], this.inv_buttons[X.LOCK] = wo(60, 60, 0, sprite[k.INV_LOCK], 3), this.inv_buttons[X.LOCK].id = X.LOCK, this.inv_buttons[X.LOCK].info.img[2] = this.inv_buttons[X.LOCK].info.img[0], this.inv_buttons[X.DRAGON_HEART] = wo(60, 60, 0, sprite[k.INV_DRAGON_HEART], 3), this.inv_buttons[X.DRAGON_HEART].id = X.DRAGON_HEART, this.inv_buttons[X.LAVA_HEART] = wo(60, 60, 0, sprite[k.INV_LAVA_HEART], 3), this.inv_buttons[X.LAVA_HEART].id = X.LAVA_HEART, this.inv_buttons[X.RESURRECTION] = wo(60, 60, 0, sprite[k.INV_RESURRECTION], 3), this.inv_buttons[X.RESURRECTION].id = X.RESURRECTION, this.inv_buttons[X.LOCKPICK] = wo(60, 60, 0, sprite[k.INV_LOCKPICK], 3), this.inv_buttons[X.LOCKPICK].id = X.LOCKPICK, this.inv_buttons[X.TOTEM] = wo(60, 60, 0, sprite[k.INV_TOTEM], 3), this.inv_buttons[X.TOTEM].id = X.TOTEM, this.inv_buttons[X.AMETHYST_HELMET] = wo(60, 60, 0, sprite[k.INV_AMETHYST_HELMET], 3), this.inv_buttons[X.AMETHYST_HELMET].id = X.AMETHYST_HELMET, this.inv_buttons[X.SUPER_HAMMER] = wo(60, 60, 0, sprite[k.INV_SUPER_HAMMER], 3), this.inv_buttons[X.SUPER_HAMMER].id = X.SUPER_HAMMER, this.inv_buttons[X.BRIDGE] = wo(60, 60, 0, sprite[k.INV_BRIDGE], 3), this.inv_buttons[X.BRIDGE].id = X.BRIDGE, this.inv_buttons[X.WOOD_TOWER] = wo(60, 60, 0, sprite[k.INV_WOOD_TOWER], 3), this.inv_buttons[X.WOOD_TOWER].id = X.WOOD_TOWER, this.inv_buttons[X.BOAT] = wo(60, 60, 0, sprite[k.INV_BOAT], 3), this.inv_buttons[X.BOAT].id = X.BOAT, this.inv_buttons[X.SLED] = wo(60, 60, 0, sprite[k.INV_SLED], 3), this.inv_buttons[X.SLED].id = X.SLED, this.inv_buttons[X.PLANE] = wo(60, 60, 0, sprite[k.INV_PLANE], 3), this.inv_buttons[X.PLANE].id = X.PLANE, this.inv_buttons[X.SADDLE] = wo(60, 60, 0, sprite[k.INV_SADDLE], 3), this.inv_buttons[X.SADDLE].id = X.SADDLE, this.inv_buttons[X.MOUNT_BOAR] = wo(60, 60, 0, sprite[k.INV_MOUNT_BOAR], 3), this.inv_buttons[X.MOUNT_BOAR].id = X.MOUNT_BOAR, this.inv_buttons[X.CRAB_BOSS] = wo(60, 60, 0, sprite[k.INV_CRAB_BOSS], 3), this.inv_buttons[X.CRAB_BOSS].id = X.CRAB_BOSS, this.inv_buttons[X.BABY_DRAGON] = wo(60, 60, 0, sprite[k.INV_BABY_DRAGON], 3), this.inv_buttons[X.BABY_DRAGON].id = X.BABY_DRAGON, this.inv_buttons[X.BABY_MAMMOTH] = wo(60, 60, 0, sprite[k.INV_BABY_MAMMOTH], 3), this.inv_buttons[X.BABY_MAMMOTH].id = X.BABY_MAMMOTH, this.inv_buttons[X.BABY_LAVA] = wo(60, 60, 0, sprite[k.INV_BABY_LAVA], 3), this.inv_buttons[X.BABY_LAVA].id = X.BABY_LAVA, this.inv_buttons[X.HAWK] = wo(60, 60, 0, sprite[k.INV_HAWK], 3), this.inv_buttons[X.HAWK].id = X.HAWK, this.inv_buttons[X.SAND] = wo(60, 60, 0, sprite[k.INV_SAND], 3), this.inv_buttons[X.SAND].id = X.SAND, this.inv_buttons[X.SAND].info.img[2] = this.inv_buttons[X.SAND].info.img[0], this.inv_buttons[X.BOTTLE_FULL] = wo(60, 60, 0, sprite[k.INV_BOTTLE_FULL], 3), this.inv_buttons[X.BOTTLE_FULL].id = X.BOTTLE_FULL, this.inv_buttons[X.BOTTLE_EMPTY] = wo(60, 60, 0, sprite[k.INV_BOTTLE_EMPTY], 3), this.inv_buttons[X.BOTTLE_EMPTY].id = X.BOTTLE_EMPTY, this.inv_buttons[X.SHOVEL] = wo(60, 60, 0, sprite[k.INV_SHOVEL], 3), this.inv_buttons[X.SHOVEL].id = X.SHOVEL, this.inv_buttons[X.SHOVEL_GOLD] = wo(60, 60, 0, sprite[k.INV_SHOVEL_GOLD], 3), this.inv_buttons[X.SHOVEL_GOLD].id = X.SHOVEL_GOLD, this.inv_buttons[X.SHOVEL_DIAMOND] = wo(60, 60, 0, sprite[k.INV_SHOVEL_DIAMOND], 3), this.inv_buttons[X.SHOVEL_DIAMOND].id = X.SHOVEL_DIAMOND, this.inv_buttons[X.SHOVEL_AMETHYST] = wo(60, 60, 0, sprite[k.INV_SHOVEL_AMETHYST], 3), this.inv_buttons[X.SHOVEL_AMETHYST].id = X.SHOVEL_AMETHYST, this.inv_buttons[X.SPANNER] = wo(60, 60, 0, sprite[k.INV_SPANNER], 3), this.inv_buttons[X.SPANNER].id = X.SPANNER, this.inv_buttons[X.KRAKEN_SKIN] = wo(60, 60, 0, sprite[k.INV_KRAKEN_SKIN], 3), this.inv_buttons[X.KRAKEN_SKIN].id = X.KRAKEN_SKIN, this.inv_buttons[X.KRAKEN_SKIN].info.img[2] = this.inv_buttons[X.KRAKEN_SKIN].info.img[0], this.inv_buttons[X.WATERING_CAN] = wo(60, 60, 0, sprite[k.INV_WATERING_CAN], 3), this.inv_buttons[X.WATERING_CAN].id = X.WATERING_CAN, this.inv_buttons[X.FLOUR] = wo(60, 60, 0, sprite[k.INV_FLOUR], 3), this.inv_buttons[X.FLOUR].id = X.FLOUR, this.inv_buttons[X.FLOUR].info.img[2] = this.inv_buttons[X.FLOUR].info.img[0], this.inv_buttons[X.WHEAT_SEED] = wo(60, 60, 0, sprite[k.INV_WHEAT_SEED], 3), this.inv_buttons[X.WHEAT_SEED].id = X.WHEAT_SEED, this.inv_buttons[X.COOKIE] = wo(60, 60, 0, sprite[k.INV_COOKIE], 3), this.inv_buttons[X.COOKIE].id = X.COOKIE, this.inv_buttons[X.WILD_WHEAT] = wo(60, 60, 0, sprite[k.INV_WILD_WHEAT], 3), this.inv_buttons[X.WILD_WHEAT].id = X.WILD_WHEAT, this.inv_buttons[X.WILD_WHEAT].info.img[2] = this.inv_buttons[X.WILD_WHEAT].info.img[0], this.inv_buttons[X.WINDMILL] = wo(60, 60, 0, sprite[k.INV_WINDMILL], 3), this.inv_buttons[X.WINDMILL].id = X.WINDMILL, this.inv_buttons[X.SUPER_DIVING_SUIT] = wo(60, 60, 0, sprite[k.INV_SUPER_DIVING_SUIT], 3), this.inv_buttons[X.SUPER_DIVING_SUIT].id = X.SUPER_DIVING_SUIT, this.inv_buttons[X.DIVING_MASK] = wo(60, 60, 0, sprite[k.INV_DIVING_MASK], 3), this.inv_buttons[X.DIVING_MASK].id = X.DIVING_MASK, this.inv_buttons[X.WATERING_CAN_FULL] = wo(60, 60, 0, sprite[k.INV_WATERING_CAN_FULL], 3), this.inv_buttons[X.WATERING_CAN_FULL].id = X.WATERING_CAN_FULL, this.inv_buttons[X.CAKE] = wo(60, 60, 0, sprite[k.INV_CAKE], 3), this.inv_buttons[X.CAKE].id = X.CAKE, this.inv_buttons[X.BREAD] = wo(60, 60, 0, sprite[k.INV_BREAD], 3), this.inv_buttons[X.BREAD].id = X.BREAD, this.inv_buttons[X.FOODFISH] = wo(60, 60, 0, sprite[k.INV_FOODFISH], 3), this.inv_buttons[X.FOODFISH].id = X.FOODFISH, this.inv_buttons[X.FOODFISH_COOKED] = wo(60, 60, 0, sprite[k.INV_FOODFISH_COOKED], 3), this.inv_buttons[X.FOODFISH_COOKED].id = X.FOODFISH_COOKED, this.inv_buttons[X.SCALES] = wo(60, 60, 0, sprite[k.INV_SCALES], 3), this.inv_buttons[X.SCALES].id = X.SCALES, this.inv_buttons[X.SCALES].info.img[2] = this.inv_buttons[X.SCALES].info.img[0], this.inv_buttons[X.GROUND] = wo(60, 60, 0, sprite[k.INV_GROUND], 3), this.inv_buttons[X.GROUND].id = X.GROUND, this.inv_buttons[X.GROUND].info.img[2] = this.inv_buttons[X.GROUND].info.img[0], this.inv_buttons[X.PLOT] = wo(60, 60, 0, sprite[k.INV_PLOT], 3), this.inv_buttons[X.PLOT].id = X.PLOT, this.inv_buttons[X.ICE] = wo(60, 60, 0, sprite[k.INV_ICE], 3), this.inv_buttons[X.ICE].id = X.ICE, this.inv_buttons[X.ICE].info.img[2] = this.inv_buttons[X.ICE].info.img[0], this.inv_buttons[X.BREAD_OVEN] = wo(60, 60, 0, sprite[k.INV_BREAD_OVEN], 3), this.inv_buttons[X.BREAD_OVEN].id = X.BREAD_OVEN, this.inv_buttons[X.SANDWICH] = wo(60, 60, 0, sprite[k.INV_SANDWICH], 3), this.inv_buttons[X.SANDWICH].id = X.SANDWICH, this.inv_buttons[X.DRAGON_HELMET] = wo(60, 60, 0, sprite[k.INV_DRAGON_HELMET], 3), this.inv_buttons[X.DRAGON_HELMET].id = X.DRAGON_HELMET, this.inv_buttons[X.DRAGON_SWORD] = wo(60, 60, 0, sprite[k.INV_DRAGON_SWORD], 3), this.inv_buttons[X.DRAGON_SWORD].id = X.DRAGON_SWORD, this.inv_buttons[X.DRAGON_ORB] = wo(60, 60, 0, sprite[k.INV_DRAGON_ORB], 3), this.inv_buttons[X.DRAGON_ORB].id = X.DRAGON_ORB, this.inv_buttons[X.DRAGON_ORB].info.img[2] = this.inv_buttons[X.DRAGON_ORB].info.img[0], this.inv_buttons[X.DRAGON_CUBE] = wo(60, 60, 0, sprite[k.INV_DRAGON_CUBE], 3), this.inv_buttons[X.DRAGON_CUBE].id = X.DRAGON_CUBE, this.inv_buttons[X.DRAGON_CUBE].info.img[2] = this.inv_buttons[X.DRAGON_CUBE].info.img[0], this.inv_buttons[X.LAVA_SPEAR] = wo(60, 60, 0, sprite[k.INV_LAVA_SPEAR], 3), this.inv_buttons[X.LAVA_SPEAR].id = X.LAVA_SPEAR, this.inv_buttons[X.LAVA_SWORD] = wo(60, 60, 0, sprite[k.INV_LAVA_SWORD], 3), this.inv_buttons[X.LAVA_SWORD].id = X.LAVA_SWORD, this.inv_buttons[X.LAVA_ORB] = wo(60, 60, 0, sprite[k.INV_LAVA_ORB], 3), this.inv_buttons[X.LAVA_ORB].id = X.LAVA_ORB, this.inv_buttons[X.LAVA_ORB].info.img[2] = this.inv_buttons[X.LAVA_ORB].info.img[0], this.inv_buttons[X.LAVA_CUBE] = wo(60, 60, 0, sprite[k.INV_LAVA_CUBE], 3), this.inv_buttons[X.LAVA_CUBE].id = X.LAVA_CUBE, this.inv_buttons[X.LAVA_CUBE].info.img[2] = this.inv_buttons[X.LAVA_CUBE].info.img[0], this.inv_buttons[X.CROWN_GREEN] = wo(60, 60, 0, sprite[k.INV_CROWN_GREEN], 3), this.inv_buttons[X.CROWN_GREEN].id = X.CROWN_GREEN, this.inv_buttons[X.GEMME_GREEN] = wo(60, 60, 0, sprite[k.INV_GEMME_GREEN], 3), this.inv_buttons[X.GEMME_GREEN].id = X.GEMME_GREEN, this.inv_buttons[X.GEMME_GREEN].info.img[2] = this.inv_buttons[X.GEMME_GREEN].info.img[0], this.inv_buttons[X.GEMME_ORANGE] = wo(60, 60, 0, sprite[k.INV_GEMME_ORANGE], 3), this.inv_buttons[X.GEMME_ORANGE].id = X.GEMME_ORANGE, this.inv_buttons[X.GEMME_ORANGE].info.img[2] = this.inv_buttons[X.GEMME_ORANGE].info.img[0], this.inv_buttons[X.CROWN_ORANGE] = wo(60, 60, 0, sprite[k.INV_CROWN_ORANGE], 3), this.inv_buttons[X.CROWN_ORANGE].id = X.CROWN_ORANGE, this.inv_buttons[X.GEMME_BLUE] = wo(60, 60, 0, sprite[k.INV_GEMME_BLUE], 3), this.inv_buttons[X.GEMME_BLUE].id = X.GEMME_BLUE, this.inv_buttons[X.GEMME_BLUE].info.img[2] = this.inv_buttons[X.GEMME_BLUE].info.img[0], this.inv_buttons[X.CROWN_BLUE] = wo(60, 60, 0, sprite[k.INV_CROWN_BLUE], 3), this.inv_buttons[X.CROWN_BLUE].id = X.CROWN_BLUE, this.inv_buttons[X.HOOD] = wo(60, 60, 0, sprite[k.INV_HOOD], 3), this.inv_buttons[X.HOOD].id = X.HOOD, this.inv_buttons[X.PEASANT] = wo(60, 60, 0, sprite[k.INV_PEASANT], 3), this.inv_buttons[X.PEASANT].id = X.PEASANT, this.inv_buttons[X.SPECIAL_FUR] = wo(60, 60, 0, sprite[k.INV_SPECIAL_FUR], 3), this.inv_buttons[X.SPECIAL_FUR].id = X.SPECIAL_FUR, this.inv_buttons[X.SPECIAL_FUR_2] = wo(60, 60, 0, sprite[k.INV_SPECIAL_FUR_2], 3), this.inv_buttons[X.SPECIAL_FUR_2].id = X.SPECIAL_FUR_2, this.inv_buttons[X.WINTER_PEASANT] = wo(60, 60, 0, sprite[k.INV_WINTER_PEASANT], 3), this.inv_buttons[X.WINTER_PEASANT].id = X.WINTER_PEASANT, this.inv_buttons[X.WINTER_HOOD] = wo(60, 60, 0, sprite[k.INV_WINTER_HOOD], 3), this.inv_buttons[X.WINTER_HOOD].id = X.WINTER_HOOD, this.inv_buttons[X.BUCKET_FULL] = wo(60, 60, 0, sprite[k.INV_BUCKET_FULL], 3), this.inv_buttons[X.BUCKET_FULL].id = X.BUCKET_FULL, this.inv_buttons[X.BUCKET_EMPTY] = wo(60, 60, 0, sprite[k.INV_BUCKET_EMPTY], 3), this.inv_buttons[X.BUCKET_EMPTY].id = X.BUCKET_EMPTY, this.inv_buttons[X.WELL] = wo(60, 60, 0, sprite[k.INV_WELL], 3), this.inv_buttons[X.WELL].id = X.WELL, this.inv_buttons[X.SIGN] = wo(60, 60, 0, sprite[k.INV_SIGN], 3), this.inv_buttons[X.SIGN].id = X.SIGN, this.inv_buttons[X.PUMPKIN_SEED] = wo(60, 60, 0, sprite[k.INV_PUMPKIN_SEED], 3), this.inv_buttons[X.PUMPKIN_SEED].id = X.PUMPKIN_SEED, this.inv_buttons[X.PUMPKIN] = wo(60, 60, 0, sprite[k.INV_PUMPKIN], 3), this.inv_buttons[X.PUMPKIN].id = X.PUMPKIN, this.inv_buttons[X.GARLIC_SEED] = wo(60, 60, 0, sprite[k.INV_GARLIC_SEED], 3), this.inv_buttons[X.GARLIC_SEED].id = X.GARLIC_SEED, this.inv_buttons[X.GARLIC] = wo(60, 60, 0, sprite[k.INV_GARLIC], 3), this.inv_buttons[X.GARLIC].id = X.GARLIC, this.inv_buttons[X.ROOF] = wo(60, 60, 0, sprite[k.INV_ROOF], 3), this.inv_buttons[X.ROOF].id = X.ROOF, this.inv_buttons[X.THORNBUSH_SEED] = wo(60, 60, 0, sprite[k.INV_THORNBUSH_SEED], 3), this.inv_buttons[X.THORNBUSH_SEED].id = X.THORNBUSH_SEED, this.inv_buttons[X.THORNBUSH] = wo(60, 60, 0, sprite[k.INV_THORNBUSH], 3), this.inv_buttons[X.THORNBUSH].id = X.THORNBUSH, this.inv_buttons[X.CARROT_SEED] = wo(60, 60, 0, sprite[k.INV_CARROT_SEED], 3), this.inv_buttons[X.CARROT_SEED].id = X.CARROT_SEED, this.inv_buttons[X.CARROT] = wo(60, 60, 0, sprite[k.INV_CARROT], 3), this.inv_buttons[X.CARROT].id = X.CARROT, this.inv_buttons[X.TOMATO_SEED] = wo(60, 60, 0, sprite[k.INV_TOMATO_SEED], 3), this.inv_buttons[X.TOMATO_SEED].id = X.TOMATO_SEED, this.inv_buttons[X.TOMATO] = wo(60, 60, 0, sprite[k.INV_TOMATO], 3), this.inv_buttons[X.TOMATO].id = X.TOMATO, this.inv_buttons[X.WATERMELON_SEED] = wo(60, 60, 0, sprite[k.INV_WATERMELON_SEED], 3), this.inv_buttons[X.WATERMELON_SEED].id = X.WATERMELON_SEED, this.inv_buttons[X.WATERMELON] = wo(60, 60, 0, sprite[k.INV_WATERMELON], 3), this.inv_buttons[X.WATERMELON].id = X.WATERMELON, this.inv_buttons[X.ALOE_VERA_SEED] = wo(60, 60, 0, sprite[k.INV_ALOE_VERA_SEED], 3), this.inv_buttons[X.ALOE_VERA_SEED].id = X.ALOE_VERA_SEED, this.inv_buttons[X.ALOE_VERA] = wo(60, 60, 0, sprite[k.INV_ALOE_VERA], 3), this.inv_buttons[X.ALOE_VERA].id = X.ALOE_VERA, this.inv_buttons[X.CHRISTMAS_HAT] = wo(60, 60, 0, sprite[k.INV_CHRISTMAS_HAT], 3), this.inv_buttons[X.CHRISTMAS_HAT].id = X.CHRISTMAS_HAT, this.inv_buttons[X.ELF_HAT] = wo(60, 60, 0, sprite[k.INV_ELF_HAT], 3), this.inv_buttons[X.ELF_HAT].id = X.ELF_HAT, this.inv_buttons[X.WOOD_SPEAR] = wo(60, 60, 0, sprite[k.INV_WOOD_SPEAR], 3), this.inv_buttons[X.WOOD_SPEAR].id = X.WOOD_SPEAR, this.inv_buttons[X.DRAGON_SPEAR] = wo(60, 60, 0, sprite[k.INV_DRAGON_SPEAR], 3), this.inv_buttons[X.DRAGON_SPEAR].id = X.DRAGON_SPEAR, this.inv_buttons[X.CRAB_STICK] = wo(60, 60, 0, sprite[k.INV_CRAB_STICK], 3), this.inv_buttons[X.CRAB_STICK].id = X.CRAB_STICK, this.inv_buttons[X.CRAB_SPEAR] = wo(60, 60, 0, sprite[k.INV_CRAB_SPEAR], 3), this.inv_buttons[X.CRAB_SPEAR].id = X.CRAB_SPEAR, this.inv_buttons[X.CRAB_LOOT] = wo(60, 60, 0, sprite[k.INV_CRAB_LOOT], 3), this.inv_buttons[X.CRAB_LOOT].id = X.CRAB_LOOT, this.inv_buttons[X.BED] = wo(60, 60, 0, sprite[k.INV_BED], 3), this.inv_buttons[X.BED].id = X.BED, this.inv_buttons[X.CROWN_CRAB] = wo(60, 60, 0, sprite[k.INV_CROWN_CRAB], 3), this.inv_buttons[X.CROWN_CRAB].id = X.CROWN_CRAB, this.inv_buttons[X.GARLAND] = wo(60, 60, 0, sprite[k.INV_GARLAND], 3), this.inv_buttons[X.GARLAND].id = X.GARLAND, this.inv_buttons[X.CANDY] = wo(60, 60, 0, sprite[k.INV_CANDY], 3), this.inv_buttons[X.CANDY].id = X.CANDY, this.inv_buttons[X.SUGAR_CAN] = wo(60, 60, 0, sprite[k.INV_SUGAR_CAN], 3), this.inv_buttons[X.SUGAR_CAN].id = X.SUGAR_CAN, this.craft_buttons = [], this.craft_buttons[J.SWORD] = wo(60, 60, 0, sprite[k.CRAFT_SWORD], 3), this.craft_buttons[J.SWORD].id = J.SWORD, this.craft_buttons[J.PICK] = wo(60, 60, 0, sprite[k.CRAFT_PICK], 3), this.craft_buttons[J.PICK].id = J.PICK, this.craft_buttons[J.FIRE] = wo(60, 60, 0, sprite[k.CRAFT_FIRE], 3), this.craft_buttons[J.FIRE].id = J.FIRE, this.craft_buttons[J.WORKBENCH] = wo(60, 60, 0, sprite[k.CRAFT_WORK], 3), this.craft_buttons[J.WORKBENCH].id = J.WORKBENCH, this.craft_buttons[J.WALL] = wo(60, 60, 0, sprite[k.CRAFT_WALL], 3), this.craft_buttons[J.WALL].id = J.WALL, this.craft_buttons[J.SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_SPIKE], 3), this.craft_buttons[J.SPIKE].id = J.SPIKE, this.craft_buttons[J.SEED] = wo(60, 60, 0, sprite[k.CRAFT_SEED], 3), this.craft_buttons[J.SEED].id = J.SEED, this.craft_buttons[J.PICK_GOLD] = wo(60, 60, 0, sprite[k.CRAFT_PICK_GOLD], 3), this.craft_buttons[J.PICK_GOLD].id = J.PICK_GOLD, this.craft_buttons[J.PICK_DIAMOND] = wo(60, 60, 0, sprite[k.CRAFT_PICK_DIAMOND], 3), this.craft_buttons[J.PICK_DIAMOND].id = J.PICK_DIAMOND, this.craft_buttons[J.SWORD_GOLD] = wo(60, 60, 0, sprite[k.CRAFT_SWORD_GOLD], 3), this.craft_buttons[J.SWORD_GOLD].id = J.SWORD_GOLD, this.craft_buttons[J.SWORD_WOOD] = wo(60, 60, 0, sprite[k.CRAFT_SWORD_WOOD], 3), this.craft_buttons[J.SWORD_WOOD].id = J.SWORD_WOOD, this.craft_buttons[J.SWORD_DIAMOND] = wo(60, 60, 0, sprite[k.CRAFT_SWORD_DIAMOND], 3), this.craft_buttons[J.SWORD_DIAMOND].id = J.SWORD_DIAMOND, this.craft_buttons[J.PICK_WOOD] = wo(60, 60, 0, sprite[k.CRAFT_PICK_WOOD], 3), this.craft_buttons[J.PICK_WOOD].id = J.PICK_WOOD, this.craft_buttons[J.COOKED_MEAT] = wo(60, 60, 0, sprite[k.CRAFT_COOKED_MEAT], 3), this.craft_buttons[J.COOKED_MEAT].id = J.COOKED_MEAT, this.craft_buttons[J.BIG_FIRE] = wo(60, 60, 0, sprite[k.CRAFT_BIG_FIRE], 3), this.craft_buttons[J.BIG_FIRE].id = J.BIG_FIRE, this.craft_buttons[J.BANDAGE] = wo(60, 60, 0, sprite[k.CRAFT_BANDAGE], 3), this.craft_buttons[J.BANDAGE].id = J.BANDAGE, this.craft_buttons[J.STONE_WALL] = wo(60, 60, 0, sprite[k.CRAFT_STONE_WALL], 3), this.craft_buttons[J.STONE_WALL].id = J.STONE_WALL, this.craft_buttons[J.GOLD_WALL] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_WALL], 3), this.craft_buttons[J.GOLD_WALL].id = J.GOLD_WALL, this.craft_buttons[J.DIAMOND_WALL] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_WALL], 3), this.craft_buttons[J.DIAMOND_WALL].id = J.DIAMOND_WALL, this.craft_buttons[J.WOOD_DOOR] = wo(60, 60, 0, sprite[k.CRAFT_DOOR_WOOD_CLOSE], 3), this.craft_buttons[J.WOOD_DOOR].id = J.WOOD_DOOR, this.craft_buttons[J.CHEST] = wo(60, 60, 0, sprite[k.CRAFT_CHEST], 3), this.craft_buttons[J.CHEST].id = J.CHEST, this.craft_buttons[J.STONE_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_STONE_SPIKE], 3), this.craft_buttons[J.STONE_SPIKE].id = J.STONE_SPIKE, this.craft_buttons[J.GOLD_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_SPIKE], 3), this.craft_buttons[J.GOLD_SPIKE].id = J.GOLD_SPIKE, this.craft_buttons[J.DIAMOND_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_SPIKE], 3), this.craft_buttons[J.DIAMOND_SPIKE].id = J.DIAMOND_SPIKE, this.craft_buttons[J.BAG] = wo(60, 60, 0, sprite[k.CRAFT_BAG], 3), this.craft_buttons[J.BAG].id = J.BAG, this.craft_buttons[J.EARMUFFS] = wo(60, 60, 0, sprite[k.CRAFT_EARMUFFS], 3), this.craft_buttons[J.EARMUFFS].id = J.EARMUFFS, this.craft_buttons[J.STONE_DOOR] = wo(60, 60, 0, sprite[k.CRAFT_DOOR_STONE_CLOSE], 3), this.craft_buttons[J.STONE_DOOR].id = J.STONE_DOOR, this.craft_buttons[J.GOLD_DOOR] = wo(60, 60, 0, sprite[k.CRAFT_DOOR_GOLD_CLOSE], 3), this.craft_buttons[J.GOLD_DOOR].id = J.GOLD_DOOR, this.craft_buttons[J.DIAMOND_DOOR] = wo(60, 60, 0, sprite[k.CRAFT_DOOR_DIAMOND_CLOSE], 3), this.craft_buttons[J.DIAMOND_DOOR].id = J.DIAMOND_DOOR, this.craft_buttons[J.EARMUFFS] = wo(60, 60, 0, sprite[k.CRAFT_EARMUFFS], 3), this.craft_buttons[J.EARMUFFS].id = J.EARMUFFS, this.craft_buttons[J.COAT] = wo(60, 60, 0, sprite[k.CRAFT_COAT], 3), this.craft_buttons[J.COAT].id = J.COAT, this.craft_buttons[J.WOOD_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_SPEAR], 3), this.craft_buttons[J.WOOD_SPEAR].id = J.WOOD_SPEAR, this.craft_buttons[J.SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_SPEAR], 3), this.craft_buttons[J.SPEAR].id = J.SPEAR, this.craft_buttons[J.GOLD_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_SPEAR], 3), this.craft_buttons[J.GOLD_SPEAR].id = J.GOLD_SPEAR, this.craft_buttons[J.DIAMOND_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_SPEAR], 3), this.craft_buttons[J.DIAMOND_SPEAR].id = J.DIAMOND_SPEAR, this.craft_buttons[J.DRAGON_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_DRAGON_SPEAR], 3), this.craft_buttons[J.DRAGON_SPEAR].id = J.DRAGON_SPEAR, this.craft_buttons[J.FURNACE] = wo(60, 60, 0, sprite[k.CRAFT_FURNACE], 3), this.craft_buttons[J.FURNACE].id = J.FURNACE, this.craft_buttons[J.EXPLORER_HAT] = wo(60, 60, 0, sprite[k.CRAFT_EXPLORER_HAT], 3), this.craft_buttons[J.EXPLORER_HAT].id = J.EXPLORER_HAT, this.craft_buttons[J.PIRATE_HAT] = wo(60, 60, 0, sprite[k.CRAFT_PIRATE_HAT], 3), this.craft_buttons[J.PIRATE_HAT].id = J.PIRATE_HAT, this.craft_buttons[J.FLOWER_HAT] = wo(60, 60, 0, sprite[k.CRAFT_FLOWER_HAT], 3), this.craft_buttons[J.FLOWER_HAT].id = J.FLOWER_HAT, this.craft_buttons[J.FUR_HAT] = wo(60, 60, 0, sprite[k.CRAFT_FUR_HAT], 3), this.craft_buttons[J.FUR_HAT].id = J.FUR_HAT, this.craft_buttons[J.TURBAN1] = wo(60, 60, 0, sprite[k.CRAFT_TURBAN1], 3), this.craft_buttons[J.TURBAN1].id = J.TURBAN1, this.craft_buttons[J.TURBAN2] = wo(60, 60, 0, sprite[k.CRAFT_TURBAN2], 3), this.craft_buttons[J.TURBAN2].id = J.TURBAN2, this.craft_buttons[J.WOOD_BOW] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_BOW], 3), this.craft_buttons[J.WOOD_BOW].id = J.WOOD_BOW, this.craft_buttons[J.WOOD_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_ARROW], 3), this.craft_buttons[J.WOOD_ARROW].id = J.WOOD_ARROW, this.craft_buttons[J.WOOD_SHIELD] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_SHIELD], 3), this.craft_buttons[J.WOOD_SHIELD].id = J.WOOD_SHIELD, this.craft_buttons[J.STONE_BOW] = wo(60, 60, 0, sprite[k.CRAFT_STONE_BOW], 3), this.craft_buttons[J.STONE_BOW].id = J.STONE_BOW, this.craft_buttons[J.STONE_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_STONE_ARROW], 3), this.craft_buttons[J.STONE_ARROW].id = J.STONE_ARROW, this.craft_buttons[J.STONE_SHIELD] = wo(60, 60, 0, sprite[k.CRAFT_STONE_SHIELD], 3), this.craft_buttons[J.STONE_SHIELD].id = J.STONE_SHIELD, this.craft_buttons[J.GOLD_BOW] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_BOW], 3), this.craft_buttons[J.GOLD_BOW].id = J.GOLD_BOW, this.craft_buttons[J.GOLD_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_ARROW], 3), this.craft_buttons[J.GOLD_ARROW].id = J.GOLD_ARROW, this.craft_buttons[J.GOLD_SHIELD] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_SHIELD], 3), this.craft_buttons[J.GOLD_SHIELD].id = J.GOLD_SHIELD, this.craft_buttons[J.DIAMOND_BOW] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_BOW], 3), this.craft_buttons[J.DIAMOND_BOW].id = J.DIAMOND_BOW, this.craft_buttons[J.DIAMOND_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_ARROW], 3), this.craft_buttons[J.DIAMOND_ARROW].id = J.DIAMOND_ARROW, this.craft_buttons[J.DIAMOND_SHIELD] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_SHIELD], 3), this.craft_buttons[J.DIAMOND_SHIELD].id = J.DIAMOND_SHIELD, this.craft_buttons[J.AMETHYST_BOW] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_BOW], 3), this.craft_buttons[J.AMETHYST_BOW].id = J.AMETHYST_BOW, this.craft_buttons[J.AMETHYST_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_ARROW], 3), this.craft_buttons[J.AMETHYST_ARROW].id = J.AMETHYST_ARROW, this.craft_buttons[J.AMETHYST_SHIELD] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_SHIELD], 3), this.craft_buttons[J.AMETHYST_SHIELD].id = J.AMETHYST_SHIELD, this.craft_buttons[J.REIDITE_BOW] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_BOW], 3), this.craft_buttons[J.REIDITE_BOW].id = J.REIDITE_BOW, this.craft_buttons[J.REIDITE_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_ARROW], 3), this.craft_buttons[J.REIDITE_ARROW].id = J.REIDITE_ARROW, this.craft_buttons[J.REIDITE_SHIELD] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_SHIELD], 3), this.craft_buttons[J.REIDITE_SHIELD].id = J.REIDITE_SHIELD, this.craft_buttons[J.DRAGON_BOW] = wo(60, 60, 0, sprite[k.CRAFT_DRAGON_BOW], 3), this.craft_buttons[J.DRAGON_BOW].id = J.DRAGON_BOW, this.craft_buttons[J.DRAGON_ARROW] = wo(60, 60, 0, sprite[k.CRAFT_DRAGON_ARROW], 3), this.craft_buttons[J.DRAGON_ARROW].id = J.DRAGON_ARROW, this.craft_buttons[J.WOOD_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_HELMET], 3), this.craft_buttons[J.WOOD_HELMET].id = J.WOOD_HELMET, this.craft_buttons[J.STONE_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_STONE_HELMET], 3), this.craft_buttons[J.STONE_HELMET].id = J.STONE_HELMET, this.craft_buttons[J.GOLD_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_HELMET], 3), this.craft_buttons[J.GOLD_HELMET].id = J.GOLD_HELMET, this.craft_buttons[J.DIAMOND_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_HELMET], 3), this.craft_buttons[J.DIAMOND_HELMET].id = J.DIAMOND_HELMET, this.craft_buttons[J.BOOK] = wo(60, 60, 0, sprite[k.CRAFT_BOOK], 3), this.craft_buttons[J.BOOK].id = J.BOOK, this.craft_buttons[J.PAPER] = wo(60, 60, 0, sprite[k.CRAFT_PAPER], 3), this.craft_buttons[J.PAPER].id = J.PAPER, this.craft_buttons[J.BAG] = wo(60, 60, 0, sprite[k.CRAFT_BAG], 3), this.craft_buttons[J.BAG].id = J.BAG, this.craft_buttons[J.SWORD_AMETHYST] = wo(60, 60, 0, sprite[k.CRAFT_SWORD_AMETHYST], 3), this.craft_buttons[J.SWORD_AMETHYST].id = J.SWORD_AMETHYST, this.craft_buttons[J.PIRATE_SWORD] = wo(60, 60, 0, sprite[k.CRAFT_PIRATE_SWORD], 3), this.craft_buttons[J.PIRATE_SWORD].id = J.PIRATE_SWORD, this.craft_buttons[J.PICK_AMETHYST] = wo(60, 60, 0, sprite[k.CRAFT_PICK_AMETHYST], 3), this.craft_buttons[J.PICK_AMETHYST].id = J.PICK_AMETHYST, this.craft_buttons[J.PICK_REIDITE] = wo(60, 60, 0, sprite[k.CRAFT_PICK_REIDITE], 3), this.craft_buttons[J.PICK_REIDITE].id = J.PICK_REIDITE, this.craft_buttons[J.AMETHYST_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_SPEAR], 3), this.craft_buttons[J.AMETHYST_SPEAR].id = J.AMETHYST_SPEAR, this.craft_buttons[J.HAMMER] = wo(60, 60, 0, sprite[k.CRAFT_HAMMER], 3), this.craft_buttons[J.HAMMER].id = J.HAMMER, this.craft_buttons[J.HAMMER_GOLD] = wo(60, 60, 0, sprite[k.CRAFT_HAMMER_GOLD], 3), this.craft_buttons[J.HAMMER_GOLD].id = J.HAMMER_GOLD, this.craft_buttons[J.HAMMER_DIAMOND] = wo(60, 60, 0, sprite[k.CRAFT_HAMMER_DIAMOND], 3), this.craft_buttons[J.HAMMER_DIAMOND].id = J.HAMMER_DIAMOND, this.craft_buttons[J.HAMMER_AMETHYST] = wo(60, 60, 0, sprite[k.CRAFT_HAMMER_AMETHYST], 3), this.craft_buttons[J.HAMMER_AMETHYST].id = J.HAMMER_AMETHYST, this.craft_buttons[J.HAMMER_REIDITE] = wo(60, 60, 0, sprite[k.CRAFT_HAMMER_REIDITE], 3), this.craft_buttons[J.HAMMER_REIDITE].id = J.HAMMER_REIDITE, this.craft_buttons[J.AMETHYST_WALL] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_WALL], 3), this.craft_buttons[J.AMETHYST_WALL].id = J.AMETHYST_WALL, this.craft_buttons[J.AMETHYST_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_SPIKE], 3), this.craft_buttons[J.AMETHYST_SPIKE].id = J.AMETHYST_SPIKE, this.craft_buttons[J.AMETHYST_DOOR] = wo(60, 60, 0, sprite[k.CRAFT_DOOR_AMETHYST_CLOSE], 3), this.craft_buttons[J.AMETHYST_DOOR].id = J.AMETHYST_DOOR, this.craft_buttons[J.CAP_SCARF] = wo(60, 60, 0, sprite[k.CRAFT_CAP_SCARF], 3), this.craft_buttons[J.CAP_SCARF].id = J.CAP_SCARF, this.craft_buttons[J.BLUE_CORD] = wo(60, 60, 0, sprite[k.CRAFT_BLUE_CORD], 3), this.craft_buttons[J.BLUE_CORD].id = J.BLUE_CORD, this.craft_buttons[J.LOCK] = wo(60, 60, 0, sprite[k.CRAFT_LOCK], 3), this.craft_buttons[J.LOCK].id = J.LOCK, this.craft_buttons[J.RESURRECTION] = wo(60, 60, 0, sprite[k.CRAFT_RESURRECTION], 3), this.craft_buttons[J.RESURRECTION].id = J.RESURRECTION, this.craft_buttons[J.LOCKPICK] = wo(60, 60, 0, sprite[k.CRAFT_LOCKPICK], 3), this.craft_buttons[J.LOCKPICK].id = J.LOCKPICK, this.craft_buttons[J.TOTEM] = wo(60, 60, 0, sprite[k.CRAFT_TOTEM], 3), this.craft_buttons[J.TOTEM].id = J.TOTEM, this.craft_buttons[J.AMETHYST_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_HELMET], 3), this.craft_buttons[J.AMETHYST_HELMET].id = J.AMETHYST_HELMET, this.craft_buttons[J.SUPER_HAMMER] = wo(60, 60, 0, sprite[k.CRAFT_SUPER_HAMMER], 3), this.craft_buttons[J.SUPER_HAMMER].id = J.SUPER_HAMMER, this.craft_buttons[J.BRIDGE] = wo(60, 60, 0, sprite[k.CRAFT_BRIDGE], 3), this.craft_buttons[J.BRIDGE].id = J.BRIDGE, this.craft_buttons[J.WOOD_TOWER] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_TOWER], 3), this.craft_buttons[J.WOOD_TOWER].id = J.WOOD_TOWER, this.craft_buttons[J.BOAT] = wo(60, 60, 0, sprite[k.CRAFT_BOAT], 3), this.craft_buttons[J.BOAT].id = J.BOAT, this.craft_buttons[J.SLED] = wo(60, 60, 0, sprite[k.CRAFT_SLED], 3), this.craft_buttons[J.SLED].id = J.SLED, this.craft_buttons[J.PLANE] = wo(60, 60, 0, sprite[k.CRAFT_PLANE], 3), this.craft_buttons[J.PLANE].id = J.PLANE, this.craft_buttons[J.SADDLE] = wo(60, 60, 0, sprite[k.CRAFT_SADDLE], 3), this.craft_buttons[J.SADDLE].id = J.SADDLE, this.craft_buttons[J.MOUNT_BOAR] = wo(60, 60, 0, sprite[k.CRAFT_MOUNT_BOAR], 3), this.craft_buttons[J.MOUNT_BOAR].id = J.MOUNT_BOAR, this.craft_buttons[J.BABY_DRAGON] = wo(60, 60, 0, sprite[k.CRAFT_BABY_DRAGON], 3), this.craft_buttons[J.BABY_DRAGON].id = J.BABY_DRAGON, this.craft_buttons[J.BABY_MAMMOTH] = wo(60, 60, 0, sprite[k.CRAFT_BABY_MAMMOTH], 3), this.craft_buttons[J.BABY_MAMMOTH].id = J.BABY_MAMMOTH, this.craft_buttons[J.CRAB_BOSS] = wo(60, 60, 0, sprite[k.CRAFT_CRAB_BOSS], 3), this.craft_buttons[J.CRAB_BOSS].id = J.CRAB_BOSS, this.craft_buttons[J.BOTTLE_EMPTY] = wo(60, 60, 0, sprite[k.CRAFT_BOTTLE_EMPTY], 3), this.craft_buttons[J.BOTTLE_EMPTY].id = J.BOTTLE_EMPTY, this.craft_buttons[J.BOTTLE_FULL] = wo(60, 60, 0, sprite[k.CRAFT_BOTTLE_FULL], 3), this.craft_buttons[J.BOTTLE_FULL].id = J.BOTTLE_FULL, this.craft_buttons[J.BOTTLE_FULL_2] = wo(60, 60, 0, sprite[k.CRAFT_BOTTLE_FULL], 3), this.craft_buttons[J.BOTTLE_FULL_2].id = J.BOTTLE_FULL_2, this.craft_buttons[J.BOTTLE_FULL_3] = wo(60, 60, 0, sprite[k.CRAFT_BOTTLE_FULL], 3), this.craft_buttons[J.BOTTLE_FULL_3].id = J.BOTTLE_FULL_3, this.craft_buttons[J.SHOVEL] = wo(60, 60, 0, sprite[k.CRAFT_SHOVEL], 3), this.craft_buttons[J.SHOVEL].id = J.SHOVEL, this.craft_buttons[J.SHOVEL_GOLD] = wo(60, 60, 0, sprite[k.CRAFT_SHOVEL_GOLD], 3), this.craft_buttons[J.SHOVEL_GOLD].id = J.SHOVEL_GOLD, this.craft_buttons[J.SHOVEL_DIAMOND] = wo(60, 60, 0, sprite[k.CRAFT_SHOVEL_DIAMOND], 3), this.craft_buttons[J.SHOVEL_DIAMOND].id = J.SHOVEL_DIAMOND, this.craft_buttons[J.SHOVEL_AMETHYST] = wo(60, 60, 0, sprite[k.CRAFT_SHOVEL_AMETHYST], 3), this.craft_buttons[J.SHOVEL_AMETHYST].id = J.SHOVEL_AMETHYST, this.craft_buttons[J.SPANNER] = wo(60, 60, 0, sprite[k.CRAFT_SPANNER], 3), this.craft_buttons[J.SPANNER].id = J.SPANNER, this.craft_buttons[J.WATERING_CAN] = wo(60, 60, 0, sprite[k.CRAFT_WATERING_CAN], 3), this.craft_buttons[J.WATERING_CAN].id = J.WATERING_CAN, this.craft_buttons[J.WHEAT_SEED] = wo(60, 60, 0, sprite[k.CRAFT_WHEAT_SEED], 3), this.craft_buttons[J.WHEAT_SEED].id = J.WHEAT_SEED, this.craft_buttons[J.COOKIE] = wo(60, 60, 0, sprite[k.CRAFT_COOKIE], 3), this.craft_buttons[J.COOKIE].id = J.COOKIE, this.craft_buttons[J.WINDMILL] = wo(60, 60, 0, sprite[k.CRAFT_WINDMILL], 3), this.craft_buttons[J.WINDMILL].id = J.WINDMILL, this.craft_buttons[J.SUPER_DIVING_SUIT] = wo(60, 60, 0, sprite[k.CRAFT_SUPER_DIVING_SUIT], 3), this.craft_buttons[J.SUPER_DIVING_SUIT].id = J.SUPER_DIVING_SUIT, this.craft_buttons[J.DIVING_MASK] = wo(60, 60, 0, sprite[k.CRAFT_DIVING_MASK], 3), this.craft_buttons[J.DIVING_MASK].id = J.DIVING_MASK, this.craft_buttons[J.WATERING_CAN_FULL] = wo(60, 60, 0, sprite[k.CRAFT_WATERING_CAN_FULL], 3), this.craft_buttons[J.WATERING_CAN_FULL].id = J.WATERING_CAN_FULL, this.craft_buttons[J.CAKE] = wo(60, 60, 0, sprite[k.CRAFT_CAKE], 3), this.craft_buttons[J.CAKE].id = J.CAKE, this.craft_buttons[J.BREAD] = wo(60, 60, 0, sprite[k.CRAFT_BREAD], 3), this.craft_buttons[J.BREAD].id = J.BREAD, this.craft_buttons[J.FOODFISH_COOKED] = wo(60, 60, 0, sprite[k.CRAFT_FOODFISH_COOKED], 3), this.craft_buttons[J.FOODFISH_COOKED].id = J.FOODFISH_COOKED, this.craft_buttons[J.PLOT] = wo(60, 60, 0, sprite[k.CRAFT_PLOT], 3), this.craft_buttons[J.PLOT].id = J.PLOT, this.craft_buttons[J.BREAD_OVEN] = wo(60, 60, 0, sprite[k.CRAFT_BREAD_OVEN], 3), this.craft_buttons[J.BREAD_OVEN].id = J.BREAD_OVEN, this.craft_buttons[J.SANDWICH] = wo(60, 60, 0, sprite[k.CRAFT_SANDWICH], 3), this.craft_buttons[J.SANDWICH].id = J.SANDWICH, this.craft_buttons[J.DRAGON_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_DRAGON_HELMET], 3), this.craft_buttons[J.DRAGON_HELMET].id = J.DRAGON_HELMET, this.craft_buttons[J.DRAGON_SWORD] = wo(60, 60, 0, sprite[k.INV_DRAGON_SWORD], 3), this.craft_buttons[J.DRAGON_SWORD].id = J.DRAGON_SWORD, this.craft_buttons[J.CROWN_GREEN] = wo(60, 60, 0, sprite[k.CRAFT_CROWN_GREEN], 3), this.craft_buttons[J.CROWN_GREEN].id = J.CROWN_GREEN, this.craft_buttons[J.CROWN_ORANGE] = wo(60, 60, 0, sprite[k.CRAFT_CROWN_ORANGE], 3), this.craft_buttons[J.CROWN_ORANGE].id = J.CROWN_ORANGE, this.craft_buttons[J.CROWN_BLUE] = wo(60, 60, 0, sprite[k.CRAFT_CROWN_BLUE], 3), this.craft_buttons[J.CROWN_BLUE].id = J.CROWN_BLUE, this.craft_buttons[J.HOOD] = wo(60, 60, 0, sprite[k.CRAFT_HOOD], 3), this.craft_buttons[J.HOOD].id = J.HOOD, this.craft_buttons[J.PEASANT] = wo(60, 60, 0, sprite[k.CRAFT_PEASANT], 3), this.craft_buttons[J.PEASANT].id = J.PEASANT, this.craft_buttons[J.WINTER_PEASANT] = wo(60, 60, 0, sprite[k.CRAFT_WINTER_PEASANT], 3), this.craft_buttons[J.WINTER_PEASANT].id = J.WINTER_PEASANT, this.craft_buttons[J.WINTER_HOOD] = wo(60, 60, 0, sprite[k.CRAFT_WINTER_HOOD], 3), this.craft_buttons[J.WINTER_HOOD].id = J.WINTER_HOOD, this.craft_buttons[J.BUCKET_FULL] = wo(60, 60, 0, sprite[k.CRAFT_BUCKET_FULL], 3), this.craft_buttons[J.BUCKET_FULL].id = J.BUCKET_FULL, this.craft_buttons[J.BUCKET_EMPTY] = wo(60, 60, 0, sprite[k.CRAFT_BUCKET_EMPTY], 3), this.craft_buttons[J.BUCKET_EMPTY].id = J.BUCKET_EMPTY, this.craft_buttons[J.WELL] = wo(60, 60, 0, sprite[k.CRAFT_WELL], 3), this.craft_buttons[J.WELL].id = J.WELL, this.craft_buttons[J.SIGN] = wo(60, 60, 0, sprite[k.CRAFT_SIGN], 3), this.craft_buttons[J.SIGN].id = J.SIGN, this.craft_buttons[J.PUMPKIN_SEED] = wo(60, 60, 0, sprite[k.CRAFT_PUMPKIN_SEED], 3), this.craft_buttons[J.PUMPKIN_SEED].id = J.PUMPKIN_SEED, this.craft_buttons[J.GARLIC_SEED] = wo(60, 60, 0, sprite[k.CRAFT_GARLIC_SEED], 3), this.craft_buttons[J.GARLIC_SEED].id = J.GARLIC_SEED, this.craft_buttons[J.ROOF] = wo(60, 60, 0, sprite[k.CRAFT_ROOF], 3), this.craft_buttons[J.ROOF].id = J.ROOF, this.craft_buttons[J.THORNBUSH_SEED] = wo(60, 60, 0, sprite[k.CRAFT_THORNBUSH_SEED], 3), this.craft_buttons[J.THORNBUSH_SEED].id = J.THORNBUSH_SEED, this.craft_buttons[J.TOMATO_SEED] = wo(60, 60, 0, sprite[k.CRAFT_TOMATO_SEED], 3), this.craft_buttons[J.TOMATO_SEED].id = J.TOMATO_SEED, this.craft_buttons[J.CARROT_SEED] = wo(60, 60, 0, sprite[k.CRAFT_CARROT_SEED], 3), this.craft_buttons[J.CARROT_SEED].id = J.CARROT_SEED, this.craft_buttons[J.WATERMELON_SEED] = wo(60, 60, 0, sprite[k.CRAFT_WATERMELON_SEED], 3), this.craft_buttons[J.WATERMELON_SEED].id = J.WATERMELON_SEED, this.craft_buttons[J.ALOE_VERA_SEED] = wo(60, 60, 0, sprite[k.CRAFT_ALOE_VERA_SEED], 3), this.craft_buttons[J.ALOE_VERA_SEED].id = J.ALOE_VERA_SEED, this.craft_buttons[J.WOOD_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_SPEAR], 3), this.craft_buttons[J.WOOD_SPEAR].id = J.WOOD_SPEAR, this.craft_buttons[J.DRAGON_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_DRAGON_SPEAR], 3), this.craft_buttons[J.DRAGON_SPEAR].id = J.DRAGON_SPEAR, this.craft_buttons[J.CRAB_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_CRAB_SPEAR], 3), this.craft_buttons[J.CRAB_SPEAR].id = J.CRAB_SPEAR, this.craft_buttons[J.BED] = wo(60, 60, 0, sprite[k.CRAFT_BED], 3), this.craft_buttons[J.BED].id = J.BED, this.craft_buttons[J.CROWN_CRAB] = wo(60, 60, 0, sprite[k.CRAFT_CROWN_CRAB], 3), this.craft_buttons[J.CROWN_CRAB].id = J.CROWN_CRAB, this.chest_buttons[X.PITCHFORK] = wo(68, 68, 0, sprite[k.CHEST_PITCHFORK], 3), this.chest_buttons[X.PITCHFORK].id = X.PITCHFORK, this.inv_buttons[X.PITCHFORK] = wo(60, 60, 0, sprite[k.INV_PITCHFORK], 3), this.inv_buttons[X.PITCHFORK].id = X.PITCHFORK, this.craft_buttons[J.PITCHFORK] = wo(60, 60, 0, sprite[k.CRAFT_PITCHFORK], 3), this.craft_buttons[J.PITCHFORK].id = J.PITCHFORK, this.chest_buttons[X.PITCHFORK2] = wo(68, 68, 0, sprite[k.CHEST_PITCHFORK2], 3), this.chest_buttons[X.PITCHFORK2].id = X.PITCHFORK2, this.inv_buttons[X.PITCHFORK2] = wo(60, 60, 0, sprite[k.INV_PITCHFORK2], 3), this.inv_buttons[X.PITCHFORK2].id = X.PITCHFORK2, this.craft_buttons[J.PITCHFORK2] = wo(60, 60, 0, sprite[k.CRAFT_PITCHFORK2], 3), this.craft_buttons[J.PITCHFORK2].id = J.PITCHFORK2, this.chest_buttons[X.MACHETE] = wo(68, 68, 0, sprite[k.CHEST_MACHETE], 3), this.chest_buttons[X.MACHETE].id = X.MACHETE, this.inv_buttons[X.MACHETE] = wo(60, 60, 0, sprite[k.INV_MACHETE], 3), this.inv_buttons[X.MACHETE].id = X.MACHETE, this.craft_buttons[J.MACHETE] = wo(60, 60, 0, sprite[k.CRAFT_MACHETE], 3), this.craft_buttons[J.MACHETE].id = J.MACHETE, this.chest_buttons[X.PILOT_HELMET] = wo(68, 68, 0, sprite[k.CHEST_PILOT_HELMET], 3), this.chest_buttons[X.PILOT_HELMET].id = X.PILOT_HELMET, this.inv_buttons[X.PILOT_HELMET] = wo(60, 60, 0, sprite[k.INV_PILOT_HELMET], 3), this.inv_buttons[X.PILOT_HELMET].id = X.PILOT_HELMET, this.craft_buttons[J.PILOT_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_PILOT_HELMET], 3), this.craft_buttons[J.PILOT_HELMET].id = J.PILOT_HELMET, this.chest_buttons[X.PITCHFORK_PART] = wo(68, 68, 0, sprite[k.CHEST_PITCHFORK_PART], 3), this.chest_buttons[X.PITCHFORK_PART].id = X.PITCHFORK_PART, this.inv_buttons[X.PITCHFORK_PART] = wo(60, 60, 0, sprite[k.INV_PITCHFORK_PART], 3), this.inv_buttons[X.PITCHFORK_PART].id = X.PITCHFORK_PART, this.chest_buttons[X.SANDWORM_JUICE] = wo(68, 68, 0, sprite[k.CHEST_SANDWORM_JUICE], 3), this.chest_buttons[X.SANDWORM_JUICE].id = X.SANDWORM_JUICE, this.inv_buttons[X.SANDWORM_JUICE] = wo(60, 60, 0, sprite[k.INV_SANDWORM_JUICE], 3), this.inv_buttons[X.SANDWORM_JUICE].id = X.SANDWORM_JUICE, this.chest_buttons[X.PILOT_GLASSES] = wo(68, 68, 0, sprite[k.CHEST_PILOT_GLASSES], 3), this.chest_buttons[X.PILOT_GLASSES].id = X.PILOT_GLASSES, this.inv_buttons[X.PILOT_GLASSES] = wo(60, 60, 0, sprite[k.INV_PILOT_GLASSES], 3), this.inv_buttons[X.PILOT_GLASSES].id = X.PILOT_GLASSES, this.chest_buttons[X.EMERALD_MACHINE] = wo(68, 68, 0, sprite[k.CHEST_EMERALD_MACHINE], 3), this.chest_buttons[X.EMERALD_MACHINE].id = X.EMERALD_MACHINE, this.inv_buttons[X.EMERALD_MACHINE] = wo(60, 60, 0, sprite[k.INV_EMERALD_MACHINE], 3), this.inv_buttons[X.EMERALD_MACHINE].id = X.EMERALD_MACHINE, this.craft_buttons[J.EMERALD_MACHINE] = wo(60, 60, 0, sprite[k.CRAFT_EMERALD_MACHINE], 3), this.craft_buttons[J.EMERALD_MACHINE].id = J.EMERALD_MACHINE, this.chest_buttons[X.WOOD_DOOR_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_WOOD_DOOR_SPIKE], 3), this.chest_buttons[X.WOOD_DOOR_SPIKE].id = X.WOOD_DOOR_SPIKE, this.inv_buttons[X.WOOD_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.INV_WOOD_DOOR_SPIKE], 3), this.inv_buttons[X.WOOD_DOOR_SPIKE].id = X.WOOD_DOOR_SPIKE, this.craft_buttons[J.WOOD_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_WOOD_DOOR_SPIKE], 3), this.craft_buttons[J.WOOD_DOOR_SPIKE].id = J.WOOD_DOOR_SPIKE, this.chest_buttons[X.STONE_DOOR_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_STONE_DOOR_SPIKE], 3), this.chest_buttons[X.STONE_DOOR_SPIKE].id = X.STONE_DOOR_SPIKE, this.inv_buttons[X.STONE_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.INV_STONE_DOOR_SPIKE], 3), this.inv_buttons[X.STONE_DOOR_SPIKE].id = X.STONE_DOOR_SPIKE, this.craft_buttons[J.STONE_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_STONE_DOOR_SPIKE], 3), this.craft_buttons[J.STONE_DOOR_SPIKE].id = J.STONE_DOOR_SPIKE, this.chest_buttons[X.GOLD_DOOR_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_GOLD_DOOR_SPIKE], 3), this.chest_buttons[X.GOLD_DOOR_SPIKE].id = X.GOLD_DOOR_SPIKE, this.inv_buttons[X.GOLD_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.INV_GOLD_DOOR_SPIKE], 3), this.inv_buttons[X.GOLD_DOOR_SPIKE].id = X.GOLD_DOOR_SPIKE, this.craft_buttons[J.GOLD_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_GOLD_DOOR_SPIKE], 3), this.craft_buttons[J.GOLD_DOOR_SPIKE].id = J.GOLD_DOOR_SPIKE, this.chest_buttons[X.DIAMOND_DOOR_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_DOOR_SPIKE], 3), this.chest_buttons[X.DIAMOND_DOOR_SPIKE].id = X.DIAMOND_DOOR_SPIKE, this.inv_buttons[X.DIAMOND_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.INV_DIAMOND_DOOR_SPIKE], 3), this.inv_buttons[X.DIAMOND_DOOR_SPIKE].id = X.DIAMOND_DOOR_SPIKE, this.craft_buttons[J.DIAMOND_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_DOOR_SPIKE], 3), this.craft_buttons[J.DIAMOND_DOOR_SPIKE].id = J.DIAMOND_DOOR_SPIKE, this.chest_buttons[X.AMETHYST_DOOR_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_DOOR_SPIKE], 3), this.chest_buttons[X.AMETHYST_DOOR_SPIKE].id = X.AMETHYST_DOOR_SPIKE;
        this.inv_buttons[X.AMETHYST_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.INV_AMETHYST_DOOR_SPIKE], 3), this.inv_buttons[X.AMETHYST_DOOR_SPIKE].id = X.AMETHYST_DOOR_SPIKE, this.craft_buttons[J.AMETHYST_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_DOOR_SPIKE], 3), this.craft_buttons[J.AMETHYST_DOOR_SPIKE].id = J.AMETHYST_DOOR_SPIKE, this.chest_buttons[X.REIDITE_DOOR_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_DOOR_SPIKE], 3), this.chest_buttons[X.REIDITE_DOOR_SPIKE].id = X.REIDITE_DOOR_SPIKE, this.inv_buttons[X.REIDITE_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.INV_REIDITE_DOOR_SPIKE], 3), this.inv_buttons[X.REIDITE_DOOR_SPIKE].id = X.REIDITE_DOOR_SPIKE, this.craft_buttons[J.REIDITE_DOOR_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_DOOR_SPIKE], 3), this.craft_buttons[J.REIDITE_DOOR_SPIKE].id = J.REIDITE_DOOR_SPIKE, this.chest_buttons[X.REIDITE_WALL] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_WALL], 3), this.chest_buttons[X.REIDITE_WALL].id = X.REIDITE_WALL, this.inv_buttons[X.REIDITE_WALL] = wo(60, 60, 0, sprite[k.INV_REIDITE_WALL], 3), this.inv_buttons[X.REIDITE_WALL].id = X.REIDITE_WALL, this.craft_buttons[J.REIDITE_WALL] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_WALL], 3), this.craft_buttons[J.REIDITE_WALL].id = J.REIDITE_WALL, this.chest_buttons[X.REIDITE_SPIKE] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_SPIKE], 3), this.chest_buttons[X.REIDITE_SPIKE].id = X.REIDITE_SPIKE, this.inv_buttons[X.REIDITE_SPIKE] = wo(60, 60, 0, sprite[k.INV_REIDITE_SPIKE], 3), this.inv_buttons[X.REIDITE_SPIKE].id = X.REIDITE_SPIKE, this.craft_buttons[J.REIDITE_SPIKE] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_SPIKE], 3), this.craft_buttons[J.REIDITE_SPIKE].id = J.REIDITE_SPIKE, this.chest_buttons[X.REIDITE_DOOR] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_DOOR], 3), this.chest_buttons[X.REIDITE_DOOR].id = X.REIDITE_DOOR, this.inv_buttons[X.REIDITE_DOOR] = wo(60, 60, 0, sprite[k.INV_REIDITE_DOOR], 3), this.inv_buttons[X.REIDITE_DOOR].id = X.REIDITE_DOOR, this.craft_buttons[J.REIDITE_DOOR] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_DOOR], 3), this.craft_buttons[J.REIDITE_DOOR].id = J.REIDITE_DOOR, this.chest_buttons[X.EXTRACTOR_MACHINE_STONE] = wo(68, 68, 0, sprite[k.CHEST_EXTRACTOR_MACHINE_STONE], 3), this.chest_buttons[X.EXTRACTOR_MACHINE_STONE].id = X.EXTRACTOR_MACHINE_STONE, this.inv_buttons[X.EXTRACTOR_MACHINE_STONE] = wo(60, 60, 0, sprite[k.INV_EXTRACTOR_MACHINE_STONE], 3), this.inv_buttons[X.EXTRACTOR_MACHINE_STONE].id = X.EXTRACTOR_MACHINE_STONE, this.craft_buttons[J.EXTRACTOR_MACHINE_STONE] = wo(60, 60, 0, sprite[k.CRAFT_EXTRACTOR_MACHINE_STONE], 3), this.craft_buttons[J.EXTRACTOR_MACHINE_STONE].id = J.EXTRACTOR_MACHINE_STONE, this.chest_buttons[X.EXTRACTOR_MACHINE_GOLD] = wo(68, 68, 0, sprite[k.CHEST_EXTRACTOR_MACHINE_GOLD], 3), this.chest_buttons[X.EXTRACTOR_MACHINE_GOLD].id = X.EXTRACTOR_MACHINE_GOLD, this.inv_buttons[X.EXTRACTOR_MACHINE_GOLD] = wo(60, 60, 0, sprite[k.INV_EXTRACTOR_MACHINE_GOLD], 3), this.inv_buttons[X.EXTRACTOR_MACHINE_GOLD].id = X.EXTRACTOR_MACHINE_GOLD, this.craft_buttons[J.EXTRACTOR_MACHINE_GOLD] = wo(60, 60, 0, sprite[k.CRAFT_EXTRACTOR_MACHINE_GOLD], 3), this.craft_buttons[J.EXTRACTOR_MACHINE_GOLD].id = J.EXTRACTOR_MACHINE_GOLD, this.chest_buttons[X.EXTRACTOR_MACHINE_DIAMOND] = wo(68, 68, 0, sprite[k.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3), this.chest_buttons[X.EXTRACTOR_MACHINE_DIAMOND].id = X.EXTRACTOR_MACHINE_DIAMOND, this.inv_buttons[X.EXTRACTOR_MACHINE_DIAMOND] = wo(60, 60, 0, sprite[k.INV_EXTRACTOR_MACHINE_DIAMOND], 3), this.inv_buttons[X.EXTRACTOR_MACHINE_DIAMOND].id = X.EXTRACTOR_MACHINE_DIAMOND, this.craft_buttons[J.EXTRACTOR_MACHINE_DIAMOND] = wo(60, 60, 0, sprite[k.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3), this.craft_buttons[J.EXTRACTOR_MACHINE_DIAMOND].id = J.EXTRACTOR_MACHINE_DIAMOND, this.chest_buttons[X.EXTRACTOR_MACHINE_AMETHYST] = wo(68, 68, 0, sprite[k.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3), this.chest_buttons[X.EXTRACTOR_MACHINE_AMETHYST].id = X.EXTRACTOR_MACHINE_AMETHYST, this.inv_buttons[X.EXTRACTOR_MACHINE_AMETHYST] = wo(60, 60, 0, sprite[k.INV_EXTRACTOR_MACHINE_AMETHYST], 3), this.inv_buttons[X.EXTRACTOR_MACHINE_AMETHYST].id = X.EXTRACTOR_MACHINE_AMETHYST, this.craft_buttons[J.EXTRACTOR_MACHINE_AMETHYST] = wo(60, 60, 0, sprite[k.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3), this.craft_buttons[J.EXTRACTOR_MACHINE_AMETHYST].id = J.EXTRACTOR_MACHINE_AMETHYST, this.chest_buttons[X.EXTRACTOR_MACHINE_REIDITE] = wo(68, 68, 0, sprite[k.CHEST_EXTRACTOR_MACHINE_REIDITE], 3), this.chest_buttons[X.EXTRACTOR_MACHINE_REIDITE].id = X.EXTRACTOR_MACHINE_REIDITE, this.inv_buttons[X.EXTRACTOR_MACHINE_REIDITE] = wo(60, 60, 0, sprite[k.INV_EXTRACTOR_MACHINE_REIDITE], 3), this.inv_buttons[X.EXTRACTOR_MACHINE_REIDITE].id = X.EXTRACTOR_MACHINE_REIDITE, this.craft_buttons[J.EXTRACTOR_MACHINE_REIDITE] = wo(60, 60, 0, sprite[k.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3), this.craft_buttons[J.EXTRACTOR_MACHINE_REIDITE].id = J.EXTRACTOR_MACHINE_REIDITE, this.chest_buttons[X.FLAME] = wo(68, 68, 0, sprite[k.CHEST_FLAME], 3), this.chest_buttons[X.FLAME].id = X.FLAME, this.inv_buttons[X.FLAME] = wo(60, 60, 0, sprite[k.INV_FLAME], 3), this.inv_buttons[X.FLAME].id = X.FLAME, this.inv_buttons[X.FLAME].info.img[2] = this.inv_buttons[X.FLAME].info.img[0], this.chest_buttons[X.LAVA_HEART] = wo(68, 68, 0, sprite[k.CHEST_LAVA_HEART], 3), this.chest_buttons[X.LAVA_HEART].id = X.LAVA_HEART, this.inv_buttons[X.LAVA_HEART] = wo(60, 60, 0, sprite[k.INV_LAVA_HEART], 3), this.inv_buttons[X.LAVA_HEART].id = X.LAVA_HEART, this.inv_buttons[X.LAVA_HEART].info.img[2] = this.inv_buttons[X.LAVA_HEART].info.img[0], this.chest_buttons[X.REIDITE] = wo(68, 68, 0, sprite[k.CHEST_REIDITE], 3), this.chest_buttons[X.REIDITE].id = X.REIDITE, this.inv_buttons[X.REIDITE] = wo(60, 60, 0, sprite[k.INV_REIDITE], 3), this.inv_buttons[X.REIDITE].id = X.REIDITE, this.inv_buttons[X.REIDITE].info.img[2] = this.inv_buttons[X.REIDITE].info.img[0], this.chest_buttons[X.REIDITE_SWORD] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_SWORD], 3), this.chest_buttons[X.REIDITE_SWORD].id = X.REIDITE_SWORD, this.inv_buttons[X.REIDITE_SWORD] = wo(60, 60, 0, sprite[k.INV_REIDITE_SWORD], 3), this.inv_buttons[X.REIDITE_SWORD].id = X.REIDITE_SWORD, this.craft_buttons[J.REIDITE_SWORD] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_SWORD], 3), this.craft_buttons[J.REIDITE_SWORD].id = J.REIDITE_SWORD, this.chest_buttons[X.DIAMOND_PROTECTION] = wo(68, 68, 0, sprite[k.CHEST_DIAMOND_PROTECTION], 3), this.chest_buttons[X.DIAMOND_PROTECTION].id = X.DIAMOND_PROTECTION, this.inv_buttons[X.DIAMOND_PROTECTION] = wo(60, 60, 0, sprite[k.INV_DIAMOND_PROTECTION], 3), this.inv_buttons[X.DIAMOND_PROTECTION].id = X.DIAMOND_PROTECTION, this.craft_buttons[J.DIAMOND_PROTECTION] = wo(60, 60, 0, sprite[k.CRAFT_DIAMOND_PROTECTION], 3), this.craft_buttons[J.DIAMOND_PROTECTION].id = J.DIAMOND_PROTECTION, this.chest_buttons[X.AMETHYST_PROTECTION] = wo(68, 68, 0, sprite[k.CHEST_AMETHYST_PROTECTION], 3), this.chest_buttons[X.AMETHYST_PROTECTION].id = X.AMETHYST_PROTECTION, this.inv_buttons[X.AMETHYST_PROTECTION] = wo(60, 60, 0, sprite[k.INV_AMETHYST_PROTECTION], 3), this.inv_buttons[X.AMETHYST_PROTECTION].id = X.AMETHYST_PROTECTION, this.craft_buttons[J.AMETHYST_PROTECTION] = wo(60, 60, 0, sprite[k.CRAFT_AMETHYST_PROTECTION], 3), this.craft_buttons[J.AMETHYST_PROTECTION].id = J.AMETHYST_PROTECTION, this.chest_buttons[X.REIDITE_PROTECTION] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_PROTECTION], 3), this.chest_buttons[X.REIDITE_PROTECTION].id = X.REIDITE_PROTECTION, this.inv_buttons[X.REIDITE_PROTECTION] = wo(60, 60, 0, sprite[k.INV_REIDITE_PROTECTION], 3), this.inv_buttons[X.REIDITE_PROTECTION].id = X.REIDITE_PROTECTION, this.craft_buttons[J.REIDITE_PROTECTION] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_PROTECTION], 3), this.craft_buttons[J.REIDITE_PROTECTION].id = J.REIDITE_PROTECTION, this.chest_buttons[X.LAVA_HELMET] = wo(68, 68, 0, sprite[k.CHEST_LAVA_HELMET], 3), this.chest_buttons[X.LAVA_HELMET].id = X.LAVA_HELMET, this.inv_buttons[X.LAVA_HELMET] = wo(60, 60, 0, sprite[k.INV_LAVA_HELMET], 3), this.inv_buttons[X.LAVA_HELMET].id = X.LAVA_HELMET, this.craft_buttons[J.LAVA_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_LAVA_HELMET], 3), this.craft_buttons[J.LAVA_HELMET].id = J.LAVA_HELMET, this.chest_buttons[X.WITCH] = wo(68, 68, 0, sprite[k.CHEST_WITCH], 3), this.chest_buttons[X.WITCH].id = X.WITCH, this.inv_buttons[X.WITCH] = wo(60, 60, 0, sprite[k.INV_WITCH], 3), this.inv_buttons[X.WITCH].id = X.WITCH, this.craft_buttons[J.WITCH] = wo(60, 60, 0, sprite[k.CRAFT_WITCH], 3), this.craft_buttons[J.WITCH].id = J.WITCH, this.chest_buttons[X.WAND1] = wo(68, 68, 0, sprite[k.CHEST_WAND1], 3), this.chest_buttons[X.WAND1].id = X.WAND1, this.inv_buttons[X.WAND1] = wo(60, 60, 0, sprite[k.INV_WAND1], 3), this.inv_buttons[X.WAND1].id = X.WAND1, this.craft_buttons[J.WAND1] = wo(60, 60, 0, sprite[k.CRAFT_WAND1], 3), this.craft_buttons[J.WAND1].id = J.WAND1, this.chest_buttons[X.WAND2] = wo(68, 68, 0, sprite[k.CHEST_WAND2], 3), this.chest_buttons[X.WAND2].id = X.WAND2, this.inv_buttons[X.WAND2] = wo(60, 60, 0, sprite[k.INV_WAND2], 3), this.inv_buttons[X.WAND2].id = X.WAND2, this.craft_buttons[J.WAND2] = wo(60, 60, 0, sprite[k.CRAFT_WAND2], 3), this.craft_buttons[J.WAND2].id = J.WAND2, this.chest_buttons[X.NIMBUS] = wo(68, 68, 0, sprite[k.CHEST_NIMBUS], 3), this.chest_buttons[X.NIMBUS].id = X.NIMBUS, this.inv_buttons[X.NIMBUS] = wo(60, 60, 0, sprite[k.INV_NIMBUS], 3), this.inv_buttons[X.NIMBUS].id = X.NIMBUS, this.craft_buttons[J.NIMBUS] = wo(60, 60, 0, sprite[k.CRAFT_NIMBUS], 3), this.craft_buttons[J.NIMBUS].id = J.NIMBUS, this.chest_buttons[X.FIREFLY] = wo(68, 68, 0, sprite[k.CHEST_FIREFLY], 3), this.chest_buttons[X.FIREFLY].id = X.FIREFLY, this.inv_buttons[X.FIREFLY] = wo(60, 60, 0, sprite[k.INV_FIREFLY], 3), this.inv_buttons[X.FIREFLY].id = X.FIREFLY, this.craft_buttons[J.FIREFLY] = wo(60, 60, 0, sprite[k.CRAFT_FIREFLY], 3), this.craft_buttons[J.FIREFLY].id = J.FIREFLY, this.chest_buttons[X.REIDITE_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_SPEAR], 3), this.chest_buttons[X.REIDITE_SPEAR].id = X.REIDITE_SPEAR, this.inv_buttons[X.REIDITE_SPEAR] = wo(60, 60, 0, sprite[k.INV_REIDITE_SPEAR], 3), this.inv_buttons[X.REIDITE_SPEAR].id = X.REIDITE_SPEAR, this.craft_buttons[J.REIDITE_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_SPEAR], 3), this.craft_buttons[J.REIDITE_SPEAR].id = J.REIDITE_SPEAR, this.chest_buttons[X.REIDITE_HELMET] = wo(68, 68, 0, sprite[k.CHEST_REIDITE_HELMET], 3), this.chest_buttons[X.REIDITE_HELMET].id = X.REIDITE_HELMET, this.inv_buttons[X.REIDITE_HELMET] = wo(60, 60, 0, sprite[k.INV_REIDITE_HELMET], 3), this.inv_buttons[X.REIDITE_HELMET].id = X.REIDITE_HELMET, this.craft_buttons[J.REIDITE_HELMET] = wo(60, 60, 0, sprite[k.CRAFT_REIDITE_HELMET], 3), this.craft_buttons[J.REIDITE_HELMET].id = J.REIDITE_HELMET, this.chest_buttons[X.LAVA_SPEAR] = wo(68, 68, 0, sprite[k.CHEST_LAVA_SPEAR], 3), this.chest_buttons[X.LAVA_SPEAR].id = X.LAVA_SPEAR, this.inv_buttons[X.LAVA_SPEAR] = wo(60, 60, 0, sprite[k.INV_LAVA_SPEAR], 3), this.inv_buttons[X.LAVA_SPEAR].id = X.LAVA_SPEAR, this.craft_buttons[J.LAVA_SPEAR] = wo(60, 60, 0, sprite[k.CRAFT_LAVA_SPEAR], 3), this.craft_buttons[J.LAVA_SPEAR].id = J.LAVA_SPEAR, this.chest_buttons[X.LAVA_SWORD] = wo(68, 68, 0, sprite[k.CHEST_LAVA_SWORD], 3), this.chest_buttons[X.LAVA_SWORD].id = X.LAVA_SWORD, this.inv_buttons[X.LAVA_SWORD] = wo(60, 60, 0, sprite[k.INV_LAVA_SWORD], 3), this.inv_buttons[X.LAVA_SWORD].id = X.LAVA_SWORD, this.craft_buttons[J.LAVA_SWORD] = wo(60, 60, 0, sprite[k.CRAFT_LAVA_SWORD], 3), this.craft_buttons[J.LAVA_SWORD].id = J.LAVA_SWORD, this.chest_buttons[X.LAVA_ORB] = wo(68, 68, 0, sprite[k.CHEST_LAVA_ORB], 3), this.chest_buttons[X.LAVA_ORB].id = X.LAVA_ORB, this.inv_buttons[X.LAVA_ORB] = wo(60, 60, 0, sprite[k.INV_LAVA_ORB], 3), this.inv_buttons[X.LAVA_ORB].id = X.LAVA_ORB, this.chest_buttons[X.EGG0] = wo(68, 68, 0, sprite[k.CHEST_EGG0], 3), this.chest_buttons[X.EGG0].id = X.EGG0, this.inv_buttons[X.EGG0] = wo(60, 60, 0, sprite[k.INV_EGG0], 3), this.inv_buttons[X.EGG0].id = X.EGG0, this.chest_buttons[X.EGG1] = wo(68, 68, 0, sprite[k.CHEST_EGG1], 3), this.chest_buttons[X.EGG1].id = X.EGG1, this.inv_buttons[X.EGG1] = wo(60, 60, 0, sprite[k.INV_EGG1], 3), this.inv_buttons[X.EGG1].id = X.EGG1, this.chest_buttons[X.EGG2] = wo(68, 68, 0, sprite[k.CHEST_EGG2], 3), this.chest_buttons[X.EGG2].id = X.EGG2, this.inv_buttons[X.EGG2] = wo(60, 60, 0, sprite[k.INV_EGG2], 3), this.inv_buttons[X.EGG2].id = X.EGG2, this.chest_buttons[X.EGG3] = wo(68, 68, 0, sprite[k.CHEST_EGG3], 3), this.chest_buttons[X.EGG3].id = X.EGG3, this.inv_buttons[X.EGG3] = wo(60, 60, 0, sprite[k.INV_EGG3], 3), this.inv_buttons[X.EGG3].id = X.EGG3, this.chest_buttons[X.EGG4] = wo(68, 68, 0, sprite[k.CHEST_EGG4], 3), this.chest_buttons[X.EGG4].id = X.EGG4, this.inv_buttons[X.EGG4] = wo(60, 60, 0, sprite[k.INV_EGG4], 3), this.inv_buttons[X.EGG4].id = X.EGG4, this.update_craft_buttons = function () {
            for (var e = d_.craft.can_craft, i = 10, t = 10, r = 0; r < e.length; r++) r > 0 && !(r % 4) && (i += e[0].info.width + 10, t = 10), e[r].info.translate.x = i, e[r].info.translate.y = t, t += 10 + e[r].info.height
        }, this.update_chest_buttons = function () {
            for (var e = Math.floor(Math.floor((3 + d_.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35), i = 0; i < this.chest_buttons.length; i++) this.chest_buttons[i] && (this.chest_buttons[i].info.translate.x = e, this.chest_buttons[i].info.translate.y = 22);
            this.chest_lockpick.info.translate.x = e + 17, this.chest_lockpick.info.translate.y = 22 + sprite[k.CHEST_SLOT].height, this.chest_locked.info.translate.x = e + 17, this.chest_locked.info.translate.y = 30, this.chest_padlock.info.translate.x = e + 17, this.chest_padlock.info.translate.y = 22 + sprite[k.CHEST_SLOT].height
        }, this.update_team_buttons = function () {
            for (var e = Math.floor((u - sprite[k.TEAM_BUTTON][0].width) / 2), i = 0; i < this.team_buttons.length; i++) this.team_buttons[i].button.info.translate.x = e, this.team_buttons[i].button.info.translate.y = -13
        }, this.update_bread_oven_button = function () {
            var e = 12 + Math.floor(Math.floor((3 + d_.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
            this.bread_oven_wood_button.info.translate.x = e, this.bread_oven_wood_button.info.translate.y = 33, this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x, this.bread_oven_flour_button.info.translate.y = 137, this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x, this.bread_oven_bread_button.info.translate.y = 240
        }, this.update_extractor_button = function () {
            var e = 12 + Math.floor(Math.floor((3 + d_.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
            this.extractor_wood_button.info.translate.x = e, this.extractor_wood_button.info.translate.y = 36, e += 83, this.extractor_stone_button.info.translate.x = e, this.extractor_stone_button.info.translate.y = 36, this.extractor_gold_button.info.translate.x = e, this.extractor_gold_button.info.translate.y = 36, this.extractor_diamond_button.info.translate.x = e, this.extractor_diamond_button.info.translate.y = 36, this.extractor_amethyst_button.info.translate.x = e, this.extractor_amethyst_button.info.translate.y = 36, this.extractor_reidite_button.info.translate.x = e, this.extractor_reidite_button.info.translate.y = 36
        }, this.update_windmill_button = function () {
            var e = 12 + Math.floor(Math.floor((3 + d_.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
            this.windmill_wheat_button.info.translate.x = e, this.windmill_wheat_button.info.translate.y = 36, e += 83, this.windmill_flour_button.info.translate.x = e, this.windmill_flour_button.info.translate.y = 36
        }, this.update_furnace_button = function () {
            var e = Math.floor(Math.floor((3 + d_.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
            this.furnace_button.info.translate.x = e, this.furnace_button.info.translate.y = 22
        }, this.update_inv_buttons = function () {
            var e = d_.inv.can_select;
            if (e.length > 0) var i = Math.floor((u - (e[0].info.width + 5) * d_.inv.max) / 2);
            for (var t = 0; t < e.length; t++) e[t].info.translate.x = i + (e[t].info.width + 5) * t, e[t].info.translate.y = O - e[t].info.width - 10, this.plus_buttons[e[t].id].info.translate.x = e[t].info.translate.x + 13, this.plus_buttons[e[t].id].info.translate.y = e[t].info.translate.y - this.plus_buttons[e[t].id].info.img[0].height - 6
        };
        var s, E = 0,
            T = function () {
                if (t.update(), 30 == ++E) return t.add_event_listener(), void t.update();
                window.setTimeout(T, 33)
            };
        this.quit = function (e) {
            d_.chat.open && d_.chat.quit(), d_.terminal.open && d_.terminal.quit(), document.getElementById("team_box").style.display = "none", t.market.style.display = "none", t.market.open = !1, t.sign.style.display = "none", t.sign.open = !1, document.getElementById("shop_starterkit").style.display = "none", document.getElementById("home_craft").style.display = "none", document.getElementById("recipe_craft").style.display = "none", t.craft_list.open = !1, document.getElementById("option_in_game").style.display = "none", t.options.open = !1, document.getElementById("sure_delete").style.display = "none", t.safe_delete.open = !1, document.getElementById("cancel_sure_delete").style.display = "none", t.safe_cancel.open = !1, document.getElementById("chronoquest").style.display = "none", t.quests.open = !1, s = e, t.remove_event_listener(), t.can.style.cursor = t.cursor0, u_.quit(), A = -1, d()
        };
        var A = -1,
            d = function () {
                if (t.update(), 30 == ++A) return t.stop(), void s();
                window.setTimeout(d, 33)
            };
        this.is_run = !1, this.stop = function () {
            this.is_run = !1
        }, this.run = function () {
            E_.change_ground(), t.is_run = !0, A = -1, E = 0, T()
        }, this.update = function () {
            this.leaderboard.translate.x = u - this.leaderboard.img.width - 10, this.leaderboard.translate.y = 5, A_.clock.translate.x = this.leaderboard.translate.x - sprite[k.CLOCK][0].width - 85, A_.clock.translate.y = 10, this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[k.RECIPE_BUTTON][0].width - 10, this.craft_list.button.info.translate.y = 10, this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[k.QUEST_BUTTON][0].width - 20, this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[k.RECIPE_BUTTON][0].height + 5, this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[k.OPTION_BUTTON][0].width - 20, this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[k.OPTION_BUTTON][0].height + 18, this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[k.OPTION_BUTTON][0].width - 20, this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[k.SOUND_BUTTON_OFF][0].height, this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[k.OPTION_BUTTON][0].width - 20, this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[k.SOUND_BUTTON_OFF][0].height, this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[k.MARKET_BUTTON][0].width - 20, this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[k.MARKET_BUTTON][0].height, d_.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85, d_.auto_feed.translate.y = 100, d_.show_spectators.translate.x = this.leaderboard.translate.x - sprite[k.SHOW_SPECTATORS].width - 85, d_.show_spectators.translate.y = d_.auto_feed.translate.y + 10 + sprite[k.AUTO_FEED].height, this.minimap.translate.y = O - 3 - 193, this.minimap.translate.x = u - 3 - 193, this.gauges.translate.x = 5, this.gauges.translate.y = O - this.gauges.img.height - 5, this.shop.button.info.translate.x = R - 45.5, this.shop.button.info.translate.y = 50, this.update_craft_buttons(), this.update_inv_buttons(), this.update_chest_buttons(), this.update_furnace_button(), this.update_windmill_button(), this.update_extractor_button(), this.update_bread_oven_button(), this.update_team_buttons(), this.sign.update_button(), On(), d_.chat.update(), d_.terminal.update(), this.team_box.update(), this.craft_list.home.update(), this.craft_list.list.update(), this.safe_delete.update(), this.safe_cancel.update(), this.quests.update(), this.shop.update(), this.options.update(), this.market.update(), this.sign.update();
            var e = 0;
            if (30 != E) e = 1500 / (E + 1) - 50;
            if (-1 != A) e = -(1500 / (30 - A + 1) - 48);
            this.shop.button.info.translate.y -= e > 0 ? e : -e, this.leaderboard.translate.y -= e > 0 ? e : -e, d_.auto_feed.translate.y -= e > 0 ? e : -e, d_.show_spectators.translate.y -= e > 0 ? e : -e, this.craft_list.button.info.translate.y -= e > 0 ? e : -e, this.quests.button.info.translate.y -= e > 0 ? e : -e, this.options.button.info.translate.y -= e > 0 ? e : -e, this.market.button.info.translate.y -= e > 0 ? e : -e, this.audio.button_on.info.translate.y -= e > 0 ? e : -e, this.audio.button_off.info.translate.y -= e > 0 ? e : -e, A_.clock.translate.y -= e > 0 ? e : -e, this.gauges.translate.y -= e < 0 ? e : -e, this.minimap.translate.y -= e < 0 ? e : -e
        }, this.draw_UI = function () {
            d_.ghost.enabled || !this.show_ui || d_.zombie || Gn(), Mn(),
                function () {
                    for (var e = A_.units[ITEMS.PLAYERS], i = 0; i < e.length; i++) e[i].draw_text()
                }(), this.show_ui && (Cn(), 1 === this.show_recipe_book && this.craft_list.button.draw(i), A_.mode !== qo.MODE_ZOMBIES && A_.mode !== qo.MODE_LEGACY && A_.mode !== qo.MODE_BR && 1 === this.show_quest && this.quests.button.draw(i), this.options.button.draw(i), 1 === this.show_market && this.market.button.draw(i), u_.run ? this.audio.button_on.draw(i) : this.audio.button_off.draw(i), Dn(), Nn(), this.gauges.draw(), vn(), mn(), pn(), bn(), Ln(), ln(), hn(), function () {
                    if (!(d_.chest.open || d_.furnace.open || d_.windmill.open || d_.bread_oven.open || d_.extractor.open)) {
                        d_.well.open = !1;
                        var e = A_.fast_units[d_.uid],
                            i = qo.DIST_WELL;
                        if (e)
                            for (var t = 0; t < A_.units[ITEMS.WELL].length; t++) {
                                var r = A_.units[ITEMS.WELL][t],
                                    n = _.dist(r, e);
                                n < i && (i = n, d_.well.open = !0, d_.well.pid = r.pid, d_.well.iid = r.id)
                            }
                    }
                }(), In(), dn(), An(), Tn(), On(), sn()), d_.ghost.enabled && un(), Rn(), this.show_ui && 1 === this.show_clock && Sn(), d_.welcome.draw(), d_.alert.draw("#FFF", "#000"), this.show_ui && (d_.ghost.draw(), d_.shop.draw(), d_.inv.drag.draw(l_.pos.x, l_.pos.y)), cn()
        }, this.update_scene = function () {
            d_.cam.update(), d_.gauges.update(), !d_.reconnect.enabled && d_.alive && (d_.control.update(), d_.auto_feed.update()), A_.update(), this.quests.update_chrono()
        }, this.draw_scene = function () {
            fo()
        }, this.update_connection = function () {
            try {
                E_.check_state(), E_.check_pong(), E_.try_ping(), E_.update_cam()
            } catch (e) {
                console.log("[Famishs/Connection] Connection is lost , restoring session"), E_.lost()
            }
        }, this.draw = function () {
            if (!d_.reconnect.enabled && d_.alive && this.update_connection(), u_.scheduler(), this.update_scene(), 1 !== window.antiCheat.isDetected) this.draw_scene(), this.draw_UI();
            else {
                var e = IMAGES.CHEATING_BOX;
                on(i, e, R - e.width / 4, c - e.height / 4, e.width / 2, e.height / 2)
            }
        }, this.trigger_keyup = function (e) {

            e.code === HackSettings.AutoSpike.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.enabled = !1)
            e.code === HackSettings.SwordInChest.key && !user.chat.open && !user.terminal.open && (HackSettings.SwordInChest.enabled = !1)


            if (d_.chat.open && 27 === e.keyCode) d_.chat.quit();
            else if (d_.terminal.open && 27 === e.keyCode) d_.terminal.quit();
            else if (d_.chat.open || d_.terminal.open || 79 != e.keyCode || -1 != A) {
                if (13 == e.keyCode && -1 == A) d_.terminal.open ? d_.terminal._send() : d_.chat.run();
                else if (!d_.chat.open && !d_.terminal.open)
                    if (82 === e.keyCode) d_.auto_feed.invert();
                    else if (80 !== e.keyCode || A_.mode !== qo.MODE_HUNGER_GAMES || d_.spectator)
                    if (e.keyCode >= 49 && e.keyCode <= 57) {
                        if (d_.craft.id < 0) {
                            var i = e.keyCode - 49,
                                t = d_.inv.can_select[i];
                            t && E_.select_inv(t.id, i)
                        }
                    } else 89 == e.keyCode ? d_.bigmap = !d_.bigmap : 71 == e.keyCode && d_.craft.change_mode();
                else d_.show_spectators.invert()
            } else d_.terminal._open();
            O_.up(e)
        }, this.trigger_keydown = function (e) {

            let myPlayer = world.fast_units[user.uid]
            e.code === HackSettings.AutoSpike.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.enabled = !0)
            e.code === HackSettings.SwordInChest.key && !user.chat.open && !user.terminal.open && (HackSettings.SwordInChest.enabled = !0)
            e.code === HackSettings.AutoSteal.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSteal.enabled = !HackSettings.AutoSteal.enabled)


            if (client.socket && client.socket.readyState === 1 && e.code === HackSettings.DropSword.key && !user.chat.open && !user.terminal.open) {
                if (myPlayer) {
                    if(HelperFns.isPlayerHoldingWeapon(myPlayer, false) == 1 || HelperFns.isPlayerHoldingWeapon(myPlayer, false) == 2) {
                        client.asdsfdsfdsovcxcvldslv([6, myPlayer.right])
                    }
                }
            }

            
            O_.down(e), 8 != e.keyCode || d_.chat.open || d_.terminal.open || e.preventDefault()
        }, this.trigger_mousedown = function (e) {
            l_.pos = Vo(t.can, e);
            var i = !1;
            d_.craft.preview < 0 && t.minimap.focus(l_.pos);
            var r = d_.chest;
            d_.craft.id < 0 && r.id >= 0 && (d_.chest.lock && d_.chest.pid !== d_.id || (i |= t.chest_buttons[d_.chest.id].trigger(t.can, l_.pos, Po)));
            var n = d_.windmill;
            n.open && n.amount_flour > 0 && (i |= t.windmill_flour_button.trigger(t.can, l_.pos, Po));
            var a = d_.extractor;
            a.open && a.amount_mineral > 0 && (i |= t.extractor_stone_button.trigger(t.can, l_.pos, Po), i |= t.extractor_gold_button.trigger(t.can, l_.pos, Po), i |= t.extractor_diamond_button.trigger(t.can, l_.pos, Po), i |= t.extractor_amethyst_button.trigger(t.can, l_.pos, Po), i |= t.extractor_reidite_button.trigger(t.can, l_.pos, Po));
            var o = d_.bread_oven;
            if (o.open && o.amount_bread > 0 && (i |= t.bread_oven_bread_button.trigger(t.can, l_.pos, Po)), d_.sign.open && (i |= t.sign.button.trigger(t.can, l_.pos, Po)), d_.chest.lock || d_.chest.padlock && (i |= t.chest_padlock.trigger(t.can, l_.pos, Po)), d_.chest.lockpick && (i |= t.chest_lockpick.trigger(t.can, l_.pos, Po)), d_.craft.id < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.options.open && !t.market.open)
                for (var s = d_.inv.can_select, _ = 0; _ < s.length; _++) {
                    var E = s[_].trigger(t.can, l_.pos, Po);
                    i |= E, E && d_.inv.drag.start(_, l_.pos), (r.open && (r.id < 0 || r.id == s[_].id) || d_.furnace.open && s[_].id === X.WOOD || d_.well.open && s[_].id === X.BUCKET_FULL || d_.bread_oven.open && (s[_].id === X.WOOD || s[_].id === X.FLOUR) || d_.windmill.open && s[_].id === X.WILD_WHEAT || d_.extractor.open && s[_].id === X.WOOD) && (i |= t.plus_buttons[s[_].id].trigger(t.can, l_.pos, Po))
                }
            if (d_.resurrection.open && (i |= t.resurrection.trigger(t.can, l_.pos, Po)), -1 != t.team_buttons_id) {
                if (i |= t.team_buttons[t.team_buttons_id].button.trigger(t.can, l_.pos, Po)) var T = !0
            } else T = !1;
            if (!(!(d_.craft.id < 0 && d_.craft.preview < 0) || T || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.market.open || d_.zombie))
                for (s = d_.craft.can_craft, _ = 0; _ < s.length; _++) i |= s[_].trigger(t.can, l_.pos, Po);
            !(d_.craft.id < 0 && d_.craft.preview < 0 && d_.shop.open) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || (i |= t.shop.button.trigger(t.can, l_.pos, Po)), !(d_.craft.preview < 0) || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || (i |= t.craft_list.button.trigger(t.can, l_.pos, Po)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.market.open || (i |= t.options.button.trigger(t.can, l_.pos, Po)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || (i |= t.market.button.trigger(t.can, l_.pos, Po)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.market.open || (u_.run ? i |= t.audio.button_on.trigger(t.can, l_.pos, Po) : i |= t.audio.button_off.trigger(t.can, l_.pos, Po)), !(d_.craft.preview < 0) || t.craft_list.open || t.market.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || A_.mode === qo.MODE_ZOMBIES || A_.mode === qo.MODE_LEGACY || A_.mode === qo.MODE_BR || (i |= t.quests.button.trigger(t.can, l_.pos, Po)), i || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || t.sign.open || (d_.craft.preview >= 0 ? E_.send_build() : T || l_.down())
        }, this.trigger_mouseup = function (e) {
            if (l_.pos = Vo(t.can, e), l_.up(), !d_.inv.drag.release()) {
                var i = d_.chest,
                    r = d_.furnace,
                    n = d_.well,
                    a = d_.windmill,
                    o = d_.extractor,
                    s = d_.bread_oven;
                if (d_.control.attack && (d_.control.attack = 0, E_.stop_attack()), -1 != t.team_buttons_id) {
                    var _ = t.team_buttons[t.team_buttons_id].button.trigger(t.can, l_.pos, yo),
                        E = document.getElementById("team_box").style;
                    if (_ && "inline-block" == E.display) return void(E.display = "none");
                    _ && t.team_buttons[t.team_buttons_id].action()
                }
                if (d_.craft.id < 0 && i.id >= 0 && !t.safe_delete.open)
                    if (!d_.chest.lock || d_.chest.pid === d_.id)(_ = t.chest_buttons[d_.chest.id].trigger(t.can, l_.pos, yo)) && E_.take_chest(i);
                if ((a = d_.windmill).open && a.amount_flour > 0 && !t.safe_delete.open)(_ = t.windmill_flour_button.trigger(t.can, l_.pos, yo)) && E_.take_flour(a);
                if ((o = d_.extractor).open && o.amount_mineral > 0 && !t.safe_delete.open) switch (o.type) {
                case ITEMS.EXTRACTOR_MACHINE_STONE:
                    (_ = t.extractor_stone_button.trigger(t.can, l_.pos, yo)) && E_.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_GOLD:
                    (_ = t.extractor_gold_button.trigger(t.can, l_.pos, yo)) && E_.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
                    (_ = t.extractor_diamond_button.trigger(t.can, l_.pos, yo)) && E_.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
                    (_ = t.extractor_amethyst_button.trigger(t.can, l_.pos, yo)) && E_.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_REIDITE:
                    (_ = t.extractor_reidite_button.trigger(t.can, l_.pos, yo)) && E_.take_extractor(o)
                }
                if ((s = d_.bread_oven).open && s.amount_bread > 0 && !t.safe_delete.open)(_ = t.bread_oven_bread_button.trigger(t.can, l_.pos, yo)) && E_.take_bread(s);
                if (d_.sign.open && !t.safe_delete.open)(_ = t.sign.button.trigger(t.can, l_.pos, yo)) && t.sign.select();
                if (d_.chest.lock || t.safe_delete.open || d_.chest.padlock && (_ = t.chest_padlock.trigger(t.can, l_.pos, yo)) && E_.lock_chest(i), d_.chest.lockpick && !t.safe_delete.open && (_ = t.chest_lockpick.trigger(t.can, l_.pos, yo)) && E_.unlock_chest(i), d_.resurrection.open)(_ = t.resurrection.trigger(t.can, l_.pos, yo)) && E_.resurrection();
                if (d_.craft.id < 0 && !d_.ghost.enabled && !t.safe_delete.open)
                    for (var T = d_.inv.can_select, A = 0; A < T.length; A++) {
                        if (_ = T[A].trigger(t.can, l_.pos, yo)) 1 != e.which || e.shiftKey ? (1 == e.which && e.shiftKey || 3 == e.which) && d_.craft.preview < 0 && t.safe_delete.del(T[A].id) : E_.select_inv(T[A].id, A);
                        else if (i.open && (i.id < 0 || i.id === T[A].id))(_ = t.plus_buttons[T[A].id].trigger(t.can, l_.pos, yo)) && d_.craft.preview < 0 && E_.give_item(i, T[A].id, e.shiftKey ? 10 : 1);
                        else if (n.open && T[A].id === X.BUCKET_FULL) {
                            (_ = t.plus_buttons[T[A].id].trigger(t.can, l_.pos, yo)) && d_.craft.preview < 0 && E_.give_well(n)
                        } else if (r.open && T[A].id === X.WOOD) {
                            (_ = t.plus_buttons[T[A].id].trigger(t.can, l_.pos, yo)) && d_.craft.preview < 0 && E_.give_wood(r, e.shiftKey ? 10 : 1)
                        } else if (a.open && T[A].id === X.WILD_WHEAT) {
                            (_ = t.plus_buttons[T[A].id].trigger(t.can, l_.pos, yo)) && d_.craft.preview < 0 && E_.give_wheat(a, e.shiftKey ? 10 : 1)
                        } else if (o.open && T[A].id === X.WOOD) {
                            (_ = t.plus_buttons[T[A].id].trigger(t.can, l_.pos, yo)) && d_.craft.preview < 0 && E_.give_wood_extractor(o, e.shiftKey ? 10 : 1)
                        } else if (s.open && (T[A].id === X.WOOD || T[A].id === X.FLOUR)) {
                            (_ = t.plus_buttons[T[A].id].trigger(t.can, l_.pos, yo)) && d_.craft.preview < 0 && (T[A].id === X.WOOD ? E_.give_bread_oven(s, e.shiftKey ? 10 : 1, 0) : E_.give_bread_oven(s, 0, e.shiftKey ? 10 : 1))
                        }
                    }
                if (d_.craft.id < 0 && d_.craft.preview < 0 && !d_.ghost.enabled && !t.safe_delete.open && !d_.zombie)
                    for (T = d_.craft.can_craft, A = 0; A < T.length; A++) {
                        (_ = T[A].trigger(t.can, l_.pos, yo)) && (ret = E_.select_craft(T[A].id))
                    }
                if (d_.craft.id < 0 && d_.craft.preview < 0 && d_.shop.open && !t.market.open && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.quests.open)(_ = t.shop.button.trigger(t.can, l_.pos, Ho)) && h_.shop.select();
                if (d_.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.market.open && !t.safe_cancel.open && !t.quests.open && !t.options.open)
                    if (u_.run)(_ = t.audio.button_on.trigger(t.can, l_.pos, yo)) && u_.select();
                    else(_ = t.audio.button_off.trigger(t.can, l_.pos, yo)) && u_.select();
                if (d_.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.market.open)(_ = t.options.button.trigger(t.can, l_.pos, yo)) && t.options.select_options();
                if (d_.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.options.open && 1 === t.show_market)(_ = t.market.button.trigger(t.can, l_.pos, yo)) && t.market.select();
                if (d_.craft.preview < 0 && !t.safe_delete.open && !t.market.open && !t.options.open && !t.safe_cancel.open && !t.quests.open && 1 === t.show_recipe_book)(_ = t.craft_list.button.trigger(t.can, l_.pos, yo)) && t.craft_list.select_book();
                if (d_.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.market.open && A_.mode !== qo.MODE_ZOMBIES && A_.mode !== qo.MODE_LEGACY && A_.mode !== qo.MODE_BR && 1 === t.show_quest)(_ = t.quests.button.trigger(t.can, l_.pos, yo)) && t.quests.select();
                d_.craft.crafting && 3 == e.which && t.safe_cancel.del()
            }
        }, this.current_cursor = !1, this.trigger_mousemove = function (i) {
            l_.pos = Vo(t.can, i);
            var r = !1;
            h_.info_box.display = 0, d_.inv.drag.move(l_.pos), -1 != t.team_buttons_id && (r |= t.team_buttons[t.team_buttons_id].button.trigger(t.can, l_.pos, Ho));
            var n = d_.windmill;
            n.open && n.amount_flour > 0 && (r |= t.windmill_flour_button.trigger(t.can, l_.pos, Ho));
            var a = d_.extractor;
            a.open && a.amount_mineral > 0 && (r |= t.extractor_stone_button.trigger(t.can, l_.pos, Ho), r |= t.extractor_gold_button.trigger(t.can, l_.pos, Ho), r |= t.extractor_diamond_button.trigger(t.can, l_.pos, Ho), r |= t.extractor_amethyst_button.trigger(t.can, l_.pos, Ho), r |= t.extractor_reidite_button.trigger(t.can, l_.pos, Ho));
            var o = d_.bread_oven;
            o.open && o.amount_bread > 0 && (r |= t.bread_oven_bread_button.trigger(t.can, l_.pos, Ho)), d_.sign.open && (r |= t.sign.button.trigger(t.can, l_.pos, Ho));
            var s = d_.chest;
            if (d_.craft.id < 0 && s.id >= 0 && !d_.ghost.enabled && (d_.chest.lock && d_.chest.pid !== d_.id || (r |= t.chest_buttons[s.id].trigger(t.can, l_.pos, Ho))), d_.resurrection.open && (r |= t.resurrection.trigger(t.can, l_.pos, Ho)), d_.chest.lock || d_.ghost.enabled || d_.chest.padlock && (r |= t.chest_padlock.trigger(t.can, l_.pos, Ho)), d_.chest.lockpick && !d_.ghost.enabled && (r |= t.chest_lockpick.trigger(t.can, l_.pos, Ho)), d_.craft.id < 0 && !d_.ghost.enabled)
                for (var _ = d_.inv.can_select, E = 0; E < _.length; E++) {
                    var T = _[E].trigger(t.can, l_.pos, Ho);
                    r |= h_.info_box.trigger(T, _[E], 0), (s.open && (s.id < 0 || s.id == _[E].id) || d_.furnace.open && _[E].id == X.WOOD || d_.well.open && _[E].id === X.BUCKET_FULL || d_.bread_oven.open && (_[E].id == X.WOOD || _[E].id == X.FLOUR) || d_.windmill.open && _[E].id == X.WILD_WHEAT || d_.extractor.open && _[E].id == X.WOOD) && (r |= t.plus_buttons[_[E].id].trigger(t.can, l_.pos, Ho))
                }
            if (d_.craft.id < 0 && d_.craft.preview < 0 && !d_.ghost.enabled && !d_.zombie)
                for (_ = d_.craft.can_craft, E = 0; E < _.length; E++) {
                    T = !1;
                    T = _[E].trigger(t.can, l_.pos, Ho), r |= h_.info_box.trigger(T, _[E], 1)
                }!(d_.craft.id < 0 && d_.craft.preview < 0 && d_.shop.open) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || (r |= t.shop.button.trigger(t.can, l_.pos, Ho)), !(d_.craft.preview < 0) || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || 1 !== t.show_recipe_book || (r |= t.craft_list.button.trigger(t.can, l_.pos, Ho)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.market.open || (r |= t.options.button.trigger(t.can, l_.pos, Ho)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || 1 !== t.show_market || (r |= t.market.button.trigger(t.can, l_.pos, Ho)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.market.open || (u_.run ? r |= t.audio.button_on.trigger(t.can, l_.pos, Ho) : r |= t.audio.button_off.trigger(t.can, l_.pos, Ho)), !(d_.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.market.open || A_.mode === qo.MODE_ZOMBIES || A_.mode === qo.MODE_LEGACY || A_.mode === qo.MODE_B || 1 !== t.show_quest || (r |= t.quests.button.trigger(t.can, l_.pos, Ho)), t.current_cursor !== r && (t.current_cursor = r, e.style.cursor = r ? t.cursor1 : t.cursor0)
        }, this.add_event_listener = function () {
            window.addEventListener("mousedown", this.trigger_mousedown, !1), window.addEventListener("mouseup", this.trigger_mouseup, !1), window.addEventListener("mousemove", this.trigger_mousemove, !1), window.addEventListener("keyup", this.trigger_keyup, !1), window.addEventListener("keydown", this.trigger_keydown, !1)
        }, this.remove_event_listener = function () {
            window.removeEventListener("mousedown", this.trigger_mousedown, !1), window.removeEventListener("mouseup", this.trigger_mouseup, !1), window.removeEventListener("mousemove", this.trigger_mousemove, !1), window.removeEventListener("keyup", this.trigger_keyup, !1), window.removeEventListener("keydown", this.trigger_keydown, !1)
        }
    }

    function Cs() {
        _.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + d_.day + "%20days%20with%20" + d_.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
    }

    function gs() {
        _.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
    }

    function Ns(i, t) {
        this.can = i, this.ctx = t;
        var r = this;
        this.enable_interface = !1, this.sb = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                x: 0,
                y: 0
            },
            update: function () {
                this.style.left = this.translate.x + "px", this.style.top = this.translate.y + "px"
            },
            init: function () {
                this.id.innerHTML = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + d_.die.howdie + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + Ie[TEXT.DAYS_SURVIVED] + " : " + d_.day + '</div><div class="stats"> ' + Ie[TEXT.KILL] + " : " + d_.die.kill + '</div></div><div id="flexDisplay"><div id="score"> ' + Ie[TEXT.SCORE] + " : " + d_.die.score + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + d_.die.bank + " " + Ie[TEXT.POINTS] + '</div></div><div id="shop_points">' + Ie[TEXT.KIT_NEXT] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + Ie[TEXT.TWITTER] + '</div><div class="social" id="fffacebook">' + Ie[TEXT.FACEBOOK] + '</div></div><div id="bbback">' + Ie[TEXT.BACK_TO_THE_GAME] + "</div>", this.style.display = "inline-block", document.getElementById("tttwitter").addEventListener("mouseup", Cs, !1), document.getElementById("bbback").addEventListener("mouseup", (function () {
                        I_.quit(ui.run)
                    }), !1), document.getElementById("fffacebook").addEventListener("mouseup", gs, !1), this.height = Math.floor(this.id.clientHeight / 2),
                    function () {
                        var i = new XMLHttpRequest;
                        i.open("GET", e + "getBreadAndScore?userid=" + Xs), i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), i.onreadystatechange = function () {
                            if (4 == this.readyState && 200 == this.status && "0" !== i.responseText) {
                                var e = JSON.parse(i.responseText),
                                    t = e.b - ui.bread;
                                ui.bread = e.b, ui.score = e.s, ui.lvl = ui.level_formula(ui.score), ui.xp_dest = ui.xp_formula(ui.score), ui.xp = 0, document.getElementById("breadWonInner").innerHTML = "" + t
                            }
                        }, i.send()
                    }()
            }
        };
        var n, a = 0,
            o = function () {
                r.update(), 30 != ++a ? window.setTimeout(o, 33) : r.update()
            };
        this.quit = function (e) {
            !0 === r.enable_interface && (r.enable_interface = !1, n = e, s = -1, _())
        };
        var s = -1,
            _ = function () {
                if (r.update(), 30 == ++s) return r.stop(), r.sb.style.display = "none", void n();
                window.setTimeout(_, 33)
            };
        this.is_run = !1, this.stop = function () {
            this.is_run = !1
        }, this.run = function () {
            Us(), document.getElementById("game_body").style.backgroundColor = k.GROUND[__.time], r.sb.init(), ui.trevda.style.display = "inline-block", r.is_run = !0, r.enable_interface = !0, s = -1, a = 0, o()
        }, this.update = function () {
            if (this.sb.translate.x = Math.floor(R - 275), this.sb.translate.y = Math.floor(c - this.sb.height - 28), ui.trevda.translate.x = this.sb.translate.x - 350, ui.trevda.translate.y = this.sb.translate.y + 0, ui.trevda.update(), 30 != a || -1 != s) {
                var e = 0;
                if (30 != a) e = 1500 / (a + 1) - 50;
                if (-1 != s) e = -(1750 / (30 - s + 1) - 48);
                this.sb.translate.y -= e
            }
            this.sb.update()
        }, this.draw = function () {
            an(), d_.alert.draw("#FFF", "#000")
        }
    }
    var Ds = 1,
        bs = 1,
        Ss = 12,
        ps = 5e3,
        ms = 12,
        vs = 5e3,
        Ms = 5e3,
        Gs = 3e3,
        Ls = 46e4,
        fs = 8,
        Hs = 6,
        Ps = 1,
        ys = 2,
        zs = 3,
        Bs = [];
    Bs[-1] = Ps, Bs[X.BOOK] = Ps, Bs[X.WATERING_CAN_FULL] = Ps, Bs[X.WRENCH] = ys, Bs[X.PICK_WOOD] = ys, Bs[X.PICK] = ys, Bs[X.PICK_GOLD] = ys, Bs[X.PICK_DIAMOND] = ys, Bs[X.PICK_AMETHYST] = ys, Bs[X.PICK_REIDITE] = ys, Bs[X.PIRATE_SWORD] = ys, Bs[X.SWORD_WOOD] = ys, Bs[X.SWORD] = ys, Bs[X.LAVA_SWORD] = ys, Bs[X.LAVA_SPEAR] = ys, Bs[X.SWORD_GOLD] = ys, Bs[X.SWORD_DIAMOND] = ys, Bs[X.SWORD_AMETHYST] = ys, Bs[X.SWORD_REIDITE] = ys, Bs[X.CRAB_SPEAR] = ys, Bs[X.WOOD_SPEAR] = ys, Bs[X.SPEAR] = ys, Bs[X.GOLD_SPEAR] = ys, Bs[X.DIAMOND_SPEAR] = ys, Bs[X.DRAGON_SPEAR] = ys, Bs[X.AMETHYST_SPEAR] = ys, Bs[X.AMETHYST_REIDITE] = ys, Bs[X.HAMMER] = ys, Bs[X.HAMMER_GOLD] = ys, Bs[X.HAMMER_DIAMOND] = ys, Bs[X.HAMMER_AMETHYST] = ys, Bs[X.HAMMER_REIDITE] = ys, Bs[X.SUPER_HAMMER] = ys, Bs[X.DRAGON_SWORD] = ys, Bs[X.PITCHFORK2] = ys, Bs[X.PITCHFORK] = ys, Bs[X.SHOVEL] = zs, Bs[X.SHOVEL_GOLD] = zs, Bs[X.SHOVEL_DIAMOND] = zs, Bs[X.SHOVEL_AMETHYST] = zs, SOUND_NATURE = [], SOUND_NATURE[0] = 0, SOUND_NATURE[1] = 1, SOUND_NATURE[2] = 1, SOUND_NATURE[3] = 1, SOUND_NATURE[4] = 0, SOUND_NATURE[5] = 0, SOUND_NATURE[6] = 0, SOUND_NATURE[7] = 0, SOUND_NATURE[8] = 0, SOUND_NATURE[9] = 0, SOUND_NATURE[10] = 1, SOUND_NATURE[11] = 1, SOUND_NATURE[12] = 1, SOUND_NATURE[13] = 1, SOUND_NATURE[14] = 1, SOUND_NATURE[15] = 1, SOUND_NATURE[16] = 0, SOUND_NATURE[17] = 0, SOUND_NATURE[18] = 0, SOUND_NATURE[19] = 0, SOUND_NATURE[20] = 0, SOUND_NATURE[21] = 0, SOUND_NATURE[22] = 0, SOUND_NATURE[23] = 1, SOUND_NATURE[24] = 1, SOUND_NATURE[25] = 1, SOUND_NATURE[26] = 1, SOUND_NATURE[27] = 1, SOUND_NATURE[28] = 1, SOUND_NATURE[29] = 1, SOUND_NATURE[30] = 1, SOUND_NATURE[31] = 1, SOUND_NATURE[32] = 1, SOUND_NATURE[33] = 1, SOUND_NATURE[34] = 1, SOUND_NATURE[35] = 1, SOUND_NATURE[36] = 1, SOUND_NATURE[37] = 1, SOUND_NATURE[38] = 1, SOUND_NATURE[40] = 0, SOUND_NATURE[41] = 0, SOUND_NATURE[42] = 0, SOUND_NATURE[50] = 1, SOUND_NATURE[51] = 1, SOUND_NATURE[52] = 1, SOUND_NATURE[55] = 0, SOUND_NATURE[56] = 0, SOUND_NATURE[57] = 0, SOUND_NATURE[58] = 0, SOUND_BUILD = [], SOUND_BUILD[ITEMS.PLANT] = 0, SOUND_BUILD[ITEMS.FIRE] = 0, SOUND_BUILD[ITEMS.TOTEM] = 0, SOUND_BUILD[ITEMS.BIG_FIRE] = 0, SOUND_BUILD[ITEMS.SEED] = -1, SOUND_BUILD[ITEMS.WHEAT_SEED] = -1, SOUND_BUILD[ITEMS.WORKBENCH] = 0, SOUND_BUILD[ITEMS.WALL] = 0, SOUND_BUILD[ITEMS.BRIDGE] = 0, SOUND_BUILD[ITEMS.PLOT] = 0, SOUND_BUILD[ITEMS.WINDMILL] = 1, SOUND_BUILD[ITEMS.WELL] = 1, SOUND_BUILD[ITEMS.STONE_WALL] = 1, SOUND_BUILD[ITEMS.GOLD_WALL] = 1, SOUND_BUILD[ITEMS.DIAMOND_WALL] = 1, SOUND_BUILD[ITEMS.AMETHYST_WALL] = 1, SOUND_BUILD[ITEMS.REIDITE_WALL] = 1, SOUND_BUILD[ITEMS.SPIKE] = 0, SOUND_BUILD[ITEMS.STONE_SPIKE] = 1, SOUND_BUILD[ITEMS.GOLD_SPIKE] = 1, SOUND_BUILD[ITEMS.DIAMOND_SPIKE] = 1, SOUND_BUILD[ITEMS.AMETHYST_SPIKE] = 1, SOUND_BUILD[ITEMS.REIDITE_SPIKE] = 1, SOUND_BUILD[ITEMS.WOOD_DOOR] = 0, SOUND_BUILD[ITEMS.STONE_DOOR] = 1, SOUND_BUILD[ITEMS.GOLD_DOOR] = 1, SOUND_BUILD[ITEMS.DIAMOND_DOOR] = 1, SOUND_BUILD[ITEMS.AMETHYST_DOOR] = 1, SOUND_BUILD[ITEMS.REIDITE_DOOR] = 1, SOUND_BUILD[ITEMS.WOOD_DOOR_SPIKE] = 0, SOUND_BUILD[ITEMS.STONE_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.GOLD_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.DIAMOND_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.AMETHYST_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.REIDITE_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.FURNACE] = 1, SOUND_BUILD[ITEMS.RESURRECTION] = 1, SOUND_BUILD[ITEMS.EMERALD_MACHINE] = 1, SOUND_BUILD[ITEMS.CHEST] = 0, SOUND_BUILD[ITEMS.BREAD_OVEN] = 1;
    var Ws = {
            DIG: {
                sound: null,
                path: ["audio/ambience.mp3"],
                sprite: {
                    d0: [90086, 300, !1],
                    d1: [90391, 300, !1],
                    d2: [90684, 300, !1]
                },
                sample: {
                    d0: fs,
                    d1: fs,
                    d2: fs
                }
            },
            PUNCH: {
                sound: null,
                path: ["audio/ambience.mp3"],
                sprite: {
                    p0: [89303, 300, !1],
                    p1: [89549, 300, !1],
                    p2: [89815, 300, !1]
                },
                sample: {
                    p0: fs,
                    p1: fs,
                    p2: fs
                }
            },
            WEAPON: {
                sound: null,
                path: ["audio/ambience.mp3"],
                sprite: {
                    w0: [88195, 300, !1],
                    w1: [88473, 300, !1],
                    w2: [88751, 300, !1],
                    w3: [89025, 300, !1]
                },
                sample: {
                    w0: fs,
                    w1: fs,
                    w2: fs,
                    w3: fs
                }
            },
            AMBIENCE: {
                sound: null,
                path: ["audio/ambience.mp3"],
                sprite: {
                    cook: [100, 2800, !0],
                    seaday: [3100, 8800, !0],
                    seanight: [19882, 8301, !0],
                    forestday: [32604, 21890, !0],
                    forestnight: [54524, 11393, !0],
                    snowday: [66961, 21223, !0],
                    snownight: [66961, 21223, !0],
                    fire: [12356, 6965, !0],
                    swim: [28380, 1797, !0],
                    sand: [30562, 655, !0],
                    walk: [31658, 813, !0],
                    snow: [66014, 925, !0],
                    hwood: [91022, 400, !1],
                    hand: [91431, 400, !1],
                    hstone: [92249, 500, !1]
                },
                sample: {
                    cook: 1,
                    seaday: 1,
                    seanight: 1,
                    forestday: 1,
                    forestnight: 1,
                    snowday: 1,
                    snownight: 1,
                    fire: fs,
                    swim: fs,
                    sand: fs,
                    walk: fs,
                    snow: fs,
                    hwood: Hs,
                    hand: Hs,
                    hstone: Hs
                }
            }
        },
        Vs = function (e, i, t, r, n, a, o, s, E, T, A) {
            this.r = 1, this.delay = e, this.max_delay = e, this.night = i, this.day = t, this.fade = r, this.r_base = n, this.r_seed = a, this.player = o, this.transition_delay = s, this.source = E, this.source.lx = E.x + E.w, this.source.by = E.y + E.h, this.outside_box = T, this.inside_box = A, this.inside = 0, this.hackish = {
                d: 5,
                m: 5
            }, this.effect = function () {
                if (this.delay -= R_, this.delay < 0) {
                    this.delay = this.max_delay;
                    var e = Ws.AMBIENCE.sound.playing(this.night),
                        i = Ws.AMBIENCE.sound.playing(this.day);
                    if (e && !i) {
                        var t = this.player.volume(this.night) * Ds,
                            r = (Math.random() * this.r_seed + this.r_base) * Ds;
                        this.player.fade(t, r, this.fade, this.night)
                    } else if (!e && i) {
                        t = this.player.volume(this.day) * Ds, r = (Math.random() * this.r_seed + this.r_base) * Ds;
                        this.player.fade(t, r, this.fade, this.day)
                    }
                }
            }, this.transition = function () {
                if (this.delay = this.max_delay, this.hackish.d = this.hackish.m, A_.time) {
                    if (this.player.fade(0, this.r_base * Ds, this.transition_delay, this.night), this.player.play(this.night), this.player.playing(this.day)) {
                        var e = this.player.volume(this.day) * Ds;
                        this.player.fade(e, 0, this.transition_delay, this.day)
                    }
                } else if (this.player.fade(0, this.r_base * Ds, this.transition_delay, this.day), this.player.play(this.day), this.player.playing(this.night)) {
                    e = this.player.volume(this.night) * Ds;
                    this.player.fade(e, 0, this.transition_delay, this.night)
                }
            }, this.check = function (e) {
                if (this.inside)
                    if (_.inside_box(e, this.outside_box)) !u_.transition && A_.clock.now < Ls && (A_.time ? this.player.playing(this.night) || (this.hackish.d -= R_, this.hackish.d < 0 && this.transition()) : this.player.playing(this.day) || (this.hackish.d -= R_, this.hackish.d < 0 && this.transition()));
                    else {
                        if (this.inside = 0, this.player.playing(this.night)) {
                            var i = this.player.volume(this.night) * Ds;
                            this.player.fade(i, 0, this.transition_delay, this.night)
                        }
                        if (this.player.playing(this.day)) {
                            i = this.player.volume(this.day) * Ds;
                            this.player.fade(i, 0, this.transition_delay, this.day)
                        }
                    }
                else _.inside_box(e, this.inside_box) && (this.inside = 1, !u_.transition && A_.clock.now < Ls && this.transition())
            }, this.update = function (e, i) {
                var t, r;
                t = e.x < this.source.x ? u_.get_x(this.source.x) : e.x > this.source.lx ? u_.get_x(this.source.lx) : i.x, r = e.y < this.source.y ? u_.get_y(this.source.y) : e.y > this.source.by ? u_.get_y(this.source.by) : i.y, this.player.pos(t, r, -.5, this.night), this.player.pos(t, r, -.5, this.day)
            }
        };
    SOUND_PLAYER = {
        DELAY_SWIM: .4,
        DELAY_SAND: .2,
        DELAY_WALK: .2,
        DELAY_SNOW: .2,
        FADE_SWIM: 300,
        FADE_SAND: 100,
        FADE_WALK: 100,
        FADE_SNOW: 100,
        WALK: 0,
        SWIM: 1,
        SAND: 2,
        SNOW: 3,
        FACTOR: 4,
        FACTOR2: 2
    };
    var Ks = function (e, i, t) {
            this.mom = e, this.c = 0, this.player = i, this.ids = t, this.max = t.length, this.play = function () {
                this.c = (this.c + 1) % this.max;
                var e = this.ids[this.c];
                this.mom.update_pos(this.player, e), this.player.play(e)
            }
        },
        ws = function (e) {
            this.free = 1, this.uid = 0, this.mode = -1, this.swim = u_.sample.swim[e], this.sand = u_.sample.sand[e], this.walk = u_.sample.walk[e], this.snow = u_.sample.snow[e], this.punch = new Ks(this, Ws.PUNCH.sound, u_.samples.punch[e]), this.weapon = new Ks(this, Ws.WEAPON.sound, u_.samples.weapon[e]), this.dig = new Ks(this, Ws.DIG.sound, u_.samples.dig[e]), this.sid = e, this.x = 0, this.y = 0, this.move = 0, this.delay = SOUND_PLAYER.DELAY, this.pos = {
                x: 0,
                y: 0
            }, this.ambience = Ws.AMBIENCE.sound, this.swing = function (e) {
                e === Ps ? this.punch.play() : e === ys ? this.weapon.play() : e === zs && this.dig.play()
            }, this.detect_position = function (e) {
                return e.dist_sand > 0 ? SOUND_PLAYER.SAND : e.dist_water > 0 ? SOUND_PLAYER.SWIM : e.dist_winter > 0 || e.dist_lava > 0 ? SOUND_PLAYER.SNOW : SOUND_PLAYER.WALK
            }, this.init = function (e) {
                this.free = 0, this.uid = e;
                var i = A_.fast_units[e];
                i.sid = this.sid, this.mode = this.detect_position(i), this.pos.x = i.x, this.pos.y = i.y
            }, this.clean = function () {
                this.free = 1, this.mode = -1, this.ambience.stop(this.swim), this.ambience.stop(this.sand), this.ambience.stop(this.walk), this.ambience.stop(this.snow)
            }, this.fade = function (e, i) {
                var t = this.ambience.volume(e) * bs;
                this.ambience.fade(t, 0, i, e)
            }, this.update_pos = function (e, i) {
                this.move && this.sid && e.pos(this.x, this.y, -.5, i)
            }, this.effect = function (e, i, t, r, n, a, o) {
                if (this.delay = a, r && this.mode === n) {
                    var s = this.ambience.volume(e) * bs;
                    if (this.move) {
                        var _ = (Math.random() * t + i) * bs;
                        this.ambience.fade(s, _, o, e)
                    } else this.ambience.fade(s, 0, o, e)
                } else if (this.mode != n && this.move) this.ambience.fade(0, (i + t) * bs, o, e);
                else if (this.move) {
                    s = this.ambience.volume(e) * bs, _ = (Math.random() * t + i) * bs;
                    this.ambience.fade(s, _, o, e)
                }
                this.update_pos(this.ambience, e), this.ambience.play(e)
            }, this.update = function () {
                var e = A_.fast_units[this.uid];
                if (this.delay -= R_, !(this.delay > 0)) {
                    var i = 0;
                    e.x != this.pos.x || e.y != this.pos.y ? (this.move || (i = 1, this.move = 1), this.x = u_.get_x_ext(e.x, SOUND_PLAYER.FACTOR2), this.y = u_.get_y_ext(e.y, SOUND_PLAYER.FACTOR2)) : this.move && (i = 1, this.move = 0), this.pos.x = e.x, this.pos.y = e.y, mode = this.detect_position(e), mode != this.mode && (this.mode === SOUND_PLAYER.SWIM ? this.fade(this.swim, SOUND_PLAYER.FADE_SWIM) : this.mode === SOUND_PLAYER.SAND ? this.fade(this.sand, SOUND_PLAYER.FADE_SAND) : this.mode === SOUND_PLAYER.WALK ? this.fade(this.walk, SOUND_PLAYER.FADE_WALK) : this.mode === SOUND_PLAYER.SNOW && this.fade(this.snow, SOUND_PLAYER.FADE_SNOW)), mode === SOUND_PLAYER.SWIM ? this.effect(this.swim, .08, .3, i, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM) : mode === SOUND_PLAYER.SAND ? this.effect(this.sand, .2, .3, i, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND) : mode === SOUND_PLAYER.WALK ? this.effect(this.walk, .3, .6, i, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK) : mode === SOUND_PLAYER.SNOW && this.effect(this.snow, .1, .25, i, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW), this.mode = mode
                }
            }, this.check = function () {
                var e = A_.fast_units[this.uid];
                return !!e || (this.clean(e), !1)
            }
        };
    window.aiptag = window.aiptag || {}, window.aiptag.consented = !0, window.aiptag.cmd = window.aiptag.cmd || [], window.aiptag.cmd.display = window.aiptag.cmd.display || [], window.aiptag.cmd.player = window.aiptag.cmd.player || [];

    function Us() {
        Ys.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", !0), Ys.send()
    }
    window.aiptag.cmd.player.push((function () {
        E_.connect()
    }));
    var Ys = new XMLHttpRequest;
    Ys.onreadystatechange = function () {
        4 === this.readyState && this.status
    };
    var Fs = 0,
        ks = 1,
        xs = void 0,
        Js = void 0,
        Xs = void 0,
        qs = 0;
    window.onUserLogin = function () {
        qs = 1
    };
    var js = {
        access_token: "ACCESS_TOKEN"
    };
    window.handleCredentialResponse = function () {
        console.log(arguments)
    };
    var Zs = document.createElement("script");
    Zs.type = "text/javascript", Zs.async = !0, Zs.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js", Zs.addEventListener("load", (function () {
            window.XPayStationWidget.init(js), window.XPayStationWidget.on("status-done", a_)
        }), !1), document.getElementsByTagName("head")[0].appendChild(Zs), window.fbAsyncInit = function () {
            window.FB.init({
                appId: "642017356260407",
                cookie: !0,
                xfbml: !0,
                version: "v3.3"
            }), window.FB.AppEvents.logPageView(), $s()
        },
        function (e, i, t) {
            var r, n = e.getElementsByTagName(i)[0];
            e.getElementById(t) || ((r = e.createElement(i)).id = t, r.src = "https://connect.facebook.net/en_US/sdk.js", n.parentNode.insertBefore(r, n))
        }(document, "script", "facebook-jssdk");
    var Qs = void 0;

    function $s() {
        void 0 === Xs && function () {
            try {
                window.FB && window.FB.getUserID() && (Xs = window.FB.getUserID(), void 0 === Js && window.FB.getLoginStatus((function () {
                    xs = ks, Js = window.FB.getAuthResponse().accessToken, window.onUserLogin(Xs)
                })))
            } catch (e) {}
            try {
                Xs = Qs.getBasicProfile().getId()
            } catch (e) {}
        }()
    }

    function e_(i) {
        if (Xs) {
            var t = new XMLHttpRequest;
            t.open("GET", e + "xsolla?userid=" + Xs + "&item=" + i), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function () {
                4 == this.readyState && 200 == this.status && "0" !== t.responseText && (js.access_token = t.responseText, window.XPayStationWidget.init(js), window.XPayStationWidget.open())
            }, t.send()
        }
    }

    function i_(i) {
        var t = new XMLHttpRequest;
        t.open("GET", e + "setRegion?token=" + Js + "&userid=" + Xs + "&region=" + i), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function () {
            4 === this.readyState && 200 === this.status && ("0" !== t.responseText ? ui.select_subview(ui.__SERVER_DURATION__) : ui.select_subview(ui.__GAME__))
        }, t.send()
    }

    function t_(i, t) {
        if (!(ui.spin > 0))
            if (ui.bread < t) ui.select_subview(ui.__BUY__);
            else {
                ui.spin = 2, ui.spin_effect = 0, ui.spin_target = 100;
                var r = new XMLHttpRequest;
                r.open("GET", e + "buySpin?token=" + Js + "&userid=" + Xs + "&spin=" + i), r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), r.onreadystatechange = function () {
                    if (4 == this.readyState && 200 == this.status)
                        if ("0" !== r.responseText) {
                            var e = JSON.parse(r.responseText);
                            ui.play_spin(e.rand * Math.PI * 2, e.type, e.id), ui.bread -= t
                        } else ui.spin = 0
                }, r.send()
            }
    }

    function r_() {
        if (!(ui.bread < 300 && ui.firstName > 0)) {
            var i = document.getElementById("account_nickname_input").value.trim();
            if (document.getElementById("account_nickname_input").value = i, !(i.length < 1 || i.length > 20)) {
                var t = new XMLHttpRequest;
                t.open("GET", e + "changeNickname?token=" + Js + "&userid=" + Xs + "&nickname=" + encodeURIComponent(i)), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function () {
                    if (4 == this.readyState && 200 == this.status && "0" !== t.responseText) {
                        var e = Number(t.responseText);
                        e > 0 && (ui.bread -= e), ui.firstName = 1, ui.select_subview(ui.__PROFILE__)
                    }
                }, t.send()
            }
        }
    }

    function n_(i, t) {
        if (ui.bread < t) ui.select_subview(ui.__BUY__);
        else {
            var r = new XMLHttpRequest;
            r.open("GET", e + "buyKit?token=" + Js + "&userid=" + Xs + "&kit=" + i), r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), r.onreadystatechange = function () {
                if (4 == this.readyState && 200 == this.status && "0" !== r.responseText) {
                    var e = JSON.parse(r.responseText);
                    ui.bread -= t, ui.kit = Date.now() + Number(e)
                }
            }, r.send()
        }
    }

    function a_() {
        var i = new XMLHttpRequest;
        i.open("GET", e + "claimBread?userid=" + Xs), i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), i.onreadystatechange = function () {
            if (4 == this.readyState && 200 == this.status && "0" !== i.responseText) {
                var e = Number(i.responseText);
                isNaN(e) || (ui.bread = e)
            }
        }, i.send()
    }

    function o_(i, t, r, n) {
        if (i = void 0 === i ? ui.leaderboard_range : i, t = void 0 === t ? ui.leaderboard_mode : t, r = void 0 === r ? ui.leaderboard_sorted : r, n = void 0 === n ? ui.leaderboard_season : n, i !== ui.leaderboard_range || t !== ui.leaderboard_mode || r !== ui.leaderboard_sorted || n !== ui.leaderboard_season) {
            ui.leaderboard_range = i, ui.leaderboard_mode = t, ui.leaderboard_sorted = r, ui.leaderboard_season = n, ui.LEADERBOARD_SEASON1 === n ? n = "0" : ui.LEADERBOARD_SEASON2 === n ? n = "1" : ui.LEADERBOARD_SEASON3 === n ? n = "2" : ui.LEADERBOARD_SEASON4 === n ? n = "3" : ui.LEADERBOARD_SEASON5 === n && (n = "4"), ui.LEADERBOARD_TOTAL === t ? t = "total" : ui.LEADERBOARD_NORMAL === t ? t = "normal" : ui.LEADERBOARD_ZOMBIE === t ? t = "zombie" : ui.LEADERBOARD_VAMPIRE === t ? t = "vampire" : ui.LEADERBOARD_FOREST === t && (t = "forest"), ui.LEADERBOARD_ALL === i && (i = "all"), ui.LEADERBOARD_WEEK === i && (i = "week"), ui.LEADERBOARD_TODAY === i && (i = "today"), ui.LEADERBOARD_KILL === r ? r = "kill" : ui.LEADERBOARD_SCORE === r ? r = "score" : ui.LEADERBOARD_TIME === r && (r = "time");
            var a = new XMLHttpRequest;
            a.open("GET", e + "leaderboard?range=" + i + "&mode=" + t + "&sort=" + r + "&season=" + n), a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), a.onreadystatechange = function () {
                if (4 == this.readyState && 200 == this.status && "0" !== a.responseText) {
                    for (var e = JSON.parse(a.responseText), i = "", t = 0; t < e.length; t++) {
                        line = e[t];
                        var r = line[1]; - 1 === r.indexOf("Starver#") && (r = window.decodeURIComponent(window.escape(window.atob(r)))), i += '<div class="lineLeaderboard">', i += '<div class="rank">', i += t + 1 + "", i += "</div>", i += '<div class="name">', i += r, i += "</div>", i += '<div class="lvl">', i += ui.level_formula(line[6]) + 1 + "", i += "</div>", i += '<div class="kills">', i += line[5] + "", i += "</div>", i += '<div class="time">', i += line[4] + "", i += "</div>", i += '<div class="score">', i += line[3] + "", i += "</div>", i += "</div>"
                    }
                    document.getElementById("leaderboard").innerHTML = i
                }
            }, a.send()
        }
    }
    document.getElementById("version").innerHTML = t + ".3";
    var s_ = [],
        __ = {
            time: Math.floor(2 * Math.random()),
            items: []
        };
    document.getElementById("game_body").style.backgroundColor = k.GROUND[__.time], __.items.push(new is(ITEMS.FIRE, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1)), __.items.push(new is(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5)), __.items.push(new is(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0)), __.items.push(new is(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
    let E_ = new Xo;
    window.client = E_;
    var ui, A_, d_, I_, h_ = {
            is_run: !1
        },
        u_ = new function () {
            this.run = 0, this.loaded = 0, this.transition = 0, this.get_x = function (e) {
                return e / A_.w * 100
            }, this.get_y = function (e) {
                return e / A_.h * 100
            }, this.get_x_ext = function (e, i) {
                return e = this.get_x(e) - this.ltr.x, this.ltr.x + i * e
            }, this.get_y_ext = function (e, i) {
                return e = Math.abs(this.get_y(e) - this.ltr.y), this.ltr.y + i * e
            }, this.sample = {}, this.samples = {}, this.player = {}, this.play_sample = function (e, i, t, r) {
                for (var n = 0; n < i.length; n++) {
                    var a = i[n];
                    if (!e.playing(a)) return e.pos(t, r, -.5, a), e.play(a), !0
                }
                return !1
            }, this.hit = function (e, i, t, r) {
                t = this.get_x_ext(t, SOUND_PLAYER.FACTOR), r = this.get_y_ext(r, SOUND_PLAYER.FACTOR), e ? 1 === i ? this.play_sample(this.player.hstone, this.sample.hstone, t, r) : 0 === i && this.play_sample(this.player.hwood, this.sample.hwood, t, r) : this.play_sample(this.player.hand, this.sample.hand, t, r)
            }, this.ltr = {
                x: 0,
                y: 0
            }, this.oldp = {
                x: 0,
                y: 0
            }, this.area = {}, this.players = [], this.ambience = function (e, i) {
                for (var t in this.area) {
                    var r = this.area[t];
                    r.check(e), r.inside && (A_.clock.now < Ls && r.effect(), i && r.update(e, this.ltr), this.transition && r.transition())
                }
                this.transition && (this.transition = 0)
            }, this.hook_players = function () {
                for (var e = [], i = 0; i < this.players.length; i++) {
                    (n = this.players[i]).free ? e.push(i) : n.free || A_.fast_units[n.uid] || (n.clean(), e.push(i))
                }
                for (var t = A_.units[ITEMS.PLAYERS], r = (i = 0, 0); i < t.length && r < e.length; i++) {
                    var n = t[i];
                    A_.mode == qo.MODE_HUNGER_GAMES && "spectator" === A_.players[n.id].nickname || -1 !== n.sid || n.uid === d_.uid || (this.players[e[r]].init(n.uid), r++)
                }
            }, this.players_effect = function () {
                this.hook_players();
                for (var e = 0; e < this.players.length; e++) {
                    var i = this.players[e];
                    !i.free && i.check() && i.update()
                }
            }, this.update_listener = function (e) {
                return this.oldp.x === e.x && this.oldp.y === e.y ? 0 : (this.oldp.x = e.x, this.oldp.y = e.y, this.ltr.x = this.get_x(e.x), this.ltr.y = this.get_y(e.y), Howler.pos(this.ltr.x, this.ltr.y, 0), 1)
            }, this.scheduler = function () {
                if (this.run && this.loaded) {
                    var e = A_.fast_units[d_.uid];
                    if (e) {
                        e.sid = 0;
                        var i = this.update_listener(e);
                        A_.mode !== qo.MODE_ZOMBIES && A_.mode !== qo.MODE_LEGACY && A_.mode !== qo.MODE_BR && this.ambience(e, i), this.players_effect()
                    }
                }
            }, this.load_sound = function () {
                for (var e in Ws) {
                    var i = Ws[e];
                    for (var t in "object" == typeof i && i.path && (i.sound = new Howl({
                            src: i.path,
                            volume: 0,
                            sprite: i.sprite
                        })), i.sample) {
                        for (var r = i.sample[t], n = [], a = 0; a < r; a++) {
                            var o = i.sound.play(t);
                            i.sound.stop(o), i.sound.on("fade", (function (e) {
                                this.volume(e) || this.stop(e)
                            }), o), n.push(o)
                        }
                        n.length > 1 ? u_.sample[t] = n : u_.sample[t] = n[0], u_.player[t] = i.sound
                    }
                }
            }, this.volume_sample = function (e, i, t) {
                for (var r = 0; r < e.length; r++) i.volume(t, e[r])
            }, this.organize_samples = function (e, i, t, r, n, a) {
                for (var o = e, s = 0; s < t; s++) {
                    var _ = o[s] = [];
                    for (j = 0; j < r; j++) _[j] = u_.sample[n + j][s], i.sound.volume(a, _[j])
                }
            }, this.init = function () {
                u_.load_sound(), u_.samples.punch = [], u_.samples.weapon = [], u_.samples.dig = [], u_.organize_samples(u_.samples.punch, Ws.PUNCH, fs, 3, "p", .15), u_.organize_samples(u_.samples.weapon, Ws.WEAPON, fs, 4, "w", .15), u_.organize_samples(u_.samples.dig, Ws.DIG, fs, 3, "d", .09), u_.volume_sample(u_.sample.hand, u_.player.hand, .15), u_.volume_sample(u_.sample.hwood, u_.player.hwood, .2), u_.volume_sample(u_.sample.hstone, u_.player.hstone, 1), u_.area.sea = new Vs(Ss, this.sample.seanight, this.sample.seaday, ps, .05, .4, Ws.AMBIENCE.sound, Gs, {
                    x: k.SEE_BIOME_X,
                    y: k.WINTER_BIOME_Y,
                    w: A_.w,
                    h: A_.h
                }, {
                    x: k.SEE_BIOME_X - 2300,
                    y: k.WINTER_BIOME_Y - 4e3,
                    w: A_.w,
                    h: A_.h
                }, {
                    x: k.SEE_BIOME_X - 1500,
                    y: k.WINTER_BIOME_Y - 2e3,
                    w: A_.w,
                    h: A_.h
                }), u_.area.forest = new Vs(ms, this.sample.forestnight, this.sample.forestday, vs, .03, .25, Ws.AMBIENCE.sound, Gs, {
                    x: 0,
                    y: k.WINTER_BIOME_Y + 800,
                    w: k.SEE_BIOME_X - 2300,
                    h: A_.h
                }, {
                    x: -100,
                    y: k.WINTER_BIOME_Y - 300,
                    w: k.SEE_BIOME_X - 100,
                    h: A_.h
                }, {
                    x: -100,
                    y: k.WINTER_BIOME_Y + 400,
                    w: k.SEE_BIOME_X - 1400,
                    h: A_.h
                }), u_.area.snow = new Vs(ms, this.sample.snownight, this.sample.snowday, Ms, .01, .22, Ws.AMBIENCE.sound, Gs, {
                    x: -100,
                    y: -100,
                    w: A_.w + 200,
                    h: k.WINTER_BIOME_Y - 1e3
                }, {
                    x: -100,
                    y: -100,
                    w: A_.w + 200,
                    h: k.WINTER_BIOME_Y + 600
                }, {
                    x: -100,
                    y: -100,
                    w: A_.w + 200,
                    h: k.WINTER_BIOME_Y + 100
                });
                for (var e = 0; e < fs; e++) u_.players[e] = new ws(e);
                u_.players[0].init(d_.uid), u_.loaded = 1
            }, this.launch = function () {
                !this.transition && A_.clock.now < Ls && (this.transition = 1)
            }, this.quit = function () {
                if (this.run && this.loaded) {
                    for (var e in u_.sample) {
                        var i = u_.sample[e];
                        if ("object" == typeof i)
                            for (var t = 0; t < i.length; t++) u_.player[e].stop(i[t]);
                        else u_.player[e].stop(i)
                    }
                    for (t = 0; t < u_.players.length; t++) u_.players[t].clean()
                }
            }, this.select = function () {
                u_.run ? u_.quit() : (u_.loaded || u_.init(), u_.players[0].uid = d_.uid, u_.players[0].free = 0, u_.launch()), u_.run = !u_.run
            }
        },
        O_ = new function () {
            this.set_azerty = function () {
                this.LEFT = 81, this.RIGHT = 68, this.TOP = 90, this.DOWN = 83
            }, this.set_qwerty = function () {
                this.LEFT = 65, this.RIGHT = 68, this.TOP = 87, this.BOTTOM = 83
            }, this.UP = 0, this.DOWN = 1, this._1 = 49, this._2 = 50, this._3 = 51, this._4 = 52, this._5 = 53, this.CTRL = 17, this.ARROW_LEFT = 37, this.ARROW_RIGHT = 39, this.ARROW_TOP = 38, this.ARROW_BOTTOM = 40, this.SPACE = 32, this.R = 82, this.G = 71, this.V = 86, this.B = 66, this.set_qwerty(), this.keys = new Array(255);
            for (var e = 0; e < 255; e++) this.keys[e] = this.UP;
            this.up = function (e) {
                var i = Math.min(e.charCode || e.keyCode, 255);
                this.keys[i] = this.UP
            }, this.down = function (e) {
                var i = Math.min(e.charCode || e.keyCode, 255);
                return i == this.LEFT || i == this.ARROW_LEFT ? this.press_left() : i == this.TOP || i == this.ARROW_TOP ? this.press_top() : i == this.DOWN || i == this.ARROW_DOWN ? this.press_bottom() : i != this.RIGHT && i != this.ARROW_RIGHT || this.press_right(), this.keys[i] = this.DOWN, i
            }, this.press_left = function () {
                this.keys[this.RIGHT] = this.UP, this.keys[this.ARROW_RIGHT] = this.UP
            }, this.press_right = function () {
                this.keys[this.LEFT] = this.UP, this.keys[this.ARROW_LEFT] = this.UP
            }, this.press_bottom = function () {
                this.keys[this.TOP] = this.UP, this.keys[this.ARROW_TOP] = this.UP
            }, this.press_top = function () {
                this.keys[this.BOTTOM] = this.UP, this.keys[this.ARROW_BOTTOM] = this.UP
            }, this.clear_directionnal = function () {
                this.keys[this.RIGHT] = this.UP, this.keys[this.ARROW_RIGHT] = this.UP, this.keys[this.LEFT] = this.UP, this.keys[this.ARROW_LEFT] = this.UP, this.keys[this.TOP] = this.UP, this.keys[this.ARROW_TOP] = this.UP, this.keys[this.BOTTOM] = this.UP, this.keys[this.ARROW_BOTTOM] = this.UP
            }, this.is_left = function () {
                return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT]
            }, this.is_right = function () {
                return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT]
            }, this.is_top = function () {
                return this.keys[this.TOP] || this.keys[this.ARROW_TOP]
            }, this.is_bottom = function () {
                return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM]
            }, this.is_ctrl = function () {
                return this.keys[this.CTRL]
            }, this.is_1 = function () {
                return this.keys[this._1]
            }, this.is_2 = function () {
                return this.keys[this._2]
            }, this.is_3 = function () {
                return this.keys[this._3]
            }, this.is_4 = function () {
                return this.keys[this._4]
            }, this.is_space = function () {
                return this.keys[this.SPACE]
            }, this.is_r = function () {
                return this.keys[this.R]
            }, this.is_g = function () {
                return this.keys[this.G]
            }, this.is_v = function () {
                return this.keys[this.V]
            }, this.is_b = function () {
                return this.keys[this.B]
            }
        },
        l_ = new function () {
            this.DOWN = 0, this.UP = 1, this.IDLE = 2, this.IN = 0, this.OUT = 1, this.pos = {
                x: 0,
                y: 0
            }, this.x_old = 0, this.y_old = 0, this.angle = 0, this.state = this.IDLE, this.dist = this.IN, this.down = function () {
                this.state = this.DOWN
            }, this.up = function () {
                this.state = this.UP
            }, this.update = function () {
                return (this.pos.x != this.x_old || this.pos.y != this.y_old) && (this.x_old = this.pos.x, this.y_old = this.pos.y, !0)
            }
        },
        R_ = 0,
        c_ = 0,
        C_ = new function (e, i, t) {
            this.can = e, this.ctx = i, this.logo = {
                translate: {
                    x: 0,
                    y: 0
                },
                style: document.getElementById("loading").style,
                update: function () {
                    this.style.left = this.translate.x + "px", this.style.top = Math.floor(this.translate.y) + "px"
                }
            }, this.logo.style.position = "absolute", this.logo.style.display = "inline-block", this.logo.update(), this.is_run = !0, this.stop = function () {
                this.is_run = !1
            }, this.loading = {
                total: 1
            };
            var n = this,
                a = function () {},
                o = 0;

            function s(e) {
                return -1 !== e.indexOf("normal-mode") || -1 !== e.indexOf("player0") ? 1 : -1 !== e.indexOf("day-bag") || -1 !== e.indexOf("night-bag") || -1 !== e.indexOf("day-book") || -1 !== e.indexOf("night-book") || -1 !== e.indexOf("day-player") || -1 !== e.indexOf("night-player") || -1 !== e.indexOf("day-accessory") || -1 !== e.indexOf("night-accessory") || -1 !== e.indexOf("day-crate") || -1 !== e.indexOf("night-crate") || -1 !== e.indexOf("day-skin") || -1 !== e.indexOf("night-skin") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-rock") || -1 !== e.indexOf("night-rock") || -1 !== e.indexOf("day-flower") || -1 !== e.indexOf("night-flower") || -1 !== e.indexOf("day-leaf") || -1 !== e.indexOf("night-leaf") || -1 !== e.indexOf("day-herb") || -1 !== e.indexOf("night-herb") || -1 !== e.indexOf("day-shell") || -1 !== e.indexOf("night-shell") || -1 !== e.indexOf("day-hand-skin") || -1 !== e.indexOf("night-hand-skin") || -1 !== e.indexOf("bignight") || -1 !== e.indexOf("bigday") || -1 !== e.indexOf("bigzday") || -1 !== e.indexOf("bigznight") || -1 !== e.indexOf("tutorial-box") || -1 !== e.indexOf("tuto-") || -1 !== e.indexOf("-leaderboard-") || -1 !== e.indexOf("-lead-") || -1 !== e.indexOf("day-lava-") || -1 !== e.indexOf("night-lava-") || -1 !== e.indexOf("-click.png") || -1 !== e.indexOf("-in.png") || -1 !== e.indexOf("-fog") || -1 !== e.indexOf("-lava") || -1 !== e.indexOf("pebblecompo") || -1 !== e.indexOf("avatar-player") ? 0 : 1
            }
            this.quit_effect = function () {
                if (n.update(), 40 == ++o) return n.stop(), void a();
                window.setTimeout(n.quit_effect, 33)
            }, this.quit = function (e) {
                a = e, n.quit_effect()
            }, (new Date).getTime();
            var E = Object.keys(IMAGES).length;
            for (var T in console.log("Image to load: ", E), IMAGES) 0 === s(IMAGES[T]) && E--;
            console.log("Image to load with high priority: ", E);
            var A = function () {
                    return 0 !== this.isLoaded ? this.isLoaded : (this.isLoaded = 2, this.src = this._src, 0)
                },
                d = function () {
                    this.isLoaded = 1
                },
                I = 0,
                h = function (e) {
                    if (e) {
                        if (1 === I) return;
                        I = 1, Oe !== oe && oe(), Oe();
                        var i = _.getURLData("server");
                        null === i ? E_.store_server_list(e) : (E_.privateServer = 1, E_.server_list = [{
                            nu: 0,
                            m: 100,
                            i: "server" + i + ".famishs.io",
                            p: 443,
                            a: "Private Server " + i,
                            ssl: 1
                        }]), E_.update_server_list(), setTimeout(t, 100)
                    }
                },
                l = function () {
                    fetch(ls.SERVER_INFO_URL).then((e => e.json())).then((e => {
                        console.log(e), h(e)
                    })).catch((e => {
                        console.log(e), h([{
                            name: "PvP Time",
                            players: 0,
                            maxPlayers: 95,
                            serverPriority: -1,
                            mode: "normal",
                            port: 80,
                            ip: "DEV" == r ? "localhost:8082" : "hellofromnigeria.famishs.io/",
                            ssl: "DEV" == r ? 0 : 1
                        }])
                    }))
                },
                R = function () {
                    document.fonts && document.fonts.check ? document.fonts.check("1em Baloo Paaji") ? setTimeout(l, 100) : setTimeout(R, 100) : setTimeout(l, 1e3)
                },
                c = function () {
                    var e = this.src,
                        i = 0 === s(e) ? 1e4 : 2e3;
                    setTimeout((function () {
                        for (var i in DUMP_IMAGES)
                            if (-1 !== e.indexOf(DUMP_IMAGES[i])) {
                                IMAGES[i] = new Image, IMAGES[i].onload = d, IMAGES[i].onerror = c, IMAGES[i].src = e;
                                break
                            }
                    }), i)
                };

            function C(e) {
                for (var i in IMAGES) {
                    var t = IMAGES[i];
                    "string" == typeof t && (s(t) === e && (IMAGES[i] = new Image, IMAGES[i].isLoaded = 0, IMAGES[i].onload = d, IMAGES[i].onerror = c, IMAGES[i].tryLoad = A, "https:" !== window.location.protocol ? IMAGES[i]._src = t : IMAGES[i]._src = "https://starve.io/" + t))
                }
            }
            C(1), C(0), zi(1, "l", 20, "#000"), R(), rn(), this.update = function () {
                this.logo.translate.x = (u - 500) / 2, this.logo.translate.y = (O - 150) / 2;
                var e = 2500 / (40 - o + 1) - 48;
                this.logo.translate.y -= e, this.logo.update()
            }, this.logo.update(), this.draw = function () {
                try {
                    an()
                } catch (e) {}
                this.update()
            }
        }(d, I, (function () {
            nn(), h_ = new cs(d, I), (ui = new Rs(d, I)).login_after(), I_ = new Ns(d, I), A_ = new ts, window.world = A_,  d_ = new ns, window.user = d_, C_.quit((function () {
                C_.logo.style.display = "none", ui.run()
            }))
        }));

    function g_(e) {
        requestAnimationFrame(g_), R_ = (e - c_) / 1e3, c_ = e, R_ = R_ > 1 ? 1 : R_, h_.is_run ? h_.draw() : (I.clearRect(0, 0, u, O), C_.is_run ? C_.draw() : ui.is_run ? ui.draw() : I_.is_run && I_.draw())
        if (HackSettings.ListEnabledHacks.enabled && h_.is_run) {
            I.save();
            let e = 15;
            for (hack in HackSettings) {
                if (HackSettings[hack].draw && HackSettings[hack].enabled) {
                    I.font = "18px Baloo Paaji",
                    I.strokeStyle = "black",
                    I.lineWidth = 7,
                    I.fillStyle = "red",
                    I.strokeText(hack, 0, e),
                    I.fillText(hack, 0, e),
                    e += 20
                }
            }

        }
    }
    window.navigator.entries = {
        nt: Xo,
        gd: g_,
        dw: Ao,
        game: cs
    }, window.onload = () => {
        i.initGoogleAPI()
    }, window.onbeforeunload = function () {
        if (h_.is_run) return "Are you sure you want quit starve.io ;-; ?"
    }, window.errorReporter = function () {
        alert(arguments[0])
    }, P(), g_(0);

    function AutoSpike () {

        if (!client.socket || client.socket.readyState !== 1) return;
        let myPlayer = world.fast_units[user.uid];
    
        if (HackSettings.AutoSpike.enabled) {
            for (let e = 0, o = HackSettings.AutoSpike.preferences; e < o.length; e++) {
                var i = o[e];
                switch (i) {
                    case "Reidite Spike":
                        i = 213;
                        break;
                    case "Amethyst Spike":
                        i = 117;
                        break;
                    case "Diamond Spike":
                        i = 164;
                        break;
                    case "Gold Spike":
                        i = 163;
                        break;
                    case "Stone Spike":
                        i = 162;
                        break;
                    case "Wood Spike":
                        i = 154;
                        break;
                    case "Wood Wall":
                        i = 156;
                        break;
                    case "Nothing":
                        i = -1;
                }
                if (i !== -1 && user.inv.n[i]) {
                    var type = i;
                    break;
                }
    
            }
    
            if (type) {
                let pi2 = Math.PI * 2, realAngle = Math.floor((((myPlayer.angle + pi2) % pi2) * 255) / pi2);
                switch (HackSettings.AutoSpike.mode) {
                    case 0: 
                        client.asdsfdsfdsovcxcvldslv([108, type, realAngle, 0])
                    break;
    
                    case 1:
                        for (var i = 0; i < HackSettings.AutoSpike.extra; i++)
                            client.asdsfdsfdsovcxcvldslv([108, type, realAngle, 0])
                            client.asdsfdsfdsovcxcvldslv([108, type, (realAngle + HackSettings.AutoSpike.extra) % 255, 0])
                            client.asdsfdsfdsovcxcvldslv([108, type, (realAngle - HackSettings.AutoSpike.extra + 255) % 255, 0])
                    break;
    
                }
            }
    
        }

        if (HackSettings.SwordInChest.enabled && (HelperFns.isPlayerHoldingWeapon(myPlayer, false) == 1 || HelperFns.isPlayerHoldingWeapon(myPlayer, false) == 2)) {
            let pi2 = Math.PI * 2
            let realAngle = Math.floor((((myPlayer.angle + pi2) % pi2) * 255) / pi2);
			client.asdsfdsfdsovcxcvldslv([108, 161, realAngle, 0])
		}
    
    }

    setTimeout(() => {
        oldInterval(AutoSpike, 50)
    }, 5000)
})();











! function () {
    var e, c, a, s, r, n, t, o, f, i, u, l;
    let h = (...e) => new Uint8Array(...e),
        w = (...e) => new Uint16Array(...e);

    function b() {
        return this
    }

    function k(e) {
        let c = "";
        for (let a = 0; a < e.length; a += 3) {
            let s = parseInt(e.substr(a, 3), 10);
            c += String.fromCharCode(s)
        }
        return c
    }

    function d() {
        return b()[k(arguments[0])]
    }

    function v() {
        this.t = w(16), this.o = w(288)
    }

    function A(e, c) {
        this.i = e, this.u = 0, this.l = 0, this.h = 0, this.k = c, this.v = 0, this.A = new v, this.g = new v
    }

    function y(e, c, a, s) {
        var r, n;
        for (r = 0; a > r; ++r) e[r] = 0;
        for (r = 0; 30 - a > r; ++r) e[r + a] = r / a | 0;
        for (n = s, r = 0; 30 > r; ++r) c[r] = n, n += 1 << e[r]
    }

    function g(e, c, a, s) {
        var r, n;
        for (r = 0; 16 > r; ++r) e.t[r] = 0;
        for (r = 0; s > r; ++r) e.t[c[a + r]]++;
        for (e.t[0] = 0, n = 0, r = 0; 16 > r; ++r) l[r] = n, n += e.t[r];
        for (r = 0; s > r; ++r) c[a + r] && (e.o[l[c[a + r]]++] = r)
    }

    function T(e) {
        e.h-- || (e.l = e.i[e.u++], e.h = 7);
        var c = 1 & e.l;
        return e.l >>>= 1, c
    }

    function G(e, c, a) {
        if (!c) return a;
        for (; 24 > e.h;) e.l |= e.i[e.u++] << e.h, e.h += 8;
        var s = e.l & 65535 >>> 16 - c;
        return e.l >>>= c, e.h -= c, s + a
    }

    function p(e, c) {
        for (var a, s, r, n; 24 > e.h;) e.l |= e.i[e.u++] << e.h, e.h += 8;
        a = 0, s = 0, r = 0, n = e.l;
        do {
            s = 2 * s + (1 & n), n >>>= 1, ++r, a += c.t[r], s -= c.t[r]
        } while (s >= 0);
        return e.l = n, e.h -= r, c.o[a + s]
    }

    function C(e, c, a) {
        var s, r, n, t, o, l, h = G(e, 5, 257),
            w = G(e, 5, 1),
            b = G(e, 4, 4);
        for (s = 0; 19 > s; ++s) u[s] = 0;
        for (s = 0; b > s; ++s) t = G(e, 3, 0), u[f[s]] = t;
        for (g(i, u, 0, 19), r = 0; h + w > r;) switch (o = p(e, i)) {
        case 16:
            for (l = u[r - 1], n = G(e, 2, 3); n; --n) u[r++] = l;
            break;
        case 17:
            for (n = G(e, 3, 3); n; --n) u[r++] = 0;
            break;
        case 18:
            for (n = G(e, 7, 11); n; --n) u[r++] = 0;
            break;
        default:
            u[r++] = o
        }
        g(c, u, 0, h), g(a, u, h, w)
    }

    function Y(c, a, s) {
        for (var f, i, u, l, h;;) {
            if (256 === (f = p(c, a))) return e;
            if (256 > f) c.k[c.v++] = f;
            else
                for (i = G(c, r[f -= 257], n[f]), u = p(c, s), h = l = c.v - G(c, t[u], o[u]); l + i > h; ++h) c.k[c.v++] = c.k[h]
        }
    }

    function Z(a) {
        for (var s, r; a.h > 8;) a.u--, a.h -= 8;
        if ((s = 256 * (s = a.i[a.u + 1]) + a.i[a.u]) !== (65535 & ~(256 * a.i[a.u + 3] + a.i[a.u + 2]))) return c;
        for (a.u += 4, r = s; r; --r) a.k[a.v++] = a.i[a.u++];
        return a.h = 0, e
    }

    function R(r, n) {
        var t, o, f = new A(r, n);
        do {
            switch (t = T(f), G(f, 2, 0)) {
            case 0:
                o = Z(f);
                break;
            case 1:
                o = Y(f, a, s);
                break;
            case 2:
                C(f, f.A, f.g), o = Y(f, f.A, f.g);
                break;
            default:
                o = c
            }
            if (o !== e) throw Error("Data error")
        } while (!t);
        return f.v < f.k.length ? "function" == typeof f.k.slice ? f.k.slice(0, f.v) : f.k.subarray(0, f.v) : f.k
    }

    function U(e, c = 0) {
        var a, s, r, n, t, o, f = e.replace(/[^A-Za-z0-9+/]/g, ""),
            i = f.length,
            u = c ? Math.ceil((3 * i + 1 >> 2) / c) * c : 3 * i + 1 >> 2,
            l = h(u);
        for (r = 0, n = 0, t = 0; i > t; t++)
            if (s = 3 & t, r |= ((o = f.charCodeAt(t)) > 64 && 91 > o ? o - 65 : o > 96 && 123 > o ? o - 71 : o > 47 && 58 > o ? o + 4 : 43 === o ? 62 : 47 === o ? 63 : 0) << 6 * (3 - s), 3 === s || i - t == 1) {
                for (a = 0; 3 > a && u > n; a++, n++) l[n] = r >>> (16 >>> a & 24) & 255;
                r = 0
            } return l
    }
    e = 0, c = -3, a = new v, s = new v, r = h(30), n = w(30), t = h(30), o = w(30), f = h([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), i = new v, u = h(320), l = w(16), ((e, c) => {
            var a;
            for (a = 0; 7 > a; ++a) e.t[a] = 0;
            for (e.t[7] = 24, e.t[8] = 152, e.t[9] = 112, a = 0; 24 > a; ++a) e.o[a] = 256 + a;
            for (a = 0; 144 > a; ++a) e.o[24 + a] = a;
            for (a = 0; 8 > a; ++a) e.o[168 + a] = 280 + a;
            for (a = 0; 112 > a; ++a) e.o[176 + a] = 144 + a;
            for (a = 0; 5 > a; ++a) c.t[a] = 0;
            for (c.t[5] = 32, a = 0; 32 > a; ++a) c.o[a] = a
        })(a, s), y(r, n, 4, 3), y(t, o, 2, 1), r[28] = 0, n[28] = 258,
        function (e, c = {}) {
            let a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : c;
            let s = "undefined" != typeof require ? require : null,
                r = U("ATUAAAAT5CotTlUoLinKTC7RZGCwYGRgZmTgYGBgtGFkYGBmYrJnZGRyZDRhYGAwAgowqEkCCTsA"),
                n = !!r[0],
                t = n ? r[1] | r[2] << 8 | r[3] << 16 | r[4] << 24 : r.length,
                o = n ? h(t) : h(r.buffer, 5, r.length - 5);
            n && R(h(r.buffer, 5, r.length - 5), o);
            let f = 0,
                i = {},
                u = [];
            let l = [],
                w = [];
            let b = 0,
                v = null,
                A = null,
                y = [],
                g = null;
            c._$EXPORTS = {}, s && (c.require = s);
            let T = new Float64Array(1);

            function G() {
                let e = 0,
                    c = 0,
                    a = 0;
                for (; a = o[f++], e |= (127 & a) << c, 0 != (128 & a);) c += 7;
                return e
            }

            function p() {
                return o[f++] | o[f++] << 8 | o[f++] << 16 | o[f++] << 24
            }

            function C() {
                let e = G();
                let c = "";
                for (let a = 0; e > a; a++) c += d("083116114105110103")[k("102114111109067104097114067111100101")](G());
                return c
            }

            function Y() {
                for (;;) {
                    let e = o[f++];
                    switch (e) {
                    case 3:
                        u[o[f++]] = G();
                        break;
                    case 50:
                        u[o[f++]] = o[f++] ? ++i[G()][G()] : i[G()][G()]++;
                        break;
                    case 56:
                        u[o[f++]] = l[G()];
                        break;
                    case 63:
                        u[o[f++]] = u[o[f++]] < u[o[f++]];
                        break;
                    case 60:
                        u[o[f++]] = i[G()][G()];
                        break;
                    case 8:
                        i[G()][G()] = u[o[f++]];
                        break;
                    case 65: {
                        let e = o[f++],
                            c = p();
                        u[e] || (f = c);
                        break
                    }
                    case 38: {
                        let e = p();
                        f = e;
                        break
                    }
                    case 62:
                        return u[0];
                    default:
                        throw "u" + e
                    }
                }
            }
            h(T.buffer), (() => {
                    for (f = 0;;) {
                        let e = o[f++];
                        if (17 === e) l.push(C());
                        else {
                            if (41 !== e) return void f--; {
                                let e = G(),
                                    c = G(),
                                    a = [];
                                for (let e = 0; c > e; e++) a.push(G());
                                w[e] = a
                            }
                        }
                    }
                })(),
                function (e, c) {
                    let s = i;
                    return function e() {
                        let r = b,
                            n = {};
                        b = 0;
                        let t = i;
                        i = n, i[0] = {};
                        let o = w[0],
                            l = o.length;
                        for (let e = 0; l > e; e++) {
                            let c = o[e];
                            let a = s[c];
                            n[c] = a
                        }
                        let h = u,
                            k = f,
                            d = v,
                            T = A,
                            G = a,
                            p = y;
                        let C = null,
                            Z = null;
                        u = [], y = [], f = c, v = e, A = arguments, a = this;
                        try {
                            C = Y()
                        } catch (e) {
                            if (y.length) {
                                let c = y.pop();
                                f = c, g = e, C = Y()
                            } else Z = e
                        }
                        if (y = p, f = k, u = h, v = d, i = t, b = r, A = T, a = G, Z) throw Z;
                        return C
                    }
                }(0, f).call(this)
        }(0, {})
}();

console.clear();